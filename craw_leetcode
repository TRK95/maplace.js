{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/TRK95/maplace.js/blob/master/craw_leetcode\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f9iP8Q5_6cYk",
        "outputId": "3e8bca0a-be6c-4dc7-acc1-f0b4aa41df44"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.12.14)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (4.12.3)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4) (2.6)\n"
          ]
        }
      ],
      "source": [
        "!pip install requests\n",
        "!pip install beautifulsoup4\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "SH_PJE477Bbc"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "import json\n",
        "from bs4 import BeautifulSoup\n",
        "import re"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "FrePdeg16f1N"
      },
      "outputs": [],
      "source": [
        "r = requests.get(url='https://leetcode.com/api/problems/algorithms/')\n",
        "\n",
        "data_json = json.loads(r.text)\n",
        "\n",
        "alg_list = data_json['stat_status_pairs']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "nBGBZ0iYBjoQ"
      },
      "outputs": [],
      "source": [
        "def get_problem_via_graphql(slug):\n",
        "    \"\"\"\n",
        "    Fetch problem details from LeetCode's GraphQL API using the problem slug.\n",
        "\n",
        "    Args:\n",
        "        slug (str): The slug of the problem (e.g., \"two-sum\").\n",
        "\n",
        "    Returns:\n",
        "        dict: The problem details including title, content, difficulty, and code snippets.\n",
        "        None: If the problem is not found or the request fails.\n",
        "    \"\"\"\n",
        "    ref = f\"https://leetcode.com/problems/{slug}/\"\n",
        "    url = \"https://leetcode.com/graphql\"\n",
        "    headers = {\n",
        "        \"Content-Type\": \"application/json\",\n",
        "        \"Referer\": ref,\n",
        "        \"User-Agent\": \"Mozilla/5.0\"\n",
        "    }\n",
        "    query = {\n",
        "        \"query\": \"\"\"\n",
        "        query getProblem($titleSlug: String!) {\n",
        "          question(titleSlug: $titleSlug) {\n",
        "            title\n",
        "            content\n",
        "            difficulty\n",
        "            codeSnippets {\n",
        "              lang\n",
        "              code\n",
        "            }\n",
        "          }\n",
        "        }\n",
        "        \"\"\",\n",
        "        \"variables\": {\"titleSlug\": slug},\n",
        "    }\n",
        "\n",
        "    try:\n",
        "        response = requests.post(url, headers=headers, json=query)\n",
        "        response.raise_for_status()  # Raise an exception for HTTP errors\n",
        "        data = response.json()\n",
        "        if data.get(\"data\") and data[\"data\"].get(\"question\"):\n",
        "            return data[\"data\"][\"question\"]\n",
        "        else:\n",
        "            print(\"Problem not found or authentication failed.\")\n",
        "            return None\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"Request failed: {e}\")\n",
        "        return None"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "kiopxwbPcfE6"
      },
      "outputs": [],
      "source": [
        "def extract_code(snippets, lang):\n",
        "    \"\"\"\n",
        "    Extract the Elixir code template from the list of code snippets.\n",
        "\n",
        "    Args:\n",
        "        snippets (list): A list of code snippets with language and code.\n",
        "\n",
        "    Returns:\n",
        "        str: The Elixir code template if found, or a message indicating its absence.\n",
        "    \"\"\"\n",
        "    for snippet in snippets:\n",
        "        if snippet[\"lang\"] == lang:\n",
        "            return snippet[\"code\"]\n",
        "    return \"Elixir code template not available for this problem.\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "uxXPNj_sclMI"
      },
      "outputs": [],
      "source": [
        "def html_to_custom_text(html_content):\n",
        "    \"\"\"\n",
        "    Convert HTML content to custom-formatted plain text resembling Markdown,\n",
        "    ensuring that special characters like '^' are preserved.\n",
        "\n",
        "    Args:\n",
        "        html_content (str): The HTML content to convert.\n",
        "\n",
        "    Returns:\n",
        "        str: Custom plain text extracted from the HTML content.\n",
        "    \"\"\"\n",
        "    soup = BeautifulSoup(html_content, \"html.parser\")\n",
        "    # soup = BeautifulSoup(content, \"html.parser\")\n",
        "\n",
        "    # Find all text content that may contain test case info\n",
        "\n",
        "\n",
        "    # Define custom formatting rules\n",
        "    for tag in soup.find_all(\"strong\"):\n",
        "        tag.insert_before(\"**\")\n",
        "        tag.insert_after(\"**\")\n",
        "    for tag in soup.find_all(\"em\"):\n",
        "        tag.insert_before(\"_\")\n",
        "        tag.insert_after(\"_\")\n",
        "    for tag in soup.find_all(\"code\"):\n",
        "        tag.insert_before(\"`\")\n",
        "        tag.insert_after(\"`\")\n",
        "    for tag in soup.find_all(\"pre\"):\n",
        "        tag.insert_before(\"\\n```\\n\")\n",
        "        tag.insert_after(\"\\n```\\n\")\n",
        "    for tag in soup.find_all(\"br\"):\n",
        "        tag.replace_with(\"\\n\")\n",
        "\n",
        "    # # Get plain text while preserving special characters, including '^'\n",
        "    plain_text = soup.get_text()\n",
        "    plain_text = \" \".join(plain_text.split())  # This eliminates any unnecessary multiple spaces\n",
        "\n",
        "    return plain_text"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "KDxu4hACgM1Z"
      },
      "outputs": [],
      "source": [
        "\n",
        "def extract_test_cases(content):\n",
        "    \"\"\"\n",
        "    Extract test cases and example labels from HTML content.\n",
        "    This function assumes that examples are labeled with 'Example' and\n",
        "    input/output are structured with 'Input:' and 'Output:' labels.\n",
        "    \"\"\"\n",
        "    soup = BeautifulSoup(content, \"html.parser\")\n",
        "\n",
        "    # Find all text content that may contain test case info\n",
        "    all_text = soup.get_text(separator=\" \", strip=True)\n",
        "\n",
        "    # Find all instances of 'Example' and the surrounding context\n",
        "    example_pattern = r\"(Example\\s\\d+):\\s*.*?(Input:.*?)\\s*(Output:.*?)(?=Example\\s\\d+|$|Constraints:\\s\\d+)\"\n",
        "    example_matches = re.findall(example_pattern, all_text, re.DOTALL)\n",
        "\n",
        "    test_cases = []\n",
        "\n",
        "    for example in example_matches:\n",
        "        example_label = example[0].strip()  # Example label (e.g., \"Example 1\")\n",
        "        input = example[1].strip()\n",
        "        output = example[2].strip()  # Input and Output content\n",
        "\n",
        "        # Clean up the input-output format (e.g., remove 'Input:' and 'Output:' prefixes)\n",
        "        input = re.sub(r\"(Input:|Output:)\", \"\", input).strip()\n",
        "        output = re.sub(r\"(Input:|Output:)\", \"\", output).strip()\n",
        "        test_cases.append({\n",
        "            \"label\": example_label,\n",
        "            \"input\": input,\n",
        "            \"output\": output\n",
        "        })\n",
        "    return test_cases\n",
        "\n",
        "\n",
        "def extract_constraints(content):\n",
        "    \"\"\"\n",
        "    Extract constraints from HTML content (usually found in <ul> tags).\n",
        "    \"\"\"\n",
        "    soup = BeautifulSoup(content, \"html.parser\")\n",
        "    constraint_elements = soup.find_all(\"ul\")\n",
        "\n",
        "    constraints = []\n",
        "    for ul in constraint_elements:\n",
        "        for li in ul.find_all(\"li\"):\n",
        "            constraints.append(li.get_text().strip())\n",
        "    return constraints"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C04k9TjNGjub",
        "outputId": "4354a822-5110-4697-90c9-c0a1380053bb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--- Problem Details ---\n",
            "Title: Sum of Mutated Array Closest to Target\n",
            "Difficulty: Medium\n",
            "Task_des:Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`. In case of a tie, return the minimum such integer. Notice that the answer is not neccesarilly a number from `arr`. **Example 1:** ``` **Input:** arr = [4,9,3], target = 10 **Output:** 3 **Explanation:** When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer. ``` **Example 2:** ``` **Input:** arr = [2,3,5], target = 10 **Output:** 5 ``` **Example 3:** ``` **Input:** arr = [60864,25176,27249,21296,20204], target = 56803 **Output:** 11361 ``` **Constraints:** `1 <= arr.length <= 104` `1 <= arr[i], target <= 105`\n",
            "Test_cases: [{'label': 'Example 1', 'input': 'arr = [4,9,3], target = 10', 'output': \"3 Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.\"}, {'label': 'Example 2', 'input': 'arr = [2,3,5], target = 10', 'output': '5'}, {'label': 'Example 3', 'input': 'arr = [60864,25176,27249,21296,20204], target = 56803', 'output': '11361'}]\n",
            "Constraints: ['1 <= arr.length <= 104', '1 <= arr[i], target <= 105']\n",
            "\n",
            "--- Elixir Code Template ---\n",
            "defmodule Solution do\n",
            "  @spec find_best_value(arr :: [integer], target :: integer) :: integer\n",
            "  def find_best_value(arr, target) do\n",
            "    \n",
            "  end\n",
            "end\n",
            "\n",
            "--- Erlang Code Template ---\n",
            "-spec find_best_value(Arr :: [integer()], Target :: integer()) -> integer().\n",
            "find_best_value(Arr, Target) ->\n",
            "  .\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def main():\n",
        "    \"\"\"\n",
        "    Main function to fetch and display problem details and Elixir code template.\n",
        "    \"\"\"\n",
        "    problem_slug = \"sum-of-mutated-array-closest-to-target\"  # Replace with the slug of the desired problem\n",
        "    problem_data = get_problem_via_graphql(problem_slug)\n",
        "\n",
        "    if problem_data:\n",
        "        print(\"\\n--- Problem Details ---\")\n",
        "        print(\"Title:\", problem_data[\"title\"])\n",
        "        print(\"Difficulty:\", problem_data[\"difficulty\"])\n",
        "\n",
        "        plain_text_content = html_to_custom_text(problem_data[\"content\"])\n",
        "        print(\"Task_des:\" + plain_text_content)\n",
        "        test_cases = extract_test_cases(problem_data[\"content\"])\n",
        "        print(\"Test_cases:\", test_cases)\n",
        "        constraints = extract_constraints(problem_data[\"content\"])\n",
        "        print(\"Constraints:\", constraints)\n",
        "        elixir_code = extract_code(problem_data.get(\"codeSnippets\",[]),\"Elixir\")\n",
        "        print(\"\\n--- Elixir Code Template ---\")\n",
        "        print(elixir_code)\n",
        "        erlangCode = extract_code(problem_data.get(\"codeSnippets\",[]),\"Erlang\")\n",
        "        print(\"\\n--- Erlang Code Template ---\")\n",
        "        print(erlangCode)\n",
        "    else:\n",
        "        print(\"Could not retrieve problem data.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lQIXPpFGbP5C"
      },
      "outputs": [],
      "source": [
        "i = 0\n",
        "for alg_json in alg_list:\n",
        "    #get the meta info of algorithm\n",
        "\n",
        "    alg_stat = alg_json['stat']\n",
        "    alg_difficulty = alg_json['difficulty']['level']\n",
        "    alg_paid = alg_json['paid_only']\n",
        "\n",
        "    alg_name = alg_stat['question__title']\n",
        "    alg_name_slug = alg_stat['question__title_slug'] #problem_slug\n",
        "    alg_id = alg_stat['question_id']\n",
        "    alg_acs = alg_stat['total_acs']\n",
        "    alg_submitted = alg_stat['total_submitted']\n",
        "    alg_link = f'https://leetcode.com/problems/{alg_name_slug}/'\n",
        "    print(alg_name + \" \" + str(alg_id))\n",
        "\n",
        "    alg_data = get_problem_via_graphql(alg_name_slug)\n",
        "    plain_text_content = html_to_custom_text(alg_data[\"content\"])\n",
        "    content = extract_elixir_code(alg_data['codeSnippets'])\n",
        "    testCase = extract_test_cases(alg_data['content'])\n",
        "    constraints = extract_constraints(alg_data['content'])\n",
        "    elixirCode = extract_elixir_code(alg_data['codeSnippets'],[])\n",
        "    print('writing '+str(alg_id)+' '+str(content)+'...')\n",
        "\n",
        "    alg_dict = {'id': alg_id, 'name':alg_name_slug,'difficulty':alg_difficulty,\n",
        "                'link':alg_link, 'task_description':plain_text_content, 'test_case': testCase,\n",
        "                'elixir_template': elixirCode}\n",
        "    # The if statement and i += 1 were incorrectly indented. Fixed by adding two more spaces to align with other lines in the loop.\n",
        "    if i == 3:\n",
        "        break\n",
        "    i += 1\n",
        "    # save_alg(alg_dict)\n",
        "    print('Done!')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-Vj_OA4IpyOJ",
        "outputId": "fe03e081-d113-4a1f-bb89-597ab0d2eec2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "compare-strings-by-frequency-of-the-smallest-character 1273\n",
            "{'id': 1273, 'name': 'compare-strings-by-frequency-of-the-smallest-character', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character/', 'task_description': 'Let the function `f(s)` be the **frequency of the lexicographically smallest character** in a non-empty string `s`. For example, if `s = \"dcce\"` then `f(s) = 2` because the lexicographically smallest character is `\\'c\\'`, which has a frequency of 2. You are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the **number of words** in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`. Return _an integer array _`answer`_, where each _`answer[i]`_ is the answer to the _`ith`_ query_. **Example 1:** ``` **Input:** queries = [\"cbd\"], words = [\"zaaaz\"] **Output:** [1] **Explanation:** On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\"). ``` **Example 2:** ``` **Input:** queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"] **Output:** [1,2] **Explanation:** On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\"). ``` **Constraints:** `1 <= queries.length <= 2000` `1 <= words.length <= 2000` `1 <= queries[i].length, words[i].length <= 10` `queries[i][j]`, `words[i][j]` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'queries = [\"cbd\"], words = [\"zaaaz\"]', 'output': '[1] Explanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\").'}, {'label': 'Example 2', 'input': 'queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]', 'output': '[1,2] Explanation: On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\").'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_smaller_by_frequency(queries :: [String.t], words :: [String.t]) :: [integer]\\n  def num_smaller_by_frequency(queries, words) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_smaller_by_frequency(Queries :: [unicode:unicode_binary()], Words :: [unicode:unicode_binary()]) -> [integer()].\\nnum_smaller_by_frequency(Queries, Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSmallerByFrequency(queries: Array[String], words: Array[String]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!1\n",
            "invalid-transactions 1272\n",
            "{'id': 1272, 'name': 'invalid-transactions', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/invalid-transactions/', 'task_description': 'A transaction is possibly invalid if: the amount exceeds `$1000`, or; if it occurs within (and including) `60` minutes of another transaction with the **same name** in a **different city**. You are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction. Return a list of `transactions` that are possibly invalid. You may return the answer in **any order**. **Example 1:** ``` **Input:** transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"] **Output:** [\"alice,20,800,mtv\",\"alice,50,100,beijing\"] **Explanation:** The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too. ``` **Example 2:** ``` **Input:** transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"] **Output:** [\"alice,50,1200,mtv\"] ``` **Example 3:** ``` **Input:** transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"] **Output:** [\"bob,50,1200,mtv\"] ``` **Constraints:** `transactions.length <= 1000` Each `transactions[i]` takes the form `\"{name},{time},{amount},{city}\"` Each `{name}` and `{city}` consist of lowercase English letters, and have lengths between `1` and `10`. Each `{time}` consist of digits, and represent an integer between `0` and `1000`. Each `{amount}` consist of digits, and represent an integer between `0` and `2000`.', 'test_case': [{'label': 'Example 1', 'input': 'transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]', 'output': '[\"alice,20,800,mtv\",\"alice,50,100,beijing\"] Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.'}, {'label': 'Example 2', 'input': 'transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]', 'output': '[\"alice,50,1200,mtv\"]'}, {'label': 'Example 3', 'input': 'transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]', 'output': '[\"bob,50,1200,mtv\"] Constraints: transactions.length <= 1000 Each transactions[i] takes the form \"{name},{time},{amount},{city}\" Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10 . Each {time} consist of digits, and represent an integer between 0 and 1000 . Each {amount} consist of digits, and represent an integer between 0 and 2000 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec invalid_transactions(transactions :: [String.t]) :: [String.t]\\n  def invalid_transactions(transactions) do\\n    \\n  end\\nend', 'erlang_template': '-spec invalid_transactions(Transactions :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\ninvalid_transactions(Transactions) ->\\n  .', 'scala_template': 'object Solution {\\n    def invalidTransactions(transactions: Array[String]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!2\n",
            "dinner-plate-stacks 1270\n",
            "{'id': 1270, 'name': 'dinner-plate-stacks', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/dinner-plate-stacks/', 'task_description': 'You have an infinite number of stacks arranged in a row and numbered (left to right) from `0`, each of the stacks has the same maximum capacity. Implement the `DinnerPlates` class: `DinnerPlates(int capacity)` Initializes the object with the maximum capacity of the stacks `capacity`. `void push(int val)` Pushes the given integer `val` into the leftmost stack with a size less than `capacity`. `int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all the stacks are empty. `int popAtStack(int index)` Returns the value at the top of the stack with the given index `index` and removes it from that stack or returns `-1` if the stack with that given index is empty. **Example 1:** ``` **Input** [\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"] [[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []] **Output** [null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1] **Explanation:** DinnerPlates D = DinnerPlates(2); // Initialize with capacity = 2 D.push(1); D.push(2); D.push(3); D.push(4); D.push(5); // The stacks are now: 2 4 1 3 5 ﹈ ﹈ ﹈ D.popAtStack(0); // Returns 2. The stacks are now: 4 1 3 5 ﹈ ﹈ ﹈ D.push(20); // The stacks are now: 20 4 1 3 5 ﹈ ﹈ ﹈ D.push(21); // The stacks are now: 20 4 21 1 3 5 ﹈ ﹈ ﹈ D.popAtStack(0); // Returns 20. The stacks are now: 4 21 1 3 5 ﹈ ﹈ ﹈ D.popAtStack(2); // Returns 21. The stacks are now: 4 1 3 5 ﹈ ﹈ ﹈ D.pop() // Returns 5. The stacks are now: 4 1 3 ﹈ ﹈ D.pop() // Returns 4. The stacks are now: 1 3 ﹈ ﹈ D.pop() // Returns 3. The stacks are now: 1 ﹈ D.pop() // Returns 1. There are no stacks. D.pop() // Returns -1. There are still no stacks. ``` **Constraints:** `1 <= capacity <= 2 * 104` `1 <= val <= 2 * 104` `0 <= index <= 105` At most `2 * 105` calls will be made to `push`, `pop`, and `popAtStack`.', 'test_case': [], 'elixir_template': 'defmodule DinnerPlates do\\n  @spec init_(capacity :: integer) :: any\\n  def init_(capacity) do\\n    \\n  end\\n\\n  @spec push(val :: integer) :: any\\n  def push(val) do\\n    \\n  end\\n\\n  @spec pop() :: integer\\n  def pop() do\\n    \\n  end\\n\\n  @spec pop_at_stack(index :: integer) :: integer\\n  def pop_at_stack(index) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# DinnerPlates.init_(capacity)\\n# DinnerPlates.push(val)\\n# param_2 = DinnerPlates.pop()\\n# param_3 = DinnerPlates.pop_at_stack(index)\\n\\n# DinnerPlates.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec dinner_plates_init_(Capacity :: integer()) -> any().\\ndinner_plates_init_(Capacity) ->\\n  .\\n\\n-spec dinner_plates_push(Val :: integer()) -> any().\\ndinner_plates_push(Val) ->\\n  .\\n\\n-spec dinner_plates_pop() -> integer().\\ndinner_plates_pop() ->\\n  .\\n\\n-spec dinner_plates_pop_at_stack(Index :: integer()) -> integer().\\ndinner_plates_pop_at_stack(Index) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% dinner_plates_init_(Capacity),\\n%% dinner_plates_push(Val),\\n%% Param_2 = dinner_plates_pop(),\\n%% Param_3 = dinner_plates_pop_at_stack(Index),\\n\\n%% dinner_plates_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class DinnerPlates(_capacity: Int) {\\n\\n    def push(`val`: Int): Unit = {\\n        \\n    }\\n\\n    def pop(): Int = {\\n        \\n    }\\n\\n    def popAtStack(index: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your DinnerPlates object will be instantiated and called as such:\\n * val obj = new DinnerPlates(capacity)\\n * obj.push(`val`)\\n * val param_2 = obj.pop()\\n * val param_3 = obj.popAtStack(index)\\n */'}\n",
            "Done!3\n",
            "remove-zero-sum-consecutive-nodes-from-linked-list 1267\n",
            "{'id': 1267, 'name': 'remove-zero-sum-consecutive-nodes-from-linked-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/', 'task_description': 'Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences. After doing so, return the head of the final linked list. You may return any such answer. (Note that in the examples below, all sequences are serializations of `ListNode` objects.) **Example 1:** ``` **Input:** head = [1,2,-3,3,1] **Output:** [3,1] **Note:** The answer [1,2,1] would also be accepted. ``` **Example 2:** ``` **Input:** head = [1,2,3,-3,4] **Output:** [1,2,4] ``` **Example 3:** ``` **Input:** head = [1,2,3,-3,-2] **Output:** [1] ``` **Constraints:** The given linked list will contain between `1` and `1000` nodes. Each node in the linked list has `-1000 <= node.val <= 1000`.', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,-3,3,1]', 'output': '[3,1] Note: The answer [1,2,1] would also be accepted.'}, {'label': 'Example 2', 'input': 'head = [1,2,3,-3,4]', 'output': '[1,2,4]'}, {'label': 'Example 3', 'input': 'head = [1,2,3,-3,-2]', 'output': '[1] Constraints: The given linked list will contain between 1 and 1000 nodes. Each node in the linked list has -1000 <= node.val <= 1000 .'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec remove_zero_sum_sublists(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def remove_zero_sum_sublists(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec remove_zero_sum_sublists(Head :: #list_node{} | null) -> #list_node{} | null.\\nremove_zero_sum_sublists(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def removeZeroSumSublists(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!4\n",
            "maximum-number-of-words-you-can-type 1264\n",
            "{'id': 1264, 'name': 'maximum-number-of-words-you-can-type', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/maximum-number-of-words-you-can-type/', 'task_description': 'There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly. Given a string `text` of words separated by a single space (no leading or trailing spaces) and a string `brokenLetters` of all **distinct** letter keys that are broken, return _the **number of words** in_ `text` _you can fully type using this keyboard_. **Example 1:** ``` **Input:** text = \"hello world\", brokenLetters = \"ad\" **Output:** 1 **Explanation:** We cannot type \"world\" because the \\'d\\' key is broken. ``` **Example 2:** ``` **Input:** text = \"leet code\", brokenLetters = \"lt\" **Output:** 1 **Explanation:** We cannot type \"leet\" because the \\'l\\' and \\'t\\' keys are broken. ``` **Example 3:** ``` **Input:** text = \"leet code\", brokenLetters = \"e\" **Output:** 0 **Explanation:** We cannot type either word because the \\'e\\' key is broken. ``` **Constraints:** `1 <= text.length <= 104` `0 <= brokenLetters.length <= 26` `text` consists of words separated by a single space without any leading or trailing spaces. Each word only consists of lowercase English letters. `brokenLetters` consists of **distinct** lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'text = \"hello world\", brokenLetters = \"ad\"', 'output': '1 Explanation: We cannot type \"world\" because the \\'d\\' key is broken.'}, {'label': 'Example 2', 'input': 'text = \"leet code\", brokenLetters = \"lt\"', 'output': '1 Explanation: We cannot type \"leet\" because the \\'l\\' and \\'t\\' keys are broken.'}, {'label': 'Example 3', 'input': 'text = \"leet code\", brokenLetters = \"e\"', 'output': \"0 Explanation: We cannot type either word because the 'e' key is broken.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec can_be_typed_words(text :: String.t, broken_letters :: String.t) :: integer\\n  def can_be_typed_words(text, broken_letters) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_be_typed_words(Text :: unicode:unicode_binary(), BrokenLetters :: unicode:unicode_binary()) -> integer().\\ncan_be_typed_words(Text, BrokenLetters) ->\\n  .', 'scala_template': 'object Solution {\\n    def canBeTypedWords(text: String, brokenLetters: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!5\n",
            "number-of-dice-rolls-with-target-sum 1263\n",
            "{'id': 1263, 'name': 'number-of-dice-rolls-with-target-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/', 'task_description': 'You have `n` dice, and each dice has `k` faces numbered from `1` to `k`. Given three integers `n`, `k`, and `target`, return _the number of possible ways (out of the _`kn`_ total ways) __to roll the dice, so the sum of the face-up numbers equals _`target`. Since the answer may be too large, return it **modulo** `109 + 7`. **Example 1:** ``` **Input:** n = 1, k = 6, target = 3 **Output:** 1 **Explanation:** You throw one die with 6 faces. There is only one way to get a sum of 3. ``` **Example 2:** ``` **Input:** n = 2, k = 6, target = 7 **Output:** 6 **Explanation:** You throw two dice, each with 6 faces. There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1. ``` **Example 3:** ``` **Input:** n = 30, k = 30, target = 500 **Output:** 222616187 **Explanation:** The answer must be returned modulo 109 + 7. ``` **Constraints:** `1 <= n, k <= 30` `1 <= target <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'n = 1, k = 6, target = 3', 'output': '1 Explanation: You throw one die with 6 faces.\\nThere is only one way to get a sum of 3.'}, {'label': 'Example 2', 'input': 'n = 2, k = 6, target = 7', 'output': '6 Explanation: You throw two dice, each with 6 faces.\\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.'}, {'label': 'Example 3', 'input': 'n = 30, k = 30, target = 500', 'output': '222616187 Explanation: The answer must be returned modulo 10 9 + 7.'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_rolls_to_target(n :: integer, k :: integer, target :: integer) :: integer\\n  def num_rolls_to_target(n, k, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_rolls_to_target(N :: integer(), K :: integer(), Target :: integer()) -> integer().\\nnum_rolls_to_target(N, K, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def numRollsToTarget(n: Int, k: Int, target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!6\n",
            "online-majority-element-in-subarray 1262\n",
            "{'id': 1262, 'name': 'online-majority-element-in-subarray', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/online-majority-element-in-subarray/', 'task_description': 'Design a data structure that efficiently finds the **majority element** of a given subarray. The **majority element** of a subarray is an element that occurs `threshold` times or more in the subarray. Implementing the `MajorityChecker` class: `MajorityChecker(int[] arr)` Initializes the instance of the class with the given array `arr`. `int query(int left, int right, int threshold)` returns the element in the subarray `arr[left...right]` that occurs at least `threshold` times, or `-1` if no such element exists. **Example 1:** ``` **Input** [\"MajorityChecker\", \"query\", \"query\", \"query\"] [[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]] **Output** [null, 1, -1, 2] **Explanation** MajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]); majorityChecker.query(0, 5, 4); // return 1 majorityChecker.query(0, 3, 3); // return -1 majorityChecker.query(2, 3, 2); // return 2 ``` **Constraints:** `1 <= arr.length <= 2 * 104` `1 <= arr[i] <= 2 * 104` `0 <= left <= right < arr.length` `threshold <= right - left + 1` `2 * threshold > right - left + 1` At most `104` calls will be made to `query`.', 'test_case': [], 'elixir_template': 'defmodule MajorityChecker do\\n  @spec init_(arr :: [integer]) :: any\\n  def init_(arr) do\\n    \\n  end\\n\\n  @spec query(left :: integer, right :: integer, threshold :: integer) :: integer\\n  def query(left, right, threshold) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MajorityChecker.init_(arr)\\n# param_1 = MajorityChecker.query(left, right, threshold)\\n\\n# MajorityChecker.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec majority_checker_init_(Arr :: [integer()]) -> any().\\nmajority_checker_init_(Arr) ->\\n  .\\n\\n-spec majority_checker_query(Left :: integer(), Right :: integer(), Threshold :: integer()) -> integer().\\nmajority_checker_query(Left, Right, Threshold) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% majority_checker_init_(Arr),\\n%% Param_1 = majority_checker_query(Left, Right, Threshold),\\n\\n%% majority_checker_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MajorityChecker(_arr: Array[Int]) {\\n\\n    def query(left: Int, right: Int, threshold: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MajorityChecker object will be instantiated and called as such:\\n * val obj = new MajorityChecker(arr)\\n * val param_1 = obj.query(left,right,threshold)\\n */'}\n",
            "Done!7\n",
            "swap-for-longest-repeated-character-substring 1261\n",
            "{'id': 1261, 'name': 'swap-for-longest-repeated-character-substring', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/swap-for-longest-repeated-character-substring/', 'task_description': 'You are given a string `text`. You can swap two of the characters in the `text`. Return _the length of the longest substring with repeated characters_. **Example 1:** ``` **Input:** text = \"ababa\" **Output:** 3 **Explanation:** We can swap the first \\'b\\' with the last \\'a\\', or the last \\'b\\' with the first \\'a\\'. Then, the longest repeated character substring is \"aaa\" with length 3. ``` **Example 2:** ``` **Input:** text = \"aaabaaa\" **Output:** 6 **Explanation:** Swap \\'b\\' with the last \\'a\\' (or the first \\'a\\'), and we get longest repeated character substring \"aaaaaa\" with length 6. ``` **Example 3:** ``` **Input:** text = \"aaaaa\" **Output:** 5 **Explanation:** No need to swap, longest repeated character substring is \"aaaaa\" with length is 5. ``` **Constraints:** `1 <= text.length <= 2 * 104` `text` consist of lowercase English characters only.', 'test_case': [{'label': 'Example 1', 'input': 'text = \"ababa\"', 'output': '3 Explanation: We can swap the first \\'b\\' with the last \\'a\\', or the last \\'b\\' with the first \\'a\\'. Then, the longest repeated character substring is \"aaa\" with length 3.'}, {'label': 'Example 2', 'input': 'text = \"aaabaaa\"', 'output': '6 Explanation: Swap \\'b\\' with the last \\'a\\' (or the first \\'a\\'), and we get longest repeated character substring \"aaaaaa\" with length 6.'}, {'label': 'Example 3', 'input': 'text = \"aaaaa\"', 'output': '5 Explanation: No need to swap, longest repeated character substring is \"aaaaa\" with length is 5.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_rep_opt1(text :: String.t) :: integer\\n  def max_rep_opt1(text) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_rep_opt1(Text :: unicode:unicode_binary()) -> integer().\\nmax_rep_opt1(Text) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxRepOpt1(text: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!8\n",
            "day-of-the-year 1260\n",
            "{'id': 1260, 'name': 'day-of-the-year', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/day-of-the-year/', 'task_description': 'Given a string `date` representing a Gregorian calendar date formatted as `YYYY-MM-DD`, return _the day number of the year_. **Example 1:** ``` **Input:** date = \"2019-01-09\" **Output:** 9 **Explanation:** Given date is the 9th day of the year in 2019. ``` **Example 2:** ``` **Input:** date = \"2019-02-10\" **Output:** 41 ``` **Constraints:** `date.length == 10` `date[4] == date[7] == \\'-\\'`, and all other `date[i]`\\'s are digits `date` represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019.', 'test_case': [{'label': 'Example 1', 'input': 'date = \"2019-01-09\"', 'output': '9 Explanation: Given date is the 9th day of the year in 2019.'}, {'label': 'Example 2', 'input': 'date = \"2019-02-10\"', 'output': \"41 Constraints: date.length == 10 date[4] == date[7] == '-' , and all other date[i] 's are digits date represents a calendar date between Jan 1 st , 1900 and Dec 31 th , 2019.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec day_of_year(date :: String.t) :: integer\\n  def day_of_year(date) do\\n    \\n  end\\nend', 'erlang_template': '-spec day_of_year(Date :: unicode:unicode_binary()) -> integer().\\nday_of_year(Date) ->\\n  .', 'scala_template': 'object Solution {\\n    def dayOfYear(date: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!9\n",
            "rank-transform-of-a-matrix 1257\n",
            "{'id': 1257, 'name': 'rank-transform-of-a-matrix', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/rank-transform-of-a-matrix/', 'task_description': 'Given an `m x n` `matrix`, return _a new matrix _`answer`_ where _`answer[row][col]`_ is the __**rank** of _`matrix[row][col]`. The **rank** is an **integer** that represents how large an element is compared to other elements. It is calculated using the following rules: The rank is an integer starting from `1`. If two elements `p` and `q` are in the **same row or column**, then: If `p < q` then `rank(p) < rank(q)` If `p == q` then `rank(p) == rank(q)` If `p > q` then `rank(p) > rank(q)` The **rank** should be as **small** as possible. The test cases are generated so that `answer` is unique under the given rules. **Example 1:** ``` **Input:** matrix = [[1,2],[3,4]] **Output:** [[1,2],[2,3]] **Explanation:** The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column. The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1. The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1. The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2. ``` **Example 2:** ``` **Input:** matrix = [[7,7],[7,7]] **Output:** [[1,1],[1,1]] ``` **Example 3:** ``` **Input:** matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]] **Output:** [[4,2,3],[1,3,4],[5,1,6],[1,3,4]] ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 500` `-109 <= matrix[row][col] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,2],[3,4]]', 'output': '[[1,2],[2,3]] Explanation: The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\\nThe rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.\\nThe rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.\\nThe rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.'}, {'label': 'Example 2', 'input': 'matrix = [[7,7],[7,7]]', 'output': '[[1,1],[1,1]]'}, {'label': 'Example 3', 'input': 'matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]', 'output': '[[4,2,3],[1,3,4],[5,1,6],[1,3,4]] Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 500 -10 9 <= matrix[row][col] <= 10 9'}], 'elixir_template': 'defmodule Solution do\\n  @spec matrix_rank_transform(matrix :: [[integer]]) :: [[integer]]\\n  def matrix_rank_transform(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec matrix_rank_transform(Matrix :: [[integer()]]) -> [[integer()]].\\nmatrix_rank_transform(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def matrixRankTransform(matrix: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!10\n",
            "rank-transform-of-an-array 1256\n",
            "{'id': 1256, 'name': 'rank-transform-of-an-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/rank-transform-of-an-array/', 'task_description': 'Given an array of integers `arr`, replace each element with its rank. The rank represents how large the element is. The rank has the following rules: Rank is an integer starting from 1. The larger the element, the larger the rank. If two elements are equal, their rank must be the same. Rank should be as small as possible. **Example 1:** ``` **Input:** arr = [40,10,20,30] **Output:** [4,1,2,3] **Explanation**: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest. ``` **Example 2:** ``` **Input:** arr = [100,100,100] **Output:** [1,1,1] **Explanation**: Same elements share the same rank. ``` **Example 3:** ``` **Input:** arr = [37,12,28,9,100,56,80,5,12] **Output:** [5,3,4,2,8,6,7,1,3] ``` **Constraints:** `0 <= arr.length <= 105` `-109 <= arr[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [40,10,20,30]', 'output': '[4,1,2,3] Explanation : 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.'}, {'label': 'Example 2', 'input': 'arr = [100,100,100]', 'output': '[1,1,1] Explanation : Same elements share the same rank.'}, {'label': 'Example 3', 'input': 'arr = [37,12,28,9,100,56,80,5,12]', 'output': '[5,3,4,2,8,6,7,1,3]'}], 'elixir_template': 'defmodule Solution do\\n  @spec array_rank_transform(arr :: [integer]) :: [integer]\\n  def array_rank_transform(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec array_rank_transform(Arr :: [integer()]) -> [integer()].\\narray_rank_transform(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def arrayRankTransform(arr: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!11\n",
            "reverse-subarray-to-maximize-array-value 1255\n",
            "{'id': 1255, 'name': 'reverse-subarray-to-maximize-array-value', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/reverse-subarray-to-maximize-array-value/', 'task_description': 'You are given an integer array `nums`. The _value_ of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`. You are allowed to select any subarray of the given array and reverse it. You can perform this operation **only once**. Find maximum possible value of the final array. **Example 1:** ``` **Input:** nums = [2,3,1,5,4] **Output:** 10 Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10. ``` **Example 2:** ``` **Input:** nums = [2,4,9,24,2,1,10] **Output:** 68 ``` **Constraints:** `2 <= nums.length <= 3 * 104` `-105 <= nums[i] <= 105` The answer is guaranteed to fit in a 32-bit integer.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,3,1,5,4]', 'output': '10 Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.'}, {'label': 'Example 2', 'input': 'nums = [2,4,9,24,2,1,10]', 'output': '68'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_value_after_reverse(nums :: [integer]) :: integer\\n  def max_value_after_reverse(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_value_after_reverse(Nums :: [integer()]) -> integer().\\nmax_value_after_reverse(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxValueAfterReverse(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!12\n",
            "deepest-leaves-sum 1254\n",
            "{'id': 1254, 'name': 'deepest-leaves-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/deepest-leaves-sum/', 'task_description': 'Given the `root` of a binary tree, return _the sum of values of its deepest leaves_. **Example 1:** ``` **Input:** root = [1,2,3,4,5,null,6,7,null,null,null,null,8] **Output:** 15 ``` **Example 2:** ``` **Input:** root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] **Output:** 19 ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `1 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,5,null,6,7,null,null,null,null,8]', 'output': '15'}, {'label': 'Example 2', 'input': 'root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]', 'output': '19 Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . 1 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec deepest_leaves_sum(root :: TreeNode.t | nil) :: integer\\n  def deepest_leaves_sum(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec deepest_leaves_sum(Root :: #tree_node{} | null) -> integer().\\ndeepest_leaves_sum(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def deepestLeavesSum(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!13\n",
            "sort-the-matrix-diagonally 1253\n",
            "{'id': 1253, 'name': 'sort-the-matrix-diagonally', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sort-the-matrix-diagonally/', 'task_description': \"A **matrix diagonal** is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the **matrix diagonal** starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`. Given an `m x n` matrix `mat` of integers, sort each **matrix diagonal** in ascending order and return _the resulting matrix_. **Example 1:** ``` **Input:** mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]] **Output:** [[1,1,1,1],[1,2,2,2],[1,2,3,3]] ``` **Example 2:** ``` **Input:** mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]] **Output:** [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]] ``` **Constraints:** `m == mat.length` `n == mat[i].length` `1 <= m, n <= 100` `1 <= mat[i][j] <= 100`\", 'test_case': [{'label': 'Example 1', 'input': 'mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]', 'output': '[[1,1,1,1],[1,2,2,2],[1,2,3,3]]'}, {'label': 'Example 2', 'input': 'mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]', 'output': '[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]] Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 1 <= mat[i][j] <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec diagonal_sort(mat :: [[integer]]) :: [[integer]]\\n  def diagonal_sort(mat) do\\n    \\n  end\\nend', 'erlang_template': '-spec diagonal_sort(Mat :: [[integer()]]) -> [[integer()]].\\ndiagonal_sort(Mat) ->\\n  .', 'scala_template': 'object Solution {\\n    def diagonalSort(mat: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!14\n",
            "break-a-palindrome 1252\n",
            "{'id': 1252, 'name': 'break-a-palindrome', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/break-a-palindrome/', 'task_description': 'Given a palindromic string of lowercase English letters `palindrome`, replace **exactly one** character with any lowercase English letter so that the resulting string is **not** a palindrome and that it is the **lexicographically smallest** one possible. Return _the resulting string. If there is no way to replace a character to make it not a palindrome, return an **empty string**._ A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `\"abcc\"` is lexicographically smaller than `\"abcd\"` because the first position they differ is at the fourth character, and `\\'c\\'` is smaller than `\\'d\\'`. **Example 1:** ``` **Input:** palindrome = \"abccba\" **Output:** \"aaccba\" **Explanation:** There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\". Of all the ways, \"aaccba\" is the lexicographically smallest. ``` **Example 2:** ``` **Input:** palindrome = \"a\" **Output:** \"\" **Explanation:** There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string. ``` **Constraints:** `1 <= palindrome.length <= 1000` `palindrome` consists of only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'palindrome = \"abccba\"', 'output': '\"aaccba\" Explanation: There are many ways to make \"abccba\" not a palindrome, such as \" z bccba\", \"a a ccba\", and \"ab a cba\".\\nOf all the ways, \"aaccba\" is the lexicographically smallest.'}, {'label': 'Example 2', 'input': 'palindrome = \"a\"', 'output': '\"\" Explanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.'}], 'elixir_template': 'defmodule Solution do\\n  @spec break_palindrome(palindrome :: String.t) :: String.t\\n  def break_palindrome(palindrome) do\\n    \\n  end\\nend', 'erlang_template': '-spec break_palindrome(Palindrome :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nbreak_palindrome(Palindrome) ->\\n  .', 'scala_template': 'object Solution {\\n    def breakPalindrome(palindrome: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!15\n",
            "longest-chunked-palindrome-decomposition 1251\n",
            "{'id': 1251, 'name': 'longest-chunked-palindrome-decomposition', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/longest-chunked-palindrome-decomposition/', 'task_description': 'You are given a string `text`. You should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that: `subtexti` is a **non-empty** string. The concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`). `subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`). Return the largest possible value of `k`. **Example 1:** ``` **Input:** text = \"ghiabcdefhelloadamhelloabcdefghi\" **Output:** 7 **Explanation:** We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\". ``` **Example 2:** ``` **Input:** text = \"merchant\" **Output:** 1 **Explanation:** We can split the string on \"(merchant)\". ``` **Example 3:** ``` **Input:** text = \"antaprezatepzapreanta\" **Output:** 11 **Explanation:** We can split the string on \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)\". ``` **Constraints:** `1 <= text.length <= 1000` `text` consists only of lowercase English characters.', 'test_case': [{'label': 'Example 1', 'input': 'text = \"ghiabcdefhelloadamhelloabcdefghi\"', 'output': '7 Explanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".'}, {'label': 'Example 2', 'input': 'text = \"merchant\"', 'output': '1 Explanation: We can split the string on \"(merchant)\".'}, {'label': 'Example 3', 'input': 'text = \"antaprezatepzapreanta\"', 'output': '11 Explanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_decomposition(text :: String.t) :: integer\\n  def longest_decomposition(text) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_decomposition(Text :: unicode:unicode_binary()) -> integer().\\nlongest_decomposition(Text) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestDecomposition(text: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!16\n",
            "longest-common-subsequence 1250\n",
            "{'id': 1250, 'name': 'longest-common-subsequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-common-subsequence/', 'task_description': 'Given two strings `text1` and `text2`, return _the length of their longest **common subsequence**. _If there is no **common subsequence**, return `0`. A **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, `\"ace\"` is a subsequence of `\"abcde\"`. A **common subsequence** of two strings is a subsequence that is common to both strings. **Example 1:** ``` **Input:** text1 = \"abcde\", text2 = \"ace\" **Output:** 3 **Explanation:** The longest common subsequence is \"ace\" and its length is 3. ``` **Example 2:** ``` **Input:** text1 = \"abc\", text2 = \"abc\" **Output:** 3 **Explanation:** The longest common subsequence is \"abc\" and its length is 3. ``` **Example 3:** ``` **Input:** text1 = \"abc\", text2 = \"def\" **Output:** 0 **Explanation:** There is no such common subsequence, so the result is 0. ``` **Constraints:** `1 <= text1.length, text2.length <= 1000` `text1` and `text2` consist of only lowercase English characters.', 'test_case': [{'label': 'Example 1', 'input': 'text1 = \"abcde\", text2 = \"ace\"', 'output': '3 Explanation: The longest common subsequence is \"ace\" and its length is 3.'}, {'label': 'Example 2', 'input': 'text1 = \"abc\", text2 = \"abc\"', 'output': '3 Explanation: The longest common subsequence is \"abc\" and its length is 3.'}, {'label': 'Example 3', 'input': 'text1 = \"abc\", text2 = \"def\"', 'output': '0 Explanation: There is no such common subsequence, so the result is 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_common_subsequence(text1 :: String.t, text2 :: String.t) :: integer\\n  def longest_common_subsequence(text1, text2) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_common_subsequence(Text1 :: unicode:unicode_binary(), Text2 :: unicode:unicode_binary()) -> integer().\\nlongest_common_subsequence(Text1, Text2) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestCommonSubsequence(text1: String, text2: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!17\n",
            "snapshot-array 1249\n",
            "{'id': 1249, 'name': 'snapshot-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/snapshot-array/', 'task_description': 'Implement a SnapshotArray that supports the following interface: `SnapshotArray(int length)` initializes an array-like data structure with the given length. **Initially, each element equals 0**. `void set(index, val)` sets the element at the given `index` to be equal to `val`. `int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`. `int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id` **Example 1:** ``` **Input:** [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"] [[3],[0,5],[],[0,6],[0,0]] **Output:** [null,null,0,null,5] **Explanation: ** SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3 snapshotArr.set(0,5); // Set array[0] = 5 snapshotArr.snap(); // Take a snapshot, return snap_id = 0 snapshotArr.set(0,6); snapshotArr.get(0,0); // Get the value of array[0] with snap_id = 0, return 5 ``` **Constraints:** `1 <= length <= 5 * 104` `0 <= index < length` `0 <= val <= 109` `0 <= snap_id < `(the total number of times we call `snap()`) At most `5 * 104` calls will be made to `set`, `snap`, and `get`.', 'test_case': [{'label': 'Example 1', 'input': '[\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\\n[[3],[0,5],[],[0,6],[0,0]]', 'output': '[null,null,0,null,5] Explanation: SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\\nsnapshotArr.set(0,5);  // Set array[0] = 5\\nsnapshotArr.snap();  // Take a snapshot, return snap_id = 0\\nsnapshotArr.set(0,6);\\nsnapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5'}], 'elixir_template': 'defmodule SnapshotArray do\\n  @spec init_(length :: integer) :: any\\n  def init_(length) do\\n    \\n  end\\n\\n  @spec set(index :: integer, val :: integer) :: any\\n  def set(index, val) do\\n    \\n  end\\n\\n  @spec snap() :: integer\\n  def snap() do\\n    \\n  end\\n\\n  @spec get(index :: integer, snap_id :: integer) :: integer\\n  def get(index, snap_id) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# SnapshotArray.init_(length)\\n# SnapshotArray.set(index, val)\\n# param_2 = SnapshotArray.snap()\\n# param_3 = SnapshotArray.get(index, snap_id)\\n\\n# SnapshotArray.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec snapshot_array_init_(Length :: integer()) -> any().\\nsnapshot_array_init_(Length) ->\\n  .\\n\\n-spec snapshot_array_set(Index :: integer(), Val :: integer()) -> any().\\nsnapshot_array_set(Index, Val) ->\\n  .\\n\\n-spec snapshot_array_snap() -> integer().\\nsnapshot_array_snap() ->\\n  .\\n\\n-spec snapshot_array_get(Index :: integer(), Snap_id :: integer()) -> integer().\\nsnapshot_array_get(Index, Snap_id) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% snapshot_array_init_(Length),\\n%% snapshot_array_set(Index, Val),\\n%% Param_2 = snapshot_array_snap(),\\n%% Param_3 = snapshot_array_get(Index, Snap_id),\\n\\n%% snapshot_array_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class SnapshotArray(_length: Int) {\\n\\n    def set(index: Int, `val`: Int): Unit = {\\n        \\n    }\\n\\n    def snap(): Int = {\\n        \\n    }\\n\\n    def get(index: Int, snap_id: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your SnapshotArray object will be instantiated and called as such:\\n * val obj = new SnapshotArray(length)\\n * obj.set(index,`val`)\\n * val param_2 = obj.snap()\\n * val param_3 = obj.get(index,snap_id)\\n */'}\n",
            "Done!18\n",
            "binary-tree-coloring-game 1248\n",
            "{'id': 1248, 'name': 'binary-tree-coloring-game', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-tree-coloring-game/', 'task_description': 'Two players play a turn based game on a binary tree. We are given the `root` of this binary tree, and the number of nodes `n` in the tree. `n` is odd, and each node has a distinct value from `1` to `n`. Initially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`. The first player colors the node with value `x` red, and the second player colors the node with value `y` blue. Then, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an **uncolored** neighbor of the chosen node (either the left child, right child, or parent of the chosen node.) If (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes. You are the second player. If it is possible to choose such a `y` to ensure you win the game, return `true`. If it is not possible, return `false`. **Example 1:** ``` **Input:** root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3 **Output:** true **Explanation: **The second player can choose the node with value 2. ``` **Example 2:** ``` **Input:** root = [1,2,3], n = 3, x = 1 **Output:** false ``` **Constraints:** The number of nodes in the tree is `n`. `1 <= x <= n <= 100` `n` is odd. 1 <= Node.val <= n All the values of the tree are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3', 'output': 'true Explanation: The second player can choose the node with value 2.'}, {'label': 'Example 2', 'input': 'root = [1,2,3], n = 3, x = 1', 'output': 'false Constraints: The number of nodes in the tree is n . 1 <= x <= n <= 100 n is odd. 1 <= Node.val <= n All the values of the tree are unique .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec btree_game_winning_move(root :: TreeNode.t | nil, n :: integer, x :: integer) :: boolean\\n  def btree_game_winning_move(root, n, x) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec btree_game_winning_move(Root :: #tree_node{} | null, N :: integer(), X :: integer()) -> boolean().\\nbtree_game_winning_move(Root, N, X) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def btreeGameWinningMove(root: TreeNode, n: Int, x: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!19\n",
            "decrease-elements-to-make-array-zigzag 1247\n",
            "{'id': 1247, 'name': 'decrease-elements-to-make-array-zigzag', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/decrease-elements-to-make-array-zigzag/', 'task_description': 'Given an array `nums` of integers, a _move_ consists of choosing any element and **decreasing it by 1**. An array `A` is a _zigzag array_ if either: Every even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...` OR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...` Return the minimum number of moves to transform the given array `nums` into a zigzag array. **Example 1:** ``` **Input:** nums = [1,2,3] **Output:** 2 **Explanation:** We can decrease 2 to 0 or 3 to 1. ``` **Example 2:** ``` **Input:** nums = [9,6,1,6,2] **Output:** 4 ``` **Constraints:** `1 <= nums.length <= 1000` `1 <= nums[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3]', 'output': '2 Explanation: We can decrease 2 to 0 or 3 to 1.'}, {'label': 'Example 2', 'input': 'nums = [9,6,1,6,2]', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec moves_to_make_zigzag(nums :: [integer]) :: integer\\n  def moves_to_make_zigzag(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec moves_to_make_zigzag(Nums :: [integer()]) -> integer().\\nmoves_to_make_zigzag(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def movesToMakeZigzag(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!20\n",
            "distinct-echo-substrings 1244\n",
            "{'id': 1244, 'name': 'distinct-echo-substrings', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/distinct-echo-substrings/', 'task_description': 'Return the number of **distinct** non-empty substrings of `text` that can be written as the concatenation of some string with itself (i.e. it can be written as `a + a` where `a` is some string). **Example 1:** ``` **Input:** text = \"abcabcabc\" **Output:** 3 Explanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\". ``` **Example 2:** ``` **Input:** text = \"leetcodeleetcode\" **Output:** 2 Explanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\". ``` **Constraints:** `1 <= text.length <= 2000` `text` has only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'text = \"abcabcabc\"', 'output': '3 Explanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".'}, {'label': 'Example 2', 'input': 'text = \"leetcodeleetcode\"', 'output': '2 Explanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec distinct_echo_substrings(text :: String.t) :: integer\\n  def distinct_echo_substrings(text) do\\n    \\n  end\\nend', 'erlang_template': '-spec distinct_echo_substrings(Text :: unicode:unicode_binary()) -> integer().\\ndistinct_echo_substrings(Text) ->\\n  .', 'scala_template': 'object Solution {\\n    def distinctEchoSubstrings(text: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!21\n",
            "sum-of-nodes-with-even-valued-grandparent 1243\n",
            "{'id': 1243, 'name': 'sum-of-nodes-with-even-valued-grandparent', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent/', 'task_description': 'Given the `root` of a binary tree, return _the sum of values of nodes with an **even-valued grandparent**_. If there are no nodes with an **even-valued grandparent**, return `0`. A **grandparent** of a node is the parent of its parent if it exists. **Example 1:** ``` **Input:** root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] **Output:** 18 **Explanation:** The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents. ``` **Example 2:** ``` **Input:** root = [1] **Output:** 0 ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `1 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]', 'output': '18 Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.'}, {'label': 'Example 2', 'input': 'root = [1]', 'output': '0 Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . 1 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sum_even_grandparent(root :: TreeNode.t | nil) :: integer\\n  def sum_even_grandparent(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec sum_even_grandparent(Root :: #tree_node{} | null) -> integer().\\nsum_even_grandparent(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def sumEvenGrandparent(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!22\n",
            "matrix-block-sum 1242\n",
            "{'id': 1242, 'name': 'matrix-block-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/matrix-block-sum/', 'task_description': 'Given a `m x n` matrix `mat` and an integer `k`, return _a matrix_ `answer` _where each_ `answer[i][j]` _is the sum of all elements_ `mat[r][c]` _for_: `i - k <= r <= i + k,` `j - k <= c <= j + k`, and `(r, c)` is a valid position in the matrix. **Example 1:** ``` **Input:** mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1 **Output:** [[12,21,16],[27,45,33],[24,39,28]] ``` **Example 2:** ``` **Input:** mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2 **Output:** [[45,45,45],[45,45,45],[45,45,45]] ``` **Constraints:** `m == mat.length` `n == mat[i].length` `1 <= m, n, k <= 100` `1 <= mat[i][j] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1', 'output': '[[12,21,16],[27,45,33],[24,39,28]]'}, {'label': 'Example 2', 'input': 'mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2', 'output': '[[45,45,45],[45,45,45],[45,45,45]] Constraints: m ==\\xa0mat.length n ==\\xa0mat[i].length 1 <= m, n, k <= 100 1 <= mat[i][j] <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec matrix_block_sum(mat :: [[integer]], k :: integer) :: [[integer]]\\n  def matrix_block_sum(mat, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec matrix_block_sum(Mat :: [[integer()]], K :: integer()) -> [[integer()]].\\nmatrix_block_sum(Mat, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def matrixBlockSum(mat: Array[Array[Int]], k: Int): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!23\n",
            "decompress-run-length-encoded-list 1241\n",
            "{'id': 1241, 'name': 'decompress-run-length-encoded-list', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/decompress-run-length-encoded-list/', 'task_description': 'We are given a list `nums` of integers representing a list compressed with run-length encoding. Consider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`). For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list. Return the decompressed list. **Example 1:** ``` **Input:** nums = [1,2,3,4] **Output:** [2,4,4,4] **Explanation:** The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2]. The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4]. At the end the concatenation [2] + [4,4,4] is [2,4,4,4]. ``` **Example 2:** ``` **Input:** nums = [1,1,2,3] **Output:** [1,3,3] ``` **Constraints:** `2 <= nums.length <= 100` `nums.length % 2 == 0` `1 <= nums[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,4]', 'output': '[2,4,4,4] Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\\nThe second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\\nAt the end the concatenation [2] + [4,4,4] is [2,4,4,4].'}, {'label': 'Example 2', 'input': 'nums = [1,1,2,3]', 'output': '[1,3,3]'}], 'elixir_template': 'defmodule Solution do\\n  @spec decompress_rl_elist(nums :: [integer]) :: [integer]\\n  def decompress_rl_elist(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec decompress_rl_elist(Nums :: [integer()]) -> [integer()].\\ndecompress_rl_elist(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def decompressRLElist(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!24\n",
            "stone-game-ii 1240\n",
            "{'id': 1240, 'name': 'stone-game-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/stone-game-ii/', 'task_description': \"Alice and Bob continue their games with piles of stones. There are a number of piles **arranged in a row**, and each pile has a positive integer number of stones `piles[i]`. The objective of the game is to end with the most stones. Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take **all the stones** in the **first** `X` remaining piles, where `1 <= X <= 2M`. Then, we set `M = max(M, X)`. Initially, M = 1. The game continues until all the stones have been taken. Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get. **Example 1:** **Input:** piles = [2,7,9,4,4] **Output:** 10 **Explanation:** If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get `2 + 4 + 4 = 10` stones in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get `2 + 7 = 9` stones in total. So we return 10 since it's larger. **Example 2:** **Input:** piles = [1,2,3,4,5,100] **Output:** 104 **Constraints:** `1 <= piles.length <= 100` `1 <= piles[i] <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'piles = [2,7,9,4,4]', 'output': \"10 Explanation: If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 stones in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 stones in total. So we return 10 since it's larger.\"}, {'label': 'Example 2', 'input': 'piles = [1,2,3,4,5,100]', 'output': '104'}], 'elixir_template': 'defmodule Solution do\\n  @spec stone_game_ii(piles :: [integer]) :: integer\\n  def stone_game_ii(piles) do\\n    \\n  end\\nend', 'erlang_template': '-spec stone_game_ii(Piles :: [integer()]) -> integer().\\nstone_game_ii(Piles) ->\\n  .', 'scala_template': 'object Solution {\\n    def stoneGameII(piles: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!25\n",
            "largest-1-bordered-square 1239\n",
            "{'id': 1239, 'name': 'largest-1-bordered-square', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/largest-1-bordered-square/', 'task_description': \"Given a 2D `grid` of `0`s and `1`s, return the number of elements in the largest **square** subgrid that has all `1`s on its **border**, or `0` if such a subgrid doesn't exist in the `grid`. **Example 1:** ``` **Input:** grid = [[1,1,1],[1,0,1],[1,1,1]] **Output:** 9 ``` **Example 2:** ``` **Input:** grid = [[1,1,0,0]] **Output:** 1 ``` **Constraints:** `1 <= grid.length <= 100` `1 <= grid[0].length <= 100` `grid[i][j]` is `0` or `1`\", 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,1,1],[1,0,1],[1,1,1]]', 'output': '9'}, {'label': 'Example 2', 'input': 'grid = [[1,1,0,0]]', 'output': '1'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def largest1BorderedSquare(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!26\n",
            "alphabet-board-path 1238\n",
            "{'id': 1238, 'name': 'alphabet-board-path', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/alphabet-board-path/', 'task_description': 'On an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`. Here, `board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]`, as shown in the diagram below. We may make the following moves: `\\'U\\'` moves our position up one row, if the position exists on the board; `\\'D\\'` moves our position down one row, if the position exists on the board; `\\'L\\'` moves our position left one column, if the position exists on the board; `\\'R\\'` moves our position right one column, if the position exists on the board; `\\'!\\'` adds the character `board[r][c]` at our current position `(r, c)` to the answer. (Here, the only positions that exist on the board are positions with letters on them.) Return a sequence of moves that makes our answer equal to `target` in the minimum number of moves. You may return any path that does so. **Example 1:** ``` **Input:** target = \"leet\" **Output:** \"DDR!UURRR!!DDD!\" ``` **Example 2:** ``` **Input:** target = \"code\" **Output:** \"RR!DDRR!UUL!R!\" ``` **Constraints:** `1 <= target.length <= 100` `target` consists only of English lowercase letters.', 'test_case': [{'label': 'Example 1', 'input': 'target = \"leet\"', 'output': '\"DDR!UURRR!!DDD!\"'}, {'label': 'Example 2', 'input': 'target = \"code\"', 'output': '\"RR!DDRR!UUL!R!\"'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def alphabetBoardPath(target: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!27\n",
            "n-th-tribonacci-number 1236\n",
            "{'id': 1236, 'name': 'n-th-tribonacci-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/n-th-tribonacci-number/', 'task_description': 'The Tribonacci sequence Tn is defined as follows: T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0. Given `n`, return the value of Tn. **Example 1:** ``` **Input:** n = 4 **Output:** 4 **Explanation:** T_3 = 0 + 1 + 1 = 2 T_4 = 1 + 1 + 2 = 4 ``` **Example 2:** ``` **Input:** n = 25 **Output:** 1389537 ``` **Constraints:** `0 <= n <= 37` The answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`.', 'test_case': [{'label': 'Example 1', 'input': 'n = 4', 'output': '4 Explanation: T_3 = 0 + 1 + 1 = 2\\nT_4 = 1 + 1 + 2 = 4'}, {'label': 'Example 2', 'input': 'n = 25', 'output': '1389537'}], 'elixir_template': 'defmodule Solution do\\n  @spec tribonacci(n :: integer) :: integer\\n  def tribonacci(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec tribonacci(N :: integer()) -> integer().\\ntribonacci(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def tribonacci(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!28\n",
            "number-of-paths-with-max-score 1234\n",
            "{'id': 1234, 'name': 'number-of-paths-with-max-score', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/number-of-paths-with-max-score/', 'task_description': 'You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character `\\'S\\'`. You need to reach the top left square marked with the character `\\'E\\'`. The rest of the squares are labeled either with a numeric character `1, 2, ..., 9` or with an obstacle `\\'X\\'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there. Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, **taken modulo `10^9 + 7`**. In case there is no path, return `[0, 0]`. **Example 1:** ``` **Input:** board = [\"E23\",\"2X2\",\"12S\"] **Output:** [7,1] ``` **Example 2:** ``` **Input:** board = [\"E12\",\"1X1\",\"21S\"] **Output:** [4,2] ``` **Example 3:** ``` **Input:** board = [\"E11\",\"XXX\",\"11S\"] **Output:** [0,0] ``` **Constraints:** `2 <= board.length == board[i].length <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'board = [\"E23\",\"2X2\",\"12S\"]', 'output': '[7,1]'}, {'label': 'Example 2', 'input': 'board = [\"E12\",\"1X1\",\"21S\"]', 'output': '[4,2]'}, {'label': 'Example 3', 'input': 'board = [\"E11\",\"XXX\",\"11S\"]', 'output': '[0,0]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def pathsWithMaxScore(board: List[String]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!29\n",
            "sum-of-mutated-array-closest-to-target 1232\n",
            "{'id': 1232, 'name': 'sum-of-mutated-array-closest-to-target', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sum-of-mutated-array-closest-to-target/', 'task_description': \"Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`. In case of a tie, return the minimum such integer. Notice that the answer is not neccesarilly a number from `arr`. **Example 1:** ``` **Input:** arr = [4,9,3], target = 10 **Output:** 3 **Explanation:** When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer. ``` **Example 2:** ``` **Input:** arr = [2,3,5], target = 10 **Output:** 5 ``` **Example 3:** ``` **Input:** arr = [60864,25176,27249,21296,20204], target = 56803 **Output:** 11361 ``` **Constraints:** `1 <= arr.length <= 104` `1 <= arr[i], target <= 105`\", 'test_case': [{'label': 'Example 1', 'input': 'arr = [4,9,3], target = 10', 'output': \"3 Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.\"}, {'label': 'Example 2', 'input': 'arr = [2,3,5], target = 10', 'output': '5'}, {'label': 'Example 3', 'input': 'arr = [60864,25176,27249,21296,20204], target = 56803', 'output': '11361'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_best_value(arr :: [integer], target :: integer) :: integer\\n  def find_best_value(arr, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_best_value(Arr :: [integer()], Target :: integer()) -> integer().\\nfind_best_value(Arr, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def findBestValue(arr: Array[Int], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!30\n",
            "replace-elements-with-greatest-element-on-right-side 1231\n",
            "{'id': 1231, 'name': 'replace-elements-with-greatest-element-on-right-side', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/', 'task_description': 'Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`. After doing so, return the array. **Example 1:** ``` **Input:** arr = [17,18,5,4,6,1] **Output:** [18,6,6,6,1,-1] **Explanation:** - index 0 --> the greatest element to the right of index 0 is index 1 (18). - index 1 --> the greatest element to the right of index 1 is index 4 (6). - index 2 --> the greatest element to the right of index 2 is index 4 (6). - index 3 --> the greatest element to the right of index 3 is index 4 (6). - index 4 --> the greatest element to the right of index 4 is index 5 (1). - index 5 --> there are no elements to the right of index 5, so we put -1. ``` **Example 2:** ``` **Input:** arr = [400] **Output:** [-1] **Explanation:** There are no elements to the right of index 0. ``` **Constraints:** `1 <= arr.length <= 104` `1 <= arr[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [17,18,5,4,6,1]', 'output': '[18,6,6,6,1,-1] Explanation: - index 0 --> the greatest element to the right of index 0 is index 1 (18).\\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\\n- index 5 --> there are no elements to the right of index 5, so we put -1.'}, {'label': 'Example 2', 'input': 'arr = [400]', 'output': '[-1] Explanation: There are no elements to the right of index 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec replace_elements(arr :: [integer]) :: [integer]\\n  def replace_elements(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec replace_elements(Arr :: [integer()]) -> [integer()].\\nreplace_elements(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def replaceElements(arr: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!31\n",
            "maximum-of-absolute-value-expression 1230\n",
            "{'id': 1230, 'name': 'maximum-of-absolute-value-expression', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-of-absolute-value-expression/', 'task_description': 'Given two arrays of integers with equal lengths, return the maximum value of: `|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|` where the maximum is taken over all `0 <= i, j < arr1.length`. **Example 1:** ``` **Input:** arr1 = [1,2,3,4], arr2 = [-1,4,5,6] **Output:** 13 ``` **Example 2:** ``` **Input:** arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] **Output:** 20 ``` **Constraints:** `2 <= arr1.length == arr2.length <= 40000` `-10^6 <= arr1[i], arr2[i] <= 10^6`', 'test_case': [{'label': 'Example 1', 'input': 'arr1 = [1,2,3,4], arr2 = [-1,4,5,6]', 'output': '13'}, {'label': 'Example 2', 'input': 'arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]', 'output': '20'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_abs_val_expr(arr1 :: [integer], arr2 :: [integer]) :: integer\\n  def max_abs_val_expr(arr1, arr2) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_abs_val_expr(Arr1 :: [integer()], Arr2 :: [integer()]) -> integer().\\nmax_abs_val_expr(Arr1, Arr2) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxAbsValExpr(arr1: Array[Int], arr2: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!32\n",
            "shortest-path-with-alternating-colors 1229\n",
            "{'id': 1229, 'name': 'shortest-path-with-alternating-colors', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/shortest-path-with-alternating-colors/', 'task_description': 'You are given an integer `n`, the number of nodes in a directed graph where the nodes are labeled from `0` to `n - 1`. Each edge is red or blue in this graph, and there could be self-edges and parallel edges. You are given two arrays `redEdges` and `blueEdges` where: `redEdges[i] = [ai, bi]` indicates that there is a directed red edge from node `ai` to node `bi` in the graph, and `blueEdges[j] = [uj, vj]` indicates that there is a directed blue edge from node `uj` to node `vj` in the graph. Return an array `answer` of length `n`, where each `answer[x]` is the length of the shortest path from node `0` to node `x` such that the edge colors alternate along the path, or `-1` if such a path does not exist. **Example 1:** ``` **Input:** n = 3, redEdges = [[0,1],[1,2]], blueEdges = [] **Output:** [0,1,-1] ``` **Example 2:** ``` **Input:** n = 3, redEdges = [[0,1]], blueEdges = [[2,1]] **Output:** [0,1,-1] ``` **Constraints:** `1 <= n <= 100` `0 <= redEdges.length, blueEdges.length <= 400` `redEdges[i].length == blueEdges[j].length == 2` `0 <= ai, bi, uj, vj < n`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3, redEdges = [[0,1],[1,2]], blueEdges = []', 'output': '[0,1,-1]'}, {'label': 'Example 2', 'input': 'n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]', 'output': '[0,1,-1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_alternating_paths(n :: integer, red_edges :: [[integer]], blue_edges :: [[integer]]) :: [integer]\\n  def shortest_alternating_paths(n, red_edges, blue_edges) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_alternating_paths(N :: integer(), RedEdges :: [[integer()]], BlueEdges :: [[integer()]]) -> [integer()].\\nshortest_alternating_paths(N, RedEdges, BlueEdges) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestAlternatingPaths(n: Int, redEdges: Array[Array[Int]], blueEdges: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!33\n",
            "minimum-cost-tree-from-leaf-values 1228\n",
            "{'id': 1228, 'name': 'minimum-cost-tree-from-leaf-values', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/', 'task_description': 'Given an array `arr` of positive integers, consider all binary trees such that: Each node has either `0` or `2` children; The values of `arr` correspond to the values of each **leaf** in an in-order traversal of the tree. The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively. Among all possible binary trees considered, return _the smallest possible sum of the values of each non-leaf node_. It is guaranteed this sum fits into a **32-bit** integer. A node is a **leaf** if and only if it has zero children. **Example 1:** ``` **Input:** arr = [6,2,4] **Output:** 32 **Explanation:** There are two possible trees shown. The first has a non-leaf node sum 36, and the second has non-leaf node sum 32. ``` **Example 2:** ``` **Input:** arr = [4,11] **Output:** 44 ``` **Constraints:** `2 <= arr.length <= 40` `1 <= arr[i] <= 15` It is guaranteed that the answer fits into a **32-bit** signed integer (i.e., it is less than 231).', 'test_case': [{'label': 'Example 1', 'input': 'arr = [6,2,4]', 'output': '32 Explanation: There are two possible trees shown.\\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32.'}, {'label': 'Example 2', 'input': 'arr = [4,11]', 'output': '44'}], 'elixir_template': 'defmodule Solution do\\n  @spec mct_from_leaf_values(arr :: [integer]) :: integer\\n  def mct_from_leaf_values(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec mct_from_leaf_values(Arr :: [integer()]) -> integer().\\nmct_from_leaf_values(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def mctFromLeafValues(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!34\n",
            "number-of-equivalent-domino-pairs 1227\n",
            "{'id': 1227, 'name': 'number-of-equivalent-domino-pairs', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/number-of-equivalent-domino-pairs/', 'task_description': 'Given a list of `dominoes`, `dominoes[i] = [a, b]` is **equivalent to** `dominoes[j] = [c, d]` if and only if either (`a == c` and `b == d`), or (`a == d` and `b == c`) - that is, one domino can be rotated to be equal to another domino. Return _the number of pairs _`(i, j)`_ for which _`0 <= i < j < dominoes.length`_, and _`dominoes[i]`_ is **equivalent to** _`dominoes[j]`. **Example 1:** ``` **Input:** dominoes = [[1,2],[2,1],[3,4],[5,6]] **Output:** 1 ``` **Example 2:** ``` **Input:** dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]] **Output:** 3 ``` **Constraints:** `1 <= dominoes.length <= 4 * 104` `dominoes[i].length == 2` `1 <= dominoes[i][j] <= 9`', 'test_case': [{'label': 'Example 1', 'input': 'dominoes = [[1,2],[2,1],[3,4],[5,6]]', 'output': '1'}, {'label': 'Example 2', 'input': 'dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_equiv_domino_pairs(dominoes :: [[integer]]) :: integer\\n  def num_equiv_domino_pairs(dominoes) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_equiv_domino_pairs(Dominoes :: [[integer()]]) -> integer().\\nnum_equiv_domino_pairs(Dominoes) ->\\n  .', 'scala_template': 'object Solution {\\n    def numEquivDominoPairs(dominoes: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!35\n",
            "minimum-falling-path-sum-ii 1224\n",
            "{'id': 1224, 'name': 'minimum-falling-path-sum-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimum-falling-path-sum-ii/', 'task_description': 'Given an `n x n` integer matrix `grid`, return _the minimum sum of a **falling path with non-zero shifts**_. A **falling path with non-zero shifts** is a choice of exactly one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column. **Example 1:** ``` **Input:** grid = [[1,2,3],[4,5,6],[7,8,9]] **Output:** 13 **Explanation:** The possible falling paths are: [1,5,9], [1,5,7], [1,6,7], [1,6,8], [2,4,8], [2,4,9], [2,6,7], [2,6,8], [3,4,8], [3,4,9], [3,5,7], [3,5,9] The falling path with the smallest sum is [1,5,7], so the answer is 13. ``` **Example 2:** ``` **Input:** grid = [[7]] **Output:** 7 ``` **Constraints:** `n == grid.length == grid[i].length` `1 <= n <= 200` `-99 <= grid[i][j] <= 99`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,2,3],[4,5,6],[7,8,9]]', 'output': '13 Explanation: The possible falling paths are:\\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\\nThe falling path with the smallest sum is\\xa0[1,5,7], so the answer is\\xa013.'}, {'label': 'Example 2', 'input': 'grid = [[7]]', 'output': '7 Constraints: n == grid.length == grid[i].length 1 <= n <= 200 -99 <= grid[i][j] <= 99'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_falling_path_sum(grid :: [[integer]]) :: integer\\n  def min_falling_path_sum(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_falling_path_sum(Grid :: [[integer()]]) -> integer().\\nmin_falling_path_sum(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def minFallingPathSum(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!36\n",
            "graph-connectivity-with-threshold 1223\n",
            "{'id': 1223, 'name': 'graph-connectivity-with-threshold', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/graph-connectivity-with-threshold/', 'task_description': 'We have `n` cities labeled from `1` to `n`. Two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor **strictly greater** than some `threshold`. More formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true: `x % z == 0`, `y % z == 0`, and `z > threshold`. Given the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly. (i.e. there is some path between them). Return _an array _`answer`_, where _`answer.length == queries.length`_ and _`answer[i]`_ is _`true`_ if for the _`ith`_ query, there is a path between _`ai`_ and _`bi`_, or _`answer[i]`_ is _`false`_ if there is no path._ **Example 1:** ``` **Input:** n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]] **Output:** [false,false,true] **Explanation:** The divisors for each number: 1: 1 2: 1, 2 3: 1, 3 4: 1, 2, 4 5: 1, 5 6: 1, 2, 3, 6 Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the only ones directly connected. The result of each query: [1,4] 1 is not connected to 4 [2,5] 2 is not connected to 5 [3,6] 3 is connected to 6 through path 3--6 ``` **Example 2:** ``` **Input:** n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]] **Output:** [true,true,true,true,true] **Explanation:** The divisors for each number are the same as the previous example. However, since the threshold is 0, all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected. ``` **Example 3:** ``` **Input:** n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]] **Output:** [false,false,false,false,false] **Explanation:** Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected. Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x]. ``` **Constraints:** `2 <= n <= 104` `0 <= threshold <= n` `1 <= queries.length <= 105` `queries[i].length == 2` `1 <= ai, bi <= cities` `ai != bi`', 'test_case': [{'label': 'Example 1', 'input': 'n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]', 'output': '[false,false,true] Explanation: The divisors for each number:\\n1:   1\\n2:   1, 2\\n3:   1, 3 4:   1, 2, 4 5:   1, 5 6:   1, 2, 3 , 6 Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\\nonly ones directly connected. The result of each query:\\n[1,4]   1 is not connected to 4\\n[2,5]   2 is not connected to 5\\n[3,6]   3 is connected to 6 through path 3--6'}, {'label': 'Example 2', 'input': 'n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]', 'output': '[true,true,true,true,true] Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,\\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.'}, {'label': 'Example 3', 'input': 'n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]', 'output': '[false,false,false,false,false] Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].'}], 'elixir_template': 'defmodule Solution do\\n  @spec are_connected(n :: integer, threshold :: integer, queries :: [[integer]]) :: [boolean]\\n  def are_connected(n, threshold, queries) do\\n    \\n  end\\nend', 'erlang_template': '-spec are_connected(N :: integer(), Threshold :: integer(), Queries :: [[integer()]]) -> [boolean()].\\nare_connected(N, Threshold, Queries) ->\\n  .', 'scala_template': 'object Solution {\\n    def areConnected(n: Int, threshold: Int, queries: Array[Array[Int]]): List[Boolean] = {\\n        \\n    }\\n}'}\n",
            "Done!37\n",
            "remove-covered-intervals 1222\n",
            "{'id': 1222, 'name': 'remove-covered-intervals', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/remove-covered-intervals/', 'task_description': 'Given an array `intervals` where `intervals[i] = [li, ri]` represent the interval `[li, ri)`, remove all intervals that are covered by another interval in the list. The interval `[a, b)` is covered by the interval `[c, d)` if and only if `c <= a` and `b <= d`. Return _the number of remaining intervals_. **Example 1:** ``` **Input:** intervals = [[1,4],[3,6],[2,8]] **Output:** 2 **Explanation:** Interval [3,6] is covered by [2,8], therefore it is removed. ``` **Example 2:** ``` **Input:** intervals = [[1,4],[2,3]] **Output:** 1 ``` **Constraints:** `1 <= intervals.length <= 1000` `intervals[i].length == 2` `0 <= li < ri <= 105` All the given intervals are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'intervals = [[1,4],[3,6],[2,8]]', 'output': '2 Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.'}, {'label': 'Example 2', 'input': 'intervals = [[1,4],[2,3]]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_covered_intervals(intervals :: [[integer]]) :: integer\\n  def remove_covered_intervals(intervals) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_covered_intervals(Intervals :: [[integer()]]) -> integer().\\nremove_covered_intervals(Intervals) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeCoveredIntervals(intervals: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!38\n",
            "element-appearing-more-than-25-in-sorted-array 1221\n",
            "{'id': 1221, 'name': 'element-appearing-more-than-25-in-sorted-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/', 'task_description': 'Given an integer array **sorted** in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer. **Example 1:** ``` **Input:** arr = [1,2,2,6,6,6,6,7,10] **Output:** 6 ``` **Example 2:** ``` **Input:** arr = [1,1] **Output:** 1 ``` **Constraints:** `1 <= arr.length <= 104` `0 <= arr[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,2,2,6,6,6,6,7,10]', 'output': '6'}, {'label': 'Example 2', 'input': 'arr = [1,1]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_special_integer(arr :: [integer]) :: integer\\n  def find_special_integer(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_special_integer(Arr :: [integer()]) -> integer().\\nfind_special_integer(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def findSpecialInteger(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!39\n",
            "smallest-sufficient-team 1220\n",
            "{'id': 1220, 'name': 'smallest-sufficient-team', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/smallest-sufficient-team/', 'task_description': 'In a project, you have a list of required skills `req_skills`, and a list of people. The `ith` person `people[i]` contains a list of skills that the person has. Consider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. We can represent these teams by the index of each person. For example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`. Return _any sufficient team of the smallest possible size, represented by the index of each person_. You may return the answer in **any order**. It is **guaranteed** an answer exists. **Example 1:** ``` **Input:** req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]] **Output:** [0,2] ``` **Example 2:** ``` **Input:** req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]] **Output:** [1,2] ``` **Constraints:** `1 <= req_skills.length <= 16` `1 <= req_skills[i].length <= 16` `req_skills[i]` consists of lowercase English letters. All the strings of `req_skills` are **unique**. `1 <= people.length <= 60` `0 <= people[i].length <= 16` `1 <= people[i][j].length <= 16` `people[i][j]` consists of lowercase English letters. All the strings of `people[i]` are **unique**. Every skill in `people[i]` is a skill in `req_skills`. It is guaranteed a sufficient team exists.', 'test_case': [{'label': 'Example 1', 'input': 'req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]', 'output': '[0,2]'}, {'label': 'Example 2', 'input': 'req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]', 'output': '[1,2]'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_sufficient_team(req_skills :: [String.t], people :: [[String.t]]) :: [integer]\\n  def smallest_sufficient_team(req_skills, people) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_sufficient_team(Req_skills :: [unicode:unicode_binary()], People :: [[unicode:unicode_binary()]]) -> [integer()].\\nsmallest_sufficient_team(Req_skills, People) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestSufficientTeam(req_skills: Array[String], people: List[List[String]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!40\n",
            "longest-well-performing-interval 1219\n",
            "{'id': 1219, 'name': 'longest-well-performing-interval', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-well-performing-interval/', 'task_description': 'We are given `hours`, a list of the number of hours worked per day for a given employee. A day is considered to be a _tiring day_ if and only if the number of hours worked is (strictly) greater than `8`. A _well-performing interval_ is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days. Return the length of the longest well-performing interval. **Example 1:** ``` **Input:** hours = [9,9,6,0,6,6,9] **Output:** 3 **Explanation: **The longest well-performing interval is [9,9,6]. ``` **Example 2:** ``` **Input:** hours = [6,6,6] **Output:** 0 ``` **Constraints:** `1 <= hours.length <= 104` `0 <= hours[i] <= 16`', 'test_case': [{'label': 'Example 1', 'input': 'hours = [9,9,6,0,6,6,9]', 'output': '3 Explanation: The longest well-performing interval is [9,9,6].'}, {'label': 'Example 2', 'input': 'hours = [6,6,6]', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_wpi(hours :: [integer]) :: integer\\n  def longest_wpi(hours) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_wpi(Hours :: [integer()]) -> integer().\\nlongest_wpi(Hours) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestWPI(hours: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!41\n",
            "lowest-common-ancestor-of-deepest-leaves 1218\n",
            "{'id': 1218, 'name': 'lowest-common-ancestor-of-deepest-leaves', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/', 'task_description': \"Given the `root` of a binary tree, return _the lowest common ancestor of its deepest leaves_. Recall that: The node of a binary tree is a leaf if and only if it has no children The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`. The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`. **Example 1:** ``` **Input:** root = [3,5,1,6,2,0,8,null,null,7,4] **Output:** [2,7,4] **Explanation:** We return the node with value 2, colored in yellow in the diagram. The nodes coloured in blue are the deepest leaf-nodes of the tree. Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3. ``` **Example 2:** ``` **Input:** root = [1] **Output:** [1] **Explanation:** The root is the deepest node in the tree, and it's the lca of itself. ``` **Example 3:** ``` **Input:** root = [0,1,3,null,2] **Output:** [2] **Explanation:** The deepest leaf node in the tree is 2, the lca of one node is itself. ``` **Constraints:** The number of nodes in the tree will be in the range `[1, 1000]`. `0 <= Node.val <= 1000` The values of the nodes in the tree are **unique**. **Note:** This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/\", 'test_case': [{'label': 'Example 1', 'input': 'root = [3,5,1,6,2,0,8,null,null,7,4]', 'output': '[2,7,4] Explanation: We return the node with value 2, colored in yellow in the diagram.\\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.'}, {'label': 'Example 2', 'input': 'root = [1]', 'output': \"[1] Explanation: The root is the deepest node in the tree, and it's the lca of itself.\"}, {'label': 'Example 3', 'input': 'root = [0,1,3,null,2]', 'output': '[2] Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself. Constraints: The number of nodes in the tree will be in the range [1, 1000] . 0 <= Node.val <= 1000 The values of the nodes in the tree are unique . Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec lca_deepest_leaves(root :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def lca_deepest_leaves(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec lca_deepest_leaves(Root :: #tree_node{} | null) -> #tree_node{} | null.\\nlca_deepest_leaves(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def lcaDeepestLeaves(root: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!42\n",
            "relative-sort-array 1217\n",
            "{'id': 1217, 'name': 'relative-sort-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/relative-sort-array/', 'task_description': 'Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`. Sort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`. Elements that do not appear in `arr2` should be placed at the end of `arr1` in **ascending** order. **Example 1:** ``` **Input:** arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6] **Output:** [2,2,2,1,4,3,3,9,6,7,19] ``` **Example 2:** ``` **Input:** arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6] **Output:** [22,28,8,6,17,44] ``` **Constraints:** `1 <= arr1.length, arr2.length <= 1000` `0 <= arr1[i], arr2[i] <= 1000` All the elements of `arr2` are **distinct**. Each `arr2[i]` is in `arr1`.', 'test_case': [{'label': 'Example 1', 'input': 'arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]', 'output': '[2,2,2,1,4,3,3,9,6,7,19]'}, {'label': 'Example 2', 'input': 'arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]', 'output': '[22,28,8,6,17,44]'}], 'elixir_template': 'defmodule Solution do\\n  @spec relative_sort_array(arr1 :: [integer], arr2 :: [integer]) :: [integer]\\n  def relative_sort_array(arr1, arr2) do\\n    \\n  end\\nend', 'erlang_template': '-spec relative_sort_array(Arr1 :: [integer()], Arr2 :: [integer()]) -> [integer()].\\nrelative_sort_array(Arr1, Arr2) ->\\n  .', 'scala_template': 'object Solution {\\n    def relativeSortArray(arr1: Array[Int], arr2: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!43\n",
            "sequential-digits 1212\n",
            "{'id': 1212, 'name': 'sequential-digits', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sequential-digits/', 'task_description': 'An integer has _sequential digits_ if and only if each digit in the number is one more than the previous digit. Return a **sorted** list of all the integers in the range `[low, high]` inclusive that have sequential digits. **Example 1:** ``` **Input:** low = 100, high = 300 **Output:** [123,234] ``` **Example 2:** ``` **Input:** low = 1000, high = 13000 **Output:** [1234,2345,3456,4567,5678,6789,12345] ``` **Constraints:** `10 <= low <= high <= 10^9`', 'test_case': [{'label': 'Example 1', 'input': 'low = 100, high = 300', 'output': '[123,234]'}, {'label': 'Example 2', 'input': 'low = 1000, high = 13000', 'output': '[1234,2345,3456,4567,5678,6789,12345]'}], 'elixir_template': 'defmodule Solution do\\n  @spec sequential_digits(low :: integer, high :: integer) :: [integer]\\n  def sequential_digits(low, high) do\\n    \\n  end\\nend', 'erlang_template': '-spec sequential_digits(Low :: integer(), High :: integer()) -> [integer()].\\nsequential_digits(Low, High) ->\\n  .', 'scala_template': 'object Solution {\\n    def sequentialDigits(low: Int, high: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!44\n",
            "iterator-for-combination 1211\n",
            "{'id': 1211, 'name': 'iterator-for-combination', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/iterator-for-combination/', 'task_description': 'Design the `CombinationIterator` class: `CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of **sorted distinct** lowercase English letters and a number `combinationLength` as arguments. `next()` Returns the next combination of length `combinationLength` in **lexicographical order**. `hasNext()` Returns `true` if and only if there exists a next combination. **Example 1:** ``` **Input** [\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"] [[\"abc\", 2], [], [], [], [], [], []] **Output** [null, \"ab\", true, \"ac\", true, \"bc\", false] **Explanation** CombinationIterator itr = new CombinationIterator(\"abc\", 2); itr.next(); // return \"ab\" itr.hasNext(); // return True itr.next(); // return \"ac\" itr.hasNext(); // return True itr.next(); // return \"bc\" itr.hasNext(); // return False ``` **Constraints:** `1 <= combinationLength <= characters.length <= 15` All the characters of `characters` are **unique**. At most `104` calls will be made to `next` and `hasNext`. It is guaranteed that all calls of the function `next` are valid.', 'test_case': [], 'elixir_template': 'defmodule CombinationIterator do\\n  @spec init_(characters :: String.t, combination_length :: integer) :: any\\n  def init_(characters, combination_length) do\\n    \\n  end\\n\\n  @spec next() :: String.t\\n  def next() do\\n    \\n  end\\n\\n  @spec has_next() :: boolean\\n  def has_next() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# CombinationIterator.init_(characters, combination_length)\\n# param_1 = CombinationIterator.next()\\n# param_2 = CombinationIterator.has_next()\\n\\n# CombinationIterator.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec combination_iterator_init_(Characters :: unicode:unicode_binary(), CombinationLength :: integer()) -> any().\\ncombination_iterator_init_(Characters, CombinationLength) ->\\n  .\\n\\n-spec combination_iterator_next() -> unicode:unicode_binary().\\ncombination_iterator_next() ->\\n  .\\n\\n-spec combination_iterator_has_next() -> boolean().\\ncombination_iterator_has_next() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% combination_iterator_init_(Characters, CombinationLength),\\n%% Param_1 = combination_iterator_next(),\\n%% Param_2 = combination_iterator_has_next(),\\n\\n%% combination_iterator_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class CombinationIterator(_characters: String, _combinationLength: Int) {\\n\\n    def next(): String = {\\n        \\n    }\\n\\n    def hasNext(): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your CombinationIterator object will be instantiated and called as such:\\n * val obj = new CombinationIterator(characters, combinationLength)\\n * val param_1 = obj.next()\\n * val param_2 = obj.hasNext()\\n */'}\n",
            "Done!45\n",
            "mean-of-array-after-removing-some-elements 1210\n",
            "{'id': 1210, 'name': 'mean-of-array-after-removing-some-elements', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/mean-of-array-after-removing-some-elements/', 'task_description': 'Given an integer array `arr`, return _the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements._ Answers within `10-5` of the **actual answer** will be considered accepted. **Example 1:** ``` **Input:** arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3] **Output:** 2.00000 **Explanation:** After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2. ``` **Example 2:** ``` **Input:** arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0] **Output:** 4.00000 ``` **Example 3:** ``` **Input:** arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4] **Output:** 4.77778 ``` **Constraints:** `20 <= arr.length <= 1000` `arr.length` **is a multiple** of `20`. `0 <= arr[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]', 'output': '2.00000 Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.'}, {'label': 'Example 2', 'input': 'arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]', 'output': '4.00000'}, {'label': 'Example 3', 'input': 'arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]', 'output': '4.77778'}], 'elixir_template': 'defmodule Solution do\\n  @spec trim_mean(arr :: [integer]) :: float\\n  def trim_mean(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec trim_mean(Arr :: [integer()]) -> float().\\ntrim_mean(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def trimMean(arr: Array[Int]): Double = {\\n        \\n    }\\n}'}\n",
            "Done!46\n",
            "maximum-nesting-depth-of-two-valid-parentheses-strings 1208\n",
            "{'id': 1208, 'name': 'maximum-nesting-depth-of-two-valid-parentheses-strings', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/', 'task_description': 'A string is a _valid parentheses string_ (denoted VPS) if and only if it consists of `\"(\"` and `\")\"` characters only, and: It is the empty string, or It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS\\'s, or It can be written as `(A)`, where `A` is a VPS. We can similarly define the _nesting depth_ `depth(S)` of any VPS `S` as follows: `depth(\"\") = 0` `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS\\'s `depth(\"(\" + A + \")\") = 1 + depth(A)`, where `A` is a VPS. For example, `\"\"`, `\"()()\"`, and `\"()(()())\"` are VPS\\'s (with nesting depths 0, 1, and 2), and `\")(\"` and `\"(()\"` are not VPS\\'s. Given a VPS seq, split it into two disjoint subsequences `A` and `B`, such that `A` and `B` are VPS\\'s (and `A.length + B.length = seq.length`). Now choose **any** such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value. Return an `answer` array (of length `seq.length`) that encodes such a choice of `A` and `B`: `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`. Note that even though multiple answers may exist, you may return any of them. **Example 1:** ``` **Input:** seq = \"(()())\" **Output:** [0,1,1,1,1,0] ``` **Example 2:** ``` **Input:** seq = \"()(())()\" **Output:** [0,0,0,1,1,0,1,1] ``` **Constraints:** `1 <= seq.size <= 10000`', 'test_case': [{'label': 'Example 1', 'input': 'seq = \"(()())\"', 'output': '[0,1,1,1,1,0]'}, {'label': 'Example 2', 'input': 'seq = \"()(())()\"', 'output': '[0,0,0,1,1,0,1,1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_depth_after_split(seq :: String.t) :: [integer]\\n  def max_depth_after_split(seq) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_depth_after_split(Seq :: unicode:unicode_binary()) -> [integer()].\\nmax_depth_after_split(Seq) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxDepthAfterSplit(seq: String): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!47\n",
            "delete-nodes-and-return-forest 1207\n",
            "{'id': 1207, 'name': 'delete-nodes-and-return-forest', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/delete-nodes-and-return-forest/', 'task_description': 'Given the `root` of a binary tree, each node in the tree has a distinct value. After deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees). Return the roots of the trees in the remaining forest. You may return the result in any order. **Example 1:** ``` **Input:** root = [1,2,3,4,5,6,7], to_delete = [3,5] **Output:** [[1,2,null,4],[6],[7]] ``` **Example 2:** ``` **Input:** root = [1,2,4,null,3], to_delete = [3] **Output:** [[1,2,4]] ``` **Constraints:** The number of nodes in the given tree is at most `1000`. Each node has a distinct value between `1` and `1000`. `to_delete.length <= 1000` `to_delete` contains distinct values between `1` and `1000`.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,5,6,7], to_delete = [3,5]', 'output': '[[1,2,null,4],[6],[7]]'}, {'label': 'Example 2', 'input': 'root = [1,2,4,null,3], to_delete = [3]', 'output': '[[1,2,4]] Constraints: The number of nodes in the given tree is at most 1000 . Each node has a distinct value between 1 and 1000 . to_delete.length <= 1000 to_delete contains distinct values between 1 and 1000 .'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def delNodes(root: TreeNode, to_delete: Array[Int]): List[TreeNode] = {\\n        \\n    }\\n}'}\n",
            "Done!48\n",
            "corporate-flight-bookings 1206\n",
            "{'id': 1206, 'name': 'corporate-flight-bookings', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/corporate-flight-bookings/', 'task_description': 'There are `n` flights that are labeled from `1` to `n`. You are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (**inclusive**) with `seatsi` seats reserved for **each flight** in the range. Return _an array _`answer`_ of length _`n`_, where _`answer[i]`_ is the total number of seats reserved for flight _`i`. **Example 1:** ``` **Input:** bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5 **Output:** [10,55,45,25,25] **Explanation:** Flight labels: 1 2 3 4 5 Booking 1 reserved: 10 10 Booking 2 reserved: 20 20 Booking 3 reserved: 25 25 25 25 Total seats: 10 55 45 25 25 Hence, answer = [10,55,45,25,25] ``` **Example 2:** ``` **Input:** bookings = [[1,2,10],[2,2,15]], n = 2 **Output:** [10,25] **Explanation:** Flight labels: 1 2 Booking 1 reserved: 10 10 Booking 2 reserved: 15 Total seats: 10 25 Hence, answer = [10,25] ``` **Constraints:** `1 <= n <= 2 * 104` `1 <= bookings.length <= 2 * 104` `bookings[i].length == 3` `1 <= firsti <= lasti <= n` `1 <= seatsi <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5', 'output': '[10,55,45,25,25] Explanation: Flight labels:        1   2   3   4   5\\nBooking 1 reserved:  10  10\\nBooking 2 reserved:      20  20\\nBooking 3 reserved:      25  25  25  25\\nTotal seats:         10  55  45  25  25\\nHence, answer = [10,55,45,25,25]'}, {'label': 'Example 2', 'input': 'bookings = [[1,2,10],[2,2,15]], n = 2', 'output': '[10,25] Explanation: Flight labels:        1   2\\nBooking 1 reserved:  10  10\\nBooking 2 reserved:      15\\nTotal seats:         10  25\\nHence, answer = [10,25]'}], 'elixir_template': 'defmodule Solution do\\n  @spec corp_flight_bookings(bookings :: [[integer]], n :: integer) :: [integer]\\n  def corp_flight_bookings(bookings, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec corp_flight_bookings(Bookings :: [[integer()]], N :: integer()) -> [integer()].\\ncorp_flight_bookings(Bookings, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def corpFlightBookings(bookings: Array[Array[Int]], n: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!49\n",
            "defanging-an-ip-address 1205\n",
            "{'id': 1205, 'name': 'defanging-an-ip-address', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/defanging-an-ip-address/', 'task_description': 'Given a valid (IPv4) IP `address`, return a defanged version of that IP address. A _defanged IP address_ replaces every period `\".\"` with `\"[.]\"`. **Example 1:** ``` **Input:** address = \"1.1.1.1\" **Output:** \"1[.]1[.]1[.]1\" ``` **Example 2:** ``` **Input:** address = \"255.100.50.0\" **Output:** \"255[.]100[.]50[.]0\" ``` **Constraints:** The given `address` is a valid IPv4 address.', 'test_case': [{'label': 'Example 1', 'input': 'address = \"1.1.1.1\"', 'output': '\"1[.]1[.]1[.]1\"'}, {'label': 'Example 2', 'input': 'address = \"255.100.50.0\"', 'output': '\"255[.]100[.]50[.]0\" Constraints: The given address is a valid IPv4 address.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def defangIPaddr(address: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!50\n",
            "parsing-a-boolean-expression 1197\n",
            "{'id': 1197, 'name': 'parsing-a-boolean-expression', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/parsing-a-boolean-expression/', 'task_description': 'A **boolean expression** is an expression that evaluates to either `true` or `false`. It can be in one of the following shapes: `\\'t\\'` that evaluates to `true`. `\\'f\\'` that evaluates to `false`. `\\'!(subExpr)\\'` that evaluates to **the logical NOT** of the inner expression `subExpr`. `\\'&(subExpr1, subExpr2, ..., subExprn)\\'` that evaluates to **the logical AND** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`. `\\'|(subExpr1, subExpr2, ..., subExprn)\\'` that evaluates to **the logical OR** of the inner expressions `subExpr1, subExpr2, ..., subExprn` where `n >= 1`. Given a string `expression` that represents a **boolean expression**, return _the evaluation of that expression_. It is **guaranteed** that the given expression is valid and follows the given rules. **Example 1:** ``` **Input:** expression = \"&(|(f))\" **Output:** false **Explanation:** First, evaluate |(f) --> f. The expression is now \"&(f)\". Then, evaluate &(f) --> f. The expression is now \"f\". Finally, return false. ``` **Example 2:** ``` **Input:** expression = \"|(f,f,f,t)\" **Output:** true **Explanation:** The evaluation of (false OR false OR false OR true) is true. ``` **Example 3:** ``` **Input:** expression = \"!(&(f,t))\" **Output:** true **Explanation:** First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now \"!(f)\". Then, evaluate !(f) --> NOT false --> true. We return true. ``` **Constraints:** `1 <= expression.length <= 2 * 104` expression[i] is one following characters: `\\'(\\'`, `\\')\\'`, `\\'&\\'`, `\\'|\\'`, `\\'!\\'`, `\\'t\\'`, `\\'f\\'`, and `\\',\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'expression = \"&(|(f))\"', 'output': 'false Explanation: First, evaluate |(f) --> f. The expression is now \"&(f)\".\\nThen, evaluate &(f) --> f. The expression is now \"f\".\\nFinally, return false.'}, {'label': 'Example 2', 'input': 'expression = \"|(f,f,f,t)\"', 'output': 'true Explanation: The evaluation of (false OR false OR false OR true) is true.'}, {'label': 'Example 3', 'input': 'expression = \"!(&(f,t))\"', 'output': 'true Explanation: First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now \"!(f)\".\\nThen, evaluate !(f) --> NOT false --> true. We return true.'}], 'elixir_template': 'defmodule Solution do\\n  @spec parse_bool_expr(expression :: String.t) :: boolean\\n  def parse_bool_expr(expression) do\\n    \\n  end\\nend', 'erlang_template': '-spec parse_bool_expr(Expression :: unicode:unicode_binary()) -> boolean().\\nparse_bool_expr(Expression) ->\\n  .', 'scala_template': 'object Solution {\\n    def parseBoolExpr(expression: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!51\n",
            "filling-bookcase-shelves 1196\n",
            "{'id': 1196, 'name': 'filling-bookcase-shelves', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/filling-bookcase-shelves/', 'task_description': 'You are given an array `books` where `books[i] = [thicknessi, heighti]` indicates the thickness and height of the `ith` book. You are also given an integer `shelfWidth`. We want to place these books in order onto bookcase shelves that have a total width `shelfWidth`. We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to `shelfWidth`, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place. Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books. For example, if we have an ordered list of `5` books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf. Return _the minimum possible height that the total bookshelf can be after placing shelves in this manner_. **Example 1:** ``` **Input:** books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4 **Output:** 6 **Explanation:** The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6. Notice that book number 2 does not have to be on the first shelf. ``` **Example 2:** ``` **Input:** books = [[1,3],[2,4],[3,2]], shelfWidth = 6 **Output:** 4 ``` **Constraints:** `1 <= books.length <= 1000` `1 <= thicknessi <= shelfWidth <= 1000` `1 <= heighti <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4', 'output': '6 Explanation: The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.\\nNotice that book number 2 does not have to be on the first shelf.'}, {'label': 'Example 2', 'input': 'books = [[1,3],[2,4],[3,2]], shelfWidth = 6', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_height_shelves(books :: [[integer]], shelf_width :: integer) :: integer\\n  def min_height_shelves(books, shelf_width) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_height_shelves(Books :: [[integer()]], ShelfWidth :: integer()) -> integer().\\nmin_height_shelves(Books, ShelfWidth) ->\\n  .', 'scala_template': 'object Solution {\\n    def minHeightShelves(books: Array[Array[Int]], shelfWidth: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!52\n",
            "distribute-candies-to-people 1195\n",
            "{'id': 1195, 'name': 'distribute-candies-to-people', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/distribute-candies-to-people/', 'task_description': 'We distribute some number of `candies`, to a row of **`n = num_people`** people in the following way: We then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n` candies to the last person. Then, we go back to the start of the row, giving `n + 1` candies to the first person, `n + 2` candies to the second person, and so on until we give `2 * n` candies to the last person. This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies. The last person will receive all of our remaining candies (not necessarily one more than the previous gift). Return an array (of length `num_people` and sum `candies`) that represents the final distribution of candies. **Example 1:** ``` **Input:** candies = 7, num_people = 4 **Output:** [1,2,3,1] **Explanation:** On the first turn, ans[0] += 1, and the array is [1,0,0,0]. On the second turn, ans[1] += 2, and the array is [1,2,0,0]. On the third turn, ans[2] += 3, and the array is [1,2,3,0]. On the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1]. ``` **Example 2:** ``` **Input:** candies = 10, num_people = 3 **Output:** [5,2,3] **Explanation: ** On the first turn, ans[0] += 1, and the array is [1,0,0]. On the second turn, ans[1] += 2, and the array is [1,2,0]. On the third turn, ans[2] += 3, and the array is [1,2,3]. On the fourth turn, ans[0] += 4, and the final array is [5,2,3]. ``` **Constraints:** 1 <= candies <= 10^9 1 <= num_people <= 1000', 'test_case': [{'label': 'Example 1', 'input': 'candies = 7, num_people = 4', 'output': '[1,2,3,1] Explanation: On the first turn, ans[0] += 1, and the array is [1,0,0,0].\\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].'}, {'label': 'Example 2', 'input': 'candies = 10, num_people = 3', 'output': '[5,2,3] Explanation: On the first turn, ans[0] += 1, and the array is [1,0,0].\\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3].'}], 'elixir_template': 'defmodule Solution do\\n  @spec distribute_candies(candies :: integer, num_people :: integer) :: [integer]\\n  def distribute_candies(candies, num_people) do\\n    \\n  end\\nend', 'erlang_template': '-spec distribute_candies(Candies :: integer(), Num_people :: integer()) -> [integer()].\\ndistribute_candies(Candies, Num_people) ->\\n  .', 'scala_template': 'object Solution {\\n    def distributeCandies(candies: Int, num_people: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!53\n",
            "path-in-zigzag-labelled-binary-tree 1194\n",
            "{'id': 1194, 'name': 'path-in-zigzag-labelled-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree/', 'task_description': 'In an infinite binary tree where every node has two children, the nodes are labelled in row order. In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left. Given the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`. **Example 1:** ``` **Input:** label = 14 **Output:** [1,3,4,14] ``` **Example 2:** ``` **Input:** label = 26 **Output:** [1,2,6,10,26] ``` **Constraints:** `1 <= label <= 10^6`', 'test_case': [{'label': 'Example 1', 'input': 'label = 14', 'output': '[1,3,4,14]'}, {'label': 'Example 2', 'input': 'label = 26', 'output': '[1,2,6,10,26]'}], 'elixir_template': 'defmodule Solution do\\n  @spec path_in_zig_zag_tree(label :: integer) :: [integer]\\n  def path_in_zig_zag_tree(label) do\\n    \\n  end\\nend', 'erlang_template': '-spec path_in_zig_zag_tree(Label :: integer()) -> [integer()].\\npath_in_zig_zag_tree(Label) ->\\n  .', 'scala_template': 'object Solution {\\n    def pathInZigZagTree(label: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!54\n",
            "brace-expansion-ii 1188\n",
            "{'id': 1188, 'name': 'brace-expansion-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/brace-expansion-ii/', 'task_description': 'Under the grammar given below, strings can represent a set of lowercase words. Let `R(expr)` denote the set of words the expression represents. The grammar can best be understood through simple examples: Single letters represent a singleton set containing that word. `R(\"a\") = {\"a\"}` `R(\"w\") = {\"w\"}` When we take a comma-delimited list of two or more expressions, we take the union of possibilities. `R(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}` `R(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"}` (notice the final set only contains each word at most once) When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression. `R(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}` `R(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}` Formally, the three rules for our grammar: For every lowercase letter `x`, we have `R(x) = {x}`. For expressions `e1, e2, ... , ek` with `k >= 2`, we have `R({e1, e2, ...}) = R(e1) ∪ R(e2) ∪ ...` For expressions `e1` and `e2`, we have `R(e1 + e2) = {a + b for (a, b) in R(e1) × R(e2)}`, where `+` denotes concatenation, and `×` denotes the cartesian product. Given an expression representing a set of words under the given grammar, return _the sorted list of words that the expression represents_. **Example 1:** ``` **Input:** expression = \"{a,b}{c,{d,e}}\" **Output:** [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"] ``` **Example 2:** ``` **Input:** expression = \"{{a,z},a{b,c},{ab,z}}\" **Output:** [\"a\",\"ab\",\"ac\",\"z\"] **Explanation:** Each distinct word is written only once in the final answer. ``` **Constraints:** `1 <= expression.length <= 60` `expression[i]` consists of `\\'{\\'`, `\\'}\\'`, `\\',\\'`or lowercase English letters. The given `expression` represents a set of words based on the grammar given in the description.', 'test_case': [{'label': 'Example 1', 'input': 'expression = \"{a,b}{c,{d,e}}\"', 'output': '[\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]'}, {'label': 'Example 2', 'input': 'expression = \"{{a,z},a{b,c},{ab,z}}\"', 'output': '[\"a\",\"ab\",\"ac\",\"z\"] Explanation: Each distinct word is written only once in the final answer.'}], 'elixir_template': 'defmodule Solution do\\n  @spec brace_expansion_ii(expression :: String.t) :: [String.t]\\n  def brace_expansion_ii(expression) do\\n    \\n  end\\nend', 'erlang_template': '-spec brace_expansion_ii(Expression :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nbrace_expansion_ii(Expression) ->\\n  .', 'scala_template': 'object Solution {\\n    def braceExpansionII(expression: String): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!55\n",
            "find-in-mountain-array 1185\n",
            "{'id': 1185, 'name': 'find-in-mountain-array', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/find-in-mountain-array/', 'task_description': '_(This problem is an **interactive problem**.)_ You may recall that an array `arr` is a **mountain array** if and only if: `arr.length >= 3` There exists some `i` with `0 < i < arr.length - 1` such that: `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` Given a mountain array `mountainArr`, return the **minimum** `index` such that `mountainArr.get(index) == target`. If such an `index` does not exist, return `-1`. **You cannot access the mountain array directly.** You may only access the array using a `MountainArray` interface: `MountainArray.get(k)` returns the element of the array at index `k` (0-indexed). `MountainArray.length()` returns the length of the array. Submissions making more than `100` calls to `MountainArray.get` will be judged _Wrong Answer_. Also, any solutions that attempt to circumvent the judge will result in disqualification. **Example 1:** ``` **Input:** mountainArr = [1,2,3,4,5,3,1], target = 3 **Output:** 2 **Explanation:** 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2. ``` **Example 2:** ``` **Input:** mountainArr = [0,1,2,4,2,1], target = 3 **Output:** -1 **Explanation:** 3 does not exist in `the array,` so we return -1. ``` **Constraints:** `3 <= mountainArr.length() <= 104` `0 <= target <= 109` `0 <= mountainArr.get(index) <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'mountainArr = [1,2,3,4,5,3,1], target = 3', 'output': '2 Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.'}, {'label': 'Example 2', 'input': 'mountainArr = [0,1,2,4,2,1], target = 3', 'output': '-1 Explanation: 3 does not exist in the array, so we return -1.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': \"/**\\n * // This is MountainArray's API interface.\\n * // You should not implement it, or speculate about its implementation\\n * class MountainArray {\\n *     def get(index: Int): Int = {}\\n *     def length(): Int = {}\\n * }\\n */\\n\\nobject Solution {\\n    def findInMountainArray(value: Int, mountainArr: MountainArray): Int = {\\n        \\n\\t}\\n}\"}\n",
            "Done!56\n",
            "car-pooling 1184\n",
            "{'id': 1184, 'name': 'car-pooling', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/car-pooling/', 'task_description': \"There is a car with `capacity` empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west). You are given the integer `capacity` and an array `trips` where `trips[i] = [numPassengersi, fromi, toi]` indicates that the `ith` trip has `numPassengersi` passengers and the locations to pick them up and drop them off are `fromi` and `toi` respectively. The locations are given as the number of kilometers due east from the car's initial location. Return `true`_ if it is possible to pick up and drop off all passengers for all the given trips, or _`false`_ otherwise_. **Example 1:** ``` **Input:** trips = [[2,1,5],[3,3,7]], capacity = 4 **Output:** false ``` **Example 2:** ``` **Input:** trips = [[2,1,5],[3,3,7]], capacity = 5 **Output:** true ``` **Constraints:** `1 <= trips.length <= 1000` `trips[i].length == 3` `1 <= numPassengersi <= 100` `0 <= fromi < toi <= 1000` `1 <= capacity <= 105`\", 'test_case': [{'label': 'Example 1', 'input': 'trips = [[2,1,5],[3,3,7]], capacity = 4', 'output': 'false'}, {'label': 'Example 2', 'input': 'trips = [[2,1,5],[3,3,7]], capacity = 5', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec car_pooling(trips :: [[integer]], capacity :: integer) :: boolean\\n  def car_pooling(trips, capacity) do\\n    \\n  end\\nend', 'erlang_template': '-spec car_pooling(Trips :: [[integer()]], Capacity :: integer()) -> boolean().\\ncar_pooling(Trips, Capacity) ->\\n  .', 'scala_template': 'object Solution {\\n    def carPooling(trips: Array[Array[Int]], capacity: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!57\n",
            "statistics-from-a-large-sample 1183\n",
            "{'id': 1183, 'name': 'statistics-from-a-large-sample', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/statistics-from-a-large-sample/', 'task_description': 'You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count` where `count[k]` is the **number of times** that `k` appears in the sample. Calculate the following statistics: `minimum`: The minimum element in the sample. `maximum`: The maximum element in the sample. `mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements. `median`: If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted. If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted. `mode`: The number that appears the most in the sample. It is guaranteed to be **unique**. Return _the statistics of the sample as an array of floating-point numbers _`[minimum, maximum, mean, median, mode]`_. Answers within _`10-5`_ of the actual answer will be accepted._ **Example 1:** ``` **Input:** count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] **Output:** [1.00000,3.00000,2.37500,2.50000,3.00000] **Explanation:** The sample represented by count is [1,2,2,2,3,3,3,3]. The minimum and maximum are 1 and 3 respectively. The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375. Since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5. The mode is 3 as it appears the most in the sample. ``` **Example 2:** ``` **Input:** count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] **Output:** [1.00000,4.00000,2.18182,2.00000,1.00000] **Explanation:** The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4]. The minimum and maximum are 1 and 4 respectively. The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182). Since the size of the sample is odd, the median is the middle element 2. The mode is 1 as it appears the most in the sample. ``` **Constraints:** `count.length == 256` `0 <= count[i] <= 109` `1 <= sum(count) <= 109` The mode of the sample that `count` represents is **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]', 'output': '[1.00000,3.00000,2.37500,2.50000,3.00000] Explanation: The sample represented by count is [1,2,2,2,3,3,3,3].\\nThe minimum and maximum are 1 and 3 respectively.\\nThe mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\\nSince the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\\nThe mode is 3 as it appears the most in the sample.'}, {'label': 'Example 2', 'input': 'count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]', 'output': '[1.00000,4.00000,2.18182,2.00000,1.00000] Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].\\nThe minimum and maximum are 1 and 4 respectively.\\nThe mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\\nSince the size of the sample is odd, the median is the middle element 2.\\nThe mode is 1 as it appears the most in the sample. Constraints: count.length == 256 0 <= count[i] <= 10 9 1 <= sum(count) <= 10 9 The mode of the sample that count represents is unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec sample_stats(count :: [integer]) :: [float]\\n  def sample_stats(count) do\\n    \\n  end\\nend', 'erlang_template': '-spec sample_stats(Count :: [integer()]) -> [float()].\\nsample_stats(Count) ->\\n  .', 'scala_template': 'object Solution {\\n    def sampleStats(count: Array[Int]): Array[Double] = {\\n        \\n    }\\n}'}\n",
            "Done!58\n",
            "shortest-path-in-binary-matrix 1171\n",
            "{'id': 1171, 'name': 'shortest-path-in-binary-matrix', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/shortest-path-in-binary-matrix/', 'task_description': 'Given an `n x n` binary matrix `grid`, return _the length of the shortest **clear path** in the matrix_. If there is no clear path, return `-1`. A **clear path** in a binary matrix is a path from the **top-left** cell (i.e., `(0, 0)`) to the **bottom-right** cell (i.e., `(n - 1, n - 1)`) such that: All the visited cells of the path are `0`. All the adjacent cells of the path are **8-directionally** connected (i.e., they are different and they share an edge or a corner). The **length of a clear path** is the number of visited cells of this path. **Example 1:** ``` **Input:** grid = [[0,1],[1,0]] **Output:** 2 ``` **Example 2:** ``` **Input:** grid = [[0,0,0],[1,1,0],[1,1,0]] **Output:** 4 ``` **Example 3:** ``` **Input:** grid = [[1,0,0],[1,1,0],[1,1,0]] **Output:** -1 ``` **Constraints:** `n == grid.length` `n == grid[i].length` `1 <= n <= 100` `grid[i][j] is 0 or 1`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,1],[1,0]]', 'output': '2'}, {'label': 'Example 2', 'input': 'grid = [[0,0,0],[1,1,0],[1,1,0]]', 'output': '4'}, {'label': 'Example 3', 'input': 'grid = [[1,0,0],[1,1,0],[1,1,0]]', 'output': '-1 Constraints: n == grid.length n == grid[i].length 1 <= n <= 100 grid[i][j] is 0 or 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_path_binary_matrix(grid :: [[integer]]) :: integer\\n  def shortest_path_binary_matrix(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_path_binary_matrix(Grid :: [[integer()]]) -> integer().\\nshortest_path_binary_matrix(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestPathBinaryMatrix(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!59\n",
            "shortest-common-supersequence 1170\n",
            "{'id': 1170, 'name': 'shortest-common-supersequence', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/shortest-common-supersequence/', 'task_description': 'Given two strings `str1` and `str2`, return _the shortest string that has both _`str1`_ and _`str2`_ as **subsequences**_. If there are multiple valid strings, return **any** of them. A string `s` is a **subsequence** of string `t` if deleting some number of characters from `t` (possibly `0`) results in the string `s`. **Example 1:** ``` **Input:** str1 = \"abac\", str2 = \"cab\" **Output:** \"cabac\" **Explanation:** str1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\". str2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\". The answer provided is the shortest such string that satisfies these properties. ``` **Example 2:** ``` **Input:** str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\" **Output:** \"aaaaaaaa\" ``` **Constraints:** `1 <= str1.length, str2.length <= 1000` `str1` and `str2` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'str1 = \"abac\", str2 = \"cab\"', 'output': '\"cabac\" Explanation: str1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\\nThe answer provided is the shortest such string that satisfies these properties.'}, {'label': 'Example 2', 'input': 'str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"', 'output': '\"aaaaaaaa\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_common_supersequence(str1 :: String.t, str2 :: String.t) :: String.t\\n  def shortest_common_supersequence(str1, str2) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_common_supersequence(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nshortest_common_supersequence(Str1, Str2) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestCommonSupersequence(str1: String, str2: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!60\n",
            "largest-values-from-labels 1169\n",
            "{'id': 1169, 'name': 'largest-values-from-labels', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/largest-values-from-labels/', 'task_description': \"You are given `n` item's value and label as two integer arrays `values` and `labels`. You are also given two integers `numWanted` and `useLimit`. Your task is to find a subset of items with the **maximum sum** of their values such that: The number of items is **at most** `numWanted`. The number of items with the same label is **at most** `useLimit`. Return the maximum sum. **Example 1:** **Input:** values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1 **Output:** 9 **Explanation:** The subset chosen is the first, third, and fifth items with the sum of values 5 + 3 + 1. **Example 2:** **Input:** values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2 **Output:** 12 **Explanation:** The subset chosen is the first, second, and third items with the sum of values 5 + 4 + 3. **Example 3:** **Input:** values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1 **Output:** 16 **Explanation:** The subset chosen is the first and fourth items with the sum of values 9 + 7. **Constraints:** `n == values.length == labels.length` `1 <= n <= 2 * 104` `0 <= values[i], labels[i] <= 2 * 104` `1 <= numWanted, useLimit <= n`\", 'test_case': [{'label': 'Example 1', 'input': 'values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1', 'output': '9 Explanation: The subset chosen is the first, third, and fifth items with the sum of values 5 + 3 + 1.'}, {'label': 'Example 2', 'input': 'values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2', 'output': '12 Explanation: The subset chosen is the first, second, and third items with the sum of values 5 + 4 + 3.'}, {'label': 'Example 3', 'input': 'values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1', 'output': '16 Explanation: The subset chosen is the first and fourth items with the sum of values 9 + 7. Constraints: n == values.length == labels.length 1 <= n <= 2 * 10 4 0 <= values[i], labels[i] <= 2 * 10 4 1 <= numWanted, useLimit <= n'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_vals_from_labels(values :: [integer], labels :: [integer], num_wanted :: integer, use_limit :: integer) :: integer\\n  def largest_vals_from_labels(values, labels, num_wanted, use_limit) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_vals_from_labels(Values :: [integer()], Labels :: [integer()], NumWanted :: integer(), UseLimit :: integer()) -> integer().\\nlargest_vals_from_labels(Values, Labels, NumWanted, UseLimit) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestValsFromLabels(values: Array[Int], labels: Array[Int], numWanted: Int, useLimit: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!61\n",
            "duplicate-zeros 1168\n",
            "{'id': 1168, 'name': 'duplicate-zeros', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/duplicate-zeros/', 'task_description': 'Given a fixed-length integer array `arr`, duplicate each occurrence of zero, shifting the remaining elements to the right. **Note** that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything. **Example 1:** ``` **Input:** arr = [1,0,2,3,0,4,5,0] **Output:** [1,0,0,2,3,0,0,4] **Explanation:** After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4] ``` **Example 2:** ``` **Input:** arr = [1,2,3] **Output:** [1,2,3] **Explanation:** After calling your function, the input array is modified to: [1,2,3] ``` **Constraints:** `1 <= arr.length <= 104` `0 <= arr[i] <= 9`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,0,2,3,0,4,5,0]', 'output': '[1,0,0,2,3,0,0,4] Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]'}, {'label': 'Example 2', 'input': 'arr = [1,2,3]', 'output': '[1,2,3] Explanation: After calling your function, the input array is modified to: [1,2,3]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def duplicateZeros(arr: Array[Int]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!62\n",
            "letter-tile-possibilities 1160\n",
            "{'id': 1160, 'name': 'letter-tile-possibilities', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/letter-tile-possibilities/', 'task_description': 'You have `n` `tiles`, where each tile has one letter `tiles[i]` printed on it. Return _the number of possible non-empty sequences of letters_ you can make using the letters printed on those `tiles`. **Example 1:** ``` **Input:** tiles = \"AAB\" **Output:** 8 **Explanation: **The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\". ``` **Example 2:** ``` **Input:** tiles = \"AAABBC\" **Output:** 188 ``` **Example 3:** ``` **Input:** tiles = \"V\" **Output:** 1 ``` **Constraints:** `1 <= tiles.length <= 7` `tiles` consists of uppercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'tiles = \"AAB\"', 'output': '8 Explanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".'}, {'label': 'Example 2', 'input': 'tiles = \"AAABBC\"', 'output': '188'}, {'label': 'Example 3', 'input': 'tiles = \"V\"', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_tile_possibilities(tiles :: String.t) :: integer\\n  def num_tile_possibilities(tiles) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_tile_possibilities(Tiles :: unicode:unicode_binary()) -> integer().\\nnum_tile_possibilities(Tiles) ->\\n  .', 'scala_template': 'object Solution {\\n    def numTilePossibilities(tiles: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!63\n",
            "smallest-subsequence-of-distinct-characters 1159\n",
            "{'id': 1159, 'name': 'smallest-subsequence-of-distinct-characters', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/', 'task_description': 'Given a string `s`, return _the __lexicographically smallest_ _subsequence__ of_ `s` _that contains all the distinct characters of_ `s` _exactly once_. **Example 1:** ``` **Input:** s = \"bcabc\" **Output:** \"abc\" ``` **Example 2:** ``` **Input:** s = \"cbacdcbc\" **Output:** \"acdb\" ``` **Constraints:** `1 <= s.length <= 1000` `s` consists of lowercase English letters. **Note:** This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/', 'test_case': [{'label': 'Example 1', 'input': 's = \"bcabc\"', 'output': '\"abc\"'}, {'label': 'Example 2', 'input': 's = \"cbacdcbc\"', 'output': '\"acdb\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_subsequence(s :: String.t) :: String.t\\n  def smallest_subsequence(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_subsequence(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nsmallest_subsequence(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestSubsequence(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!64\n",
            "insufficient-nodes-in-root-to-leaf-paths 1157\n",
            "{'id': 1157, 'name': 'insufficient-nodes-in-root-to-leaf-paths', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths/', 'task_description': 'Given the `root` of a binary tree and an integer `limit`, delete all **insufficient nodes** in the tree simultaneously, and return _the root of the resulting binary tree_. A node is **insufficient** if every root to **leaf** path intersecting this node has a sum strictly less than `limit`. A **leaf** is a node with no children. **Example 1:** ``` **Input:** root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1 **Output:** [1,2,3,4,null,null,7,8,9,null,14] ``` **Example 2:** ``` **Input:** root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22 **Output:** [5,4,8,11,null,17,4,7,null,null,null,5] ``` **Example 3:** ``` **Input:** root = [1,2,-3,-5,null,4,null], limit = -1 **Output:** [1,null,-3,4] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 5000]`. `-105 <= Node.val <= 105` `-109 <= limit <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1', 'output': '[1,2,3,4,null,null,7,8,9,null,14]'}, {'label': 'Example 2', 'input': 'root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22', 'output': '[5,4,8,11,null,17,4,7,null,null,null,5]'}, {'label': 'Example 3', 'input': 'root = [1,2,-3,-5,null,4,null], limit = -1', 'output': '[1,null,-3,4] Constraints: The number of nodes in the tree is in the range [1, 5000] . -10 5 <= Node.val <= 10 5 -10 9 <= limit <= 10 9'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sufficient_subset(root :: TreeNode.t | nil, limit :: integer) :: TreeNode.t | nil\\n  def sufficient_subset(root, limit) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec sufficient_subset(Root :: #tree_node{} | null, Limit :: integer()) -> #tree_node{} | null.\\nsufficient_subset(Root, Limit) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def sufficientSubset(root: TreeNode, limit: Int): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!65\n",
            "occurrences-after-bigram 1156\n",
            "{'id': 1156, 'name': 'occurrences-after-bigram', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/occurrences-after-bigram/', 'task_description': 'Given two strings `first` and `second`, consider occurrences in some text of the form `\"first second third\"`, where `second` comes immediately after `first`, and `third` comes immediately after `second`. Return _an array of all the words_ `third` _for each occurrence of_ `\"first second third\"`. **Example 1:** ``` **Input:** text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\" **Output:** [\"girl\",\"student\"] ``` **Example 2:** ``` **Input:** text = \"we will we will rock you\", first = \"we\", second = \"will\" **Output:** [\"we\",\"rock\"] ``` **Constraints:** `1 <= text.length <= 1000` `text` consists of lowercase English letters and spaces. All the words in `text` are separated by **a single space**. `1 <= first.length, second.length <= 10` `first` and `second` consist of lowercase English letters. `text` will not have any leading or trailing spaces.', 'test_case': [{'label': 'Example 1', 'input': 'text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"', 'output': '[\"girl\",\"student\"]'}, {'label': 'Example 2', 'input': 'text = \"we will we will rock you\", first = \"we\", second = \"will\"', 'output': '[\"we\",\"rock\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_ocurrences(text :: String.t, first :: String.t, second :: String.t) :: [String.t]\\n  def find_ocurrences(text, first, second) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_ocurrences(Text :: unicode:unicode_binary(), First :: unicode:unicode_binary(), Second :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nfind_ocurrences(Text, First, Second) ->\\n  .', 'scala_template': 'object Solution {\\n    def findOcurrences(text: String, first: String, second: String): Array[String] = {\\n        \\n    }\\n}'}\n",
            "Done!66\n",
            "adding-two-negabinary-numbers 1148\n",
            "{'id': 1148, 'name': 'adding-two-negabinary-numbers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/adding-two-negabinary-numbers/', 'task_description': 'Given two numbers `arr1` and `arr2` in base **-2**, return the result of adding them together. Each number is given in _array format_: as an array of 0s and 1s, from most significant bit to least significant bit. For example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`. A number `arr` in _array, format_ is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`. Return the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros. **Example 1:** ``` **Input:** arr1 = [1,1,1,1,1], arr2 = [1,0,1] **Output:** [1,0,0,0,0] **Explanation: **arr1 represents 11, arr2 represents 5, the output represents 16. ``` **Example 2:** ``` **Input:** arr1 = [0], arr2 = [0] **Output:** [0] ``` **Example 3:** ``` **Input:** arr1 = [0], arr2 = [1] **Output:** [1] ``` **Constraints:** `1 <= arr1.length, arr2.length <= 1000` `arr1[i]` and `arr2[i]` are `0` or `1` `arr1` and `arr2` have no leading zeros', 'test_case': [{'label': 'Example 1', 'input': 'arr1 = [1,1,1,1,1], arr2 = [1,0,1]', 'output': '[1,0,0,0,0] Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.'}, {'label': 'Example 2', 'input': 'arr1 = [0], arr2 = [0]', 'output': '[0]'}, {'label': 'Example 3', 'input': 'arr1 = [0], arr2 = [1]', 'output': '[1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec add_negabinary(arr1 :: [integer], arr2 :: [integer]) :: [integer]\\n  def add_negabinary(arr1, arr2) do\\n    \\n  end\\nend', 'erlang_template': '-spec add_negabinary(Arr1 :: [integer()], Arr2 :: [integer()]) -> [integer()].\\nadd_negabinary(Arr1, Arr2) ->\\n  .', 'scala_template': 'object Solution {\\n    def addNegabinary(arr1: Array[Int], arr2: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!67\n",
            "flip-columns-for-maximum-number-of-equal-rows 1147\n",
            "{'id': 1147, 'name': 'flip-columns-for-maximum-number-of-equal-rows', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows/', 'task_description': 'You are given an `m x n` binary matrix `matrix`. You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa). Return _the maximum number of rows that have all values equal after some number of flips_. **Example 1:** ``` **Input:** matrix = [[0,1],[1,1]] **Output:** 1 **Explanation:** After flipping no values, 1 row has all values equal. ``` **Example 2:** ``` **Input:** matrix = [[0,1],[1,0]] **Output:** 2 **Explanation:** After flipping values in the first column, both rows have equal values. ``` **Example 3:** ``` **Input:** matrix = [[0,0,0],[0,0,1],[1,1,0]] **Output:** 2 **Explanation:** After flipping values in the first two columns, the last two rows have equal values. ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 300` `matrix[i][j]` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[0,1],[1,1]]', 'output': '1 Explanation: After flipping no values, 1 row has all values equal.'}, {'label': 'Example 2', 'input': 'matrix = [[0,1],[1,0]]', 'output': '2 Explanation: After flipping values in the first column, both rows have equal values.'}, {'label': 'Example 3', 'input': 'matrix = [[0,0,0],[0,0,1],[1,1,0]]', 'output': '2 Explanation: After flipping values in the first two columns, the last two rows have equal values. Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 300 matrix[i][j] is either 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_equal_rows_after_flips(matrix :: [[integer]]) :: integer\\n  def max_equal_rows_after_flips(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_equal_rows_after_flips(Matrix :: [[integer()]]) -> integer().\\nmax_equal_rows_after_flips(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxEqualRowsAfterFlips(matrix: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!68\n",
            "greatest-common-divisor-of-strings 1146\n",
            "{'id': 1146, 'name': 'greatest-common-divisor-of-strings', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/greatest-common-divisor-of-strings/', 'task_description': 'For two strings `s` and `t`, we say \"`t` divides `s`\" if and only if `s = t + t + t + ... + t + t` (i.e., `t` is concatenated with itself one or more times). Given two strings `str1` and `str2`, return _the largest string _`x`_ such that _`x`_ divides both _`str1`_ and _`str2`. **Example 1:** ``` **Input:** str1 = \"ABCABC\", str2 = \"ABC\" **Output:** \"ABC\" ``` **Example 2:** ``` **Input:** str1 = \"ABABAB\", str2 = \"ABAB\" **Output:** \"AB\" ``` **Example 3:** ``` **Input:** str1 = \"LEET\", str2 = \"CODE\" **Output:** \"\" ``` **Constraints:** `1 <= str1.length, str2.length <= 1000` `str1` and `str2` consist of English uppercase letters.', 'test_case': [{'label': 'Example 1', 'input': 'str1 = \"ABCABC\", str2 = \"ABC\"', 'output': '\"ABC\"'}, {'label': 'Example 2', 'input': 'str1 = \"ABABAB\", str2 = \"ABAB\"', 'output': '\"AB\"'}, {'label': 'Example 3', 'input': 'str1 = \"LEET\", str2 = \"CODE\"', 'output': '\"\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec gcd_of_strings(str1 :: String.t, str2 :: String.t) :: String.t\\n  def gcd_of_strings(str1, str2) do\\n    \\n  end\\nend', 'erlang_template': '-spec gcd_of_strings(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\\ngcd_of_strings(Str1, Str2) ->\\n  .', 'scala_template': 'object Solution {\\n    def gcdOfStrings(str1: String, str2: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!69\n",
            "number-of-submatrices-that-sum-to-target 1145\n",
            "{'id': 1145, 'name': 'number-of-submatrices-that-sum-to-target', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/', 'task_description': \"Given a `matrix` and a `target`, return the number of non-empty submatrices that sum to target. A submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`. Two submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate that is different: for example, if `x1 != x1'`. **Example 1:** ``` **Input:** matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0 **Output:** 4 **Explanation:** The four 1x1 submatrices that only contain 0. ``` **Example 2:** ``` **Input:** matrix = [[1,-1],[-1,1]], target = 0 **Output:** 5 **Explanation:** The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix. ``` **Example 3:** ``` **Input:** matrix = [[904]], target = 0 **Output:** 0 ``` **Constraints:** `1 <= matrix.length <= 100` `1 <= matrix[0].length <= 100` `-1000 <= matrix[i][j] <= 1000` `-10^8 <= target <= 10^8`\", 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0', 'output': '4 Explanation: The four 1x1 submatrices that only contain 0.'}, {'label': 'Example 2', 'input': 'matrix = [[1,-1],[-1,1]], target = 0', 'output': '5 Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.'}, {'label': 'Example 3', 'input': 'matrix = [[904]], target = 0', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_submatrix_sum_target(matrix :: [[integer]], target :: integer) :: integer\\n  def num_submatrix_sum_target(matrix, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_submatrix_sum_target(Matrix :: [[integer()]], Target :: integer()) -> integer().\\nnum_submatrix_sum_target(Matrix, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSubmatrixSumTarget(matrix: Array[Array[Int]], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!70\n",
            "distant-barcodes 1140\n",
            "{'id': 1140, 'name': 'distant-barcodes', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/distant-barcodes/', 'task_description': 'In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`. Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists. **Example 1:** ``` **Input:** barcodes = [1,1,1,2,2,2] **Output:** [2,1,2,1,2,1] ``` **Example 2:** ``` **Input:** barcodes = [1,1,1,1,2,2,3,3] **Output:** [1,3,1,3,1,2,1,2] ``` **Constraints:** `1 <= barcodes.length <= 10000` `1 <= barcodes[i] <= 10000`', 'test_case': [{'label': 'Example 1', 'input': 'barcodes = [1,1,1,2,2,2]', 'output': '[2,1,2,1,2,1]'}, {'label': 'Example 2', 'input': 'barcodes = [1,1,1,1,2,2,3,3]', 'output': '[1,3,1,3,1,2,1,2]'}], 'elixir_template': 'defmodule Solution do\\n  @spec rearrange_barcodes(barcodes :: [integer]) :: [integer]\\n  def rearrange_barcodes(barcodes) do\\n    \\n  end\\nend', 'erlang_template': '-spec rearrange_barcodes(Barcodes :: [integer()]) -> [integer()].\\nrearrange_barcodes(Barcodes) ->\\n  .', 'scala_template': 'object Solution {\\n    def rearrangeBarcodes(barcodes: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!71\n",
            "previous-permutation-with-one-swap 1139\n",
            "{'id': 1139, 'name': 'previous-permutation-with-one-swap', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/previous-permutation-with-one-swap/', 'task_description': 'Given an array of positive integers `arr` (not necessarily distinct), return _the __lexicographically__ largest permutation that is smaller than_ `arr`, that can be **made with exactly one swap**. If it cannot be done, then return the same array. **Note** that a _swap_ exchanges the positions of two numbers `arr[i]` and `arr[j]` **Example 1:** ``` **Input:** arr = [3,2,1] **Output:** [3,1,2] **Explanation:** Swapping 2 and 1. ``` **Example 2:** ``` **Input:** arr = [1,1,5] **Output:** [1,1,5] **Explanation:** This is already the smallest permutation. ``` **Example 3:** ``` **Input:** arr = [1,9,4,6,7] **Output:** [1,7,4,6,9] **Explanation:** Swapping 9 and 7. ``` **Constraints:** `1 <= arr.length <= 104` `1 <= arr[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [3,2,1]', 'output': '[3,1,2] Explanation: Swapping 2 and 1.'}, {'label': 'Example 2', 'input': 'arr = [1,1,5]', 'output': '[1,1,5] Explanation: This is already the smallest permutation.'}, {'label': 'Example 3', 'input': 'arr = [1,9,4,6,7]', 'output': '[1,7,4,6,9] Explanation: Swapping 9 and 7.'}], 'elixir_template': 'defmodule Solution do\\n  @spec prev_perm_opt1(arr :: [integer]) :: [integer]\\n  def prev_perm_opt1(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec prev_perm_opt1(Arr :: [integer()]) -> [integer()].\\nprev_perm_opt1(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def prevPermOpt1(arr: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!72\n",
            "grumpy-bookstore-owner 1138\n",
            "{'id': 1138, 'name': 'grumpy-bookstore-owner', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/grumpy-bookstore-owner/', 'task_description': 'There is a bookstore owner that has a store open for `n` minutes. You are given an integer array `customers` of length `n` where `customers[i]` is the number of the customers that enter the store at the start of the `ith` minute and all those customers leave after the end of that minute. During certain minutes, the bookstore owner is grumpy. You are given a binary array grumpy where `grumpy[i]` is `1` if the bookstore owner is grumpy during the `ith` minute, and is `0` otherwise. When the bookstore owner is grumpy, the customers entering during that minute are not **satisfied**. Otherwise, they are satisfied. The bookstore owner knows a secret technique to remain **not grumpy** for `minutes` consecutive minutes, but this technique can only be used **once**. Return the **maximum** number of customers that can be _satisfied_ throughout the day. **Example 1:** **Input:** customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3 **Output:** 16 **Explanation:** The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16. **Example 2:** **Input:** customers = [1], grumpy = [0], minutes = 1 **Output:** 1 **Constraints:** `n == customers.length == grumpy.length` `1 <= minutes <= n <= 2 * 104` `0 <= customers[i] <= 1000` `grumpy[i]` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3', 'output': '16 Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.'}, {'label': 'Example 2', 'input': 'customers = [1], grumpy = [0], minutes = 1', 'output': '1 Constraints: n == customers.length == grumpy.length 1 <= minutes <= n <= 2 * 10 4 0 <= customers[i] <= 1000 grumpy[i] is either 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_satisfied(customers :: [integer], grumpy :: [integer], minutes :: integer) :: integer\\n  def max_satisfied(customers, grumpy, minutes) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_satisfied(Customers :: [integer()], Grumpy :: [integer()], Minutes :: integer()) -> integer().\\nmax_satisfied(Customers, Grumpy, Minutes) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxSatisfied(customers: Array[Int], grumpy: Array[Int], minutes: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!73\n",
            "height-checker 1137\n",
            "{'id': 1137, 'name': 'height-checker', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/height-checker/', 'task_description': 'A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in **non-decreasing order** by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line. You are given an integer array `heights` representing the **current order** that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (**0-indexed**). Return _the **number of indices** where _`heights[i] != expected[i]`. **Example 1:** ``` **Input:** heights = [1,1,4,2,1,3] **Output:** 3 **Explanation:** heights: [1,1,4,2,1,3] expected: [1,1,1,2,3,4] Indices 2, 4, and 5 do not match. ``` **Example 2:** ``` **Input:** heights = [5,1,2,3,4] **Output:** 5 **Explanation:** heights: [5,1,2,3,4] expected: [1,2,3,4,5] All indices do not match. ``` **Example 3:** ``` **Input:** heights = [1,2,3,4,5] **Output:** 0 **Explanation:** heights: [1,2,3,4,5] expected: [1,2,3,4,5] All indices match. ``` **Constraints:** `1 <= heights.length <= 100` `1 <= heights[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'heights = [1,1,4,2,1,3]', 'output': '3 Explanation: heights:  [1,1, 4 ,2, 1 , 3 ]\\nexpected: [1,1, 1 ,2, 3 , 4 ]\\nIndices 2, 4, and 5 do not match.'}, {'label': 'Example 2', 'input': 'heights = [5,1,2,3,4]', 'output': '5 Explanation: heights:  [ 5 , 1 , 2 , 3 , 4 ]\\nexpected: [ 1 , 2 , 3 , 4 , 5 ]\\nAll indices do not match.'}, {'label': 'Example 3', 'input': 'heights = [1,2,3,4,5]', 'output': '0 Explanation: heights:  [1,2,3,4,5]\\nexpected: [1,2,3,4,5]\\nAll indices match.'}], 'elixir_template': 'defmodule Solution do\\n  @spec height_checker(heights :: [integer]) :: integer\\n  def height_checker(heights) do\\n    \\n  end\\nend', 'erlang_template': '-spec height_checker(Heights :: [integer()]) -> integer().\\nheight_checker(Heights) ->\\n  .', 'scala_template': 'object Solution {\\n    def heightChecker(heights: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!74\n",
            "last-substring-in-lexicographical-order 1133\n",
            "{'id': 1133, 'name': 'last-substring-in-lexicographical-order', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/last-substring-in-lexicographical-order/', 'task_description': 'Given a string `s`, return _the last substring of_ `s` _in lexicographical order_. **Example 1:** ``` **Input:** s = \"abab\" **Output:** \"bab\" **Explanation:** The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\". ``` **Example 2:** ``` **Input:** s = \"leetcode\" **Output:** \"tcode\" ``` **Constraints:** `1 <= s.length <= 4 * 105` `s` contains only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abab\"', 'output': '\"bab\" Explanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".'}, {'label': 'Example 2', 'input': 's = \"leetcode\"', 'output': '\"tcode\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec last_substring(s :: String.t) :: String.t\\n  def last_substring(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec last_substring(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nlast_substring(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def lastSubstring(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!75\n",
            "last-stone-weight-ii 1130\n",
            "{'id': 1130, 'name': 'last-stone-weight-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/last-stone-weight-ii/', 'task_description': \"You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone. We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is: If `x == y`, both stones are destroyed, and If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`. At the end of the game, there is **at most one** stone left. Return _the smallest possible weight of the left stone_. If there are no stones left, return `0`. **Example 1:** ``` **Input:** stones = [2,7,4,1,8,1] **Output:** 1 **Explanation:** We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then, we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then, we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then, we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value. ``` **Example 2:** ``` **Input:** stones = [31,26,33,21,40] **Output:** 5 ``` **Constraints:** `1 <= stones.length <= 30` `1 <= stones[i] <= 100`\", 'test_case': [{'label': 'Example 1', 'input': 'stones = [2,7,4,1,8,1]', 'output': \"1 Explanation: We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\\nwe can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\\nwe can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\\nwe can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.\"}, {'label': 'Example 2', 'input': 'stones = [31,26,33,21,40]', 'output': '5'}], 'elixir_template': 'defmodule Solution do\\n  @spec last_stone_weight_ii(stones :: [integer]) :: integer\\n  def last_stone_weight_ii(stones) do\\n    \\n  end\\nend', 'erlang_template': '-spec last_stone_weight_ii(Stones :: [integer()]) -> integer().\\nlast_stone_weight_ii(Stones) ->\\n  .', 'scala_template': 'object Solution {\\n    def lastStoneWeightII(stones: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!76\n",
            "longest-string-chain 1129\n",
            "{'id': 1129, 'name': 'longest-string-chain', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-string-chain/', 'task_description': 'You are given an array of `words` where each word consists of lowercase English letters. `wordA` is a **predecessor** of `wordB` if and only if we can insert **exactly one** letter anywhere in `wordA` **without changing the order of the other characters** to make it equal to `wordB`. For example, `\"abc\"` is a **predecessor** of `\"abac\"`, while `\"cba\"` is not a **predecessor** of `\"bcad\"`. A **word chain**_ _is a sequence of words `[word1, word2, ..., wordk]` with `k >= 1`, where `word1` is a **predecessor** of `word2`, `word2` is a **predecessor** of `word3`, and so on. A single word is trivially a **word chain** with `k == 1`. Return _the **length** of the **longest possible word chain** with words chosen from the given list of _`words`. **Example 1:** ``` **Input:** words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"] **Output:** 4 **Explanation**: One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"]. ``` **Example 2:** ``` **Input:** words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"] **Output:** 5 **Explanation:** All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"]. ``` **Example 3:** ``` **Input:** words = [\"abcd\",\"dbqca\"] **Output:** 1 **Explanation:** The trivial word chain [\"abcd\"] is one of the longest word chains. [\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed. ``` **Constraints:** `1 <= words.length <= 1000` `1 <= words[i].length <= 16` `words[i]` only consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]', 'output': '4 Explanation : One of the longest word chains is [\"a\",\" b a\",\"b d a\",\"bd c a\"].'}, {'label': 'Example 2', 'input': 'words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]', 'output': '5 Explanation: All the words can be put in a word chain [\"xb\", \"xb c \", \" c xbc\", \" p cxbc\", \"pcxbc f \"].'}, {'label': 'Example 3', 'input': 'words = [\"abcd\",\"dbqca\"]', 'output': '1 Explanation: The trivial word chain [\"abcd\"] is one of the longest word chains.\\n[\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed.'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_str_chain(words :: [String.t]) :: integer\\n  def longest_str_chain(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_str_chain(Words :: [unicode:unicode_binary()]) -> integer().\\nlongest_str_chain(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestStrChain(words: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!77\n",
            "remove-all-adjacent-duplicates-in-string 1128\n",
            "{'id': 1128, 'name': 'remove-all-adjacent-duplicates-in-string', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/', 'task_description': 'You are given a string `s` consisting of lowercase English letters. A **duplicate removal** consists of choosing two **adjacent** and **equal** letters and removing them. We repeatedly make **duplicate removals** on `s` until we no longer can. Return _the final string after all such duplicate removals have been made_. It can be proven that the answer is **unique**. **Example 1:** ``` **Input:** s = \"abbaca\" **Output:** \"ca\" **Explanation:** For example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move. The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\". ``` **Example 2:** ``` **Input:** s = \"azxxzy\" **Output:** \"ay\" ``` **Constraints:** `1 <= s.length <= 105` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abbaca\"', 'output': '\"ca\" Explanation: For example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".'}, {'label': 'Example 2', 'input': 's = \"azxxzy\"', 'output': '\"ay\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_duplicates(s :: String.t) :: String.t\\n  def remove_duplicates(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_duplicates(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nremove_duplicates(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeDuplicates(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!78\n",
            "last-stone-weight 1127\n",
            "{'id': 1127, 'name': 'last-stone-weight', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/last-stone-weight/', 'task_description': \"You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone. We are playing a game with the stones. On each turn, we choose the **heaviest two stones** and smash them together. Suppose the heaviest two stones have weights `x` and `y` with `x <= y`. The result of this smash is: If `x == y`, both stones are destroyed, and If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`. At the end of the game, there is **at most one** stone left. Return _the weight of the last remaining stone_. If there are no stones left, return `0`. **Example 1:** ``` **Input:** stones = [2,7,4,1,8,1] **Output:** 1 **Explanation:** We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone. ``` **Example 2:** ``` **Input:** stones = [1] **Output:** 1 ``` **Constraints:** `1 <= stones.length <= 30` `1 <= stones[i] <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'stones = [2,7,4,1,8,1]', 'output': \"1 Explanation: We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.\"}, {'label': 'Example 2', 'input': 'stones = [1]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec last_stone_weight(stones :: [integer]) :: integer\\n  def last_stone_weight(stones) do\\n    \\n  end\\nend', 'erlang_template': '-spec last_stone_weight(Stones :: [integer()]) -> integer().\\nlast_stone_weight(Stones) ->\\n  .', 'scala_template': 'object Solution {\\n    def lastStoneWeight(stones: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!79\n",
            "longest-duplicate-substring 1122\n",
            "{'id': 1122, 'name': 'longest-duplicate-substring', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/longest-duplicate-substring/', 'task_description': 'Given a string `s`, consider all _duplicated substrings_: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap. Return **any** duplicated substring that has the longest possible length. If `s` does not have a duplicated substring, the answer is `\"\"`. **Example 1:** ``` **Input:** s = \"banana\" **Output:** \"ana\" ``` **Example 2:** ``` **Input:** s = \"abcd\" **Output:** \"\" ``` **Constraints:** `2 <= s.length <= 3 * 104` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"banana\"', 'output': '\"ana\"'}, {'label': 'Example 2', 'input': 's = \"abcd\"', 'output': '\"\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_dup_substring(s :: String.t) :: String.t\\n  def longest_dup_substring(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_dup_substring(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nlongest_dup_substring(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestDupSubstring(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!80\n",
            "partition-array-for-maximum-sum 1121\n",
            "{'id': 1121, 'name': 'partition-array-for-maximum-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/partition-array-for-maximum-sum/', 'task_description': 'Given an integer array `arr`, partition the array into (contiguous) subarrays of length **at most** `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray. Return _the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a **32-bit** integer._ **Example 1:** ``` **Input:** arr = [1,15,7,9,2,5,10], k = 3 **Output:** 84 **Explanation:** arr becomes [15,15,15,9,10,10,10] ``` **Example 2:** ``` **Input:** arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4 **Output:** 83 ``` **Example 3:** ``` **Input:** arr = [1], k = 1 **Output:** 1 ``` **Constraints:** `1 <= arr.length <= 500` `0 <= arr[i] <= 109` `1 <= k <= arr.length`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,15,7,9,2,5,10], k = 3', 'output': '84 Explanation: arr becomes [15,15,15,9,10,10,10]'}, {'label': 'Example 2', 'input': 'arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4', 'output': '83'}, {'label': 'Example 3', 'input': 'arr = [1], k = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_sum_after_partitioning(arr :: [integer], k :: integer) :: integer\\n  def max_sum_after_partitioning(arr, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_sum_after_partitioning(Arr :: [integer()], K :: integer()) -> integer().\\nmax_sum_after_partitioning(Arr, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxSumAfterPartitioning(arr: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!81\n",
            "flower-planting-with-no-adjacent 1120\n",
            "{'id': 1120, 'name': 'flower-planting-with-no-adjacent', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/flower-planting-with-no-adjacent/', 'task_description': 'You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers. All gardens have **at most 3** paths coming into or leaving it. Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers. Return _**any** such a choice as an array _`answer`_, where _`answer[i]`_ is the type of flower planted in the _`(i+1)th`_ garden. The flower types are denoted _`1`_, _`2`_, _`3`_, or _`4`_. It is guaranteed an answer exists._ **Example 1:** ``` **Input:** n = 3, paths = [[1,2],[2,3],[3,1]] **Output:** [1,2,3] **Explanation:** Gardens 1 and 2 have different types. Gardens 2 and 3 have different types. Gardens 3 and 1 have different types. Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1]. ``` **Example 2:** ``` **Input:** n = 4, paths = [[1,2],[3,4]] **Output:** [1,2,1,2] ``` **Example 3:** ``` **Input:** n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]] **Output:** [1,2,3,4] ``` **Constraints:** `1 <= n <= 104` `0 <= paths.length <= 2 * 104` `paths[i].length == 2` `1 <= xi, yi <= n` `xi != yi` Every garden has **at most 3** paths coming into or leaving it.', 'test_case': [{'label': 'Example 1', 'input': 'n = 3, paths = [[1,2],[2,3],[3,1]]', 'output': '[1,2,3] Explanation: Gardens 1 and 2 have different types.\\nGardens 2 and 3 have different types.\\nGardens 3 and 1 have different types.\\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].'}, {'label': 'Example 2', 'input': 'n = 4, paths = [[1,2],[3,4]]', 'output': '[1,2,1,2]'}, {'label': 'Example 3', 'input': 'n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]', 'output': '[1,2,3,4]'}], 'elixir_template': 'defmodule Solution do\\n  @spec garden_no_adj(n :: integer, paths :: [[integer]]) :: [integer]\\n  def garden_no_adj(n, paths) do\\n    \\n  end\\nend', 'erlang_template': '-spec garden_no_adj(N :: integer(), Paths :: [[integer()]]) -> [integer()].\\ngarden_no_adj(N, Paths) ->\\n  .', 'scala_template': 'object Solution {\\n    def gardenNoAdj(n: Int, paths: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!82\n",
            "robot-bounded-in-circle 1119\n",
            "{'id': 1119, 'name': 'robot-bounded-in-circle', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/robot-bounded-in-circle/', 'task_description': 'On an infinite plane, a robot initially stands at `(0, 0)` and faces north. Note that: The **north direction** is the positive direction of the y-axis. The **south direction** is the negative direction of the y-axis. The **east direction** is the positive direction of the x-axis. The **west direction** is the negative direction of the x-axis. The robot can receive one of three instructions: `\"G\"`: go straight 1 unit. `\"L\"`: turn 90 degrees to the left (i.e., anti-clockwise direction). `\"R\"`: turn 90 degrees to the right (i.e., clockwise direction). The robot performs the `instructions` given in order, and repeats them forever. Return `true` if and only if there exists a circle in the plane such that the robot never leaves the circle. **Example 1:** ``` **Input:** instructions = \"GGLLGG\" **Output:** true **Explanation:** The robot is initially at (0, 0) facing the north direction. \"G\": move one step. Position: (0, 1). Direction: North. \"G\": move one step. Position: (0, 2). Direction: North. \"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West. \"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South. \"G\": move one step. Position: (0, 1). Direction: South. \"G\": move one step. Position: (0, 0). Direction: South. Repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0). Based on that, we return true. ``` **Example 2:** ``` **Input:** instructions = \"GG\" **Output:** false **Explanation:** The robot is initially at (0, 0) facing the north direction. \"G\": move one step. Position: (0, 1). Direction: North. \"G\": move one step. Position: (0, 2). Direction: North. Repeating the instructions, keeps advancing in the north direction and does not go into cycles. Based on that, we return false. ``` **Example 3:** ``` **Input:** instructions = \"GL\" **Output:** true **Explanation:** The robot is initially at (0, 0) facing the north direction. \"G\": move one step. Position: (0, 1). Direction: North. \"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West. \"G\": move one step. Position: (-1, 1). Direction: West. \"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South. \"G\": move one step. Position: (-1, 0). Direction: South. \"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East. \"G\": move one step. Position: (0, 0). Direction: East. \"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North. Repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0). Based on that, we return true. ``` **Constraints:** `1 <= instructions.length <= 100` `instructions[i]` is `\\'G\\'`, `\\'L\\'` or, `\\'R\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'instructions = \"GGLLGG\"', 'output': 'true Explanation: The robot is initially at (0, 0) facing the north direction.\\n\"G\": move one step. Position: (0, 1). Direction: North.\\n\"G\": move one step. Position: (0, 2). Direction: North.\\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\\n\"G\": move one step. Position: (0, 1). Direction: South.\\n\"G\": move one step. Position: (0, 0). Direction: South.\\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0).\\nBased on that, we return true.'}, {'label': 'Example 2', 'input': 'instructions = \"GG\"', 'output': 'false Explanation: The robot is initially at (0, 0) facing the north direction.\\n\"G\": move one step. Position: (0, 1). Direction: North.\\n\"G\": move one step. Position: (0, 2). Direction: North.\\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\\nBased on that, we return false.'}, {'label': 'Example 3', 'input': 'instructions = \"GL\"', 'output': 'true Explanation: The robot is initially at (0, 0) facing the north direction.\\n\"G\": move one step. Position: (0, 1). Direction: North.\\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\\n\"G\": move one step. Position: (-1, 1). Direction: West.\\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\\n\"G\": move one step. Position: (-1, 0). Direction: South.\\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\\n\"G\": move one step. Position: (0, 0). Direction: East.\\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0).\\nBased on that, we return true.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_robot_bounded(instructions :: String.t) :: boolean\\n  def is_robot_bounded(instructions) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_robot_bounded(Instructions :: unicode:unicode_binary()) -> boolean().\\nis_robot_bounded(Instructions) ->\\n  .', 'scala_template': 'object Solution {\\n    def isRobotBounded(instructions: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!83\n",
            "as-far-from-land-as-possible 1117\n",
            "{'id': 1117, 'name': 'as-far-from-land-as-possible', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/as-far-from-land-as-possible/', 'task_description': 'Given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return `-1`. The distance used in this problem is the Manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`. **Example 1:** ``` **Input:** grid = [[1,0,1],[0,0,0],[1,0,1]] **Output:** 2 **Explanation:** The cell (1, 1) is as far as possible from all the land with distance 2. ``` **Example 2:** ``` **Input:** grid = [[1,0,0],[0,0,0],[0,0,0]] **Output:** 4 **Explanation:** The cell (2, 2) is as far as possible from all the land with distance 4. ``` **Constraints:** `n == grid.length` `n == grid[i].length` `1 <= n <= 100` `grid[i][j]` is `0` or `1`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,0,1],[0,0,0],[1,0,1]]', 'output': '2 Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.'}, {'label': 'Example 2', 'input': 'grid = [[1,0,0],[0,0,0],[0,0,0]]', 'output': '4 Explanation: The cell (2, 2) is as far as possible from all the land with distance 4. Constraints: n == grid.length n == grid[i].length 1 <= n\\xa0<= 100 grid[i][j] is 0 or 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_distance(grid :: [[integer]]) :: integer\\n  def max_distance(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_distance(Grid :: [[integer()]]) -> integer().\\nmax_distance(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxDistance(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!84\n",
            "maximum-level-sum-of-a-binary-tree 1116\n",
            "{'id': 1116, 'name': 'maximum-level-sum-of-a-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/', 'task_description': 'Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on. Return the **smallest** level `x` such that the sum of all the values of nodes at level `x` is **maximal**. **Example 1:** ``` **Input:** root = [1,7,0,7,-8,null,null] **Output:** 2 **Explanation: ** Level 1 sum = 1. Level 2 sum = 7 + 0 = 7. Level 3 sum = 7 + -8 = -1. So we return the level with the maximum sum which is level 2. ``` **Example 2:** ``` **Input:** root = [989,null,10250,98693,-89388,null,null,null,-32127] **Output:** 2 ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-105 <= Node.val <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,7,0,7,-8,null,null]', 'output': '2 Explanation: Level 1 sum = 1.\\nLevel 2 sum = 7 + 0 = 7.\\nLevel 3 sum = 7 + -8 = -1.\\nSo we return the level with the maximum sum which is level 2.'}, {'label': 'Example 2', 'input': 'root = [989,null,10250,98693,-89388,null,null,null,-32127]', 'output': '2 Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -10 5 <= Node.val <= 10 5'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec max_level_sum(root :: TreeNode.t | nil) :: integer\\n  def max_level_sum(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec max_level_sum(Root :: #tree_node{} | null) -> integer().\\nmax_level_sum(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def maxLevelSum(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!85\n",
            "valid-boomerang 1115\n",
            "{'id': 1115, 'name': 'valid-boomerang', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/valid-boomerang/', 'task_description': 'Given an array `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return `true` _if these points are a **boomerang**_. A **boomerang** is a set of three points that are **all distinct** and **not in a straight line**. **Example 1:** ``` **Input:** points = [[1,1],[2,3],[3,2]] **Output:** true ``` **Example 2:** ``` **Input:** points = [[1,1],[2,2],[3,3]] **Output:** false ``` **Constraints:** `points.length == 3` `points[i].length == 2` `0 <= xi, yi <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'points = [[1,1],[2,3],[3,2]]', 'output': 'true'}, {'label': 'Example 2', 'input': 'points = [[1,1],[2,2],[3,3]]', 'output': 'false Constraints: points.length == 3 points[i].length == 2 0 <= x i , y i <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_boomerang(points :: [[integer]]) :: boolean\\n  def is_boomerang(points) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_boomerang(Points :: [[integer()]]) -> boolean().\\nis_boomerang(Points) ->\\n  .', 'scala_template': 'object Solution {\\n    def isBoomerang(points: Array[Array[Int]]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!86\n",
            "binary-search-tree-to-greater-sum-tree 1114\n",
            "{'id': 1114, 'name': 'binary-search-tree-to-greater-sum-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/', 'task_description': \"Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. As a reminder, a _binary search tree_ is a tree that satisfies these constraints: The left subtree of a node contains only nodes with keys **less than** the node's key. The right subtree of a node contains only nodes with keys **greater than** the node's key. Both the left and right subtrees must also be binary search trees. **Example 1:** ``` **Input:** root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] **Output:** [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] ``` **Example 2:** ``` **Input:** root = [0,null,1] **Output:** [1,null,1] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 100]`. `0 <= Node.val <= 100` All the values in the tree are **unique**. **Note:** This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/\", 'test_case': [{'label': 'Example 1', 'input': 'root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]', 'output': '[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]'}, {'label': 'Example 2', 'input': 'root = [0,null,1]', 'output': '[1,null,1] Constraints: The number of nodes in the tree is in the range [1, 100] . 0 <= Node.val <= 100 All the values in the tree are unique . Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec bst_to_gst(root :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def bst_to_gst(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec bst_to_gst(Root :: #tree_node{} | null) -> #tree_node{} | null.\\nbst_to_gst(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def bstToGst(root: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!87\n",
            "moving-stones-until-consecutive-ii 1113\n",
            "{'id': 1113, 'name': 'moving-stones-until-consecutive-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/moving-stones-until-consecutive-ii/', 'task_description': 'There are some stones in different positions on the X-axis. You are given an integer array `stones`, the positions of the stones. Call a stone an **endpoint stone** if it has the smallest or largest position. In one move, you pick up an **endpoint stone** and move it to an unoccupied position so that it is no longer an **endpoint stone**. In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position `5`, since moving it to any position (such as `0`, or `3`) will still keep that stone as an endpoint stone. The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). Return _an integer array _`answer`_ of length _`2`_ where_: `answer[0]` _is the minimum number of moves you can play, and_ `answer[1]` _is the maximum number of moves you can play_. **Example 1:** ``` **Input:** stones = [7,4,9] **Output:** [1,2] **Explanation:** We can move 4 -> 8 for one move to finish the game. Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game. ``` **Example 2:** ``` **Input:** stones = [6,5,4,3,10] **Output:** [2,3] **Explanation:** We can move 3 -> 8 then 10 -> 7 to finish the game. Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game. Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move. ``` **Constraints:** `3 <= stones.length <= 104` `1 <= stones[i] <= 109` All the values of `stones` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'stones = [7,4,9]', 'output': '[1,2] Explanation: We can move 4 -> 8 for one move to finish the game.\\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.'}, {'label': 'Example 2', 'input': 'stones = [6,5,4,3,10]', 'output': '[2,3] Explanation: We can move 3 -> 8 then 10 -> 7 to finish the game.\\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_moves_stones_ii(stones :: [integer]) :: [integer]\\n  def num_moves_stones_ii(stones) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_moves_stones_ii(Stones :: [integer()]) -> [integer()].\\nnum_moves_stones_ii(Stones) ->\\n  .', 'scala_template': 'object Solution {\\n    def numMovesStonesII(stones: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!88\n",
            "find-words-that-can-be-formed-by-characters 1112\n",
            "{'id': 1112, 'name': 'find-words-that-can-be-formed-by-characters', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-words-that-can-be-formed-by-characters/', 'task_description': 'You are given an array of strings `words` and a string `chars`. A string is **good** if it can be formed by characters from `chars` (each character can only be used once). Return _the sum of lengths of all good strings in words_. **Example 1:** ``` **Input:** words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\" **Output:** 6 **Explanation:** The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6. ``` **Example 2:** ``` **Input:** words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\" **Output:** 10 **Explanation:** The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10. ``` **Constraints:** `1 <= words.length <= 1000` `1 <= words[i].length, chars.length <= 100` `words[i]` and `chars` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"', 'output': '6 Explanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.'}, {'label': 'Example 2', 'input': 'words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"', 'output': '10 Explanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_characters(words :: [String.t], chars :: String.t) :: integer\\n  def count_characters(words, chars) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_characters(Words :: [unicode:unicode_binary()], Chars :: unicode:unicode_binary()) -> integer().\\ncount_characters(Words, Chars) ->\\n  .', 'scala_template': 'object Solution {\\n    def countCharacters(words: Array[String], chars: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!89\n",
            "minimum-score-triangulation-of-polygon 1111\n",
            "{'id': 1111, 'name': 'minimum-score-triangulation-of-polygon', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-score-triangulation-of-polygon/', 'task_description': 'You have a convex `n`-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex in **clockwise order**. **Polygon** **triangulation** is a process where you divide a polygon into a set of triangles and the vertices of each triangle must also be vertices of the original polygon. Note that no other shapes other than triangles are allowed in the division. This process will result in `n - 2` triangles. You will **triangulate** the polygon. For each triangle, the _weight_ of that triangle is the product of the values at its vertices. The total score of the triangulation is the sum of these _weights_ over all `n - 2` triangles. Return the_ minimum possible score _that you can achieve with some_ _**triangulation**_ _of the polygon. **Example 1:** **Input:** values = [1,2,3] **Output:** 6 **Explanation:** The polygon is already triangulated, and the score of the only triangle is 6. **Example 2:** **Input:** values = [3,7,4,5] **Output:** 144 **Explanation:** There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144. The minimum score is 144. **Example 3:** **Input:** values = [1,3,1,4,1,5] **Output:** 13 **Explanation:** The minimum score triangulation is 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13. **Constraints:** `n == values.length` `3 <= n <= 50` `1 <= values[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'values = [1,2,3]', 'output': '6 Explanation: The polygon is already triangulated, and the score of the only triangle is 6.'}, {'label': 'Example 2', 'input': 'values = [3,7,4,5]', 'output': '144 Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144. The minimum score is 144.'}, {'label': 'Example 3', 'input': 'values = [1,3,1,4,1,5]', 'output': '13 Explanation: The minimum score triangulation is 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13. Constraints: n == values.length 3 <= n <= 50 1 <= values[i] <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_score_triangulation(values :: [integer]) :: integer\\n  def min_score_triangulation(values) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_score_triangulation(Values :: [integer()]) -> integer().\\nmin_score_triangulation(Values) ->\\n  .', 'scala_template': 'object Solution {\\n    def minScoreTriangulation(values: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!90\n",
            "escape-a-large-maze 1106\n",
            "{'id': 1106, 'name': 'escape-a-large-maze', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/escape-a-large-maze/', 'task_description': 'There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are `(x, y)`. We start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. There is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`. Each move, we can walk one square north, east, south, or west if the square is **not** in the array of `blocked` squares. We are also not allowed to walk outside of the grid. Return `true`_ if and only if it is possible to reach the _`target`_ square from the _`source`_ square through a sequence of valid moves_. **Example 1:** ``` **Input:** blocked = [[0,1],[1,0]], source = [0,0], target = [0,2] **Output:** false **Explanation:** The target square is inaccessible starting from the source square because we cannot move. We cannot move north or east because those squares are blocked. We cannot move south or west because we cannot go outside of the grid. ``` **Example 2:** ``` **Input:** blocked = [], source = [0,0], target = [999999,999999] **Output:** true **Explanation:** Because there are no blocked cells, it is possible to reach the target square. ``` **Constraints:** `0 <= blocked.length <= 200` `blocked[i].length == 2` `0 <= xi, yi < 106` `source.length == target.length == 2` `0 <= sx, sy, tx, ty < 106` `source != target` It is guaranteed that `source` and `target` are not blocked.', 'test_case': [{'label': 'Example 1', 'input': 'blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]', 'output': 'false Explanation: The target square is inaccessible starting from the source square because we cannot move.\\nWe cannot move north or east because those squares are blocked.\\nWe cannot move south or west because we cannot go outside of the grid.'}, {'label': 'Example 2', 'input': 'blocked = [], source = [0,0], target = [999999,999999]', 'output': 'true Explanation: Because there are no blocked cells, it is possible to reach the target square.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_escape_possible(blocked :: [[integer]], source :: [integer], target :: [integer]) :: boolean\\n  def is_escape_possible(blocked, source, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_escape_possible(Blocked :: [[integer()]], Source :: [integer()], Target :: [integer()]) -> boolean().\\nis_escape_possible(Blocked, Source, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def isEscapePossible(blocked: Array[Array[Int]], source: Array[Int], target: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!91\n",
            "uncrossed-lines 1105\n",
            "{'id': 1105, 'name': 'uncrossed-lines', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/uncrossed-lines/', 'task_description': 'You are given two integer arrays `nums1` and `nums2`. We write the integers of `nums1` and `nums2` (in the order they are given) on two separate horizontal lines. We may draw connecting lines: a straight line connecting two numbers `nums1[i]` and `nums2[j]` such that: `nums1[i] == nums2[j]`, and the line we draw does not intersect any other connecting (non-horizontal) line. Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line). Return _the maximum number of connecting lines we can draw in this way_. **Example 1:** ``` **Input:** nums1 = [1,4,2], nums2 = [1,2,4] **Output:** 2 **Explanation:** We can draw 2 uncrossed lines as in the diagram. We cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2. ``` **Example 2:** ``` **Input:** nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2] **Output:** 3 ``` **Example 3:** ``` **Input:** nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1] **Output:** 2 ``` **Constraints:** `1 <= nums1.length, nums2.length <= 500` `1 <= nums1[i], nums2[j] <= 2000`', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,4,2], nums2 = [1,2,4]', 'output': '2 Explanation: We can draw 2 uncrossed lines as in the diagram.\\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.'}, {'label': 'Example 2', 'input': 'nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]', 'output': '3'}, {'label': 'Example 3', 'input': 'nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_uncrossed_lines(nums1 :: [integer], nums2 :: [integer]) :: integer\\n  def max_uncrossed_lines(nums1, nums2) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_uncrossed_lines(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\\nmax_uncrossed_lines(Nums1, Nums2) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxUncrossedLines(nums1: Array[Int], nums2: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!92\n",
            "coloring-a-border 1104\n",
            "{'id': 1104, 'name': 'coloring-a-border', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/coloring-a-border/', 'task_description': 'You are given an `m x n` integer matrix `grid`, and three integers `row`, `col`, and `color`. Each value in the grid represents the color of the grid square at that location. Two squares are called **adjacent** if they are next to each other in any of the 4 directions. Two squares belong to the same **connected component** if they have the same color and they are adjacent. The **border of a connected component** is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column). You should color the **border** of the **connected component** that contains the square `grid[row][col]` with `color`. Return _the final grid_. **Example 1:** ``` **Input:** grid = [[1,1],[1,2]], row = 0, col = 0, color = 3 **Output:** [[3,3],[3,2]] ``` **Example 2:** ``` **Input:** grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3 **Output:** [[1,3,3],[2,3,3]] ``` **Example 3:** ``` **Input:** grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2 **Output:** [[2,2,2],[2,1,2],[2,2,2]] ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 50` `1 <= grid[i][j], color <= 1000` `0 <= row < m` `0 <= col < n`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,1],[1,2]], row = 0, col = 0, color = 3', 'output': '[[3,3],[3,2]]'}, {'label': 'Example 2', 'input': 'grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3', 'output': '[[1,3,3],[2,3,3]]'}, {'label': 'Example 3', 'input': 'grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2', 'output': '[[2,2,2],[2,1,2],[2,2,2]] Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 1 <= grid[i][j], color <= 1000 0 <= row < m 0 <= col < n'}], 'elixir_template': 'defmodule Solution do\\n  @spec color_border(grid :: [[integer]], row :: integer, col :: integer, color :: integer) :: [[integer]]\\n  def color_border(grid, row, col, color) do\\n    \\n  end\\nend', 'erlang_template': '-spec color_border(Grid :: [[integer()]], Row :: integer(), Col :: integer(), Color :: integer()) -> [[integer()]].\\ncolor_border(Grid, Row, Col, Color) ->\\n  .', 'scala_template': 'object Solution {\\n    def colorBorder(grid: Array[Array[Int]], row: Int, col: Int, color: Int): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!93\n",
            "moving-stones-until-consecutive 1103\n",
            "{'id': 1103, 'name': 'moving-stones-until-consecutive', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/moving-stones-until-consecutive/', 'task_description': \"There are three stones in different positions on the X-axis. You are given three integers `a`, `b`, and `c`, the positions of the stones. In one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions `x`, `y`, and `z` with `x < y < z`. You pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`. The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions). Return _an integer array _`answer`_ of length _`2`_ where_: `answer[0]` _is the minimum number of moves you can play, and_ `answer[1]` _is the maximum number of moves you can play_. **Example 1:** ``` **Input:** a = 1, b = 2, c = 5 **Output:** [1,2] **Explanation:** Move the stone from 5 to 3, or move the stone from 5 to 4 to 3. ``` **Example 2:** ``` **Input:** a = 4, b = 3, c = 2 **Output:** [0,0] **Explanation:** We cannot make any moves. ``` **Example 3:** ``` **Input:** a = 3, b = 5, c = 1 **Output:** [1,2] **Explanation:** Move the stone from 1 to 4; or move the stone from 1 to 2 to 4. ``` **Constraints:** `1 <= a, b, c <= 100` `a`, `b`, and `c` have different values.\", 'test_case': [{'label': 'Example 1', 'input': 'a = 1, b = 2, c = 5', 'output': '[1,2] Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.'}, {'label': 'Example 2', 'input': 'a = 4, b = 3, c = 2', 'output': '[0,0] Explanation: We cannot make any moves.'}, {'label': 'Example 3', 'input': 'a = 3, b = 5, c = 1', 'output': '[1,2] Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_moves_stones(a :: integer, b :: integer, c :: integer) :: [integer]\\n  def num_moves_stones(a, b, c) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_moves_stones(A :: integer(), B :: integer(), C :: integer()) -> [integer()].\\nnum_moves_stones(A, B, C) ->\\n  .', 'scala_template': 'object Solution {\\n    def numMovesStones(a: Int, b: Int, c: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!94\n",
            "stream-of-characters 1097\n",
            "{'id': 1097, 'name': 'stream-of-characters', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/stream-of-characters/', 'task_description': 'Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings `words`. For example, if `words = [\"abc\", \"xyz\"]` and the stream added the four characters (one by one) `\\'a\\'`, `\\'x\\'`, `\\'y\\'`, and `\\'z\\'`, your algorithm should detect that the suffix `\"xyz\"` of the characters `\"axyz\"` matches `\"xyz\"` from `words`. Implement the `StreamChecker` class: `StreamChecker(String[] words)` Initializes the object with the strings array `words`. `boolean query(char letter)` Accepts a new character from the stream and returns `true` if any non-empty suffix from the stream forms a word that is in `words`. **Example 1:** ``` **Input** [\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"] [[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]] **Output** [null, false, false, false, true, false, true, false, false, false, false, false, true] **Explanation** StreamChecker streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]); streamChecker.query(\"a\"); // return False streamChecker.query(\"b\"); // return False streamChecker.query(\"c\"); // return False streamChecker.query(\"d\"); // return True, because \\'cd\\' is in the wordlist streamChecker.query(\"e\"); // return False streamChecker.query(\"f\"); // return True, because \\'f\\' is in the wordlist streamChecker.query(\"g\"); // return False streamChecker.query(\"h\"); // return False streamChecker.query(\"i\"); // return False streamChecker.query(\"j\"); // return False streamChecker.query(\"k\"); // return False streamChecker.query(\"l\"); // return True, because \\'kl\\' is in the wordlist ``` **Constraints:** `1 <= words.length <= 2000` `1 <= words[i].length <= 200` `words[i]` consists of lowercase English letters. `letter` is a lowercase English letter. At most `4 * 104` calls will be made to query.', 'test_case': [], 'elixir_template': 'defmodule StreamChecker do\\n  @spec init_(words :: [String.t]) :: any\\n  def init_(words) do\\n    \\n  end\\n\\n  @spec query(letter :: char) :: boolean\\n  def query(letter) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# StreamChecker.init_(words)\\n# param_1 = StreamChecker.query(letter)\\n\\n# StreamChecker.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec stream_checker_init_(Words :: [unicode:unicode_binary()]) -> any().\\nstream_checker_init_(Words) ->\\n  .\\n\\n-spec stream_checker_query(Letter :: char()) -> boolean().\\nstream_checker_query(Letter) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% stream_checker_init_(Words),\\n%% Param_1 = stream_checker_query(Letter),\\n\\n%% stream_checker_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class StreamChecker(_words: Array[String]) {\\n\\n    def query(letter: Char): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your StreamChecker object will be instantiated and called as such:\\n * val obj = new StreamChecker(words)\\n * val param_1 = obj.query(letter)\\n */'}\n",
            "Done!95\n",
            "maximum-sum-of-two-non-overlapping-subarrays 1096\n",
            "{'id': 1096, 'name': 'maximum-sum-of-two-non-overlapping-subarrays', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/', 'task_description': 'Given an integer array `nums` and two integers `firstLen` and `secondLen`, return _the maximum sum of elements in two non-overlapping **subarrays** with lengths _`firstLen`_ and _`secondLen`. The array with length `firstLen` could occur before or after the array with length `secondLen`, but they have to be non-overlapping. A **subarray** is a **contiguous** part of an array. **Example 1:** ``` **Input:** nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2 **Output:** 20 **Explanation:** One choice of subarrays is [9] with length 1, and [6,5] with length 2. ``` **Example 2:** ``` **Input:** nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2 **Output:** 29 **Explanation:** One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2. ``` **Example 3:** ``` **Input:** nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3 **Output:** 31 **Explanation:** One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3. ``` **Constraints:** `1 <= firstLen, secondLen <= 1000` `2 <= firstLen + secondLen <= 1000` `firstLen + secondLen <= nums.length <= 1000` `0 <= nums[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2', 'output': '20 Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.'}, {'label': 'Example 2', 'input': 'nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2', 'output': '29 Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.'}, {'label': 'Example 3', 'input': 'nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3', 'output': '31 Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_sum_two_no_overlap(nums :: [integer], first_len :: integer, second_len :: integer) :: integer\\n  def max_sum_two_no_overlap(nums, first_len, second_len) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_sum_two_no_overlap(Nums :: [integer()], FirstLen :: integer(), SecondLen :: integer()) -> integer().\\nmax_sum_two_no_overlap(Nums, FirstLen, SecondLen) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxSumTwoNoOverlap(nums: Array[Int], firstLen: Int, secondLen: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!96\n",
            "two-city-scheduling 1095\n",
            "{'id': 1095, 'name': 'two-city-scheduling', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/two-city-scheduling/', 'task_description': 'A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`. Return _the minimum cost to fly every person to a city_ such that exactly `n` people arrive in each city. **Example 1:** ``` **Input:** costs = [[10,20],[30,200],[400,50],[30,20]] **Output:** 110 **Explanation: ** The first person goes to city A for a cost of 10. The second person goes to city A for a cost of 30. The third person goes to city B for a cost of 50. The fourth person goes to city B for a cost of 20. The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city. ``` **Example 2:** ``` **Input:** costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]] **Output:** 1859 ``` **Example 3:** ``` **Input:** costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]] **Output:** 3086 ``` **Constraints:** `2 * n == costs.length` `2 <= costs.length <= 100` `costs.length` is even. `1 <= aCosti, bCosti <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'costs = [[10,20],[30,200],[400,50],[30,20]]', 'output': '110 Explanation: The first person goes to city A for a cost of 10.\\nThe second person goes to city A for a cost of 30.\\nThe third person goes to city B for a cost of 50.\\nThe fourth person goes to city B for a cost of 20.\\n\\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.'}, {'label': 'Example 2', 'input': 'costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]', 'output': '1859'}, {'label': 'Example 3', 'input': 'costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]', 'output': '3086'}], 'elixir_template': 'defmodule Solution do\\n  @spec two_city_sched_cost(costs :: [[integer]]) :: integer\\n  def two_city_sched_cost(costs) do\\n    \\n  end\\nend', 'erlang_template': '-spec two_city_sched_cost(Costs :: [[integer()]]) -> integer().\\ntwo_city_sched_cost(Costs) ->\\n  .', 'scala_template': 'object Solution {\\n    def twoCitySchedCost(costs: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!97\n",
            "matrix-cells-in-distance-order 1094\n",
            "{'id': 1094, 'name': 'matrix-cells-in-distance-order', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/matrix-cells-in-distance-order/', 'task_description': 'You are given four integers `row`, `cols`, `rCenter`, and `cCenter`. There is a `rows x cols` matrix and you are on the cell with the coordinates `(rCenter, cCenter)`. Return _the coordinates of all cells in the matrix, sorted by their **distance** from _`(rCenter, cCenter)`_ from the smallest distance to the largest distance_. You may return the answer in **any order** that satisfies this condition. The **distance** between two cells `(r1, c1)` and `(r2, c2)` is `|r1 - r2| + |c1 - c2|`. **Example 1:** ``` **Input:** rows = 1, cols = 2, rCenter = 0, cCenter = 0 **Output:** [[0,0],[0,1]] **Explanation:** The distances from (0, 0) to other cells are: [0,1] ``` **Example 2:** ``` **Input:** rows = 2, cols = 2, rCenter = 0, cCenter = 1 **Output:** [[0,1],[0,0],[1,1],[1,0]] **Explanation:** The distances from (0, 1) to other cells are: [0,1,1,2] The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct. ``` **Example 3:** ``` **Input:** rows = 2, cols = 3, rCenter = 1, cCenter = 2 **Output:** [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]] **Explanation:** The distances from (1, 2) to other cells are: [0,1,1,2,2,3] There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]. ``` **Constraints:** `1 <= rows, cols <= 100` `0 <= rCenter < rows` `0 <= cCenter < cols`', 'test_case': [{'label': 'Example 1', 'input': 'rows = 1, cols = 2, rCenter = 0, cCenter = 0', 'output': '[[0,0],[0,1]] Explanation: The distances from (0, 0) to other cells are: [0,1]'}, {'label': 'Example 2', 'input': 'rows = 2, cols = 2, rCenter = 0, cCenter = 1', 'output': '[[0,1],[0,0],[1,1],[1,0]] Explanation: The distances from (0, 1) to other cells are: [0,1,1,2]\\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.'}, {'label': 'Example 3', 'input': 'rows = 2, cols = 3, rCenter = 1, cCenter = 2', 'output': '[[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]] Explanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].'}], 'elixir_template': 'defmodule Solution do\\n  @spec all_cells_dist_order(rows :: integer, cols :: integer, r_center :: integer, c_center :: integer) :: [[integer]]\\n  def all_cells_dist_order(rows, cols, r_center, c_center) do\\n    \\n  end\\nend', 'erlang_template': '-spec all_cells_dist_order(Rows :: integer(), Cols :: integer(), RCenter :: integer(), CCenter :: integer()) -> [[integer()]].\\nall_cells_dist_order(Rows, Cols, RCenter, CCenter) ->\\n  .', 'scala_template': 'object Solution {\\n    def allCellsDistOrder(rows: Int, cols: Int, rCenter: Int, cCenter: Int): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!98\n",
            "recover-a-tree-from-preorder-traversal 1093\n",
            "{'id': 1093, 'name': 'recover-a-tree-from-preorder-traversal', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/recover-a-tree-from-preorder-traversal/', 'task_description': 'We run a preorder depth-first search (DFS) on the `root` of a binary tree. At each node in this traversal, we output `D` dashes (where `D` is the depth of this node), then we output the value of this node. If the depth of a node is `D`, the depth of its immediate child is `D + 1`. The depth of the `root` node is `0`. If a node has only one child, that child is guaranteed to be **the left child**. Given the output `traversal` of this traversal, recover the tree and return _its_ `root`. **Example 1:** ``` **Input:** traversal = \"1-2--3--4-5--6--7\" **Output:** [1,2,5,3,4,6,7] ``` **Example 2:** ``` **Input:** traversal = \"1-2--3---4-5--6---7\" **Output:** [1,2,5,3,null,6,null,4,null,7] ``` **Example 3:** ``` **Input:** traversal = \"1-401--349---90--88\" **Output:** [1,401,null,349,88,90] ``` **Constraints:** The number of nodes in the original tree is in the range `[1, 1000]`. `1 <= Node.val <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'traversal = \"1-2--3--4-5--6--7\"', 'output': '[1,2,5,3,4,6,7]'}, {'label': 'Example 2', 'input': 'traversal = \"1-2--3---4-5--6---7\"', 'output': '[1,2,5,3,null,6,null,4,null,7]'}, {'label': 'Example 3', 'input': 'traversal = \"1-401--349---90--88\"', 'output': '[1,401,null,349,88,90] Constraints: The number of nodes in the original tree is in the range [1, 1000] . 1 <= Node.val <= 10 9'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec recover_from_preorder(traversal :: String.t) :: TreeNode.t | nil\\n  def recover_from_preorder(traversal) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec recover_from_preorder(Traversal :: unicode:unicode_binary()) -> #tree_node{} | null.\\nrecover_from_preorder(Traversal) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def recoverFromPreorder(traversal: String): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!99\n",
            "maximum-difference-between-node-and-ancestor 1092\n",
            "{'id': 1092, 'name': 'maximum-difference-between-node-and-ancestor', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/', 'task_description': 'Given the `root` of a binary tree, find the maximum value `v` for which there exist **different** nodes `a` and `b` where `v = |a.val - b.val|` and `a` is an ancestor of `b`. A node `a` is an ancestor of `b` if either: any child of `a` is equal to `b` or any child of `a` is an ancestor of `b`. **Example 1:** ``` **Input:** root = [8,3,10,1,6,null,14,null,null,4,7,13] **Output:** 7 **Explanation: **We have various ancestor-node differences, some of which are given below : |8 - 3| = 5 |3 - 7| = 4 |8 - 1| = 7 |10 - 13| = 3 Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7. ``` **Example 2:** ``` **Input:** root = [1,null,2,null,0,3] **Output:** 3 ``` **Constraints:** The number of nodes in the tree is in the range `[2, 5000]`. `0 <= Node.val <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'root = [8,3,10,1,6,null,14,null,null,4,7,13]', 'output': '7 Explanation: We have various ancestor-node differences, some of which are given below :\\n|8 - 3| = 5\\n|3 - 7| = 4\\n|8 - 1| = 7\\n|10 - 13| = 3\\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.'}, {'label': 'Example 2', 'input': 'root = [1,null,2,null,0,3]', 'output': '3 Constraints: The number of nodes in the tree is in the range [2, 5000] . 0 <= Node.val <= 10 5'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec max_ancestor_diff(root :: TreeNode.t | nil) :: integer\\n  def max_ancestor_diff(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec max_ancestor_diff(Root :: #tree_node{} | null) -> integer().\\nmax_ancestor_diff(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def maxAncestorDiff(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!100\n",
            "longest-arithmetic-subsequence 1087\n",
            "{'id': 1087, 'name': 'longest-arithmetic-subsequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-arithmetic-subsequence/', 'task_description': 'Given an array `nums` of integers, return _the length of the longest arithmetic subsequence in_ `nums`. **Note** that: A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. A sequence `seq` is arithmetic if `seq[i + 1] - seq[i]` are all the same value (for `0 <= i < seq.length - 1`). **Example 1:** ``` **Input:** nums = [3,6,9,12] **Output:** 4 **Explanation: ** The whole array is an arithmetic sequence with steps of length = 3. ``` **Example 2:** ``` **Input:** nums = [9,4,7,2,10] **Output:** 3 **Explanation: ** The longest arithmetic subsequence is [4,7,10]. ``` **Example 3:** ``` **Input:** nums = [20,1,15,3,10,5,8] **Output:** 4 **Explanation: ** The longest arithmetic subsequence is [20,15,10,5]. ``` **Constraints:** `2 <= nums.length <= 1000` `0 <= nums[i] <= 500`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,6,9,12]', 'output': '4 Explanation: The whole array is an arithmetic sequence with steps of length = 3.'}, {'label': 'Example 2', 'input': 'nums = [9,4,7,2,10]', 'output': '3 Explanation: The longest arithmetic subsequence is [4,7,10].'}, {'label': 'Example 3', 'input': 'nums = [20,1,15,3,10,5,8]', 'output': '4 Explanation: The longest arithmetic subsequence is [20,15,10,5].'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_arith_seq_length(nums :: [integer]) :: integer\\n  def longest_arith_seq_length(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_arith_seq_length(Nums :: [integer()]) -> integer().\\nlongest_arith_seq_length(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestArithSeqLength(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!101\n",
            "divisor-game 1086\n",
            "{'id': 1086, 'name': 'divisor-game', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/divisor-game/', 'task_description': \"Alice and Bob take turns playing a game, with Alice starting first. Initially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of: Choosing any `x` with `0 < x < n` and `n % x == 0`. Replacing the number `n` on the chalkboard with `n - x`. Also, if a player cannot make a move, they lose the game. Return `true` _if and only if Alice wins the game, assuming both players play optimally_. **Example 1:** ``` **Input:** n = 2 **Output:** true **Explanation:** Alice chooses 1, and Bob has no more moves. ``` **Example 2:** ``` **Input:** n = 3 **Output:** false **Explanation:** Alice chooses 1, Bob chooses 1, and Alice has no more moves. ``` **Constraints:** `1 <= n <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': 'true Explanation: Alice chooses 1, and Bob has no more moves.'}, {'label': 'Example 2', 'input': 'n = 3', 'output': 'false Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.'}], 'elixir_template': 'defmodule Solution do\\n  @spec divisor_game(n :: integer) :: boolean\\n  def divisor_game(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec divisor_game(N :: integer()) -> boolean().\\ndivisor_game(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def divisorGame(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!102\n",
            "video-stitching 1081\n",
            "{'id': 1081, 'name': 'video-stitching', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/video-stitching/', 'task_description': 'You are given a series of video clips from a sporting event that lasted `time` seconds. These video clips can be overlapping with each other and have varying lengths. Each video clip is described by an array `clips` where `clips[i] = [starti, endi]` indicates that the ith clip started at `starti` and ended at `endi`. We can cut these clips into segments freely. For example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`. Return _the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event_ `[0, time]`. If the task is impossible, return `-1`. **Example 1:** ``` **Input:** clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10 **Output:** 3 **Explanation:** We take the clips [0,2], [8,10], [1,9]; a total of 3 clips. Then, we can reconstruct the sporting event as follows: We cut [1,9] into segments [1,2] + [2,8] + [8,9]. Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10]. ``` **Example 2:** ``` **Input:** clips = [[0,1],[1,2]], time = 5 **Output:** -1 **Explanation:** We cannot cover [0,5] with only [0,1] and [1,2]. ``` **Example 3:** ``` **Input:** clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9 **Output:** 3 **Explanation:** We can take clips [0,4], [4,7], and [6,9]. ``` **Constraints:** `1 <= clips.length <= 100` `0 <= starti <= endi <= 100` `1 <= time <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10', 'output': '3 Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\\nThen, we can reconstruct the sporting event as follows:\\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].'}, {'label': 'Example 2', 'input': 'clips = [[0,1],[1,2]], time = 5', 'output': '-1 Explanation: We cannot cover [0,5] with only [0,1] and [1,2].'}, {'label': 'Example 3', 'input': 'clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9', 'output': '3 Explanation: We can take clips [0,4], [4,7], and [6,9].'}], 'elixir_template': 'defmodule Solution do\\n  @spec video_stitching(clips :: [[integer]], time :: integer) :: integer\\n  def video_stitching(clips, time) do\\n    \\n  end\\nend', 'erlang_template': '-spec video_stitching(Clips :: [[integer()]], Time :: integer()) -> integer().\\nvideo_stitching(Clips, Time) ->\\n  .', 'scala_template': 'object Solution {\\n    def videoStitching(clips: Array[Array[Int]], time: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!103\n",
            "camelcase-matching 1080\n",
            "{'id': 1080, 'name': 'camelcase-matching', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/camelcase-matching/', 'task_description': 'Given an array of strings `queries` and a string `pattern`, return a boolean array `answer` where `answer[i]` is `true` if `queries[i]` matches `pattern`, and `false` otherwise. A query word `queries[i]` matches `pattern` if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters. **Example 1:** ``` **Input:** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\" **Output:** [true,false,true,true,false] **Explanation:** \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\". \"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\". \"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\". ``` **Example 2:** ``` **Input:** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\" **Output:** [true,false,true,false,false] **Explanation:** \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\". \"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\". ``` **Example 3:** ``` **Input:** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\" **Output:** [false,true,false,false,false] **Explanation:** \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\". ``` **Constraints:** `1 <= pattern.length, queries.length <= 100` `1 <= queries[i].length <= 100` `queries[i]` and `pattern` consist of English letters.', 'test_case': [{'label': 'Example 1', 'input': 'queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"', 'output': '[true,false,true,true,false] Explanation: \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\\n\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\\n\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\".'}, {'label': 'Example 2', 'input': 'queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"', 'output': '[true,false,true,false,false] Explanation: \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\\n\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\".'}, {'label': 'Example 3', 'input': 'queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"', 'output': '[false,true,false,false,false] Explanation: \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec camel_match(queries :: [String.t], pattern :: String.t) :: [boolean]\\n  def camel_match(queries, pattern) do\\n    \\n  end\\nend', 'erlang_template': '-spec camel_match(Queries :: [unicode:unicode_binary()], Pattern :: unicode:unicode_binary()) -> [boolean()].\\ncamel_match(Queries, Pattern) ->\\n  .', 'scala_template': 'object Solution {\\n    def camelMatch(queries: Array[String], pattern: String): List[Boolean] = {\\n        \\n    }\\n}'}\n",
            "Done!104\n",
            "sum-of-root-to-leaf-binary-numbers 1079\n",
            "{'id': 1079, 'name': 'sum-of-root-to-leaf-binary-numbers', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/', 'task_description': 'You are given the `root` of a binary tree where each node has a value `0` or `1`. Each root-to-leaf path represents a binary number starting with the most significant bit. For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`. For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return _the sum of these numbers_. The test cases are generated so that the answer fits in a **32-bits** integer. **Example 1:** ``` **Input:** root = [1,0,1,0,1,0,1] **Output:** 22 **Explanation: **(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22 ``` **Example 2:** ``` **Input:** root = [0] **Output:** 0 ``` **Constraints:** The number of nodes in the tree is in the range `[1, 1000]`. `Node.val` is `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,0,1,0,1,0,1]', 'output': '22 Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22'}, {'label': 'Example 2', 'input': 'root = [0]', 'output': '0 Constraints: The number of nodes in the tree is in the range [1, 1000] . Node.val is 0 or 1 .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sum_root_to_leaf(root :: TreeNode.t | nil) :: integer\\n  def sum_root_to_leaf(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec sum_root_to_leaf(Root :: #tree_node{} | null) -> integer().\\nsum_root_to_leaf(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def sumRootToLeaf(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!105\n",
            "remove-outermost-parentheses 1078\n",
            "{'id': 1078, 'name': 'remove-outermost-parentheses', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/remove-outermost-parentheses/', 'task_description': 'A valid parentheses string is either empty `\"\"`, `\"(\" + A + \")\"`, or `A + B`, where `A` and `B` are valid parentheses strings, and `+` represents string concatenation. For example, `\"\"`, `\"()\"`, `\"(())()\"`, and `\"(()(()))\"` are all valid parentheses strings. A valid parentheses string `s` is primitive if it is nonempty, and there does not exist a way to split it into `s = A + B`, with `A` and `B` nonempty valid parentheses strings. Given a valid parentheses string `s`, consider its primitive decomposition: `s = P1 + P2 + ... + Pk`, where `Pi` are primitive valid parentheses strings. Return `s` _after removing the outermost parentheses of every primitive string in the primitive decomposition of _`s`. **Example 1:** ``` **Input:** s = \"(()())(())\" **Output:** \"()()()\" **Explanation:** The input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\". After removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\". ``` **Example 2:** ``` **Input:** s = \"(()())(())(()(()))\" **Output:** \"()()()()(())\" **Explanation:** The input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\". After removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\". ``` **Example 3:** ``` **Input:** s = \"()()\" **Output:** \"\" **Explanation:** The input string is \"()()\", with primitive decomposition \"()\" + \"()\". After removing outer parentheses of each part, this is \"\" + \"\" = \"\". ``` **Constraints:** `1 <= s.length <= 105` `s[i]` is either `\\'(\\'` or `\\')\\'`. `s` is a valid parentheses string.', 'test_case': [{'label': 'Example 1', 'input': 's = \"(()())(())\"', 'output': '\"()()()\" Explanation: The input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".'}, {'label': 'Example 2', 'input': 's = \"(()())(())(()(()))\"', 'output': '\"()()()()(())\" Explanation: The input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".'}, {'label': 'Example 3', 'input': 's = \"()()\"', 'output': '\"\" Explanation: The input string is \"()()\", with primitive decomposition \"()\" + \"()\".\\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_outer_parentheses(s :: String.t) :: String.t\\n  def remove_outer_parentheses(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_outer_parentheses(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nremove_outer_parentheses(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeOuterParentheses(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!106\n",
            "number-of-enclaves 1073\n",
            "{'id': 1073, 'name': 'number-of-enclaves', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/number-of-enclaves/', 'task_description': 'You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell. A **move** consists of walking from one land cell to another adjacent (**4-directionally**) land cell or walking off the boundary of the `grid`. Return _the number of land cells in_ `grid` _for which we cannot walk off the boundary of the grid in any number of **moves**_. **Example 1:** ``` **Input:** grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]] **Output:** 3 **Explanation:** There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary. ``` **Example 2:** ``` **Input:** grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]] **Output:** 0 **Explanation:** All 1s are either on the boundary or can reach the boundary. ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 500` `grid[i][j]` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]', 'output': '3 Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.'}, {'label': 'Example 2', 'input': 'grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]', 'output': '0 Explanation: All 1s are either on the boundary or can reach the boundary. Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 500 grid[i][j] is either 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_enclaves(grid :: [[integer]]) :: integer\\n  def num_enclaves(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_enclaves(Grid :: [[integer()]]) -> integer().\\nnum_enclaves(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def numEnclaves(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!107\n",
            "next-greater-node-in-linked-list 1072\n",
            "{'id': 1072, 'name': 'next-greater-node-in-linked-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/next-greater-node-in-linked-list/', 'task_description': 'You are given the `head` of a linked list with `n` nodes. For each node in the list, find the value of the **next greater node**. That is, for each node, find the value of the first node that is next to it and has a **strictly larger** value than it. Return an integer array `answer` where `answer[i]` is the value of the next greater node of the `ith` node (**1-indexed**). If the `ith` node does not have a next greater node, set `answer[i] = 0`. **Example 1:** ``` **Input:** head = [2,1,5] **Output:** [5,5,0] ``` **Example 2:** ``` **Input:** head = [2,7,4,3,5] **Output:** [7,0,5,5,0] ``` **Constraints:** The number of nodes in the list is `n`. `1 <= n <= 104` `1 <= Node.val <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'head = [2,1,5]', 'output': '[5,5,0]'}, {'label': 'Example 2', 'input': 'head = [2,7,4,3,5]', 'output': '[7,0,5,5,0] Constraints: The number of nodes in the list is n . 1 <= n <= 10 4 1 <= Node.val <= 10 9'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec next_larger_nodes(head :: ListNode.t | nil) :: [integer]\\n  def next_larger_nodes(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec next_larger_nodes(Head :: #list_node{} | null) -> [integer()].\\nnext_larger_nodes(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def nextLargerNodes(head: ListNode): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!108\n",
            "binary-prefix-divisible-by-5 1071\n",
            "{'id': 1071, 'name': 'binary-prefix-divisible-by-5', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-prefix-divisible-by-5/', 'task_description': 'You are given a binary array `nums` (**0-indexed**). We define `xi` as the number whose binary representation is the subarray `nums[0..i]` (from most-significant-bit to least-significant-bit). For example, if `nums = [1,0,1]`, then `x0 = 1`, `x1 = 2`, and `x2 = 5`. Return _an array of booleans _`answer`_ where _`answer[i]`_ is _`true`_ if _`xi`_ is divisible by _`5`. **Example 1:** ``` **Input:** nums = [0,1,1] **Output:** [true,false,false] **Explanation:** The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10. Only the first number is divisible by 5, so answer[0] is true. ``` **Example 2:** ``` **Input:** nums = [1,1,1] **Output:** [false,false,false] ``` **Constraints:** `1 <= nums.length <= 105` `nums[i]` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [0,1,1]', 'output': '[true,false,false] Explanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\\nOnly the first number is divisible by 5, so answer[0] is true.'}, {'label': 'Example 2', 'input': 'nums = [1,1,1]', 'output': '[false,false,false]'}], 'elixir_template': 'defmodule Solution do\\n  @spec prefixes_div_by5(nums :: [integer]) :: [boolean]\\n  def prefixes_div_by5(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec prefixes_div_by5(Nums :: [integer()]) -> [boolean()].\\nprefixes_div_by5(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def prefixesDivBy5(nums: Array[Int]): List[Boolean] = {\\n        \\n    }\\n}'}\n",
            "Done!109\n",
            "convert-to-base-2 1070\n",
            "{'id': 1070, 'name': 'convert-to-base-2', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/convert-to-base-2/', 'task_description': 'Given an integer `n`, return _a binary string representing its representation in base_ `-2`. **Note** that the returned string should not have leading zeros unless the string is `\"0\"`. **Example 1:** ``` **Input:** n = 2 **Output:** \"110\" **Explantion:** (-2)2 + (-2)1 = 2 ``` **Example 2:** ``` **Input:** n = 3 **Output:** \"111\" **Explantion:** (-2)2 + (-2)1 + (-2)0 = 3 ``` **Example 3:** ``` **Input:** n = 4 **Output:** \"100\" **Explantion:** (-2)2 = 4 ``` **Constraints:** `0 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '\"110\" Explantion: (-2) 2 + (-2) 1 = 2'}, {'label': 'Example 2', 'input': 'n = 3', 'output': '\"111\" Explantion: (-2) 2 + (-2) 1 + (-2) 0 = 3'}, {'label': 'Example 3', 'input': 'n = 4', 'output': '\"100\" Explantion: (-2) 2 = 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec base_neg2(n :: integer) :: String.t\\n  def base_neg2(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec base_neg2(N :: integer()) -> unicode:unicode_binary().\\nbase_neg2(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def baseNeg2(n: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!110\n",
            "binary-string-with-substrings-representing-1-to-n 1065\n",
            "{'id': 1065, 'name': 'binary-string-with-substrings-representing-1-to-n', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n/', 'task_description': 'Given a binary string `s` and a positive integer `n`, return `true`_ if the binary representation of all the integers in the range _`[1, n]`_ are **substrings** of _`s`_, or _`false`_ otherwise_. A **substring** is a contiguous sequence of characters within a string. **Example 1:** ``` **Input:** s = \"0110\", n = 3 **Output:** true ``` **Example 2:** ``` **Input:** s = \"0110\", n = 4 **Output:** false ``` **Constraints:** `1 <= s.length <= 1000` `s[i]` is either `\\'0\\'` or `\\'1\\'`. `1 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 's = \"0110\", n = 3', 'output': 'true'}, {'label': 'Example 2', 'input': 's = \"0110\", n = 4', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec query_string(s :: String.t, n :: integer) :: boolean\\n  def query_string(s, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec query_string(S :: unicode:unicode_binary(), N :: integer()) -> boolean().\\nquery_string(S, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def queryString(s: String, n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!111\n",
            "smallest-integer-divisible-by-k 1064\n",
            "{'id': 1064, 'name': 'smallest-integer-divisible-by-k', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/smallest-integer-divisible-by-k/', 'task_description': 'Given a positive integer `k`, you need to find the **length** of the **smallest** positive integer `n` such that `n` is divisible by `k`, and `n` only contains the digit `1`. Return _the **length** of _`n`. If there is no such `n`, return -1. **Note:** `n` may not fit in a 64-bit signed integer. **Example 1:** ``` **Input:** k = 1 **Output:** 1 **Explanation:** The smallest answer is n = 1, which has length 1. ``` **Example 2:** ``` **Input:** k = 2 **Output:** -1 **Explanation:** There is no such positive integer n divisible by 2. ``` **Example 3:** ``` **Input:** k = 3 **Output:** 3 **Explanation:** The smallest answer is n = 111, which has length 3. ``` **Constraints:** `1 <= k <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'k = 1', 'output': '1 Explanation: The smallest answer is n = 1, which has length 1.'}, {'label': 'Example 2', 'input': 'k = 2', 'output': '-1 Explanation: There is no such positive integer n divisible by 2.'}, {'label': 'Example 3', 'input': 'k = 3', 'output': '3 Explanation: The smallest answer is n = 111, which has length 3.'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_repunit_div_by_k(k :: integer) :: integer\\n  def smallest_repunit_div_by_k(k) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_repunit_div_by_k(K :: integer()) -> integer().\\nsmallest_repunit_div_by_k(K) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestRepunitDivByK(k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!112\n",
            "best-sightseeing-pair 1063\n",
            "{'id': 1063, 'name': 'best-sightseeing-pair', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/best-sightseeing-pair/', 'task_description': 'You are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them. The score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them. Return _the maximum score of a pair of sightseeing spots_. **Example 1:** ``` **Input:** values = [8,1,5,2,6] **Output:** 11 **Explanation:** i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11 ``` **Example 2:** ``` **Input:** values = [1,2] **Output:** 2 ``` **Constraints:** `2 <= values.length <= 5 * 104` `1 <= values[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'values = [8,1,5,2,6]', 'output': '11 Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11'}, {'label': 'Example 2', 'input': 'values = [1,2]', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_score_sightseeing_pair(values :: [integer]) :: integer\\n  def max_score_sightseeing_pair(values) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_score_sightseeing_pair(Values :: [integer()]) -> integer().\\nmax_score_sightseeing_pair(Values) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxScoreSightseeingPair(values: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!113\n",
            "partition-array-into-three-parts-with-equal-sum 1062\n",
            "{'id': 1062, 'name': 'partition-array-into-three-parts-with-equal-sum', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/', 'task_description': 'Given an array of integers `arr`, return `true` if we can partition the array into three **non-empty** parts with equal sums. Formally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])` **Example 1:** ``` **Input:** arr = [0,2,1,-6,6,-7,9,1,2,0,1] **Output:** true **Explanation: **0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1 ``` **Example 2:** ``` **Input:** arr = [0,2,1,-6,6,7,9,-1,2,0,1] **Output:** false ``` **Example 3:** ``` **Input:** arr = [3,3,6,5,-2,2,5,1,-9,4] **Output:** true **Explanation: **3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4 ``` **Constraints:** `3 <= arr.length <= 5 * 104` `-104 <= arr[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [0,2,1,-6,6,-7,9,1,2,0,1]', 'output': 'true Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1'}, {'label': 'Example 2', 'input': 'arr = [0,2,1,-6,6,7,9,-1,2,0,1]', 'output': 'false'}, {'label': 'Example 3', 'input': 'arr = [3,3,6,5,-2,2,5,1,-9,4]', 'output': 'true Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_three_parts_equal_sum(arr :: [integer]) :: boolean\\n  def can_three_parts_equal_sum(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_three_parts_equal_sum(Arr :: [integer()]) -> boolean().\\ncan_three_parts_equal_sum(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def canThreePartsEqualSum(arr: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!114\n",
            "lexicographically-smallest-equivalent-string 1058\n",
            "{'id': 1058, 'name': 'lexicographically-smallest-equivalent-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/lexicographically-smallest-equivalent-string/', 'task_description': 'You are given two strings of the same length `s1` and `s2` and a string `baseStr`. We say `s1[i]` and `s2[i]` are equivalent characters. For example, if `s1 = \"abc\"` and `s2 = \"cde\"`, then we have `\\'a\\' == \\'c\\'`, `\\'b\\' == \\'d\\'`, and `\\'c\\' == \\'e\\'`. Equivalent characters follow the usual rules of any equivalence relation: **Reflexivity:** `\\'a\\' == \\'a\\'`. **Symmetry:** `\\'a\\' == \\'b\\'` implies `\\'b\\' == \\'a\\'`. **Transitivity:** `\\'a\\' == \\'b\\'` and `\\'b\\' == \\'c\\'` implies `\\'a\\' == \\'c\\'`. For example, given the equivalency information from `s1 = \"abc\"` and `s2 = \"cde\"`, `\"acd\"` and `\"aab\"` are equivalent strings of `baseStr = \"eed\"`, and `\"aab\"` is the lexicographically smallest equivalent string of `baseStr`. Return _the lexicographically smallest equivalent string of _`baseStr`_ by using the equivalency information from _`s1`_ and _`s2`. **Example 1:** ``` **Input:** s1 = \"parker\", s2 = \"morris\", baseStr = \"parser\" **Output:** \"makkek\" **Explanation:** Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i]. The characters in each group are equivalent and sorted in lexicographical order. So the answer is \"makkek\". ``` **Example 2:** ``` **Input:** s1 = \"hello\", s2 = \"world\", baseStr = \"hold\" **Output:** \"hdld\" **Explanation: **Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r]. So only the second letter \\'o\\' in baseStr is changed to \\'d\\', the answer is \"hdld\". ``` **Example 3:** ``` **Input:** s1 = \"leetcode\", s2 = \"programs\", baseStr = \"sourcecode\" **Output:** \"aauaaaaada\" **Explanation:** We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except \\'u\\' and \\'d\\' are transformed to \\'a\\', the answer is \"aauaaaaada\". ``` **Constraints:** `1 <= s1.length, s2.length, baseStr <= 1000` `s1.length == s2.length` `s1`, `s2`, and `baseStr` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's1 = \"parker\", s2 = \"morris\", baseStr = \"parser\"', 'output': '\"makkek\" Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].\\nThe characters in each group are equivalent and sorted in lexicographical order.\\nSo the answer is \"makkek\".'}, {'label': 'Example 2', 'input': 's1 = \"hello\", s2 = \"world\", baseStr = \"hold\"', 'output': '\"hdld\" Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r].\\nSo only the second letter \\'o\\' in baseStr is changed to \\'d\\', the answer is \"hdld\".'}, {'label': 'Example 3', 'input': 's1 = \"leetcode\", s2 = \"programs\", baseStr = \"sourcecode\"', 'output': '\"aauaaaaada\" Explanation: We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except \\'u\\' and \\'d\\' are transformed to \\'a\\', the answer is \"aauaaaaada\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_equivalent_string(s1 :: String.t, s2 :: String.t, base_str :: String.t) :: String.t\\n  def smallest_equivalent_string(s1, s2, base_str) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_equivalent_string(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), BaseStr :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nsmallest_equivalent_string(S1, S2, BaseStr) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestEquivalentString(s1: String, s2: String, baseStr: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!115\n",
            "numbers-with-repeated-digits 1057\n",
            "{'id': 1057, 'name': 'numbers-with-repeated-digits', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/numbers-with-repeated-digits/', 'task_description': 'Given an integer `n`, return _the number of positive integers in the range _`[1, n]`_ that have **at least one** repeated digit_. **Example 1:** ``` **Input:** n = 20 **Output:** 1 **Explanation:** The only positive number (<= 20) with at least 1 repeated digit is 11. ``` **Example 2:** ``` **Input:** n = 100 **Output:** 10 **Explanation:** The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100. ``` **Example 3:** ``` **Input:** n = 1000 **Output:** 262 ``` **Constraints:** `1 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 20', 'output': '1 Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.'}, {'label': 'Example 2', 'input': 'n = 100', 'output': '10 Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.'}, {'label': 'Example 3', 'input': 'n = 1000', 'output': '262'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_dup_digits_at_most_n(n :: integer) :: integer\\n  def num_dup_digits_at_most_n(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_dup_digits_at_most_n(N :: integer()) -> integer().\\nnum_dup_digits_at_most_n(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def numDupDigitsAtMostN(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!116\n",
            "capacity-to-ship-packages-within-d-days 1056\n",
            "{'id': 1056, 'name': 'capacity-to-ship-packages-within-d-days', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/', 'task_description': 'A conveyor belt has packages that must be shipped from one port to another within `days` days. The `ith` package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship. Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `days` days. **Example 1:** ``` **Input:** weights = [1,2,3,4,5,6,7,8,9,10], days = 5 **Output:** 15 **Explanation:** A ship capacity of 15 is the minimum to ship all the packages in 5 days like this: 1st day: 1, 2, 3, 4, 5 2nd day: 6, 7 3rd day: 8 4th day: 9 5th day: 10 Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. ``` **Example 2:** ``` **Input:** weights = [3,2,2,4,1,4], days = 3 **Output:** 6 **Explanation:** A ship capacity of 6 is the minimum to ship all the packages in 3 days like this: 1st day: 3, 2 2nd day: 2, 4 3rd day: 1, 4 ``` **Example 3:** ``` **Input:** weights = [1,2,3,1,1], days = 4 **Output:** 3 **Explanation:** 1st day: 1 2nd day: 2 3rd day: 3 4th day: 1, 1 ``` **Constraints:** `1 <= days <= weights.length <= 5 * 104` `1 <= weights[i] <= 500`', 'test_case': [{'label': 'Example 1', 'input': 'weights = [1,2,3,4,5,6,7,8,9,10], days = 5', 'output': '15 Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\\n1st day: 1, 2, 3, 4, 5\\n2nd day: 6, 7\\n3rd day: 8\\n4th day: 9\\n5th day: 10\\n\\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.'}, {'label': 'Example 2', 'input': 'weights = [3,2,2,4,1,4], days = 3', 'output': '6 Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\\n1st day: 3, 2\\n2nd day: 2, 4\\n3rd day: 1, 4'}, {'label': 'Example 3', 'input': 'weights = [1,2,3,1,1], days = 4', 'output': '3 Explanation: 1st day: 1\\n2nd day: 2\\n3rd day: 3\\n4th day: 1, 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec ship_within_days(weights :: [integer], days :: integer) :: integer\\n  def ship_within_days(weights, days) do\\n    \\n  end\\nend', 'erlang_template': '-spec ship_within_days(Weights :: [integer()], Days :: integer()) -> integer().\\nship_within_days(Weights, Days) ->\\n  .', 'scala_template': 'object Solution {\\n    def shipWithinDays(weights: Array[Int], days: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!117\n",
            "pairs-of-songs-with-total-durations-divisible-by-60 1055\n",
            "{'id': 1055, 'name': 'pairs-of-songs-with-total-durations-divisible-by-60', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/', 'task_description': 'You are given a list of songs where the `ith` song has a duration of `time[i]` seconds. Return _the number of pairs of songs for which their total duration in seconds is divisible by_ `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`. **Example 1:** ``` **Input:** time = [30,20,150,100,40] **Output:** 3 **Explanation:** Three pairs have a total duration divisible by 60: (time[0] = 30, time[2] = 150): total duration 180 (time[1] = 20, time[3] = 100): total duration 120 (time[1] = 20, time[4] = 40): total duration 60 ``` **Example 2:** ``` **Input:** time = [60,60,60] **Output:** 3 **Explanation:** All three pairs have a total duration of 120, which is divisible by 60. ``` **Constraints:** `1 <= time.length <= 6 * 104` `1 <= time[i] <= 500`', 'test_case': [{'label': 'Example 1', 'input': 'time = [30,20,150,100,40]', 'output': '3 Explanation: Three pairs have a total duration divisible by 60:\\n(time[0] = 30, time[2] = 150): total duration 180\\n(time[1] = 20, time[3] = 100): total duration 120\\n(time[1] = 20, time[4] = 40): total duration 60'}, {'label': 'Example 2', 'input': 'time = [60,60,60]', 'output': '3 Explanation: All three pairs have a total duration of 120, which is divisible by 60.'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_pairs_divisible_by60(time :: [integer]) :: integer\\n  def num_pairs_divisible_by60(time) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_pairs_divisible_by60(Time :: [integer()]) -> integer().\\nnum_pairs_divisible_by60(Time) ->\\n  .', 'scala_template': 'object Solution {\\n    def numPairsDivisibleBy60(time: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!118\n",
            "complement-of-base-10-integer 1054\n",
            "{'id': 1054, 'name': 'complement-of-base-10-integer', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/complement-of-base-10-integer/', 'task_description': 'The **complement** of an integer is the integer you get when you flip all the `0`\\'s to `1`\\'s and all the `1`\\'s to `0`\\'s in its binary representation. For example, The integer `5` is `\"101\"` in binary and its **complement** is `\"010\"` which is the integer `2`. Given an integer `n`, return _its complement_. **Example 1:** ``` **Input:** n = 5 **Output:** 2 **Explanation:** 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10. ``` **Example 2:** ``` **Input:** n = 7 **Output:** 0 **Explanation:** 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10. ``` **Example 3:** ``` **Input:** n = 10 **Output:** 5 **Explanation:** 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10. ``` **Constraints:** `0 <= n < 109` **Note:** This question is the same as 476: https://leetcode.com/problems/number-complement/', 'test_case': [{'label': 'Example 1', 'input': 'n = 5', 'output': '2 Explanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.'}, {'label': 'Example 2', 'input': 'n = 7', 'output': '0 Explanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.'}, {'label': 'Example 3', 'input': 'n = 10', 'output': '5 Explanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.'}], 'elixir_template': 'defmodule Solution do\\n  @spec bitwise_complement(n :: integer) :: integer\\n  def bitwise_complement(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec bitwise_complement(N :: integer()) -> integer().\\nbitwise_complement(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def bitwiseComplement(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!119\n",
            "construct-binary-search-tree-from-preorder-traversal 1050\n",
            "{'id': 1050, 'name': 'construct-binary-search-tree-from-preorder-traversal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/', 'task_description': 'Given an array of integers preorder, which represents the **preorder traversal** of a BST (i.e., **binary search tree**), construct the tree and return _its root_. It is **guaranteed** that there is always possible to find a binary search tree with the given requirements for the given test cases. A **binary search tree** is a binary tree where for every node, any descendant of `Node.left` has a value **strictly less than** `Node.val`, and any descendant of `Node.right` has a value **strictly greater than** `Node.val`. A **preorder traversal** of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`. **Example 1:** ``` **Input:** preorder = [8,5,1,7,10,12] **Output:** [8,5,10,1,7,null,12] ``` **Example 2:** ``` **Input:** preorder = [1,3] **Output:** [1,null,3] ``` **Constraints:** `1 <= preorder.length <= 100` `1 <= preorder[i] <= 1000` All the values of `preorder` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'preorder = [8,5,1,7,10,12]', 'output': '[8,5,10,1,7,null,12]'}, {'label': 'Example 2', 'input': 'preorder = [1,3]', 'output': '[1,null,3]'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec bst_from_preorder(preorder :: [integer]) :: TreeNode.t | nil\\n  def bst_from_preorder(preorder) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec bst_from_preorder(Preorder :: [integer()]) -> #tree_node{} | null.\\nbst_from_preorder(Preorder) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def bstFromPreorder(preorder: Array[Int]): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!120\n",
            "minimum-domino-rotations-for-equal-row 1049\n",
            "{'id': 1049, 'name': 'minimum-domino-rotations-for-equal-row', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/', 'task_description': 'In a row of dominoes, `tops[i]` and `bottoms[i]` represent the top and bottom halves of the `ith` domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.) We may rotate the `ith` domino, so that `tops[i]` and `bottoms[i]` swap values. Return the minimum number of rotations so that all the values in `tops` are the same, or all the values in `bottoms` are the same. If it cannot be done, return `-1`. **Example 1:** ``` **Input:** tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2] **Output:** 2 **Explanation:** The first figure represents the dominoes as given by tops and bottoms: before we do any rotations. If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure. ``` **Example 2:** ``` **Input:** tops = [3,5,1,2,3], bottoms = [3,6,3,3,4] **Output:** -1 **Explanation:** In this case, it is not possible to rotate the dominoes to make one row of values equal. ``` **Constraints:** `2 <= tops.length <= 2 * 104` `bottoms.length == tops.length` `1 <= tops[i], bottoms[i] <= 6`', 'test_case': [{'label': 'Example 1', 'input': 'tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]', 'output': '2 Explanation: The first figure represents the dominoes as given by tops and bottoms: before we do any rotations.\\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.'}, {'label': 'Example 2', 'input': 'tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]', 'output': '-1 Explanation: In this case, it is not possible to rotate the dominoes to make one row of values equal.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_domino_rotations(tops :: [integer], bottoms :: [integer]) :: integer\\n  def min_domino_rotations(tops, bottoms) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_domino_rotations(Tops :: [integer()], Bottoms :: [integer()]) -> integer().\\nmin_domino_rotations(Tops, Bottoms) ->\\n  .', 'scala_template': 'object Solution {\\n    def minDominoRotations(tops: Array[Int], bottoms: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!121\n",
            "clumsy-factorial 1048\n",
            "{'id': 1048, 'name': 'clumsy-factorial', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/clumsy-factorial/', 'task_description': \"The **factorial** of a positive integer `n` is the product of all positive integers less than or equal to `n`. For example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`. We make a **clumsy factorial** using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply `'*'`, divide `'/'`, add `'+'`, and subtract `'-'` in this order. For example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`. However, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right. Additionally, the division that we use is floor division such that `10 * 9 / 8 = 90 / 8 = 11`. Given an integer `n`, return _the clumsy factorial of _`n`. **Example 1:** ``` **Input:** n = 4 **Output:** 7 **Explanation:** 7 = 4 * 3 / 2 + 1 ``` **Example 2:** ``` **Input:** n = 10 **Output:** 12 **Explanation:** 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1 ``` **Constraints:** `1 <= n <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'n = 4', 'output': '7 Explanation: 7 = 4 * 3 / 2 + 1'}, {'label': 'Example 2', 'input': 'n = 10', 'output': '12 Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec clumsy(n :: integer) :: integer\\n  def clumsy(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec clumsy(N :: integer()) -> integer().\\nclumsy(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def clumsy(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!122\n",
            "maximize-sum-of-array-after-k-negations 1047\n",
            "{'id': 1047, 'name': 'maximize-sum-of-array-after-k-negations', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/maximize-sum-of-array-after-k-negations/', 'task_description': 'Given an integer array `nums` and an integer `k`, modify the array in the following way: choose an index `i` and replace `nums[i]` with `-nums[i]`. You should apply this process exactly `k` times. You may choose the same index `i` multiple times. Return _the largest possible sum of the array after modifying it in this way_. **Example 1:** ``` **Input:** nums = [4,2,3], k = 1 **Output:** 5 **Explanation:** Choose index 1 and nums becomes [4,-2,3]. ``` **Example 2:** ``` **Input:** nums = [3,-1,0,2], k = 3 **Output:** 6 **Explanation:** Choose indices (1, 2, 2) and nums becomes [3,1,0,2]. ``` **Example 3:** ``` **Input:** nums = [2,-3,-1,5,-4], k = 2 **Output:** 13 **Explanation:** Choose indices (1, 4) and nums becomes [2,3,-1,5,4]. ``` **Constraints:** `1 <= nums.length <= 104` `-100 <= nums[i] <= 100` `1 <= k <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,2,3], k = 1', 'output': '5 Explanation: Choose index 1 and nums becomes [4,-2,3].'}, {'label': 'Example 2', 'input': 'nums = [3,-1,0,2], k = 3', 'output': '6 Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].'}, {'label': 'Example 3', 'input': 'nums = [2,-3,-1,5,-4], k = 2', 'output': '13 Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_sum_after_k_negations(nums :: [integer], k :: integer) :: integer\\n  def largest_sum_after_k_negations(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_sum_after_k_negations(Nums :: [integer()], K :: integer()) -> integer().\\nlargest_sum_after_k_negations(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestSumAfterKNegations(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!123\n",
            "max-consecutive-ones-iii 1046\n",
            "{'id': 1046, 'name': 'max-consecutive-ones-iii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/max-consecutive-ones-iii/', 'task_description': \"Given a binary array `nums` and an integer `k`, return _the maximum number of consecutive _`1`_'s in the array if you can flip at most_ `k` `0`'s. **Example 1:** ``` **Input:** nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2 **Output:** 6 **Explanation:** [1,1,1,0,0,**1**,1,1,1,1,**1**] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined. ``` **Example 2:** ``` **Input:** nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3 **Output:** 10 **Explanation:** [0,0,1,1,**1**,**1**,1,1,1,**1**,1,1,0,0,0,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined. ``` **Constraints:** `1 <= nums.length <= 105` `nums[i]` is either `0` or `1`. `0 <= k <= nums.length`\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2', 'output': '6 Explanation: [1,1,1,0,0, 1 ,1,1,1,1, 1 ]\\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.'}, {'label': 'Example 2', 'input': 'nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3', 'output': '10 Explanation: [0,0, 1,1, 1 , 1 ,1,1,1, 1 ,1,1 ,0,0,0,1,1,1,1]\\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_ones(nums :: [integer], k :: integer) :: integer\\n  def longest_ones(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_ones(Nums :: [integer()], K :: integer()) -> integer().\\nlongest_ones(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestOnes(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!124\n",
            "check-if-word-is-valid-after-substitutions 1045\n",
            "{'id': 1045, 'name': 'check-if-word-is-valid-after-substitutions', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/', 'task_description': 'Given a string `s`, determine if it is **valid**. A string `s` is **valid** if, starting with an empty string `t = \"\"`, you can **transform **`t`** into **`s` after performing the following operation **any number of times**: Insert string `\"abc\"` into any position in `t`. More formally, `t` becomes `tleft + \"abc\" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be **empty**. Return `true` _if _`s`_ is a **valid** string, otherwise, return_ `false`. **Example 1:** ``` **Input:** s = \"aabcbc\" **Output:** true **Explanation:** \"\" -> \"abc\" -> \"aabcbc\" Thus, \"aabcbc\" is valid. ``` **Example 2:** ``` **Input:** s = \"abcabcababcc\" **Output:** true **Explanation:** \"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\" Thus, \"abcabcababcc\" is valid. ``` **Example 3:** ``` **Input:** s = \"abccba\" **Output:** false **Explanation:** It is impossible to get \"abccba\" using the operation. ``` **Constraints:** `1 <= s.length <= 2 * 104` `s` consists of letters `\\'a\\'`, `\\'b\\'`, and `\\'c\\'`', 'test_case': [{'label': 'Example 1', 'input': 's = \"aabcbc\"', 'output': 'true Explanation: \"\" -> \" abc \" -> \"a abc bc\"\\nThus, \"aabcbc\" is valid.'}, {'label': 'Example 2', 'input': 's = \"abcabcababcc\"', 'output': 'true Explanation: \"\" -> \" abc \" -> \"abc abc \" -> \"abcabc abc \" -> \"abcabcab abc c\"\\nThus, \"abcabcababcc\" is valid.'}, {'label': 'Example 3', 'input': 's = \"abccba\"', 'output': 'false Explanation: It is impossible to get \"abccba\" using the operation.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_valid(s :: String.t) :: boolean\\n  def is_valid(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\\nis_valid(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def isValid(s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!125\n",
            "find-common-characters 1044\n",
            "{'id': 1044, 'name': 'find-common-characters', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-common-characters/', 'task_description': 'Given a string array `words`, return _an array of all characters that show up in all strings within the _`words`_ (including duplicates)_. You may return the answer in **any order**. **Example 1:** ``` **Input:** words = [\"bella\",\"label\",\"roller\"] **Output:** [\"e\",\"l\",\"l\"] ``` **Example 2:** ``` **Input:** words = [\"cool\",\"lock\",\"cook\"] **Output:** [\"c\",\"o\"] ``` **Constraints:** `1 <= words.length <= 100` `1 <= words[i].length <= 100` `words[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"bella\",\"label\",\"roller\"]', 'output': '[\"e\",\"l\",\"l\"]'}, {'label': 'Example 2', 'input': 'words = [\"cool\",\"lock\",\"cook\"]', 'output': '[\"c\",\"o\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec common_chars(words :: [String.t]) :: [String.t]\\n  def common_chars(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec common_chars(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\ncommon_chars(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def commonChars(words: Array[String]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!126\n",
            "grid-illumination 1043\n",
            "{'id': 1043, 'name': 'grid-illumination', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/grid-illumination/', 'task_description': 'There is a 2D `grid` of size `n x n` where each cell of this grid has a lamp that is initially **turned off**. You are given a 2D array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is **turned on**. Even if the same lamp is listed more than once, it is turned on. When a lamp is turned on, it **illuminates its cell** and **all other cells** in the same **row, column, or diagonal**. You are also given another 2D array `queries`, where `queries[j] = [rowj, colj]`. For the `jth` query, determine whether `grid[rowj][colj]` is illuminated or not. After answering the `jth` query, **turn off** the lamp at `grid[rowj][colj]` and its **8 adjacent lamps** if they exist. A lamp is adjacent if its cell shares either a side or corner with `grid[rowj][colj]`. Return _an array of integers _`ans`_,__ where _`ans[j]`_ should be _`1`_ if the cell in the _`jth`_ query was illuminated, or _`0`_ if the lamp was not._ **Example 1:** ``` **Input:** n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]] **Output:** [1,0] **Explanation:** We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4]. The 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square. The 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle. ``` **Example 2:** ``` **Input:** n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]] **Output:** [1,1] ``` **Example 3:** ``` **Input:** n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]] **Output:** [1,1,0] ``` **Constraints:** `1 <= n <= 109` `0 <= lamps.length <= 20000` `0 <= queries.length <= 20000` `lamps[i].length == 2` `0 <= rowi, coli < n` `queries[j].length == 2` `0 <= rowj, colj < n`', 'test_case': [{'label': 'Example 1', 'input': 'n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]', 'output': '[1,0] Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\\nThe 0 th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square. The 1 st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.'}, {'label': 'Example 2', 'input': 'n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]', 'output': '[1,1]'}, {'label': 'Example 3', 'input': 'n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]', 'output': '[1,1,0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec grid_illumination(n :: integer, lamps :: [[integer]], queries :: [[integer]]) :: [integer]\\n  def grid_illumination(n, lamps, queries) do\\n    \\n  end\\nend', 'erlang_template': '-spec grid_illumination(N :: integer(), Lamps :: [[integer()]], Queries :: [[integer()]]) -> [integer()].\\ngrid_illumination(N, Lamps, Queries) ->\\n  .', 'scala_template': 'object Solution {\\n    def gridIllumination(n: Int, lamps: Array[Array[Int]], queries: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!127\n",
            "minimum-cost-to-merge-stones 1042\n",
            "{'id': 1042, 'name': 'minimum-cost-to-merge-stones', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimum-cost-to-merge-stones/', 'task_description': \"There are `n` piles of `stones` arranged in a row. The `ith` pile has `stones[i]` stones. A move consists of merging exactly `k` **consecutive** piles into one pile, and the cost of this move is equal to the total number of stones in these `k` piles. Return _the minimum cost to merge all piles of stones into one pile_. If it is impossible, return `-1`. **Example 1:** ``` **Input:** stones = [3,2,4,1], k = 2 **Output:** 20 **Explanation:** We start with [3, 2, 4, 1]. We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1]. We merge [4, 1] for a cost of 5, and we are left with [5, 5]. We merge [5, 5] for a cost of 10, and we are left with [10]. The total cost was 20, and this is the minimum possible. ``` **Example 2:** ``` **Input:** stones = [3,2,4,1], k = 3 **Output:** -1 **Explanation:** After any merge operation, there are 2 piles left, and we can't merge anymore. So the task is impossible. ``` **Example 3:** ``` **Input:** stones = [3,5,1,2,6], k = 3 **Output:** 25 **Explanation:** We start with [3, 5, 1, 2, 6]. We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6]. We merge [3, 8, 6] for a cost of 17, and we are left with [17]. The total cost was 25, and this is the minimum possible. ``` **Constraints:** `n == stones.length` `1 <= n <= 30` `1 <= stones[i] <= 100` `2 <= k <= 30`\", 'test_case': [{'label': 'Example 1', 'input': 'stones = [3,2,4,1], k = 2', 'output': '20 Explanation: We start with [3, 2, 4, 1].\\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\\nWe merge [5, 5] for a cost of 10, and we are left with [10].\\nThe total cost was 20, and this is the minimum possible.'}, {'label': 'Example 2', 'input': 'stones = [3,2,4,1], k = 3', 'output': \"-1 Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.\"}, {'label': 'Example 3', 'input': 'stones = [3,5,1,2,6], k = 3', 'output': '25 Explanation: We start with [3, 5, 1, 2, 6].\\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\\nThe total cost was 25, and this is the minimum possible. Constraints: n == stones.length 1 <= n <= 30 1 <= stones[i] <= 100 2 <= k <= 30'}], 'elixir_template': 'defmodule Solution do\\n  @spec merge_stones(stones :: [integer], k :: integer) :: integer\\n  def merge_stones(stones, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec merge_stones(Stones :: [integer()], K :: integer()) -> integer().\\nmerge_stones(Stones, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def mergeStones(stones: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!128\n",
            "available-captures-for-rook 1041\n",
            "{'id': 1041, 'name': 'available-captures-for-rook', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/available-captures-for-rook/', 'task_description': 'You are given an `8 x 8` **matrix** representing a chessboard. There is **exactly one** white rook represented by `\\'R\\'`, some number of white bishops `\\'B\\'`, and some number of black pawns `\\'p\\'`. Empty squares are represented by `\\'.\\'`. A rook can move any number of squares horizontally or vertically (up, down, left, right) until it reaches another piece _or_ the edge of the board. A rook is **attacking** a pawn if it can move to the pawn\\'s square in one move. Note: A rook cannot move through other pieces, such as bishops or pawns. This means a rook cannot attack a pawn if there is another piece blocking the path. Return the **number of pawns** the white rook is **attacking**. **Example 1:** **Input:** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]] **Output:** 3 **Explanation:** In this example, the rook is attacking all the pawns. **Example 2:** **Input:** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]] **Output:** 0 **Explanation:** The bishops are blocking the rook from attacking any of the pawns. **Example 3:** **Input:** board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]] **Output:** 3 **Explanation:** The rook is attacking the pawns at positions b5, d6, and f5. **Constraints:** `board.length == 8` `board[i].length == 8` `board[i][j]` is either `\\'R\\'`, `\\'.\\'`, `\\'B\\'`, or `\\'p\\'` There is exactly one cell with `board[i][j] == \\'R\\'`', 'test_case': [{'label': 'Example 1', 'input': 'board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]', 'output': '3 Explanation: In this example, the rook is attacking all the pawns.'}, {'label': 'Example 2', 'input': 'board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]', 'output': '0 Explanation: The bishops are blocking the rook from attacking any of the pawns.'}, {'label': 'Example 3', 'input': 'board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]', 'output': \"3 Explanation: The rook is attacking the pawns at positions b5, d6, and f5. Constraints: board.length == 8 board[i].length == 8 board[i][j] is either 'R' , '.' , 'B' , or 'p' There is exactly one cell with board[i][j] == 'R'\"}], 'elixir_template': 'defmodule Solution do\\n  @spec num_rook_captures(board :: [[char]]) :: integer\\n  def num_rook_captures(board) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_rook_captures(Board :: [[char()]]) -> integer().\\nnum_rook_captures(Board) ->\\n  .', 'scala_template': 'object Solution {\\n    def numRookCaptures(board: Array[Array[Char]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!129\n",
            "maximum-binary-tree-ii 1040\n",
            "{'id': 1040, 'name': 'maximum-binary-tree-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-binary-tree-ii/', 'task_description': 'A **maximum tree** is a tree where every node has a value greater than any other value in its subtree. You are given the `root` of a maximum binary tree and an integer `val`. Just as in the previous problem, the given tree was constructed from a list `a` (`root = Construct(a)`) recursively with the following `Construct(a)` routine: If `a` is empty, return `null`. Otherwise, let `a[i]` be the largest element of `a`. Create a `root` node with the value `a[i]`. The left child of `root` will be `Construct([a[0], a[1], ..., a[i - 1]])`. The right child of `root` will be `Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]])`. Return `root`. Note that we were not given `a` directly, only a root node `root = Construct(a)`. Suppose `b` is a copy of `a` with the value `val` appended to it. It is guaranteed that `b` has unique values. Return `Construct(b)`. **Example 1:** ``` **Input:** root = [4,1,3,null,null,2], val = 5 **Output:** [5,4,null,1,3,null,null,2] **Explanation:** a = [1,4,2,3], b = [1,4,2,3,5] ``` **Example 2:** ``` **Input:** root = [5,2,4,null,1], val = 3 **Output:** [5,2,4,null,1,null,3] **Explanation:** a = [2,1,5,4], b = [2,1,5,4,3] ``` **Example 3:** ``` **Input:** root = [5,2,3,null,1], val = 4 **Output:** [5,2,4,null,1,3] **Explanation:** a = [2,1,5,3], b = [2,1,5,3,4] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 100]`. `1 <= Node.val <= 100` All the values of the tree are **unique**. `1 <= val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [4,1,3,null,null,2], val = 5', 'output': '[5,4,null,1,3,null,null,2] Explanation: a = [1,4,2,3], b = [1,4,2,3,5]'}, {'label': 'Example 2', 'input': 'root = [5,2,4,null,1], val = 3', 'output': '[5,2,4,null,1,null,3] Explanation: a = [2,1,5,4], b = [2,1,5,4,3]'}, {'label': 'Example 3', 'input': 'root = [5,2,3,null,1], val = 4', 'output': '[5,2,4,null,1,3] Explanation: a = [2,1,5,3], b = [2,1,5,3,4] Constraints: The number of nodes in the tree is in the range [1, 100] . 1 <= Node.val <= 100 All the values of the tree are unique . 1 <= val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec insert_into_max_tree(root :: TreeNode.t | nil, val :: integer) :: TreeNode.t | nil\\n  def insert_into_max_tree(root, val) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec insert_into_max_tree(Root :: #tree_node{} | null, Val :: integer()) -> #tree_node{} | null.\\ninsert_into_max_tree(Root, Val) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def insertIntoMaxTree(root: TreeNode, `val`: Int): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!130\n",
            "find-the-town-judge 1039\n",
            "{'id': 1039, 'name': 'find-the-town-judge', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-the-town-judge/', 'task_description': 'In a town, there are `n` people labeled from `1` to `n`. There is a rumor that one of these people is secretly the town judge. If the town judge exists, then: The town judge trusts nobody. Everybody (except for the town judge) trusts the town judge. There is exactly one person that satisfies properties **1** and **2**. You are given an array `trust` where `trust[i] = [ai, bi]` representing that the person labeled `ai` trusts the person labeled `bi`. If a trust relationship does not exist in `trust` array, then such a trust relationship does not exist. Return _the label of the town judge if the town judge exists and can be identified, or return _`-1`_ otherwise_. **Example 1:** ``` **Input:** n = 2, trust = [[1,2]] **Output:** 2 ``` **Example 2:** ``` **Input:** n = 3, trust = [[1,3],[2,3]] **Output:** 3 ``` **Example 3:** ``` **Input:** n = 3, trust = [[1,3],[2,3],[3,1]] **Output:** -1 ``` **Constraints:** `1 <= n <= 1000` `0 <= trust.length <= 104` `trust[i].length == 2` All the pairs of `trust` are **unique**. `ai != bi` `1 <= ai, bi <= n`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2, trust = [[1,2]]', 'output': '2'}, {'label': 'Example 2', 'input': 'n = 3, trust = [[1,3],[2,3]]', 'output': '3'}, {'label': 'Example 3', 'input': 'n = 3, trust = [[1,3],[2,3],[3,1]]', 'output': '-1'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_judge(n :: integer, trust :: [[integer]]) :: integer\\n  def find_judge(n, trust) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_judge(N :: integer(), Trust :: [[integer()]]) -> integer().\\nfind_judge(N, Trust) ->\\n  .', 'scala_template': 'object Solution {\\n    def findJudge(n: Int, trust: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!131\n",
            "number-of-squareful-arrays 1038\n",
            "{'id': 1038, 'name': 'number-of-squareful-arrays', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/number-of-squareful-arrays/', 'task_description': 'An array is **squareful** if the sum of every pair of adjacent elements is a **perfect square**. Given an integer array nums, return _the number of permutations of _`nums`_ that are **squareful**_. Two permutations `perm1` and `perm2` are different if there is some index `i` such that `perm1[i] != perm2[i]`. **Example 1:** ``` **Input:** nums = [1,17,8] **Output:** 2 **Explanation:** [1,8,17] and [17,8,1] are the valid permutations. ``` **Example 2:** ``` **Input:** nums = [2,2,2] **Output:** 1 ``` **Constraints:** `1 <= nums.length <= 12` `0 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,17,8]', 'output': '2 Explanation: [1,8,17] and [17,8,1] are the valid permutations.'}, {'label': 'Example 2', 'input': 'nums = [2,2,2]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_squareful_perms(nums :: [integer]) :: integer\\n  def num_squareful_perms(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_squareful_perms(Nums :: [integer()]) -> integer().\\nnum_squareful_perms(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSquarefulPerms(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!132\n",
            "minimum-number-of-k-consecutive-bit-flips 1037\n",
            "{'id': 1037, 'name': 'minimum-number-of-k-consecutive-bit-flips', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/', 'task_description': 'You are given a binary array `nums` and an integer `k`. A **k-bit flip** is choosing a **subarray** of length `k` from `nums` and simultaneously changing every `0` in the subarray to `1`, and every `1` in the subarray to `0`. Return _the minimum number of **k-bit flips** required so that there is no _`0`_ in the array_. If it is not possible, return `-1`. A **subarray** is a **contiguous** part of an array. **Example 1:** ``` **Input:** nums = [0,1,0], k = 1 **Output:** 2 **Explanation:** Flip nums[0], then flip nums[2]. ``` **Example 2:** ``` **Input:** nums = [1,1,0], k = 2 **Output:** -1 **Explanation:** No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1]. ``` **Example 3:** ``` **Input:** nums = [0,0,0,1,0,1,1,0], k = 3 **Output:** 3 **Explanation:** Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0] Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0] Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1] ``` **Constraints:** `1 <= nums.length <= 105` `1 <= k <= nums.length`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [0,1,0], k = 1', 'output': '2 Explanation: Flip nums[0], then flip nums[2].'}, {'label': 'Example 2', 'input': 'nums = [1,1,0], k = 2', 'output': '-1 Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].'}, {'label': 'Example 3', 'input': 'nums = [0,0,0,1,0,1,1,0], k = 3', 'output': '3 Explanation: Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]\\nFlip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]\\nFlip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_k_bit_flips(nums :: [integer], k :: integer) :: integer\\n  def min_k_bit_flips(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_k_bit_flips(Nums :: [integer()], K :: integer()) -> integer().\\nmin_k_bit_flips(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def minKBitFlips(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!133\n",
            "rotting-oranges 1036\n",
            "{'id': 1036, 'name': 'rotting-oranges', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rotting-oranges/', 'task_description': 'You are given an `m x n` `grid` where each cell can have one of three values: `0` representing an empty cell, `1` representing a fresh orange, or `2` representing a rotten orange. Every minute, any fresh orange that is **4-directionally adjacent** to a rotten orange becomes rotten. Return _the minimum number of minutes that must elapse until no cell has a fresh orange_. If _this is impossible, return_ `-1`. **Example 1:** ``` **Input:** grid = [[2,1,1],[1,1,0],[0,1,1]] **Output:** 4 ``` **Example 2:** ``` **Input:** grid = [[2,1,1],[0,1,1],[1,0,1]] **Output:** -1 **Explanation:** The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally. ``` **Example 3:** ``` **Input:** grid = [[0,2]] **Output:** 0 **Explanation:** Since there are already no fresh oranges at minute 0, the answer is just 0. ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 10` `grid[i][j]` is `0`, `1`, or `2`.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[2,1,1],[1,1,0],[0,1,1]]', 'output': '4'}, {'label': 'Example 2', 'input': 'grid = [[2,1,1],[0,1,1],[1,0,1]]', 'output': '-1 Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.'}, {'label': 'Example 3', 'input': 'grid = [[0,2]]', 'output': '0 Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0. Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 10 grid[i][j] is 0 , 1 , or 2 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec oranges_rotting(grid :: [[integer]]) :: integer\\n  def oranges_rotting(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec oranges_rotting(Grid :: [[integer()]]) -> integer().\\noranges_rotting(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def orangesRotting(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!134\n",
            "cousins-in-binary-tree 1035\n",
            "{'id': 1035, 'name': 'cousins-in-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/cousins-in-binary-tree/', 'task_description': 'Given the `root` of a binary tree with unique values and the values of two different nodes of the tree `x` and `y`, return `true` _if the nodes corresponding to the values _`x`_ and _`y`_ in the tree are **cousins**, or _`false`_ otherwise._ Two nodes of a binary tree are **cousins** if they have the same depth with different parents. Note that in a binary tree, the root node is at the depth `0`, and children of each depth `k` node are at the depth `k + 1`. **Example 1:** ``` **Input:** root = [1,2,3,4], x = 4, y = 3 **Output:** false ``` **Example 2:** ``` **Input:** root = [1,2,3,null,4,null,5], x = 5, y = 4 **Output:** true ``` **Example 3:** ``` **Input:** root = [1,2,3,null,4], x = 2, y = 3 **Output:** false ``` **Constraints:** The number of nodes in the tree is in the range `[2, 100]`. `1 <= Node.val <= 100` Each node has a **unique** value. `x != y` `x` and `y` are exist in the tree.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4], x = 4, y = 3', 'output': 'false'}, {'label': 'Example 2', 'input': 'root = [1,2,3,null,4,null,5], x = 5, y = 4', 'output': 'true'}, {'label': 'Example 3', 'input': 'root = [1,2,3,null,4], x = 2, y = 3', 'output': 'false Constraints: The number of nodes in the tree is in the range [2, 100] . 1 <= Node.val <= 100 Each node has a unique value. x != y x and y are exist in the tree.'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_cousins(root :: TreeNode.t | nil, x :: integer, y :: integer) :: boolean\\n  def is_cousins(root, x, y) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_cousins(Root :: #tree_node{} | null, X :: integer(), Y :: integer()) -> boolean().\\nis_cousins(Root, X, Y) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isCousins(root: TreeNode, x: Int, y: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!135\n",
            "subarrays-with-k-different-integers 1034\n",
            "{'id': 1034, 'name': 'subarrays-with-k-different-integers', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/subarrays-with-k-different-integers/', 'task_description': 'Given an integer array `nums` and an integer `k`, return _the number of **good subarrays** of _`nums`. A **good array** is an array where the number of different integers in that array is exactly `k`. For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`. A **subarray** is a **contiguous** part of an array. **Example 1:** ``` **Input:** nums = [1,2,1,2,3], k = 2 **Output:** 7 **Explanation:** Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2] ``` **Example 2:** ``` **Input:** nums = [1,2,1,3,4], k = 3 **Output:** 3 **Explanation:** Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4]. ``` **Constraints:** `1 <= nums.length <= 2 * 104` `1 <= nums[i], k <= nums.length`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,1,2,3], k = 2', 'output': '7 Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]'}, {'label': 'Example 2', 'input': 'nums = [1,2,1,3,4], k = 3', 'output': '3 Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].'}], 'elixir_template': 'defmodule Solution do\\n  @spec subarrays_with_k_distinct(nums :: [integer], k :: integer) :: integer\\n  def subarrays_with_k_distinct(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec subarrays_with_k_distinct(Nums :: [integer()], K :: integer()) -> integer().\\nsubarrays_with_k_distinct(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def subarraysWithKDistinct(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!136\n",
            "broken-calculator 1033\n",
            "{'id': 1033, 'name': 'broken-calculator', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/broken-calculator/', 'task_description': 'There is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can: multiply the number on display by `2`, or subtract `1` from the number on display. Given two integers `startValue` and `target`, return _the minimum number of operations needed to display _`target`_ on the calculator_. **Example 1:** ``` **Input:** startValue = 2, target = 3 **Output:** 2 **Explanation:** Use double operation and then decrement operation {2 -> 4 -> 3}. ``` **Example 2:** ``` **Input:** startValue = 5, target = 8 **Output:** 2 **Explanation:** Use decrement and then double {5 -> 4 -> 8}. ``` **Example 3:** ``` **Input:** startValue = 3, target = 10 **Output:** 3 **Explanation:** Use double, decrement and double {3 -> 6 -> 5 -> 10}. ``` **Constraints:** `1 <= startValue, target <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'startValue = 2, target = 3', 'output': '2 Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.'}, {'label': 'Example 2', 'input': 'startValue = 5, target = 8', 'output': '2 Explanation: Use decrement and then double {5 -> 4 -> 8}.'}, {'label': 'Example 3', 'input': 'startValue = 3, target = 10', 'output': '3 Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.'}], 'elixir_template': 'defmodule Solution do\\n  @spec broken_calc(start_value :: integer, target :: integer) :: integer\\n  def broken_calc(start_value, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec broken_calc(StartValue :: integer(), Target :: integer()) -> integer().\\nbroken_calc(StartValue, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def brokenCalc(startValue: Int, target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!137\n",
            "satisfiability-of-equality-equations 1032\n",
            "{'id': 1032, 'name': 'satisfiability-of-equality-equations', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/satisfiability-of-equality-equations/', 'task_description': 'You are given an array of strings `equations` that represent relationships between variables where each string `equations[i]` is of length `4` and takes one of two different forms: `\"xi==yi\"` or `\"xi!=yi\"`.Here, `xi` and `yi` are lowercase letters (not necessarily different) that represent one-letter variable names. Return `true`_ if it is possible to assign integers to variable names so as to satisfy all the given equations, or _`false`_ otherwise_. **Example 1:** ``` **Input:** equations = [\"a==b\",\"b!=a\"] **Output:** false **Explanation:** If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second. There is no way to assign the variables to satisfy both equations. ``` **Example 2:** ``` **Input:** equations = [\"b==a\",\"a==b\"] **Output:** true **Explanation:** We could assign a = 1 and b = 1 to satisfy both equations. ``` **Constraints:** `1 <= equations.length <= 500` `equations[i].length == 4` `equations[i][0]` is a lowercase letter. `equations[i][1]` is either `\\'=\\'` or `\\'!\\'`. `equations[i][2]` is `\\'=\\'`. `equations[i][3]` is a lowercase letter.', 'test_case': [{'label': 'Example 1', 'input': 'equations = [\"a==b\",\"b!=a\"]', 'output': 'false Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\\nThere is no way to assign the variables to satisfy both equations.'}, {'label': 'Example 2', 'input': 'equations = [\"b==a\",\"a==b\"]', 'output': 'true Explanation: We could assign a = 1 and b = 1 to satisfy both equations.'}], 'elixir_template': 'defmodule Solution do\\n  @spec equations_possible(equations :: [String.t]) :: boolean\\n  def equations_possible(equations) do\\n    \\n  end\\nend', 'erlang_template': '-spec equations_possible(Equations :: [unicode:unicode_binary()]) -> boolean().\\nequations_possible(Equations) ->\\n  .', 'scala_template': 'object Solution {\\n    def equationsPossible(equations: Array[String]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!138\n",
            "add-to-array-form-of-integer 1031\n",
            "{'id': 1031, 'name': 'add-to-array-form-of-integer', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/add-to-array-form-of-integer/', 'task_description': 'The **array-form** of an integer `num` is an array representing its digits in left to right order. For example, for `num = 1321`, the array form is `[1,3,2,1]`. Given `num`, the **array-form** of an integer, and an integer `k`, return _the **array-form** of the integer_ `num + k`. **Example 1:** ``` **Input:** num = [1,2,0,0], k = 34 **Output:** [1,2,3,4] **Explanation:** 1200 + 34 = 1234 ``` **Example 2:** ``` **Input:** num = [2,7,4], k = 181 **Output:** [4,5,5] **Explanation:** 274 + 181 = 455 ``` **Example 3:** ``` **Input:** num = [2,1,5], k = 806 **Output:** [1,0,2,1] **Explanation:** 215 + 806 = 1021 ``` **Constraints:** `1 <= num.length <= 104` `0 <= num[i] <= 9` `num` does not contain any leading zeros except for the zero itself. `1 <= k <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'num = [1,2,0,0], k = 34', 'output': '[1,2,3,4] Explanation: 1200 + 34 = 1234'}, {'label': 'Example 2', 'input': 'num = [2,7,4], k = 181', 'output': '[4,5,5] Explanation: 274 + 181 = 455'}, {'label': 'Example 3', 'input': 'num = [2,1,5], k = 806', 'output': '[1,0,2,1] Explanation: 215 + 806 = 1021'}], 'elixir_template': 'defmodule Solution do\\n  @spec add_to_array_form(num :: [integer], k :: integer) :: [integer]\\n  def add_to_array_form(num, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec add_to_array_form(Num :: [integer()], K :: integer()) -> [integer()].\\nadd_to_array_form(Num, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def addToArrayForm(num: Array[Int], k: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!139\n",
            "smallest-string-starting-from-leaf 1030\n",
            "{'id': 1030, 'name': 'smallest-string-starting-from-leaf', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/smallest-string-starting-from-leaf/', 'task_description': 'You are given the `root` of a binary tree where each node has a value in the range `[0, 25]` representing the letters `\\'a\\'` to `\\'z\\'`. Return _the **lexicographically smallest** string that starts at a leaf of this tree and ends at the root_. As a reminder, any shorter prefix of a string is **lexicographically smaller**. For example, `\"ab\"` is lexicographically smaller than `\"aba\"`. A leaf of a node is a node that has no children. **Example 1:** ``` **Input:** root = [0,1,2,3,4,3,4] **Output:** \"dba\" ``` **Example 2:** ``` **Input:** root = [25,1,3,1,3,0,2] **Output:** \"adz\" ``` **Example 3:** ``` **Input:** root = [2,2,1,null,1,0,null,0] **Output:** \"abc\" ``` **Constraints:** The number of nodes in the tree is in the range `[1, 8500]`. `0 <= Node.val <= 25`', 'test_case': [{'label': 'Example 1', 'input': 'root = [0,1,2,3,4,3,4]', 'output': '\"dba\"'}, {'label': 'Example 2', 'input': 'root = [25,1,3,1,3,0,2]', 'output': '\"adz\"'}, {'label': 'Example 3', 'input': 'root = [2,2,1,null,1,0,null,0]', 'output': '\"abc\" Constraints: The number of nodes in the tree is in the range [1, 8500] . 0 <= Node.val <= 25'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec smallest_from_leaf(root :: TreeNode.t | nil) :: String.t\\n  def smallest_from_leaf(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec smallest_from_leaf(Root :: #tree_node{} | null) -> unicode:unicode_binary().\\nsmallest_from_leaf(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def smallestFromLeaf(root: TreeNode): String = {\\n        \\n    }\\n}'}\n",
            "Done!140\n",
            "vertical-order-traversal-of-a-binary-tree 1029\n",
            "{'id': 1029, 'name': 'vertical-order-traversal-of-a-binary-tree', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/', 'task_description': 'Given the `root` of a binary tree, calculate the **vertical order traversal** of the binary tree. For each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`. The **vertical order traversal** of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values. Return _the **vertical order traversal** of the binary tree_. **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** [[9],[3,15],[20],[7]] **Explanation:** Column -1: Only node 9 is in this column. Column 0: Nodes 3 and 15 are in this column in that order from top to bottom. Column 1: Only node 20 is in this column. Column 2: Only node 7 is in this column. ``` **Example 2:** ``` **Input:** root = [1,2,3,4,5,6,7] **Output:** [[4],[2],[1,5,6],[3],[7]] **Explanation:** Column -2: Only node 4 is in this column. Column -1: Only node 2 is in this column. Column 0: Nodes 1, 5, and 6 are in this column. 1 is at the top, so it comes first. 5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6. Column 1: Only node 3 is in this column. Column 2: Only node 7 is in this column. ``` **Example 3:** ``` **Input:** root = [1,2,3,4,6,5,7] **Output:** [[4],[2],[1,5,6],[3],[7]] **Explanation:** This case is the exact same as example 2, but with nodes 5 and 6 swapped. Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 1000]`. `0 <= Node.val <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': '[[9],[3,15],[20],[7]] Explanation: Column -1: Only node 9 is in this column.\\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\\nColumn 1: Only node 20 is in this column.\\nColumn 2: Only node 7 is in this column.'}, {'label': 'Example 2', 'input': 'root = [1,2,3,4,5,6,7]', 'output': '[[4],[2],[1,5,6],[3],[7]] Explanation: Column -2: Only node 4 is in this column.\\nColumn -1: Only node 2 is in this column.\\nColumn 0: Nodes 1, 5, and 6 are in this column.\\n          1 is at the top, so it comes first.\\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\\nColumn 1: Only node 3 is in this column.\\nColumn 2: Only node 7 is in this column.'}, {'label': 'Example 3', 'input': 'root = [1,2,3,4,6,5,7]', 'output': '[[4],[2],[1,5,6],[3],[7]] Explanation: This case is the exact same as example 2, but with nodes 5 and 6 swapped.\\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values. Constraints: The number of nodes in the tree is in the range [1, 1000] . 0 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec vertical_traversal(root :: TreeNode.t | nil) :: [[integer]]\\n  def vertical_traversal(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec vertical_traversal(Root :: #tree_node{} | null) -> [[integer()]].\\nvertical_traversal(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def verticalTraversal(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!141\n",
            "interval-list-intersections 1028\n",
            "{'id': 1028, 'name': 'interval-list-intersections', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/interval-list-intersections/', 'task_description': 'You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise **disjoint** and in **sorted order**. Return _the intersection of these two interval lists_. A **closed interval** `[a, b]` (with `a <= b`) denotes the set of real numbers `x` with `a <= x <= b`. The **intersection** of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`. **Example 1:** ``` **Input:** firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]] **Output:** [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]] ``` **Example 2:** ``` **Input:** firstList = [[1,3],[5,9]], secondList = [] **Output:** [] ``` **Constraints:** `0 <= firstList.length, secondList.length <= 1000` `firstList.length + secondList.length >= 1` `0 <= starti < endi <= 109` `endi < starti+1` `0 <= startj < endj <= 109 ` `endj < startj+1`', 'test_case': [{'label': 'Example 1', 'input': 'firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]', 'output': '[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]'}, {'label': 'Example 2', 'input': 'firstList = [[1,3],[5,9]], secondList = []', 'output': '[]'}], 'elixir_template': 'defmodule Solution do\\n  @spec interval_intersection(first_list :: [[integer]], second_list :: [[integer]]) :: [[integer]]\\n  def interval_intersection(first_list, second_list) do\\n    \\n  end\\nend', 'erlang_template': '-spec interval_intersection(FirstList :: [[integer()]], SecondList :: [[integer()]]) -> [[integer()]].\\ninterval_intersection(FirstList, SecondList) ->\\n  .', 'scala_template': 'object Solution {\\n    def intervalIntersection(firstList: Array[Array[Int]], secondList: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!142\n",
            "sum-of-even-numbers-after-queries 1027\n",
            "{'id': 1027, 'name': 'sum-of-even-numbers-after-queries', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sum-of-even-numbers-after-queries/', 'task_description': 'You are given an integer array `nums` and an array `queries` where `queries[i] = [vali, indexi]`. For each query `i`, first, apply `nums[indexi] = nums[indexi] + vali`, then print the sum of the even values of `nums`. Return _an integer array _`answer`_ where _`answer[i]`_ is the answer to the _`ith`_ query_. **Example 1:** ``` **Input:** nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]] **Output:** [8,6,2,4] **Explanation:** At the beginning, the array is [1,2,3,4]. After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8. After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6. After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2. After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4. ``` **Example 2:** ``` **Input:** nums = [1], queries = [[4,0]] **Output:** [0] ``` **Constraints:** `1 <= nums.length <= 104` `-104 <= nums[i] <= 104` `1 <= queries.length <= 104` `-104 <= vali <= 104` `0 <= indexi < nums.length`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]', 'output': '[8,6,2,4] Explanation: At the beginning, the array is [1,2,3,4].\\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.'}, {'label': 'Example 2', 'input': 'nums = [1], queries = [[4,0]]', 'output': '[0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec sum_even_after_queries(nums :: [integer], queries :: [[integer]]) :: [integer]\\n  def sum_even_after_queries(nums, queries) do\\n    \\n  end\\nend', 'erlang_template': '-spec sum_even_after_queries(Nums :: [integer()], Queries :: [[integer()]]) -> [integer()].\\nsum_even_after_queries(Nums, Queries) ->\\n  .', 'scala_template': 'object Solution {\\n    def sumEvenAfterQueries(nums: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!143\n",
            "string-without-aaa-or-bbb 1026\n",
            "{'id': 1026, 'name': 'string-without-aaa-or-bbb', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/string-without-aaa-or-bbb/', 'task_description': 'Given two integers `a` and `b`, return **any** string `s` such that: `s` has length `a + b` and contains exactly `a` `\\'a\\'` letters, and exactly `b` `\\'b\\'` letters, The substring `\\'aaa\\'` does not occur in `s`, and The substring `\\'bbb\\'` does not occur in `s`. **Example 1:** ``` **Input:** a = 1, b = 2 **Output:** \"abb\" **Explanation:** \"abb\", \"bab\" and \"bba\" are all correct answers. ``` **Example 2:** ``` **Input:** a = 4, b = 1 **Output:** \"aabaa\" ``` **Constraints:** `0 <= a, b <= 100` It is guaranteed such an `s` exists for the given `a` and `b`.', 'test_case': [{'label': 'Example 1', 'input': 'a = 1, b = 2', 'output': '\"abb\" Explanation: \"abb\", \"bab\" and \"bba\" are all correct answers.'}, {'label': 'Example 2', 'input': 'a = 4, b = 1', 'output': '\"aabaa\"'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def strWithout3a3b(a: Int, b: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!144\n",
            "minimum-cost-for-tickets 1025\n",
            "{'id': 1025, 'name': 'minimum-cost-for-tickets', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-cost-for-tickets/', 'task_description': 'You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array `days`. Each day is an integer from `1` to `365`. Train tickets are sold in **three different ways**: a **1-day** pass is sold for `costs[0]` dollars, a **7-day** pass is sold for `costs[1]` dollars, and a **30-day** pass is sold for `costs[2]` dollars. The passes allow that many days of consecutive travel. For example, if we get a **7-day** pass on day `2`, then we can travel for `7` days: `2`, `3`, `4`, `5`, `6`, `7`, and `8`. Return _the minimum number of dollars you need to travel every day in the given list of days_. **Example 1:** ``` **Input:** days = [1,4,6,7,8,20], costs = [2,7,15] **Output:** 11 **Explanation:** For example, here is one way to buy passes that lets you travel your travel plan: On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1. On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9. On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20. In total, you spent $11 and covered all the days of your travel. ``` **Example 2:** ``` **Input:** days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15] **Output:** 17 **Explanation:** For example, here is one way to buy passes that lets you travel your travel plan: On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30. On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31. In total, you spent $17 and covered all the days of your travel. ``` **Constraints:** `1 <= days.length <= 365` `1 <= days[i] <= 365` `days` is in strictly increasing order. `costs.length == 3` `1 <= costs[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'days = [1,4,6,7,8,20], costs = [2,7,15]', 'output': '11 Explanation: For example, here is one way to buy passes that lets you travel your travel plan:\\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\\nIn total, you spent $11 and covered all the days of your travel.'}, {'label': 'Example 2', 'input': 'days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]', 'output': '17 Explanation: For example, here is one way to buy passes that lets you travel your travel plan:\\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\\nIn total, you spent $17 and covered all the days of your travel.'}], 'elixir_template': 'defmodule Solution do\\n  @spec mincost_tickets(days :: [integer], costs :: [integer]) :: integer\\n  def mincost_tickets(days, costs) do\\n    \\n  end\\nend', 'erlang_template': '-spec mincost_tickets(Days :: [integer()], Costs :: [integer()]) -> integer().\\nmincost_tickets(Days, Costs) ->\\n  .', 'scala_template': 'object Solution {\\n    def mincostTickets(days: Array[Int], costs: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!145\n",
            "triples-with-bitwise-and-equal-to-zero 1024\n",
            "{'id': 1024, 'name': 'triples-with-bitwise-and-equal-to-zero', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/', 'task_description': 'Given an integer array nums, return _the number of **AND triples**_. An **AND triple** is a triple of indices `(i, j, k)` such that: `0 <= i < nums.length` `0 <= j < nums.length` `0 <= k < nums.length` `nums[i] & nums[j] & nums[k] == 0`, where `&` represents the bitwise-AND operator. **Example 1:** ``` **Input:** nums = [2,1,3] **Output:** 12 **Explanation:** We could choose the following i, j, k triples: (i=0, j=0, k=1) : 2 & 2 & 1 (i=0, j=1, k=0) : 2 & 1 & 2 (i=0, j=1, k=1) : 2 & 1 & 1 (i=0, j=1, k=2) : 2 & 1 & 3 (i=0, j=2, k=1) : 2 & 3 & 1 (i=1, j=0, k=0) : 1 & 2 & 2 (i=1, j=0, k=1) : 1 & 2 & 1 (i=1, j=0, k=2) : 1 & 2 & 3 (i=1, j=1, k=0) : 1 & 1 & 2 (i=1, j=2, k=0) : 1 & 3 & 2 (i=2, j=0, k=1) : 3 & 2 & 1 (i=2, j=1, k=0) : 3 & 1 & 2 ``` **Example 2:** ``` **Input:** nums = [0,0,0] **Output:** 27 ``` **Constraints:** `1 <= nums.length <= 1000` `0 <= nums[i] < 216`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,1,3]', 'output': '12 Explanation: We could choose the following i, j, k triples:\\n(i=0, j=0, k=1) : 2 & 2 & 1\\n(i=0, j=1, k=0) : 2 & 1 & 2\\n(i=0, j=1, k=1) : 2 & 1 & 1\\n(i=0, j=1, k=2) : 2 & 1 & 3\\n(i=0, j=2, k=1) : 2 & 3 & 1\\n(i=1, j=0, k=0) : 1 & 2 & 2\\n(i=1, j=0, k=1) : 1 & 2 & 1\\n(i=1, j=0, k=2) : 1 & 2 & 3\\n(i=1, j=1, k=0) : 1 & 1 & 2\\n(i=1, j=2, k=0) : 1 & 3 & 2\\n(i=2, j=0, k=1) : 3 & 2 & 1\\n(i=2, j=1, k=0) : 3 & 1 & 2'}, {'label': 'Example 2', 'input': 'nums = [0,0,0]', 'output': '27'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_triplets(nums :: [integer]) :: integer\\n  def count_triplets(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_triplets(Nums :: [integer()]) -> integer().\\ncount_triplets(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def countTriplets(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!146\n",
            "time-based-key-value-store 1023\n",
            "{'id': 1023, 'name': 'time-based-key-value-store', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/time-based-key-value-store/', 'task_description': 'Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key\\'s value at a certain timestamp. Implement the `TimeMap` class: `TimeMap()` Initializes the object of the data structure. `void set(String key, String value, int timestamp)` Stores the key `key` with the value `value` at the given time `timestamp`. `String get(String key, int timestamp)` Returns a value such that `set` was called previously, with `timestamp_prev <= timestamp`. If there are multiple such values, it returns the value associated with the largest `timestamp_prev`. If there are no values, it returns `\"\"`. **Example 1:** ``` **Input** [\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"] [[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]] **Output** [null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"] **Explanation** TimeMap timeMap = new TimeMap(); timeMap.set(\"foo\", \"bar\", 1); // store the key \"foo\" and value \"bar\" along with timestamp = 1. timeMap.get(\"foo\", 1); // return \"bar\" timeMap.get(\"foo\", 3); // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\". timeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4. timeMap.get(\"foo\", 4); // return \"bar2\" timeMap.get(\"foo\", 5); // return \"bar2\" ``` **Constraints:** `1 <= key.length, value.length <= 100` `key` and `value` consist of lowercase English letters and digits. `1 <= timestamp <= 107` All the timestamps `timestamp` of `set` are strictly increasing. At most `2 * 105` calls will be made to `set` and `get`.', 'test_case': [], 'elixir_template': 'defmodule TimeMap do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec set(key :: String.t, value :: String.t, timestamp :: integer) :: any\\n  def set(key, value, timestamp) do\\n    \\n  end\\n\\n  @spec get(key :: String.t, timestamp :: integer) :: String.t\\n  def get(key, timestamp) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# TimeMap.init_()\\n# TimeMap.set(key, value, timestamp)\\n# param_2 = TimeMap.get(key, timestamp)\\n\\n# TimeMap.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec time_map_init_() -> any().\\ntime_map_init_() ->\\n  .\\n\\n-spec time_map_set(Key :: unicode:unicode_binary(), Value :: unicode:unicode_binary(), Timestamp :: integer()) -> any().\\ntime_map_set(Key, Value, Timestamp) ->\\n  .\\n\\n-spec time_map_get(Key :: unicode:unicode_binary(), Timestamp :: integer()) -> unicode:unicode_binary().\\ntime_map_get(Key, Timestamp) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% time_map_init_(),\\n%% time_map_set(Key, Value, Timestamp),\\n%% Param_2 = time_map_get(Key, Timestamp),\\n\\n%% time_map_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class TimeMap() {\\n\\n    def set(key: String, value: String, timestamp: Int): Unit = {\\n        \\n    }\\n\\n    def get(key: String, timestamp: Int): String = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your TimeMap object will be instantiated and called as such:\\n * val obj = new TimeMap()\\n * obj.set(key,value,timestamp)\\n * val param_2 = obj.get(key,timestamp)\\n */'}\n",
            "Done!147\n",
            "unique-paths-iii 1022\n",
            "{'id': 1022, 'name': 'unique-paths-iii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/unique-paths-iii/', 'task_description': 'You are given an `m x n` integer array `grid` where `grid[i][j]` could be: `1` representing the starting square. There is exactly one starting square. `2` representing the ending square. There is exactly one ending square. `0` representing empty squares we can walk over. `-1` representing obstacles that we cannot walk over. Return _the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once_. **Example 1:** ``` **Input:** grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]] **Output:** 2 **Explanation:** We have the following two paths: 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2) 2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2) ``` **Example 2:** ``` **Input:** grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]] **Output:** 4 **Explanation:** We have the following four paths: 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3) 2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3) 3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3) 4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3) ``` **Example 3:** ``` **Input:** grid = [[0,1],[2,0]] **Output:** 0 **Explanation:** There is no path that walks over every empty square exactly once. Note that the starting and ending square can be anywhere in the grid. ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 20` `1 <= m * n <= 20` `-1 <= grid[i][j] <= 2` There is exactly one starting cell and one ending cell.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]', 'output': '2 Explanation: We have the following two paths: \\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)'}, {'label': 'Example 2', 'input': 'grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]', 'output': '4 Explanation: We have the following four paths: \\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)'}, {'label': 'Example 3', 'input': 'grid = [[0,1],[2,0]]', 'output': '0 Explanation: There is no path that walks over every empty square exactly once.\\nNote that the starting and ending square can be anywhere in the grid. Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 20 1 <= m * n <= 20 -1 <= grid[i][j] <= 2 There is exactly one starting cell and one ending cell.'}], 'elixir_template': 'defmodule Solution do\\n  @spec unique_paths_iii(grid :: [[integer]]) :: integer\\n  def unique_paths_iii(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec unique_paths_iii(Grid :: [[integer()]]) -> integer().\\nunique_paths_iii(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def uniquePathsIII(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!148\n",
            "distribute-coins-in-binary-tree 1021\n",
            "{'id': 1021, 'name': 'distribute-coins-in-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/distribute-coins-in-binary-tree/', 'task_description': 'You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins. There are `n` coins in total throughout the whole tree. In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent. Return _the **minimum** number of moves required to make every node have **exactly** one coin_. **Example 1:** ``` **Input:** root = [3,0,0] **Output:** 2 **Explanation: **From the root of the tree, we move one coin to its left child, and one coin to its right child. ``` **Example 2:** ``` **Input:** root = [0,3,0] **Output:** 3 **Explanation: **From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child. ``` **Constraints:** The number of nodes in the tree is `n`. `1 <= n <= 100` `0 <= Node.val <= n` The sum of all `Node.val` is `n`.', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,0,0]', 'output': '2 Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.'}, {'label': 'Example 2', 'input': 'root = [0,3,0]', 'output': '3 Explanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child. Constraints: The number of nodes in the tree is n . 1 <= n <= 100 0 <= Node.val <= n The sum of all Node.val is n .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec distribute_coins(root :: TreeNode.t | nil) :: integer\\n  def distribute_coins(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec distribute_coins(Root :: #tree_node{} | null) -> integer().\\ndistribute_coins(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def distributeCoins(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!149\n",
            "longest-turbulent-subarray 1020\n",
            "{'id': 1020, 'name': 'longest-turbulent-subarray', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-turbulent-subarray/', 'task_description': 'Given an integer array `arr`, return _the length of a maximum size turbulent subarray of_ `arr`. A subarray is **turbulent** if the comparison sign flips between each adjacent pair of elements in the subarray. More formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if: For `i <= k < j`: `arr[k] > arr[k + 1]` when `k` is odd, and `arr[k] < arr[k + 1]` when `k` is even. Or, for `i <= k < j`: `arr[k] > arr[k + 1]` when `k` is even, and `arr[k] < arr[k + 1]` when `k` is odd. **Example 1:** ``` **Input:** arr = [9,4,2,10,7,8,8,1,9] **Output:** 5 **Explanation:** arr[1] > arr[2] < arr[3] > arr[4] < arr[5] ``` **Example 2:** ``` **Input:** arr = [4,8,12,16] **Output:** 2 ``` **Example 3:** ``` **Input:** arr = [100] **Output:** 1 ``` **Constraints:** `1 <= arr.length <= 4 * 104` `0 <= arr[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [9,4,2,10,7,8,8,1,9]', 'output': '5 Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]'}, {'label': 'Example 2', 'input': 'arr = [4,8,12,16]', 'output': '2'}, {'label': 'Example 3', 'input': 'arr = [100]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_turbulence_size(arr :: [integer]) :: integer\\n  def max_turbulence_size(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_turbulence_size(Arr :: [integer()]) -> integer().\\nmax_turbulence_size(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxTurbulenceSize(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!150\n",
            "squares-of-a-sorted-array 1019\n",
            "{'id': 1019, 'name': 'squares-of-a-sorted-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/squares-of-a-sorted-array/', 'task_description': 'Given an integer array `nums` sorted in **non-decreasing** order, return _an array of **the squares of each number** sorted in non-decreasing order_. **Example 1:** ``` **Input:** nums = [-4,-1,0,3,10] **Output:** [0,1,9,16,100] **Explanation:** After squaring, the array becomes [16,1,0,9,100]. After sorting, it becomes [0,1,9,16,100]. ``` **Example 2:** ``` **Input:** nums = [-7,-3,2,3,11] **Output:** [4,9,9,49,121] ``` **Constraints:** `1 <= nums.length <= 104` `-104 <= nums[i] <= 104` `nums` is sorted in **non-decreasing** order. **Follow up:** Squaring each element and sorting the new array is very trivial, could you find an `O(n)` solution using a different approach?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [-4,-1,0,3,10]', 'output': '[0,1,9,16,100] Explanation: After squaring, the array becomes [16,1,0,9,100].\\nAfter sorting, it becomes [0,1,9,16,100].'}, {'label': 'Example 2', 'input': 'nums = [-7,-3,2,3,11]', 'output': '[4,9,9,49,121]'}], 'elixir_template': 'defmodule Solution do\\n  @spec sorted_squares(nums :: [integer]) :: [integer]\\n  def sorted_squares(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec sorted_squares(Nums :: [integer()]) -> [integer()].\\nsorted_squares(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def sortedSquares(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!151\n",
            "largest-perimeter-triangle 1018\n",
            "{'id': 1018, 'name': 'largest-perimeter-triangle', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/largest-perimeter-triangle/', 'task_description': 'Given an integer array `nums`, return _the largest perimeter of a triangle with a non-zero area, formed from three of these lengths_. If it is impossible to form any triangle of a non-zero area, return `0`. **Example 1:** ``` **Input:** nums = [2,1,2] **Output:** 5 **Explanation:** You can form a triangle with three side lengths: 1, 2, and 2. ``` **Example 2:** ``` **Input:** nums = [1,2,1,10] **Output:** 0 **Explanation:** You cannot use the side lengths 1, 1, and 2 to form a triangle. You cannot use the side lengths 1, 1, and 10 to form a triangle. You cannot use the side lengths 1, 2, and 10 to form a triangle. As we cannot use any three side lengths to form a triangle of non-zero area, we return 0. ``` **Constraints:** `3 <= nums.length <= 104` `1 <= nums[i] <= 106`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,1,2]', 'output': '5 Explanation: You can form a triangle with three side lengths: 1, 2, and 2.'}, {'label': 'Example 2', 'input': 'nums = [1,2,1,10]', 'output': '0 Explanation: You cannot use the side lengths 1, 1, and 2 to form a triangle.\\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_perimeter(nums :: [integer]) :: integer\\n  def largest_perimeter(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_perimeter(Nums :: [integer()]) -> integer().\\nlargest_perimeter(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestPerimeter(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!152\n",
            "odd-even-jump 1017\n",
            "{'id': 1017, 'name': 'odd-even-jump', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/odd-even-jump/', 'task_description': \"You are given an integer array `arr`. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called **odd-numbered jumps**, and the (2nd, 4th, 6th, ...) jumps in the series are called **even-numbered jumps**. Note that the **jumps** are numbered, not the indices. You may jump forward from index `i` to index `j` (with `i < j`) in the following way: During **odd-numbered jumps** (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`. During **even-numbered jumps** (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`. It may be the case that for some index `i`, there are no legal jumps. A starting index is **good** if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once). Return _the number of **good** starting indices_. **Example 1:** ``` **Input:** arr = [10,13,12,14,15] **Output:** 2 **Explanation:** From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more. From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more. From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end. From starting index i = 4, we have reached the end already. In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of jumps. ``` **Example 2:** ``` **Input:** arr = [2,3,1,1,4] **Output:** 3 **Explanation:** From starting index i = 0, we make jumps to i = 1, i = 2, i = 3: During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0]. During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3 During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2]. We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good. In a similar manner, we can deduce that: From starting index i = 1, we jump to i = 4, so we reach the end. From starting index i = 2, we jump to i = 3, and then we can't jump anymore. From starting index i = 3, we jump to i = 4, so we reach the end. From starting index i = 4, we are already at the end. In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some number of jumps. ``` **Example 3:** ``` **Input:** arr = [5,1,3,4,2] **Output:** 3 **Explanation:** We can reach the end from starting indices 1, 2, and 4. ``` **Constraints:** `1 <= arr.length <= 2 * 104` `0 <= arr[i] < 105`\", 'test_case': [{'label': 'Example 1', 'input': 'arr = [10,13,12,14,15]', 'output': '2 Explanation: From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\\nFrom starting index i = 4, we have reached the end already.\\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\\njumps.'}, {'label': 'Example 2', 'input': 'arr = [2,3,1,1,4]', 'output': \"3 Explanation: From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\\nIn a similar manner, we can deduce that:\\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\\nFrom starting index i = 4, we are already at the end.\\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\\nnumber of jumps.\"}, {'label': 'Example 3', 'input': 'arr = [5,1,3,4,2]', 'output': '3 Explanation: We can reach the end from starting indices 1, 2, and 4.'}], 'elixir_template': 'defmodule Solution do\\n  @spec odd_even_jumps(arr :: [integer]) :: integer\\n  def odd_even_jumps(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec odd_even_jumps(Arr :: [integer()]) -> integer().\\nodd_even_jumps(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def oddEvenJumps(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!153\n",
            "subarray-sums-divisible-by-k 1016\n",
            "{'id': 1016, 'name': 'subarray-sums-divisible-by-k', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/subarray-sums-divisible-by-k/', 'task_description': 'Given an integer array `nums` and an integer `k`, return _the number of non-empty **subarrays** that have a sum divisible by _`k`. A **subarray** is a **contiguous** part of an array. **Example 1:** ``` **Input:** nums = [4,5,0,-2,-3,1], k = 5 **Output:** 7 **Explanation:** There are 7 subarrays with a sum divisible by k = 5: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3] ``` **Example 2:** ``` **Input:** nums = [5], k = 9 **Output:** 0 ``` **Constraints:** `1 <= nums.length <= 3 * 104` `-104 <= nums[i] <= 104` `2 <= k <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,5,0,-2,-3,1], k = 5', 'output': '7 Explanation: There are 7 subarrays with a sum divisible by k = 5:\\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]'}, {'label': 'Example 2', 'input': 'nums = [5], k = 9', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec subarrays_div_by_k(nums :: [integer], k :: integer) :: integer\\n  def subarrays_div_by_k(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec subarrays_div_by_k(Nums :: [integer()], K :: integer()) -> integer().\\nsubarrays_div_by_k(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def subarraysDivByK(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!154\n",
            "k-closest-points-to-origin 1014\n",
            "{'id': 1014, 'name': 'k-closest-points-to-origin', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/k-closest-points-to-origin/', 'task_description': 'Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`. The distance between two points on the **X-Y** plane is the Euclidean distance (i.e., `√(x1 - x2)2 + (y1 - y2)2`). You may return the answer in **any order**. The answer is **guaranteed** to be **unique** (except for the order that it is in). **Example 1:** ``` **Input:** points = [[1,3],[-2,2]], k = 1 **Output:** [[-2,2]] **Explanation:** The distance between (1, 3) and the origin is sqrt(10). The distance between (-2, 2) and the origin is sqrt(8). Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin. We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]. ``` **Example 2:** ``` **Input:** points = [[3,3],[5,-1],[-2,4]], k = 2 **Output:** [[3,3],[-2,4]] **Explanation:** The answer [[-2,4],[3,3]] would also be accepted. ``` **Constraints:** `1 <= k <= points.length <= 104` `-104 <= xi, yi <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'points = [[1,3],[-2,2]], k = 1', 'output': '[[-2,2]] Explanation: The distance between (1, 3) and the origin is sqrt(10).\\nThe distance between (-2, 2) and the origin is sqrt(8).\\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].'}, {'label': 'Example 2', 'input': 'points = [[3,3],[5,-1],[-2,4]], k = 2', 'output': '[[3,3],[-2,4]] Explanation: The answer [[-2,4],[3,3]] would also be accepted.'}], 'elixir_template': 'defmodule Solution do\\n  @spec k_closest(points :: [[integer]], k :: integer) :: [[integer]]\\n  def k_closest(points, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec k_closest(Points :: [[integer()]], K :: integer()) -> [[integer()]].\\nk_closest(Points, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def kClosest(points: Array[Array[Int]], k: Int): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!155\n",
            "fibonacci-number 1013\n",
            "{'id': 1013, 'name': 'fibonacci-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/fibonacci-number/', 'task_description': 'The Fibonacci numbers, commonly denoted `F(n)` form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is, ``` F(0) = 0, F(1) = 1 F(n) = F(n - 1) + F(n - 2), for n > 1. ``` Given `n`, calculate `F(n)`. **Example 1:** ``` **Input:** n = 2 **Output:** 1 **Explanation:** F(2) = F(1) + F(0) = 1 + 0 = 1. ``` **Example 2:** ``` **Input:** n = 3 **Output:** 2 **Explanation:** F(3) = F(2) + F(1) = 1 + 1 = 2. ``` **Example 3:** ``` **Input:** n = 4 **Output:** 3 **Explanation:** F(4) = F(3) + F(2) = 2 + 1 = 3. ``` **Constraints:** `0 <= n <= 30`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.'}, {'label': 'Example 2', 'input': 'n = 3', 'output': '2 Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.'}, {'label': 'Example 3', 'input': 'n = 4', 'output': '3 Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def fib(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!156\n",
            "equal-rational-numbers 1012\n",
            "{'id': 1012, 'name': 'equal-rational-numbers', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/equal-rational-numbers/', 'task_description': 'Given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number. A **rational number** can be represented using up to three parts: `<IntegerPart>`, `<NonRepeatingPart>`, and a `<RepeatingPart>`. The number will be represented in one of the following three ways: `<IntegerPart>` For example, `12`, `0`, and `123`. `<IntegerPart>**<.>**<NonRepeatingPart>` For example, `0.5`, `1.`, `2.12`, and `123.0001`. `<IntegerPart>**<.>**<NonRepeatingPart>**<(>**<RepeatingPart>**<)>**` For example, `0.1(6)`, `1.(9)`, `123.00(1212)`. The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example: `1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`. **Example 1:** ``` **Input:** s = \"0.(52)\", t = \"0.5(25)\" **Output:** true **Explanation:** Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number. ``` **Example 2:** ``` **Input:** s = \"0.1666(6)\", t = \"0.166(66)\" **Output:** true ``` **Example 3:** ``` **Input:** s = \"0.9(9)\", t = \"1.\" **Output:** true **Explanation:** \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1. [See this link for an explanation.] \"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\". ``` **Constraints:** Each part consists only of digits. The `<IntegerPart>` does not have leading zeros (except for the zero itself). `1 <= <IntegerPart>.length <= 4` `0 <= <NonRepeatingPart>.length <= 4` `1 <= <RepeatingPart>.length <= 4`', 'test_case': [{'label': 'Example 1', 'input': 's = \"0.(52)\", t = \"0.5(25)\"', 'output': 'true Explanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.'}, {'label': 'Example 2', 'input': 's = \"0.1666(6)\", t = \"0.166(66)\"', 'output': 'true'}, {'label': 'Example 3', 'input': 's = \"0.9(9)\", t = \"1.\"', 'output': 'true Explanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [ See this link for an explanation. ]\\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\". Constraints: Each part consists only of digits. The <IntegerPart> does not have leading zeros (except for the zero itself). 1 <= <IntegerPart>.length <= 4 0 <= <NonRepeatingPart>.length <= 4 1 <= <RepeatingPart>.length <= 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_rational_equal(s :: String.t, t :: String.t) :: boolean\\n  def is_rational_equal(s, t) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_rational_equal(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\\nis_rational_equal(S, T) ->\\n  .', 'scala_template': 'object Solution {\\n    def isRationalEqual(s: String, t: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!157\n",
            "flip-binary-tree-to-match-preorder-traversal 1011\n",
            "{'id': 1011, 'name': 'flip-binary-tree-to-match-preorder-traversal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal/', 'task_description': \"You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the **desired** **pre-order traversal** of the binary tree. Any node in the binary tree can be **flipped** by swapping its left and right subtrees. For example, flipping node 1 will have the following effect: Flip the **smallest** number of nodes so that the **pre-order traversal** of the tree **matches** `voyage`. Return _a list of the values of all **flipped** nodes. You may return the answer in **any order**. If it is **impossible** to flip the nodes in the tree to make the pre-order traversal match _`voyage`_, return the list _`[-1]`. **Example 1:** ``` **Input:** root = [1,2], voyage = [2,1] **Output:** [-1] **Explanation:** It is impossible to flip the nodes such that the pre-order traversal matches voyage. ``` **Example 2:** ``` **Input:** root = [1,2,3], voyage = [1,3,2] **Output:** [1] **Explanation:** Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage. ``` **Example 3:** ``` **Input:** root = [1,2,3], voyage = [1,2,3] **Output:** [] **Explanation:** The tree's pre-order traversal already matches voyage, so no nodes need to be flipped. ``` **Constraints:** The number of nodes in the tree is `n`. `n == voyage.length` `1 <= n <= 100` `1 <= Node.val, voyage[i] <= n` All the values in the tree are **unique**. All the values in `voyage` are **unique**.\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2], voyage = [2,1]', 'output': '[-1] Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.'}, {'label': 'Example 2', 'input': 'root = [1,2,3], voyage = [1,3,2]', 'output': '[1] Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.'}, {'label': 'Example 3', 'input': 'root = [1,2,3], voyage = [1,2,3]', 'output': \"[] Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped. Constraints: The number of nodes in the tree is n . n == voyage.length 1 <= n <= 100 1 <= Node.val, voyage[i] <= n All the values in the tree are unique . All the values in voyage are unique .\"}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec flip_match_voyage(root :: TreeNode.t | nil, voyage :: [integer]) :: [integer]\\n  def flip_match_voyage(root, voyage) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec flip_match_voyage(Root :: #tree_node{} | null, Voyage :: [integer()]) -> [integer()].\\nflip_match_voyage(Root, Voyage) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def flipMatchVoyage(root: TreeNode, voyage: Array[Int]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!158\n",
            "powerful-integers 1010\n",
            "{'id': 1010, 'name': 'powerful-integers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/powerful-integers/', 'task_description': 'Given three integers `x`, `y`, and `bound`, return _a list of all the **powerful integers** that have a value less than or equal to_ `bound`. An integer is **powerful** if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`. You may return the answer in **any order**. In your answer, each value should occur **at most once**. **Example 1:** ``` **Input:** x = 2, y = 3, bound = 10 **Output:** [2,3,4,5,7,9,10] **Explanation:** 2 = 20 + 30 3 = 21 + 30 4 = 20 + 31 5 = 21 + 31 7 = 22 + 31 9 = 23 + 30 10 = 20 + 32 ``` **Example 2:** ``` **Input:** x = 3, y = 5, bound = 15 **Output:** [2,4,6,8,10,14] ``` **Constraints:** `1 <= x, y <= 100` `0 <= bound <= 106`', 'test_case': [{'label': 'Example 1', 'input': 'x = 2, y = 3, bound = 10', 'output': '[2,3,4,5,7,9,10] Explanation: 2 = 2 0 + 3 0 3 = 2 1 + 3 0 4 = 2 0 + 3 1 5 = 2 1 + 3 1 7 = 2 2 + 3 1 9 = 2 3 + 3 0 10 = 2 0 + 3 2'}, {'label': 'Example 2', 'input': 'x = 3, y = 5, bound = 15', 'output': '[2,4,6,8,10,14]'}], 'elixir_template': 'defmodule Solution do\\n  @spec powerful_integers(x :: integer, y :: integer, bound :: integer) :: [integer]\\n  def powerful_integers(x, y, bound) do\\n    \\n  end\\nend', 'erlang_template': '-spec powerful_integers(X :: integer(), Y :: integer(), Bound :: integer()) -> [integer()].\\npowerful_integers(X, Y, Bound) ->\\n  .', 'scala_template': 'object Solution {\\n    def powerfulIntegers(x: Int, y: Int, bound: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!159\n",
            "pancake-sorting 1009\n",
            "{'id': 1009, 'name': 'pancake-sorting', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/pancake-sorting/', 'task_description': 'Given an array of integers `arr`, sort the array by performing a series of **pancake flips**. In one pancake flip we do the following steps: Choose an integer `k` where `1 <= k <= arr.length`. Reverse the sub-array `arr[0...k-1]` (**0-indexed**). For example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`. Return _an array of the _`k`_-values corresponding to a sequence of pancake flips that sort _`arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct. **Example 1:** ``` **Input:** arr = [3,2,4,1] **Output:** [4,2,4,3] **Explanation: ** We perform 4 pancake flips, with k values 4, 2, 4, and 3. Starting state: arr = [3, 2, 4, 1] After 1st flip (k = 4): arr = [1, 4, 2, 3] After 2nd flip (k = 2): arr = [4, 1, 2, 3] After 3rd flip (k = 4): arr = [3, 2, 1, 4] After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted. ``` **Example 2:** ``` **Input:** arr = [1,2,3] **Output:** [] **Explanation: **The input is already sorted, so there is no need to flip anything. Note that other answers, such as [3, 3], would also be accepted. ``` **Constraints:** `1 <= arr.length <= 100` `1 <= arr[i] <= arr.length` All integers in `arr` are unique (i.e. `arr` is a permutation of the integers from `1` to `arr.length`).', 'test_case': [{'label': 'Example 1', 'input': 'arr = [3,2,4,1]', 'output': '[4,2,4,3] Explanation: We perform 4 pancake flips, with k values 4, 2, 4, and 3.\\nStarting state: arr = [3, 2, 4, 1]\\nAfter 1st flip (k = 4): arr = [ 1 , 4 , 2 , 3 ]\\nAfter 2nd flip (k = 2): arr = [ 4 , 1 , 2, 3]\\nAfter 3rd flip (k = 4): arr = [ 3 , 2 , 1 , 4 ]\\nAfter 4th flip (k = 3): arr = [ 1 , 2 , 3 , 4], which is sorted.'}, {'label': 'Example 2', 'input': 'arr = [1,2,3]', 'output': '[] Explanation: The input is already sorted, so there is no need to flip anything.\\nNote that other answers, such as [3, 3], would also be accepted.'}], 'elixir_template': 'defmodule Solution do\\n  @spec pancake_sort(arr :: [integer]) :: [integer]\\n  def pancake_sort(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec pancake_sort(Arr :: [integer()]) -> [integer()].\\npancake_sort(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def pancakeSort(arr: Array[Int]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!160\n",
            "binary-tree-cameras 1008\n",
            "{'id': 1008, 'name': 'binary-tree-cameras', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/binary-tree-cameras/', 'task_description': 'You are given the `root` of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children. Return _the minimum number of cameras needed to monitor all nodes of the tree_. **Example 1:** ``` **Input:** root = [0,0,null,0,0] **Output:** 1 **Explanation:** One camera is enough to monitor all nodes if placed as shown. ``` **Example 2:** ``` **Input:** root = [0,0,null,0,null,0,null,null,0] **Output:** 2 **Explanation:** At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 1000]`. `Node.val == 0`', 'test_case': [{'label': 'Example 1', 'input': 'root = [0,0,null,0,0]', 'output': '1 Explanation: One camera is enough to monitor all nodes if placed as shown.'}, {'label': 'Example 2', 'input': 'root = [0,0,null,0,null,0,null,null,0]', 'output': '2 Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement. Constraints: The number of nodes in the tree is in the range [1, 1000] . Node.val == 0'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec min_camera_cover(root :: TreeNode.t | nil) :: integer\\n  def min_camera_cover(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec min_camera_cover(Root :: #tree_node{} | null) -> integer().\\nmin_camera_cover(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def minCameraCover(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!161\n",
            "numbers-with-same-consecutive-differences 1007\n",
            "{'id': 1007, 'name': 'numbers-with-same-consecutive-differences', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/numbers-with-same-consecutive-differences/', 'task_description': 'Given two integers n and k, return _an array of all the integers of length _`n`_ where the difference between every two consecutive digits is _`k`. You may return the answer in **any order**. Note that the integers should not have leading zeros. Integers as `02` and `043` are not allowed. **Example 1:** ``` **Input:** n = 3, k = 7 **Output:** [181,292,707,818,929] **Explanation:** Note that 070 is not a valid number, because it has leading zeroes. ``` **Example 2:** ``` **Input:** n = 2, k = 1 **Output:** [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98] ``` **Constraints:** `2 <= n <= 9` `0 <= k <= 9`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3, k = 7', 'output': '[181,292,707,818,929] Explanation: Note that 070 is not a valid number, because it has leading zeroes.'}, {'label': 'Example 2', 'input': 'n = 2, k = 1', 'output': '[10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]'}], 'elixir_template': 'defmodule Solution do\\n  @spec nums_same_consec_diff(n :: integer, k :: integer) :: [integer]\\n  def nums_same_consec_diff(n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec nums_same_consec_diff(N :: integer(), K :: integer()) -> [integer()].\\nnums_same_consec_diff(N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def numsSameConsecDiff(n: Int, k: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!162\n",
            "vowel-spellchecker 1006\n",
            "{'id': 1006, 'name': 'vowel-spellchecker', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/vowel-spellchecker/', 'task_description': 'Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word. For a given `query` word, the spell checker handles two categories of spelling mistakes: Capitalization: If the query matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the case in the wordlist. Example: `wordlist = [\"yellow\"]`, `query = \"YellOw\"`: `correct = \"yellow\"` Example: `wordlist = [\"Yellow\"]`, `query = \"yellow\"`: `correct = \"Yellow\"` Example: `wordlist = [\"yellow\"]`, `query = \"yellow\"`: `correct = \"yellow\"` Vowel Errors: If after replacing the vowels `(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\')` of the query word with any vowel individually, it matches a word in the wordlist (**case-insensitive**), then the query word is returned with the same case as the match in the wordlist. Example: `wordlist = [\"YellOw\"]`, `query = \"yollow\"`: `correct = \"YellOw\"` Example: `wordlist = [\"YellOw\"]`, `query = \"yeellow\"`: `correct = \"\"` (no match) Example: `wordlist = [\"YellOw\"]`, `query = \"yllw\"`: `correct = \"\"` (no match) In addition, the spell checker operates under the following precedence rules: When the query exactly matches a word in the wordlist (**case-sensitive**), you should return the same word back. When the query matches a word up to capitlization, you should return the first such match in the wordlist. When the query matches a word up to vowel errors, you should return the first such match in the wordlist. If the query has no matches in the wordlist, you should return the empty string. Given some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`. **Example 1:** ``` **Input:** wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"] **Output:** [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"] ``` **Example 2:** ``` **Input:** wordlist = [\"yellow\"], queries = [\"YellOw\"] **Output:** [\"yellow\"] ``` **Constraints:** `1 <= wordlist.length, queries.length <= 5000` `1 <= wordlist[i].length, queries[i].length <= 7` `wordlist[i]` and `queries[i]` consist only of only English letters.', 'test_case': [{'label': 'Example 1', 'input': 'wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]', 'output': '[\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]'}, {'label': 'Example 2', 'input': 'wordlist = [\"yellow\"], queries = [\"YellOw\"]', 'output': '[\"yellow\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec spellchecker(wordlist :: [String.t], queries :: [String.t]) :: [String.t]\\n  def spellchecker(wordlist, queries) do\\n    \\n  end\\nend', 'erlang_template': '-spec spellchecker(Wordlist :: [unicode:unicode_binary()], Queries :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nspellchecker(Wordlist, Queries) ->\\n  .', 'scala_template': 'object Solution {\\n    def spellchecker(wordlist: Array[String], queries: Array[String]): Array[String] = {\\n        \\n    }\\n}'}\n",
            "Done!163\n",
            "univalued-binary-tree 1005\n",
            "{'id': 1005, 'name': 'univalued-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/univalued-binary-tree/', 'task_description': 'A binary tree is **uni-valued** if every node in the tree has the same value. Given the `root` of a binary tree, return `true`_ if the given tree is **uni-valued**, or _`false`_ otherwise._ **Example 1:** ``` **Input:** root = [1,1,1,1,1,null,1] **Output:** true ``` **Example 2:** ``` **Input:** root = [2,2,2,5,2] **Output:** false ``` **Constraints:** The number of nodes in the tree is in the range `[1, 100]`. `0 <= Node.val < 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,1,1,1,1,null,1]', 'output': 'true'}, {'label': 'Example 2', 'input': 'root = [2,2,2,5,2]', 'output': 'false Constraints: The number of nodes in the tree is in the range [1, 100] . 0 <= Node.val < 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_unival_tree(root :: TreeNode.t | nil) :: boolean\\n  def is_unival_tree(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_unival_tree(Root :: #tree_node{} | null) -> boolean().\\nis_unival_tree(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isUnivalTree(root: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!164\n",
            "least-operators-to-express-number 1004\n",
            "{'id': 1004, 'name': 'least-operators-to-express-number', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/least-operators-to-express-number/', 'task_description': 'Given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3. When writing such an expression, we adhere to the following conventions: The division operator (`/`) returns rational numbers. There are no parentheses placed anywhere. We use the usual order of operations: multiplication and division happen before addition and subtraction. It is not allowed to use the unary negation operator (`-`). For example, \"`x - x`\" is a valid expression as it only uses subtraction, but \"`-x + x`\" is not because it uses negation. We would like to write an expression with the least number of operators such that the expression equals the given `target`. Return the least number of operators used. **Example 1:** ``` **Input:** x = 3, target = 19 **Output:** 5 **Explanation:** 3 * 3 + 3 * 3 + 3 / 3. The expression contains 5 operations. ``` **Example 2:** ``` **Input:** x = 5, target = 501 **Output:** 8 **Explanation:** 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5. The expression contains 8 operations. ``` **Example 3:** ``` **Input:** x = 100, target = 100000000 **Output:** 3 **Explanation:** 100 * 100 * 100 * 100. The expression contains 3 operations. ``` **Constraints:** `2 <= x <= 100` `1 <= target <= 2 * 108`', 'test_case': [{'label': 'Example 1', 'input': 'x = 3, target = 19', 'output': '5 Explanation: 3 * 3 + 3 * 3 + 3 / 3.\\nThe expression contains 5 operations.'}, {'label': 'Example 2', 'input': 'x = 5, target = 501', 'output': '8 Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\\nThe expression contains 8 operations.'}, {'label': 'Example 3', 'input': 'x = 100, target = 100000000', 'output': '3 Explanation: 100 * 100 * 100 * 100.\\nThe expression contains 3 operations.'}], 'elixir_template': 'defmodule Solution do\\n  @spec least_ops_express_target(x :: integer, target :: integer) :: integer\\n  def least_ops_express_target(x, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec least_ops_express_target(X :: integer(), Target :: integer()) -> integer().\\nleast_ops_express_target(X, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def leastOpsExpressTarget(x: Int, target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!165\n",
            "minimum-area-rectangle-ii 1003\n",
            "{'id': 1003, 'name': 'minimum-area-rectangle-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-area-rectangle-ii/', 'task_description': 'You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`. Return _the minimum area of any rectangle formed from these points, with sides **not necessarily parallel** to the X and Y axes_. If there is not any such rectangle, return `0`. Answers within `10-5` of the actual answer will be accepted. **Example 1:** ``` **Input:** points = [[1,2],[2,1],[1,0],[0,1]] **Output:** 2.00000 **Explanation:** The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2. ``` **Example 2:** ``` **Input:** points = [[0,1],[2,1],[1,1],[1,0],[2,0]] **Output:** 1.00000 **Explanation:** The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1. ``` **Example 3:** ``` **Input:** points = [[0,3],[1,2],[3,1],[1,3],[2,1]] **Output:** 0 **Explanation:** There is no possible rectangle to form from these points. ``` **Constraints:** `1 <= points.length <= 50` `points[i].length == 2` `0 <= xi, yi <= 4 * 104` All the given points are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'points = [[1,2],[2,1],[1,0],[0,1]]', 'output': '2.00000 Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.'}, {'label': 'Example 2', 'input': 'points = [[0,1],[2,1],[1,1],[1,0],[2,0]]', 'output': '1.00000 Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.'}, {'label': 'Example 3', 'input': 'points = [[0,3],[1,2],[3,1],[1,3],[2,1]]', 'output': '0 Explanation: There is no possible rectangle to form from these points.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_area_free_rect(points :: [[integer]]) :: float\\n  def min_area_free_rect(points) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_area_free_rect(Points :: [[integer()]]) -> float().\\nmin_area_free_rect(Points) ->\\n  .', 'scala_template': 'object Solution {\\n    def minAreaFreeRect(points: Array[Array[Int]]): Double = {\\n        \\n    }\\n}'}\n",
            "Done!166\n",
            "maximum-width-ramp 1002\n",
            "{'id': 1002, 'name': 'maximum-width-ramp', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-width-ramp/', 'task_description': 'A **ramp** in an integer array `nums` is a pair `(i, j)` for which `i < j` and `nums[i] <= nums[j]`. The **width** of such a ramp is `j - i`. Given an integer array `nums`, return _the maximum width of a **ramp** in _`nums`. If there is no **ramp** in `nums`, return `0`. **Example 1:** ``` **Input:** nums = [6,0,8,2,1,5] **Output:** 4 **Explanation:** The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5. ``` **Example 2:** ``` **Input:** nums = [9,8,1,0,1,9,4,0,4,1] **Output:** 7 **Explanation:** The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1. ``` **Constraints:** `2 <= nums.length <= 5 * 104` `0 <= nums[i] <= 5 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [6,0,8,2,1,5]', 'output': '4 Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.'}, {'label': 'Example 2', 'input': 'nums = [9,8,1,0,1,9,4,0,4,1]', 'output': '7 Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_width_ramp(nums :: [integer]) :: integer\\n  def max_width_ramp(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_width_ramp(Nums :: [integer()]) -> integer().\\nmax_width_ramp(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxWidthRamp(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!167\n",
            "n-repeated-element-in-size-2n-array 1001\n",
            "{'id': 1001, 'name': 'n-repeated-element-in-size-2n-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/n-repeated-element-in-size-2n-array/', 'task_description': 'You are given an integer array `nums` with the following properties: `nums.length == 2 * n`. `nums` contains `n + 1` **unique** elements. Exactly one element of `nums` is repeated `n` times. Return _the element that is repeated _`n`_ times_. **Example 1:** ``` **Input:** nums = [1,2,3,3] **Output:** 3 ``` **Example 2:** ``` **Input:** nums = [2,1,2,5,3,2] **Output:** 2 ``` **Example 3:** ``` **Input:** nums = [5,1,5,2,5,3,5,4] **Output:** 5 ``` **Constraints:** `2 <= n <= 5000` `nums.length == 2 * n` `0 <= nums[i] <= 104` `nums` contains `n + 1` **unique** elements and one of them is repeated exactly `n` times.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,3]', 'output': '3'}, {'label': 'Example 2', 'input': 'nums = [2,1,2,5,3,2]', 'output': '2'}, {'label': 'Example 3', 'input': 'nums = [5,1,5,2,5,3,5,4]', 'output': '5'}], 'elixir_template': 'defmodule Solution do\\n  @spec repeated_n_times(nums :: [integer]) :: integer\\n  def repeated_n_times(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec repeated_n_times(Nums :: [integer()]) -> integer().\\nrepeated_n_times(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def repeatedNTimes(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!168\n",
            "delete-columns-to-make-sorted-iii 1000\n",
            "{'id': 1000, 'name': 'delete-columns-to-make-sorted-iii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/delete-columns-to-make-sorted-iii/', 'task_description': 'You are given an array of `n` strings `strs`, all of the same length. We may choose any deletion indices, and we delete all the characters in those indices for each string. For example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`. Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has **every string (row) in lexicographic** order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). Return _the minimum possible value of_ `answer.length`. **Example 1:** ``` **Input:** strs = [\"babca\",\"bbazb\"] **Output:** 3 **Explanation:** After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"]. Both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]). Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order. ``` **Example 2:** ``` **Input:** strs = [\"edcba\"] **Output:** 4 **Explanation:** If we delete less than 4 columns, the only row will not be lexicographically sorted. ``` **Example 3:** ``` **Input:** strs = [\"ghi\",\"def\",\"abc\"] **Output:** 0 **Explanation:** All rows are already lexicographically sorted. ``` **Constraints:** `n == strs.length` `1 <= n <= 100` `1 <= strs[i].length <= 100` `strs[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'strs = [\"babca\",\"bbazb\"]', 'output': '3 Explanation: After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\\nBoth these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).\\nNote that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.'}, {'label': 'Example 2', 'input': 'strs = [\"edcba\"]', 'output': '4 Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.'}, {'label': 'Example 3', 'input': 'strs = [\"ghi\",\"def\",\"abc\"]', 'output': '0 Explanation: All rows are already lexicographically sorted. Constraints: n == strs.length 1 <= n <= 100 1 <= strs[i].length <= 100 strs[i] consists of lowercase English letters.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_deletion_size(strs :: [String.t]) :: integer\\n  def min_deletion_size(strs) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_deletion_size(Strs :: [unicode:unicode_binary()]) -> integer().\\nmin_deletion_size(Strs) ->\\n  .', 'scala_template': 'object Solution {\\n    def minDeletionSize(strs: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!169\n",
            "regions-cut-by-slashes 999\n",
            "{'id': 999, 'name': 'regions-cut-by-slashes', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/regions-cut-by-slashes/', 'task_description': 'An `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square consists of a `\\'/\\'`, `\\'\\\\\\'`, or blank space `\\' \\'`. These characters divide the square into contiguous regions. Given the grid `grid` represented as a string array, return _the number of regions_. Note that backslash characters are escaped, so a `\\'\\\\\\'` is represented as `\\'\\\\\\\\\\'`. **Example 1:** ``` **Input:** grid = [\" /\",\"/ \"] **Output:** 2 ``` **Example 2:** ``` **Input:** grid = [\" /\",\" \"] **Output:** 1 ``` **Example 3:** ``` **Input:** grid = [\"/\\\\\\\\\",\"\\\\\\\\/\"] **Output:** 5 **Explanation: **Recall that because \\\\ characters are escaped, \"\\\\\\\\/\" refers to \\\\/, and \"/\\\\\\\\\" refers to /\\\\. ``` **Constraints:** `n == grid.length == grid[i].length` `1 <= n <= 30` `grid[i][j]` is either `\\'/\\'`, `\\'\\\\\\'`, or `\\' \\'`.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [\" /\",\"/ \"]', 'output': '2'}, {'label': 'Example 2', 'input': 'grid = [\" /\",\"  \"]', 'output': '1'}, {'label': 'Example 3', 'input': 'grid = [\"/\\\\\\\\\",\"\\\\\\\\/\"]', 'output': '5 Explanation: Recall that because \\\\ characters are escaped, \"\\\\\\\\/\" refers to \\\\/, and \"/\\\\\\\\\" refers to /\\\\. Constraints: n == grid.length == grid[i].length 1 <= n <= 30 grid[i][j] is either \\'/\\' , \\'\\\\\\' , or \\' \\' .'}], 'elixir_template': 'defmodule Solution do\\n  @spec regions_by_slashes(grid :: [String.t]) :: integer\\n  def regions_by_slashes(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec regions_by_slashes(Grid :: [unicode:unicode_binary()]) -> integer().\\nregions_by_slashes(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def regionsBySlashes(grid: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!170\n",
            "check-completeness-of-a-binary-tree 998\n",
            "{'id': 998, 'name': 'check-completeness-of-a-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/check-completeness-of-a-binary-tree/', 'task_description': \"Given the `root` of a binary tree, determine if it is a _complete binary tree_. In a **complete binary tree**, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`. **Example 1:** ``` **Input:** root = [1,2,3,4,5,6] **Output:** true **Explanation:** Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible. ``` **Example 2:** ``` **Input:** root = [1,2,3,4,5,null,7] **Output:** false **Explanation:** The node with value 7 isn't as far left as possible. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 100]`. `1 <= Node.val <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,5,6]', 'output': 'true Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.'}, {'label': 'Example 2', 'input': 'root = [1,2,3,4,5,null,7]', 'output': \"false Explanation: The node with value 7 isn't as far left as possible. Constraints: The number of nodes in the tree is in the range [1, 100] . 1 <= Node.val <= 1000\"}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_complete_tree(root :: TreeNode.t | nil) :: boolean\\n  def is_complete_tree(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_complete_tree(Root :: #tree_node{} | null) -> boolean().\\nis_complete_tree(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isCompleteTree(root: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!171\n",
            "prison-cells-after-n-days 994\n",
            "{'id': 994, 'name': 'prison-cells-after-n-days', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/prison-cells-after-n-days/', 'task_description': \"There are `8` prison cells in a row and each cell is either occupied or vacant. Each day, whether the cell is occupied or vacant changes according to the following rules: If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. Otherwise, it becomes vacant. **Note** that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors. You are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`. Return the state of the prison after `n` days (i.e., `n` such changes described above). **Example 1:** ``` **Input:** cells = [0,1,0,1,1,0,0,1], n = 7 **Output:** [0,0,1,1,0,0,0,0] **Explanation:** The following table summarizes the state of the prison on each day: Day 0: [0, 1, 0, 1, 1, 0, 0, 1] Day 1: [0, 1, 1, 0, 0, 0, 0, 0] Day 2: [0, 0, 0, 0, 1, 1, 1, 0] Day 3: [0, 1, 1, 0, 0, 1, 0, 0] Day 4: [0, 0, 0, 0, 0, 1, 0, 0] Day 5: [0, 1, 1, 1, 0, 1, 0, 0] Day 6: [0, 0, 1, 0, 1, 1, 0, 0] Day 7: [0, 0, 1, 1, 0, 0, 0, 0] ``` **Example 2:** ``` **Input:** cells = [1,0,0,1,0,0,1,0], n = 1000000000 **Output:** [0,0,1,1,1,1,1,0] ``` **Constraints:** `cells.length == 8` `cells[i]` is either `0` or `1`. `1 <= n <= 109`\", 'test_case': [{'label': 'Example 1', 'input': 'cells = [0,1,0,1,1,0,0,1], n = 7', 'output': '[0,0,1,1,0,0,0,0] Explanation: The following table summarizes the state of the prison on each day:\\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]'}, {'label': 'Example 2', 'input': 'cells = [1,0,0,1,0,0,1,0], n = 1000000000', 'output': '[0,0,1,1,1,1,1,0] Constraints: cells.length == 8 cells[i] is either 0 or 1 . 1 <= n <= 10 9'}], 'elixir_template': 'defmodule Solution do\\n  @spec prison_after_n_days(cells :: [integer], n :: integer) :: [integer]\\n  def prison_after_n_days(cells, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec prison_after_n_days(Cells :: [integer()], N :: integer()) -> [integer()].\\nprison_after_n_days(Cells, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def prisonAfterNDays(cells: Array[Int], n: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!172\n",
            "tallest-billboard 993\n",
            "{'id': 993, 'name': 'tallest-billboard', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/tallest-billboard/', 'task_description': 'You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height. You are given a collection of `rods` that can be welded together. For example, if you have rods of lengths `1`, `2`, and `3`, you can weld them together to make a support of length `6`. Return _the largest possible height of your billboard installation_. If you cannot support the billboard, return `0`. **Example 1:** ``` **Input:** rods = [1,2,3,6] **Output:** 6 **Explanation:** We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6. ``` **Example 2:** ``` **Input:** rods = [1,2,3,4,5,6] **Output:** 10 **Explanation:** We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10. ``` **Example 3:** ``` **Input:** rods = [1,2] **Output:** 0 **Explanation:** The billboard cannot be supported, so we return 0. ``` **Constraints:** `1 <= rods.length <= 20` `1 <= rods[i] <= 1000` `sum(rods[i]) <= 5000`', 'test_case': [{'label': 'Example 1', 'input': 'rods = [1,2,3,6]', 'output': '6 Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.'}, {'label': 'Example 2', 'input': 'rods = [1,2,3,4,5,6]', 'output': '10 Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.'}, {'label': 'Example 3', 'input': 'rods = [1,2]', 'output': '0 Explanation: The billboard cannot be supported, so we return 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec tallest_billboard(rods :: [integer]) :: integer\\n  def tallest_billboard(rods) do\\n    \\n  end\\nend', 'erlang_template': '-spec tallest_billboard(Rods :: [integer()]) -> integer().\\ntallest_billboard(Rods) ->\\n  .', 'scala_template': 'object Solution {\\n    def tallestBillboard(rods: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!173\n",
            "delete-columns-to-make-sorted-ii 992\n",
            "{'id': 992, 'name': 'delete-columns-to-make-sorted-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/delete-columns-to-make-sorted-ii/', 'task_description': 'You are given an array of `n` strings `strs`, all of the same length. We may choose any deletion indices, and we delete all the characters in those indices for each string. For example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`. Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in **lexicographic** order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return _the minimum possible value of_ `answer.length`. **Example 1:** ``` **Input:** strs = [\"ca\",\"bb\",\"ac\"] **Output:** 1 **Explanation:** After deleting the first column, strs = [\"a\", \"b\", \"c\"]. Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]). We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1. ``` **Example 2:** ``` **Input:** strs = [\"xc\",\"yb\",\"za\"] **Output:** 0 **Explanation:** strs is already in lexicographic order, so we do not need to delete anything. Note that the rows of strs are not necessarily in lexicographic order: i.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...) ``` **Example 3:** ``` **Input:** strs = [\"zyx\",\"wvu\",\"tsr\"] **Output:** 3 **Explanation:** We have to delete every column. ``` **Constraints:** `n == strs.length` `1 <= n <= 100` `1 <= strs[i].length <= 100` `strs[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'strs = [\"ca\",\"bb\",\"ac\"]', 'output': '1 Explanation: After deleting the first column, strs = [\"a\", \"b\", \"c\"].\\nNow strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).\\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.'}, {'label': 'Example 2', 'input': 'strs = [\"xc\",\"yb\",\"za\"]', 'output': '0 Explanation: strs is already in lexicographic order, so we do not need to delete anything.\\nNote that the rows of strs are not necessarily in lexicographic order:\\ni.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)'}, {'label': 'Example 3', 'input': 'strs = [\"zyx\",\"wvu\",\"tsr\"]', 'output': '3 Explanation: We have to delete every column. Constraints: n == strs.length 1 <= n <= 100 1 <= strs[i].length <= 100 strs[i] consists of lowercase English letters.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_deletion_size(strs :: [String.t]) :: integer\\n  def min_deletion_size(strs) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_deletion_size(Strs :: [unicode:unicode_binary()]) -> integer().\\nmin_deletion_size(Strs) ->\\n  .', 'scala_template': 'object Solution {\\n    def minDeletionSize(strs: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!174\n",
            "array-of-doubled-pairs 991\n",
            "{'id': 991, 'name': 'array-of-doubled-pairs', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/array-of-doubled-pairs/', 'task_description': 'Given an integer array of even length `arr`, return `true`_ if it is possible to reorder _`arr`_ such that _`arr[2 * i + 1] = 2 * arr[2 * i]`_ for every _`0 <= i < len(arr) / 2`_, or _`false`_ otherwise_. **Example 1:** ``` **Input:** arr = [3,1,3,6] **Output:** false ``` **Example 2:** ``` **Input:** arr = [2,1,2,6] **Output:** false ``` **Example 3:** ``` **Input:** arr = [4,-2,2,-4] **Output:** true **Explanation:** We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4]. ``` **Constraints:** `2 <= arr.length <= 3 * 104` `arr.length` is even. `-105 <= arr[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [3,1,3,6]', 'output': 'false'}, {'label': 'Example 2', 'input': 'arr = [2,1,2,6]', 'output': 'false'}, {'label': 'Example 3', 'input': 'arr = [4,-2,2,-4]', 'output': 'true Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_reorder_doubled(arr :: [integer]) :: boolean\\n  def can_reorder_doubled(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_reorder_doubled(Arr :: [integer()]) -> boolean().\\ncan_reorder_doubled(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def canReorderDoubled(arr: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!175\n",
            "verifying-an-alien-dictionary 990\n",
            "{'id': 990, 'name': 'verifying-an-alien-dictionary', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/verifying-an-alien-dictionary/', 'task_description': 'In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters. Given a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographically in this alien language. **Example 1:** ``` **Input:** words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\" **Output:** true **Explanation: **As \\'h\\' comes before \\'l\\' in this language, then the sequence is sorted. ``` **Example 2:** ``` **Input:** words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\" **Output:** false **Explanation: **As \\'d\\' comes after \\'l\\' in this language, then words[0] > words[1], hence the sequence is unsorted. ``` **Example 3:** ``` **Input:** words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\" **Output:** false **Explanation: **The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because \\'l\\' > \\'∅\\', where \\'∅\\' is defined as the blank character which is less than any other character (More info). ``` **Constraints:** `1 <= words.length <= 100` `1 <= words[i].length <= 20` `order.length == 26` All characters in `words[i]` and `order` are English lowercase letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"', 'output': \"true Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.\"}, {'label': 'Example 2', 'input': 'words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"', 'output': \"false Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.\"}, {'label': 'Example 3', 'input': 'words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"', 'output': 'false Explanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because \\'l\\' > \\'∅\\', where \\'∅\\' is defined as the blank character which is less than any other character ( More info ).'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_alien_sorted(words :: [String.t], order :: String.t) :: boolean\\n  def is_alien_sorted(words, order) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_alien_sorted(Words :: [unicode:unicode_binary()], Order :: unicode:unicode_binary()) -> boolean().\\nis_alien_sorted(Words, Order) ->\\n  .', 'scala_template': 'object Solution {\\n    def isAlienSorted(words: Array[String], order: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!176\n",
            "largest-component-size-by-common-factor 989\n",
            "{'id': 989, 'name': 'largest-component-size-by-common-factor', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/largest-component-size-by-common-factor/', 'task_description': 'You are given an integer array of unique positive integers `nums`. Consider the following graph: There are `nums.length` nodes, labeled `nums[0]` to `nums[nums.length - 1]`, There is an undirected edge between `nums[i]` and `nums[j]` if `nums[i]` and `nums[j]` share a common factor greater than `1`. Return _the size of the largest connected component in the graph_. **Example 1:** ``` **Input:** nums = [4,6,15,35] **Output:** 4 ``` **Example 2:** ``` **Input:** nums = [20,50,9,63] **Output:** 2 ``` **Example 3:** ``` **Input:** nums = [2,3,6,7,4,12,21,39] **Output:** 8 ``` **Constraints:** `1 <= nums.length <= 2 * 104` `1 <= nums[i] <= 105` All the values of `nums` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,6,15,35]', 'output': '4'}, {'label': 'Example 2', 'input': 'nums = [20,50,9,63]', 'output': '2'}, {'label': 'Example 3', 'input': 'nums = [2,3,6,7,4,12,21,39]', 'output': '8'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_component_size(nums :: [integer]) :: integer\\n  def largest_component_size(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_component_size(Nums :: [integer()]) -> integer().\\nlargest_component_size(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestComponentSize(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!177\n",
            "flip-equivalent-binary-trees 988\n",
            "{'id': 988, 'name': 'flip-equivalent-binary-trees', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/flip-equivalent-binary-trees/', 'task_description': 'For a binary tree **T**, we can define a **flip operation** as follows: choose any node, and swap the left and right child subtrees. A binary tree **X** is _flip equivalent_ to a binary tree **Y** if and only if we can make **X** equal to **Y** after some number of flip operations. Given the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivalent or `false` otherwise. **Example 1:** ``` **Input:** root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7] **Output:** true **Explanation: **We flipped at nodes with values 1, 3, and 5. ``` **Example 2:** ``` **Input:** root1 = [], root2 = [] **Output:** true ``` **Example 3:** ``` **Input:** root1 = [], root2 = [1] **Output:** false ``` **Constraints:** The number of nodes in each tree is in the range `[0, 100]`. Each tree will have **unique node values** in the range `[0, 99]`.', 'test_case': [{'label': 'Example 1', 'input': 'root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]', 'output': 'true Explanation: We flipped at nodes with values 1, 3, and 5.'}, {'label': 'Example 2', 'input': 'root1 = [], root2 = []', 'output': 'true'}, {'label': 'Example 3', 'input': 'root1 = [], root2 = [1]', 'output': 'false Constraints: The number of nodes in each tree is in the range [0, 100] . Each tree will have unique node values in the range [0, 99] .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec flip_equiv(root1 :: TreeNode.t | nil, root2 :: TreeNode.t | nil) :: boolean\\n  def flip_equiv(root1, root2) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec flip_equiv(Root1 :: #tree_node{} | null, Root2 :: #tree_node{} | null) -> boolean().\\nflip_equiv(Root1, Root2) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def flipEquiv(root1: TreeNode, root2: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!178\n",
            "reveal-cards-in-increasing-order 987\n",
            "{'id': 987, 'name': 'reveal-cards-in-increasing-order', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reveal-cards-in-increasing-order/', 'task_description': 'You are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`. You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck. You will do the following steps repeatedly until all cards are revealed: Take the top card of the deck, reveal it, and take it out of the deck. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck. If there are still unrevealed cards, go back to step 1. Otherwise, stop. Return _an ordering of the deck that would reveal the cards in increasing order_. **Note** that the first entry in the answer is considered to be the top of the deck. **Example 1:** ``` **Input:** deck = [17,13,11,2,3,5,7] **Output:** [2,13,3,11,5,17,7] **Explanation:** We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it. After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck. We reveal 2, and move 13 to the bottom. The deck is now [3,11,5,17,7,13]. We reveal 3, and move 11 to the bottom. The deck is now [5,17,7,13,11]. We reveal 5, and move 17 to the bottom. The deck is now [7,13,11,17]. We reveal 7, and move 13 to the bottom. The deck is now [11,17,13]. We reveal 11, and move 17 to the bottom. The deck is now [13,17]. We reveal 13, and move 17 to the bottom. The deck is now [17]. We reveal 17. Since all the cards revealed are in increasing order, the answer is correct. ``` **Example 2:** ``` **Input:** deck = [1,1000] **Output:** [1,1000] ``` **Constraints:** `1 <= deck.length <= 1000` `1 <= deck[i] <= 106` All the values of `deck` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'deck = [17,13,11,2,3,5,7]', 'output': '[2,13,3,11,5,17,7] Explanation: We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\\nWe reveal 17.\\nSince all the cards revealed are in increasing order, the answer is correct.'}, {'label': 'Example 2', 'input': 'deck = [1,1000]', 'output': '[1,1000]'}], 'elixir_template': 'defmodule Solution do\\n  @spec deck_revealed_increasing(deck :: [integer]) :: [integer]\\n  def deck_revealed_increasing(deck) do\\n    \\n  end\\nend', 'erlang_template': '-spec deck_revealed_increasing(Deck :: [integer()]) -> [integer()].\\ndeck_revealed_increasing(Deck) ->\\n  .', 'scala_template': 'object Solution {\\n    def deckRevealedIncreasing(deck: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!179\n",
            "largest-time-for-given-digits 986\n",
            "{'id': 986, 'name': 'largest-time-for-given-digits', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/largest-time-for-given-digits/', 'task_description': 'Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit **exactly once**. 24-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`. Return _the latest 24-hour time in `\"HH:MM\"` format_. If no valid time can be made, return an empty string. **Example 1:** ``` **Input:** arr = [1,2,3,4] **Output:** \"23:41\" **Explanation:** The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest. ``` **Example 2:** ``` **Input:** arr = [5,5,5,5] **Output:** \"\" **Explanation:** There are no valid 24-hour times as \"55:55\" is not valid. ``` **Constraints:** `arr.length == 4` `0 <= arr[i] <= 9`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,2,3,4]', 'output': '\"23:41\" Explanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.'}, {'label': 'Example 2', 'input': 'arr = [5,5,5,5]', 'output': '\"\" Explanation: There are no valid 24-hour times as \"55:55\" is not valid. Constraints: arr.length == 4 0 <= arr[i] <= 9'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_time_from_digits(arr :: [integer]) :: String.t\\n  def largest_time_from_digits(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_time_from_digits(Arr :: [integer()]) -> unicode:unicode_binary().\\nlargest_time_from_digits(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestTimeFromDigits(arr: Array[Int]): String = {\\n        \\n    }\\n}'}\n",
            "Done!180\n",
            "bag-of-tokens 985\n",
            "{'id': 985, 'name': 'bag-of-tokens', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/bag-of-tokens/', 'task_description': 'You start with an initial **power** of `power`, an initial **score** of `0`, and a bag of tokens given as an integer array `tokens`, where each `tokens[i]` denotes the value of token_i_. Your goal is to **maximize** the total **score** by strategically playing these tokens. In one move, you can play an **unplayed** token in one of the two ways (but not both for the same token): **Face-up**: If your current power is **at least** `tokens[i]`, you may play token_i_, losing `tokens[i]` power and gaining `1` score. **Face-down**: If your current score is **at least** `1`, you may play token_i_, gaining `tokens[i]` power and losing `1` score. Return _the **maximum** possible score you can achieve after playing **any** number of tokens_. **Example 1:** **Input:** tokens = [100], power = 50 **Output:** 0 **Explanation****:** Since your score is `0` initially, you cannot play the token face-down. You also cannot play it face-up since your power (`50`) is less than `tokens[0]` (`100`). **Example 2:** **Input:** tokens = [200,100], power = 150 **Output:** 1 **Explanation:** Play token_1_ (`100`) face-up, reducing your power to `50` and increasing your score to `1`. There is no need to play token_0_, since you cannot play it face-up to add to your score. The maximum score achievable is `1`. **Example 3:** **Input:** tokens = [100,200,300,400], power = 200 **Output:** 2 **Explanation:** Play the tokens in this order to get a score of `2`: Play token_0_ (`100`) face-up, reducing power to `100` and increasing score to `1`. Play token_3_ (`400`) face-down, increasing power to `500` and reducing score to `0`. Play token_1_ (`200`) face-up, reducing power to `300` and increasing score to `1`. Play token_2_ (`300`) face-up, reducing power to `0` and increasing score to `2`. The maximum score achievable is `2`. **Constraints:** `0 <= tokens.length <= 1000` `0 <= tokens[i], power < 104`', 'test_case': [{'label': 'Example 1', 'input': 'tokens = [100], power = 50', 'output': '0 Explanation : Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power ( 50 ) is less than tokens[0] ( 100 ).'}, {'label': 'Example 2', 'input': 'tokens = [200,100], power = 150', 'output': '1 Explanation: Play token 1 ( 100 ) face-up, reducing your power to 50 and increasing your score to 1 . There is no need to play token 0 , since you cannot play it face-up to add to your score. The maximum score achievable is 1 .'}, {'label': 'Example 3', 'input': 'tokens = [100,200,300,400], power = 200', 'output': '2 Explanation: Play the tokens in this order to get a score of 2 : Play token 0 ( 100 ) face-up, reducing power to 100 and increasing score to 1 . Play token 3 ( 400 ) face-down, increasing power to 500 and reducing score to 0 . Play token 1 ( 200 ) face-up, reducing power to 300 and increasing score to 1 . Play token 2 ( 300 ) face-up, reducing power to 0 and increasing score to 2 . The maximum score achievable is 2 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec bag_of_tokens_score(tokens :: [integer], power :: integer) :: integer\\n  def bag_of_tokens_score(tokens, power) do\\n    \\n  end\\nend', 'erlang_template': '-spec bag_of_tokens_score(Tokens :: [integer()], Power :: integer()) -> integer().\\nbag_of_tokens_score(Tokens, Power) ->\\n  .', 'scala_template': 'object Solution {\\n    def bagOfTokensScore(tokens: Array[Int], power: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!181\n",
            "most-stones-removed-with-same-row-or-column 984\n",
            "{'id': 984, 'name': 'most-stones-removed-with-same-row-or-column', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/', 'task_description': 'On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone. A stone can be removed if it shares either **the same row or the same column** as another stone that has not been removed. Given an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return _the largest possible number of stones that can be removed_. **Example 1:** ``` **Input:** stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]] **Output:** 5 **Explanation:** One way to remove 5 stones is as follows: 1. Remove stone [2,2] because it shares the same row as [2,1]. 2. Remove stone [2,1] because it shares the same column as [0,1]. 3. Remove stone [1,2] because it shares the same row as [1,0]. 4. Remove stone [1,0] because it shares the same column as [0,0]. 5. Remove stone [0,1] because it shares the same row as [0,0]. Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane. ``` **Example 2:** ``` **Input:** stones = [[0,0],[0,2],[1,1],[2,0],[2,2]] **Output:** 3 **Explanation:** One way to make 3 moves is as follows: 1. Remove stone [2,2] because it shares the same row as [2,0]. 2. Remove stone [2,0] because it shares the same column as [0,0]. 3. Remove stone [0,2] because it shares the same row as [0,0]. Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane. ``` **Example 3:** ``` **Input:** stones = [[0,0]] **Output:** 0 **Explanation:** [0,0] is the only stone on the plane, so you cannot remove it. ``` **Constraints:** `1 <= stones.length <= 1000` `0 <= xi, yi <= 104` No two stones are at the same coordinate point.', 'test_case': [{'label': 'Example 1', 'input': 'stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]', 'output': '5 Explanation: One way to remove 5 stones is as follows:\\n1. Remove stone [2,2] because it shares the same row as [2,1].\\n2. Remove stone [2,1] because it shares the same column as [0,1].\\n3. Remove stone [1,2] because it shares the same row as [1,0].\\n4. Remove stone [1,0] because it shares the same column as [0,0].\\n5. Remove stone [0,1] because it shares the same row as [0,0].\\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.'}, {'label': 'Example 2', 'input': 'stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]', 'output': '3 Explanation: One way to make 3 moves is as follows:\\n1. Remove stone [2,2] because it shares the same row as [2,0].\\n2. Remove stone [2,0] because it shares the same column as [0,0].\\n3. Remove stone [0,2] because it shares the same row as [0,0].\\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.'}, {'label': 'Example 3', 'input': 'stones = [[0,0]]', 'output': '0 Explanation: [0,0] is the only stone on the plane, so you cannot remove it.'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_stones(stones :: [[integer]]) :: integer\\n  def remove_stones(stones) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_stones(Stones :: [[integer()]]) -> integer().\\nremove_stones(Stones) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeStones(stones: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!182\n",
            "validate-stack-sequences 983\n",
            "{'id': 983, 'name': 'validate-stack-sequences', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/validate-stack-sequences/', 'task_description': 'Given two integer arrays `pushed` and `popped` each with distinct values, return `true`_ if this could have been the result of a sequence of push and pop operations on an initially empty stack, or _`false`_ otherwise._ **Example 1:** ``` **Input:** pushed = [1,2,3,4,5], popped = [4,5,3,2,1] **Output:** true **Explanation:** We might do the following sequence: push(1), push(2), push(3), push(4), pop() -> 4, push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1 ``` **Example 2:** ``` **Input:** pushed = [1,2,3,4,5], popped = [4,3,5,1,2] **Output:** false **Explanation:** 1 cannot be popped before 2. ``` **Constraints:** `1 <= pushed.length <= 1000` `0 <= pushed[i] <= 1000` All the elements of `pushed` are **unique**. `popped.length == pushed.length` `popped` is a permutation of `pushed`.', 'test_case': [{'label': 'Example 1', 'input': 'pushed = [1,2,3,4,5], popped = [4,5,3,2,1]', 'output': 'true Explanation: We might do the following sequence:\\npush(1), push(2), push(3), push(4),\\npop() -> 4,\\npush(5),\\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1'}, {'label': 'Example 2', 'input': 'pushed = [1,2,3,4,5], popped = [4,3,5,1,2]', 'output': 'false Explanation: 1 cannot be popped before 2.'}], 'elixir_template': 'defmodule Solution do\\n  @spec validate_stack_sequences(pushed :: [integer], popped :: [integer]) :: boolean\\n  def validate_stack_sequences(pushed, popped) do\\n    \\n  end\\nend', 'erlang_template': '-spec validate_stack_sequences(Pushed :: [integer()], Popped :: [integer()]) -> boolean().\\nvalidate_stack_sequences(Pushed, Popped) ->\\n  .', 'scala_template': 'object Solution {\\n    def validateStackSequences(pushed: Array[Int], popped: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!183\n",
            "minimum-increment-to-make-array-unique 982\n",
            "{'id': 982, 'name': 'minimum-increment-to-make-array-unique', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-increment-to-make-array-unique/', 'task_description': 'You are given an integer array `nums`. In one move, you can pick an index `i` where `0 <= i < nums.length` and increment `nums[i]` by `1`. Return _the minimum number of moves to make every value in _`nums`_ **unique**_. The test cases are generated so that the answer fits in a 32-bit integer. **Example 1:** ``` **Input:** nums = [1,2,2] **Output:** 1 **Explanation:** After 1 move, the array could be [1, 2, 3]. ``` **Example 2:** ``` **Input:** nums = [3,2,1,2,1,7] **Output:** 6 **Explanation:** After 6 moves, the array could be [3, 4, 1, 2, 5, 7]. It can be shown that it is impossible for the array to have all unique values with 5 or less moves. ``` **Constraints:** `1 <= nums.length <= 105` `0 <= nums[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,2]', 'output': '1 Explanation: After 1 move, the array could be [1, 2, 3].'}, {'label': 'Example 2', 'input': 'nums = [3,2,1,2,1,7]', 'output': '6 Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\\nIt can be shown that it is impossible for the array to have all unique values with 5 or less moves.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_increment_for_unique(nums :: [integer]) :: integer\\n  def min_increment_for_unique(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_increment_for_unique(Nums :: [integer()]) -> integer().\\nmin_increment_for_unique(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def minIncrementForUnique(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!184\n",
            "delete-columns-to-make-sorted 981\n",
            "{'id': 981, 'name': 'delete-columns-to-make-sorted', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/delete-columns-to-make-sorted/', 'task_description': 'You are given an array of `n` strings `strs`, all of the same length. The strings can be arranged such that there is one on each line, making a grid. For example, `strs = [\"abc\", \"bce\", \"cae\"]` can be arranged as follows: ``` abc bce cae ``` You want to **delete** the columns that are **not sorted lexicographically**. In the above example (**0-indexed**), columns 0 (`\\'a\\'`, `\\'b\\'`, `\\'c\\'`) and 2 (`\\'c\\'`, `\\'e\\'`, `\\'e\\'`) are sorted, while column 1 (`\\'b\\'`, `\\'c\\'`, `\\'a\\'`) is not, so you would delete column 1. Return _the number of columns that you will delete_. **Example 1:** ``` **Input:** strs = [\"cba\",\"daf\",\"ghi\"] **Output:** 1 **Explanation:** The grid looks as follows: cba daf ghi Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column. ``` **Example 2:** ``` **Input:** strs = [\"a\",\"b\"] **Output:** 0 **Explanation:** The grid looks as follows: a b Column 0 is the only column and is sorted, so you will not delete any columns. ``` **Example 3:** ``` **Input:** strs = [\"zyx\",\"wvu\",\"tsr\"] **Output:** 3 **Explanation:** The grid looks as follows: zyx wvu tsr All 3 columns are not sorted, so you will delete all 3. ``` **Constraints:** `n == strs.length` `1 <= n <= 100` `1 <= strs[i].length <= 1000` `strs[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'strs = [\"cba\",\"daf\",\"ghi\"]', 'output': '1 Explanation: The grid looks as follows:\\n  cba\\n  daf\\n  ghi\\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.'}, {'label': 'Example 2', 'input': 'strs = [\"a\",\"b\"]', 'output': '0 Explanation: The grid looks as follows:\\n  a\\n  b\\nColumn 0 is the only column and is sorted, so you will not delete any columns.'}, {'label': 'Example 3', 'input': 'strs = [\"zyx\",\"wvu\",\"tsr\"]', 'output': '3 Explanation: The grid looks as follows:\\n  zyx\\n  wvu\\n  tsr\\nAll 3 columns are not sorted, so you will delete all 3. Constraints: n == strs.length 1 <= n <= 100 1 <= strs[i].length <= 1000 strs[i] consists of lowercase English letters.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_deletion_size(strs :: [String.t]) :: integer\\n  def min_deletion_size(strs) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_deletion_size(Strs :: [unicode:unicode_binary()]) -> integer().\\nmin_deletion_size(Strs) ->\\n  .', 'scala_template': 'object Solution {\\n    def minDeletionSize(strs: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!185\n",
            "find-the-shortest-superstring 980\n",
            "{'id': 980, 'name': 'find-the-shortest-superstring', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/find-the-shortest-superstring/', 'task_description': 'Given an array of strings `words`, return _the smallest string that contains each string in_ `words` _as a substring_. If there are multiple valid strings of the smallest length, return **any of them**. You may assume that no string in `words` is a substring of another string in `words`. **Example 1:** ``` **Input:** words = [\"alex\",\"loves\",\"leetcode\"] **Output:** \"alexlovesleetcode\" **Explanation:** All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted. ``` **Example 2:** ``` **Input:** words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"] **Output:** \"gctaagttcatgcatc\" ``` **Constraints:** `1 <= words.length <= 12` `1 <= words[i].length <= 20` `words[i]` consists of lowercase English letters. All the strings of `words` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"alex\",\"loves\",\"leetcode\"]', 'output': '\"alexlovesleetcode\" Explanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.'}, {'label': 'Example 2', 'input': 'words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]', 'output': '\"gctaagttcatgcatc\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_superstring(words :: [String.t]) :: String.t\\n  def shortest_superstring(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_superstring(Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nshortest_superstring(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestSuperstring(words: Array[String]): String = {\\n        \\n    }\\n}'}\n",
            "Done!186\n",
            "di-string-match 979\n",
            "{'id': 979, 'name': 'di-string-match', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/di-string-match/', 'task_description': 'A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where: `s[i] == \\'I\\'` if `perm[i] < perm[i + 1]`, and `s[i] == \\'D\\'` if `perm[i] > perm[i + 1]`. Given a string `s`, reconstruct the permutation `perm` and return it. If there are multiple valid permutations perm, return **any of them**. **Example 1:** ``` **Input:** s = \"IDID\" **Output:** [0,4,1,3,2] ``` **Example 2:** ``` **Input:** s = \"III\" **Output:** [0,1,2,3] ``` **Example 3:** ``` **Input:** s = \"DDI\" **Output:** [3,2,0,1] ``` **Constraints:** `1 <= s.length <= 105` `s[i]` is either `\\'I\\'` or `\\'D\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"IDID\"', 'output': '[0,4,1,3,2]'}, {'label': 'Example 2', 'input': 's = \"III\"', 'output': '[0,1,2,3]'}, {'label': 'Example 3', 'input': 's = \"DDI\"', 'output': '[3,2,0,1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec di_string_match(s :: String.t) :: [integer]\\n  def di_string_match(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec di_string_match(S :: unicode:unicode_binary()) -> [integer()].\\ndi_string_match(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def diStringMatch(s: String): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!187\n",
            "valid-mountain-array 978\n",
            "{'id': 978, 'name': 'valid-mountain-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/valid-mountain-array/', 'task_description': 'Given an array of integers `arr`, return _`true` if and only if it is a valid mountain array_. Recall that arr is a mountain array if and only if: `arr.length >= 3` There exists some `i` with `0 < i < arr.length - 1` such that: `arr[0] < arr[1] < ... < arr[i - 1] < arr[i] ` `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` **Example 1:** ``` **Input:** arr = [2,1] **Output:** false ``` **Example 2:** ``` **Input:** arr = [3,5,5] **Output:** false ``` **Example 3:** ``` **Input:** arr = [0,3,2,1] **Output:** true ``` **Constraints:** `1 <= arr.length <= 104` `0 <= arr[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [2,1]', 'output': 'false'}, {'label': 'Example 2', 'input': 'arr = [3,5,5]', 'output': 'false'}, {'label': 'Example 3', 'input': 'arr = [0,3,2,1]', 'output': 'true'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def validMountainArray(arr: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!188\n",
            "distinct-subsequences-ii 977\n",
            "{'id': 977, 'name': 'distinct-subsequences-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/distinct-subsequences-ii/', 'task_description': 'Given a string s, return _the number of **distinct non-empty subsequences** of_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`. A **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not. **Example 1:** ``` **Input:** s = \"abc\" **Output:** 7 **Explanation:** The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\". ``` **Example 2:** ``` **Input:** s = \"aba\" **Output:** 6 **Explanation:** The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\". ``` **Example 3:** ``` **Input:** s = \"aaa\" **Output:** 3 **Explanation:** The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\". ``` **Constraints:** `1 <= s.length <= 2000` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abc\"', 'output': '7 Explanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".'}, {'label': 'Example 2', 'input': 's = \"aba\"', 'output': '6 Explanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\".'}, {'label': 'Example 3', 'input': 's = \"aaa\"', 'output': '3 Explanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec distinct_subseq_ii(s :: String.t) :: integer\\n  def distinct_subseq_ii(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec distinct_subseq_ii(S :: unicode:unicode_binary()) -> integer().\\ndistinct_subseq_ii(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def distinctSubseqII(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!189\n",
            "minimum-area-rectangle 976\n",
            "{'id': 976, 'name': 'minimum-area-rectangle', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-area-rectangle/', 'task_description': 'You are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`. Return _the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes_. If there is not any such rectangle, return `0`. **Example 1:** ``` **Input:** points = [[1,1],[1,3],[3,1],[3,3],[2,2]] **Output:** 4 ``` **Example 2:** ``` **Input:** points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]] **Output:** 2 ``` **Constraints:** `1 <= points.length <= 500` `points[i].length == 2` `0 <= xi, yi <= 4 * 104` All the given points are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'points = [[1,1],[1,3],[3,1],[3,3],[2,2]]', 'output': '4'}, {'label': 'Example 2', 'input': 'points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_area_rect(points :: [[integer]]) :: integer\\n  def min_area_rect(points) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_area_rect(Points :: [[integer()]]) -> integer().\\nmin_area_rect(Points) ->\\n  .', 'scala_template': 'object Solution {\\n    def minAreaRect(points: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!190\n",
            "range-sum-of-bst 975\n",
            "{'id': 975, 'name': 'range-sum-of-bst', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/range-sum-of-bst/', 'task_description': 'Given the `root` node of a binary search tree and two integers `low` and `high`, return _the sum of values of all nodes with a value in the **inclusive** range _`[low, high]`. **Example 1:** ``` **Input:** root = [10,5,15,3,7,null,18], low = 7, high = 15 **Output:** 32 **Explanation:** Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32. ``` **Example 2:** ``` **Input:** root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10 **Output:** 23 **Explanation:** Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 2 * 104]`. `1 <= Node.val <= 105` `1 <= low <= high <= 105` All `Node.val` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'root = [10,5,15,3,7,null,18], low = 7, high = 15', 'output': '32 Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.'}, {'label': 'Example 2', 'input': 'root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10', 'output': '23 Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23. Constraints: The number of nodes in the tree is in the range [1, 2 * 10 4 ] . 1 <= Node.val <= 10 5 1 <= low <= high <= 10 5 All Node.val are unique .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec range_sum_bst(root :: TreeNode.t | nil, low :: integer, high :: integer) :: integer\\n  def range_sum_bst(root, low, high) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec range_sum_bst(Root :: #tree_node{} | null, Low :: integer(), High :: integer()) -> integer().\\nrange_sum_bst(Root, Low, High) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def rangeSumBST(root: TreeNode, low: Int, high: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!191\n",
            "reorder-data-in-log-files 974\n",
            "{'id': 974, 'name': 'reorder-data-in-log-files', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reorder-data-in-log-files/', 'task_description': 'You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the **identifier**. There are two types of logs: Letter-logs: All words (except the identifier) consist of lowercase English letters. **Digit-logs**: All words (except the identifier) consist of digits. Reorder these logs so that: The **letter-logs** come before all **digit-logs**. The **letter-logs** are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers. The **digit-logs** maintain their relative ordering. Return _the final order of the logs_. **Example 1:** ``` **Input:** logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"] **Output:** [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"] **Explanation:** The letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\". The digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\". ``` **Example 2:** ``` **Input:** logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"] **Output:** [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"] ``` **Constraints:** `1 <= logs.length <= 100` `3 <= logs[i].length <= 100` All the tokens of `logs[i]` are separated by a **single** space. `logs[i]` is guaranteed to have an identifier and at least one word after the identifier.', 'test_case': [{'label': 'Example 1', 'input': 'logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]', 'output': '[\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"] Explanation: The letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".'}, {'label': 'Example 2', 'input': 'logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]', 'output': '[\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec reorder_log_files(logs :: [String.t]) :: [String.t]\\n  def reorder_log_files(logs) do\\n    \\n  end\\nend', 'erlang_template': '-spec reorder_log_files(Logs :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nreorder_log_files(Logs) ->\\n  .', 'scala_template': 'object Solution {\\n    def reorderLogFiles(logs: Array[String]): Array[String] = {\\n        \\n    }\\n}'}\n",
            "Done!192\n",
            "stamping-the-sequence 973\n",
            "{'id': 973, 'name': 'stamping-the-sequence', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/stamping-the-sequence/', 'task_description': 'You are given two strings `stamp` and `target`. Initially, there is a string `s` of length `target.length` with all `s[i] == \\'?\\'`. In one turn, you can place `stamp` over `s` and replace every letter in the `s` with the corresponding letter from `stamp`. For example, if `stamp = \"abc\"` and `target = \"abcba\"`, then `s` is `\"?????\"` initially. In one turn you can: place `stamp` at index `0` of `s` to obtain `\"abc??\"`, place `stamp` at index `1` of `s` to obtain `\"?abc?\"`, or place `stamp` at index `2` of `s` to obtain `\"??abc\"`. Note that `stamp` must be fully contained in the boundaries of `s` in order to stamp (i.e., you cannot place `stamp` at index `3` of `s`). We want to convert `s` to `target` using **at most** `10 * target.length` turns. Return _an array of the index of the left-most letter being stamped at each turn_. If we cannot obtain `target` from `s` within `10 * target.length` turns, return an empty array. **Example 1:** ``` **Input:** stamp = \"abc\", target = \"ababc\" **Output:** [0,2] **Explanation:** Initially s = \"?????\". - Place stamp at index 0 to get \"abc??\". - Place stamp at index 2 to get \"ababc\". [1,0,2] would also be accepted as an answer, as well as some other answers. ``` **Example 2:** ``` **Input:** stamp = \"abca\", target = \"aabcaca\" **Output:** [3,0,1] **Explanation:** Initially s = \"???????\". - Place stamp at index 3 to get \"???abca\". - Place stamp at index 0 to get \"abcabca\". - Place stamp at index 1 to get \"aabcaca\". ``` **Constraints:** `1 <= stamp.length <= target.length <= 1000` `stamp` and `target` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'stamp = \"abc\", target = \"ababc\"', 'output': '[0,2] Explanation: Initially s = \"?????\".\\n- Place stamp at index 0 to get \"abc??\".\\n- Place stamp at index 2 to get \"ababc\".\\n[1,0,2] would also be accepted as an answer, as well as some other answers.'}, {'label': 'Example 2', 'input': 'stamp = \"abca\", target = \"aabcaca\"', 'output': '[3,0,1] Explanation: Initially s = \"???????\".\\n- Place stamp at index 3 to get \"???abca\".\\n- Place stamp at index 0 to get \"abcabca\".\\n- Place stamp at index 1 to get \"aabcaca\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec moves_to_stamp(stamp :: String.t, target :: String.t) :: [integer]\\n  def moves_to_stamp(stamp, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec moves_to_stamp(Stamp :: unicode:unicode_binary(), Target :: unicode:unicode_binary()) -> [integer()].\\nmoves_to_stamp(Stamp, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def movesToStamp(stamp: String, target: String): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!193\n",
            "knight-dialer 972\n",
            "{'id': 972, 'name': 'knight-dialer', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/knight-dialer/', 'task_description': 'The chess knight has a **unique movement**, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an **L**). The possible movements of chess knight are shown in this diagram: A chess knight can move as indicated in the chess diagram below: We have a chess knight and a phone pad as shown below, the knight **can only stand on a numeric cell** (i.e. blue cell). Given an integer `n`, return how many distinct phone numbers of length `n` we can dial. You are allowed to place the knight **on any numeric cell** initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be **valid** knight jumps. As the answer may be very large, **return the answer modulo** `109 + 7`. **Example 1:** ``` **Input:** n = 1 **Output:** 10 **Explanation:** We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient. ``` **Example 2:** ``` **Input:** n = 2 **Output:** 20 **Explanation:** All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94] ``` **Example 3:** ``` **Input:** n = 3131 **Output:** 136006598 **Explanation:** Please take care of the mod. ``` **Constraints:** `1 <= n <= 5000`', 'test_case': [{'label': 'Example 1', 'input': 'n = 1', 'output': '10 Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.'}, {'label': 'Example 2', 'input': 'n = 2', 'output': '20 Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]'}, {'label': 'Example 3', 'input': 'n = 3131', 'output': '136006598 Explanation: Please take care of the mod.'}], 'elixir_template': 'defmodule Solution do\\n  @spec knight_dialer(n :: integer) :: integer\\n  def knight_dialer(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec knight_dialer(N :: integer()) -> integer().\\nknight_dialer(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def knightDialer(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!194\n",
            "shortest-bridge 971\n",
            "{'id': 971, 'name': 'shortest-bridge', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/shortest-bridge/', 'task_description': \"You are given an `n x n` binary matrix `grid` where `1` represents land and `0` represents water. An **island** is a 4-directionally connected group of `1`'s not connected to any other `1`'s. There are **exactly two islands** in `grid`. You may change `0`'s to `1`'s to connect the two islands to form **one island**. Return _the smallest number of _`0`_'s you must flip to connect the two islands_. **Example 1:** ``` **Input:** grid = [[0,1],[1,0]] **Output:** 1 ``` **Example 2:** ``` **Input:** grid = [[0,1,0],[0,0,0],[0,0,1]] **Output:** 2 ``` **Example 3:** ``` **Input:** grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]] **Output:** 1 ``` **Constraints:** `n == grid.length == grid[i].length` `2 <= n <= 100` `grid[i][j]` is either `0` or `1`. There are exactly two islands in `grid`.\", 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,1],[1,0]]', 'output': '1'}, {'label': 'Example 2', 'input': 'grid = [[0,1,0],[0,0,0],[0,0,1]]', 'output': '2'}, {'label': 'Example 3', 'input': 'grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]', 'output': '1 Constraints: n == grid.length == grid[i].length 2 <= n <= 100 grid[i][j] is either 0 or 1 . There are exactly two islands in grid .'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_bridge(grid :: [[integer]]) :: integer\\n  def shortest_bridge(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_bridge(Grid :: [[integer()]]) -> integer().\\nshortest_bridge(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestBridge(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!195\n",
            "number-of-recent-calls 969\n",
            "{'id': 969, 'name': 'number-of-recent-calls', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/number-of-recent-calls/', 'task_description': 'You have a `RecentCounter` class which counts the number of recent requests within a certain time frame. Implement the `RecentCounter` class: `RecentCounter()` Initializes the counter with zero recent requests. `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`. It is **guaranteed** that every call to `ping` uses a strictly larger value of `t` than the previous call. **Example 1:** ``` **Input** [\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"] [[], [1], [100], [3001], [3002]] **Output** [null, 1, 2, 3, 3] **Explanation** RecentCounter recentCounter = new RecentCounter(); recentCounter.ping(1); // requests = [1], range is [-2999,1], return 1 recentCounter.ping(100); // requests = [1, 100], range is [-2900,100], return 2 recentCounter.ping(3001); // requests = [1, 100, 3001], range is [1,3001], return 3 recentCounter.ping(3002); // requests = [1, 100, 3001, 3002], range is [2,3002], return 3 ``` **Constraints:** `1 <= t <= 109` Each test case will call `ping` with **strictly increasing** values of `t`. At most `104` calls will be made to `ping`.', 'test_case': [], 'elixir_template': 'defmodule RecentCounter do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec ping(t :: integer) :: integer\\n  def ping(t) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# RecentCounter.init_()\\n# param_1 = RecentCounter.ping(t)\\n\\n# RecentCounter.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec recent_counter_init_() -> any().\\nrecent_counter_init_() ->\\n  .\\n\\n-spec recent_counter_ping(T :: integer()) -> integer().\\nrecent_counter_ping(T) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% recent_counter_init_(),\\n%% Param_1 = recent_counter_ping(T),\\n\\n%% recent_counter_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class RecentCounter() {\\n\\n    def ping(t: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your RecentCounter object will be instantiated and called as such:\\n * val obj = new RecentCounter()\\n * val param_1 = obj.ping(t)\\n */'}\n",
            "Done!196\n",
            "beautiful-array 968\n",
            "{'id': 968, 'name': 'beautiful-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/beautiful-array/', 'task_description': 'An array `nums` of length `n` is **beautiful** if: `nums` is a permutation of the integers in the range `[1, n]`. For every `0 <= i < j < n`, there is no index `k` with `i < k < j` where `2 * nums[k] == nums[i] + nums[j]`. Given the integer `n`, return _any **beautiful** array _`nums`_ of length _`n`. There will be at least one valid answer for the given `n`. **Example 1:** ``` **Input:** n = 4 **Output:** [2,1,4,3] ``` **Example 2:** ``` **Input:** n = 5 **Output:** [3,1,2,5,4] ``` **Constraints:** `1 <= n <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'n = 4', 'output': '[2,1,4,3]'}, {'label': 'Example 2', 'input': 'n = 5', 'output': '[3,1,2,5,4]'}], 'elixir_template': 'defmodule Solution do\\n  @spec beautiful_array(n :: integer) :: [integer]\\n  def beautiful_array(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec beautiful_array(N :: integer()) -> [integer()].\\nbeautiful_array(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def beautifulArray(n: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!197\n",
            "minimum-falling-path-sum 967\n",
            "{'id': 967, 'name': 'minimum-falling-path-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-falling-path-sum/', 'task_description': 'Given an `n x n` array of integers `matrix`, return _the **minimum sum** of any **falling path** through_ `matrix`. A **falling path** starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`. **Example 1:** ``` **Input:** matrix = [[2,1,3],[6,5,4],[7,8,9]] **Output:** 13 **Explanation:** There are two falling paths with a minimum sum as shown. ``` **Example 2:** ``` **Input:** matrix = [[-19,57],[-40,-5]] **Output:** -59 **Explanation:** The falling path with a minimum sum is shown. ``` **Constraints:** `n == matrix.length == matrix[i].length` `1 <= n <= 100` `-100 <= matrix[i][j] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[2,1,3],[6,5,4],[7,8,9]]', 'output': '13 Explanation: There are two falling paths with a minimum sum as shown.'}, {'label': 'Example 2', 'input': 'matrix = [[-19,57],[-40,-5]]', 'output': '-59 Explanation: The falling path with a minimum sum is shown. Constraints: n == matrix.length == matrix[i].length 1 <= n <= 100 -100 <= matrix[i][j] <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_falling_path_sum(matrix :: [[integer]]) :: integer\\n  def min_falling_path_sum(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_falling_path_sum(Matrix :: [[integer()]]) -> integer().\\nmin_falling_path_sum(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def minFallingPathSum(matrix: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!198\n",
            "binary-subarrays-with-sum 966\n",
            "{'id': 966, 'name': 'binary-subarrays-with-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-subarrays-with-sum/', 'task_description': 'Given a binary array `nums` and an integer `goal`, return _the number of non-empty **subarrays** with a sum_ `goal`. A **subarray** is a contiguous part of the array. **Example 1:** ``` **Input:** nums = [1,0,1,0,1], goal = 2 **Output:** 4 **Explanation:** The 4 subarrays are bolded and underlined below: [**1,0,1**,0,1] [**1,0,1,0**,1] [1,**0,1,0,1**] [1,0,**1,0,1**] ``` **Example 2:** ``` **Input:** nums = [0,0,0,0,0], goal = 0 **Output:** 15 ``` **Constraints:** `1 <= nums.length <= 3 * 104` `nums[i]` is either `0` or `1`. `0 <= goal <= nums.length`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,0,1,0,1], goal = 2', 'output': '4 Explanation: The 4 subarrays are bolded and underlined below:\\n[ 1,0,1 ,0,1]\\n[ 1,0,1,0 ,1]\\n[1, 0,1,0,1 ]\\n[1,0, 1,0,1 ]'}, {'label': 'Example 2', 'input': 'nums = [0,0,0,0,0], goal = 0', 'output': '15'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_subarrays_with_sum(nums :: [integer], goal :: integer) :: integer\\n  def num_subarrays_with_sum(nums, goal) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_subarrays_with_sum(Nums :: [integer()], Goal :: integer()) -> integer().\\nnum_subarrays_with_sum(Nums, Goal) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSubarraysWithSum(nums: Array[Int], goal: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!199\n",
            "unique-email-addresses 965\n",
            "{'id': 965, 'name': 'unique-email-addresses', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/unique-email-addresses/', 'task_description': 'Every **valid email** consists of a **local name** and a **domain name**, separated by the `\\'@\\'` sign. Besides lowercase letters, the email may contain one or more `\\'.\\'` or `\\'+\\'`. For example, in `\"alice@leetcode.com\"`, `\"alice\"` is the **local name**, and `\"leetcode.com\"` is the **domain name**. If you add periods `\\'.\\'` between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule **does not apply** to **domain names**. For example, `\"alice.z@leetcode.com\"` and `\"alicez@leetcode.com\"` forward to the same email address. If you add a plus `\\'+\\'` in the **local name**, everything after the first plus sign **will be ignored**. This allows certain emails to be filtered. Note that this rule **does not apply** to **domain names**. For example, `\"m.y+name@email.com\"` will be forwarded to `\"my@email.com\"`. It is possible to use both of these rules at the same time. Given an array of strings `emails` where we send one email to each `emails[i]`, return _the number of different addresses that actually receive mails_. **Example 1:** ``` **Input:** emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"] **Output:** 2 **Explanation:** \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails. ``` **Example 2:** ``` **Input:** emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"] **Output:** 3 ``` **Constraints:** `1 <= emails.length <= 100` `1 <= emails[i].length <= 100` `emails[i]` consist of lowercase English letters, `\\'+\\'`, `\\'.\\'` and `\\'@\\'`. Each `emails[i]` contains exactly one `\\'@\\'` character. All local and domain names are non-empty. Local names do not start with a `\\'+\\'` character. Domain names end with the `\".com\"` suffix. Domain names must contain at least one character before `\".com\"` suffix.', 'test_case': [{'label': 'Example 1', 'input': 'emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]', 'output': '2 Explanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.'}, {'label': 'Example 2', 'input': 'emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_unique_emails(emails :: [String.t]) :: integer\\n  def num_unique_emails(emails) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_unique_emails(Emails :: [unicode:unicode_binary()]) -> integer().\\nnum_unique_emails(Emails) ->\\n  .', 'scala_template': 'object Solution {\\n    def numUniqueEmails(emails: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!200\n",
            "minimize-malware-spread-ii 964\n",
            "{'id': 964, 'name': 'minimize-malware-spread-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimize-malware-spread-ii/', 'task_description': 'You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`. Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner. Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`, **completely removing it and any connections from this node to any other node**. Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**. **Example 1:** ``` **Input:** graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1] **Output:** 0 ``` **Example 2:** ``` **Input:** graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1] **Output:** 1 ``` **Example 3:** ``` **Input:** graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1] **Output:** 1 ``` **Constraints:** `n == graph.length` `n == graph[i].length` `2 <= n <= 300` `graph[i][j]` is `0` or `1`. `graph[i][j] == graph[j][i]` `graph[i][i] == 1` `1 <= initial.length < n` `0 <= initial[i] <= n - 1` All the integers in `initial` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]', 'output': '0'}, {'label': 'Example 2', 'input': 'graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]', 'output': '1'}, {'label': 'Example 3', 'input': 'graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]', 'output': '1 Constraints: n == graph.length n == graph[i].length 2 <= n <= 300 graph[i][j] is 0 or 1 . graph[i][j] == graph[j][i] graph[i][i] == 1 1 <= initial.length <\\xa0n 0 <= initial[i] <= n - 1 All the integers in initial are unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_malware_spread(graph :: [[integer]], initial :: [integer]) :: integer\\n  def min_malware_spread(graph, initial) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_malware_spread(Graph :: [[integer()]], Initial :: [integer()]) -> integer().\\nmin_malware_spread(Graph, Initial) ->\\n  .', 'scala_template': 'object Solution {\\n    def minMalwareSpread(graph: Array[Array[Int]], initial: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!201\n",
            "three-equal-parts 963\n",
            "{'id': 963, 'name': 'three-equal-parts', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/three-equal-parts/', 'task_description': 'You are given an array `arr` which consists of only zeros and ones, divide the array into **three non-empty parts** such that all of these parts represent the same binary value. If it is possible, return any `[i, j]` with `i + 1 < j`, such that: `arr[0], arr[1], ..., arr[i]` is the first part, `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part. All three parts have equal binary values. If it is not possible, return `[-1, -1]`. Note that the entire part is used when considering what binary value it represents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also, leading zeros **are allowed**, so `[0,1,1]` and `[1,1]` represent the same value. **Example 1:** ``` **Input:** arr = [1,0,1,0,1] **Output:** [0,3] ``` **Example 2:** ``` **Input:** arr = [1,1,0,1,1] **Output:** [-1,-1] ``` **Example 3:** ``` **Input:** arr = [1,1,0,0,1] **Output:** [0,2] ``` **Constraints:** `3 <= arr.length <= 3 * 104` `arr[i]` is `0` or `1`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,0,1,0,1]', 'output': '[0,3]'}, {'label': 'Example 2', 'input': 'arr = [1,1,0,1,1]', 'output': '[-1,-1]'}, {'label': 'Example 3', 'input': 'arr = [1,1,0,0,1]', 'output': '[0,2]'}], 'elixir_template': 'defmodule Solution do\\n  @spec three_equal_parts(arr :: [integer]) :: [integer]\\n  def three_equal_parts(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec three_equal_parts(Arr :: [integer()]) -> [integer()].\\nthree_equal_parts(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def threeEqualParts(arr: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!202\n",
            "flip-string-to-monotone-increasing 962\n",
            "{'id': 962, 'name': 'flip-string-to-monotone-increasing', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/flip-string-to-monotone-increasing/', 'task_description': 'A binary string is monotone increasing if it consists of some number of `0`\\'s (possibly none), followed by some number of `1`\\'s (also possibly none). You are given a binary string `s`. You can flip `s[i]` changing it from `0` to `1` or from `1` to `0`. Return _the minimum number of flips to make _`s`_ monotone increasing_. **Example 1:** ``` **Input:** s = \"00110\" **Output:** 1 **Explanation:** We flip the last digit to get 00111. ``` **Example 2:** ``` **Input:** s = \"010110\" **Output:** 2 **Explanation:** We flip to get 011111, or alternatively 000111. ``` **Example 3:** ``` **Input:** s = \"00011000\" **Output:** 2 **Explanation:** We flip to get 00000000. ``` **Constraints:** `1 <= s.length <= 105` `s[i]` is either `\\'0\\'` or `\\'1\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"00110\"', 'output': '1 Explanation: We flip the last digit to get 00111.'}, {'label': 'Example 2', 'input': 's = \"010110\"', 'output': '2 Explanation: We flip to get 011111, or alternatively 000111.'}, {'label': 'Example 3', 'input': 's = \"00011000\"', 'output': '2 Explanation: We flip to get 00000000.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_flips_mono_incr(s :: String.t) :: integer\\n  def min_flips_mono_incr(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_flips_mono_incr(S :: unicode:unicode_binary()) -> integer().\\nmin_flips_mono_incr(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def minFlipsMonoIncr(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!203\n",
            "long-pressed-name 961\n",
            "{'id': 961, 'name': 'long-pressed-name', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/long-pressed-name/', 'task_description': 'Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get _long pressed_, and the character will be typed 1 or more times. You examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed. **Example 1:** ``` **Input:** name = \"alex\", typed = \"aaleex\" **Output:** true **Explanation: **\\'a\\' and \\'e\\' in \\'alex\\' were long pressed. ``` **Example 2:** ``` **Input:** name = \"saeed\", typed = \"ssaaedd\" **Output:** false **Explanation: **\\'e\\' must have been pressed twice, but it was not in the typed output. ``` **Constraints:** `1 <= name.length, typed.length <= 1000` `name` and `typed` consist of only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'name = \"alex\", typed = \"aaleex\"', 'output': \"true Explanation: 'a' and 'e' in 'alex' were long pressed.\"}, {'label': 'Example 2', 'input': 'name = \"saeed\", typed = \"ssaaedd\"', 'output': \"false Explanation: 'e' must have been pressed twice, but it was not in the typed output.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec is_long_pressed_name(name :: String.t, typed :: String.t) :: boolean\\n  def is_long_pressed_name(name, typed) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_long_pressed_name(Name :: unicode:unicode_binary(), Typed :: unicode:unicode_binary()) -> boolean().\\nis_long_pressed_name(Name, Typed) ->\\n  .', 'scala_template': 'object Solution {\\n    def isLongPressedName(name: String, typed: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!204\n",
            "minimize-malware-spread 960\n",
            "{'id': 960, 'name': 'minimize-malware-spread', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimize-malware-spread/', 'task_description': 'You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`. Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner. Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`. Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**. Note that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread. **Example 1:** ``` **Input:** graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1] **Output:** 0 ``` **Example 2:** ``` **Input:** graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2] **Output:** 0 ``` **Example 3:** ``` **Input:** graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2] **Output:** 1 ``` **Constraints:** `n == graph.length` `n == graph[i].length` `2 <= n <= 300` `graph[i][j]` is `0` or `1`. `graph[i][j] == graph[j][i]` `graph[i][i] == 1` `1 <= initial.length <= n` `0 <= initial[i] <= n - 1` All the integers in `initial` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]', 'output': '0'}, {'label': 'Example 2', 'input': 'graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]', 'output': '0'}, {'label': 'Example 3', 'input': 'graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]', 'output': '1 Constraints: n == graph.length n == graph[i].length 2 <= n <= 300 graph[i][j] is 0 or 1 . graph[i][j] == graph[j][i] graph[i][i] == 1 1 <= initial.length <= n 0 <= initial[i] <= n - 1 All the integers in initial are unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_malware_spread(graph :: [[integer]], initial :: [integer]) :: integer\\n  def min_malware_spread(graph, initial) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_malware_spread(Graph :: [[integer()]], Initial :: [integer()]) -> integer().\\nmin_malware_spread(Graph, Initial) ->\\n  .', 'scala_template': 'object Solution {\\n    def minMalwareSpread(graph: Array[Array[Int]], initial: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!205\n",
            "3sum-with-multiplicity 959\n",
            "{'id': 959, 'name': '3sum-with-multiplicity', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/3sum-with-multiplicity/', 'task_description': 'Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`. As the answer can be very large, return it **modulo** `109 + 7`. **Example 1:** ``` **Input:** arr = [1,1,2,2,3,3,4,4,5,5], target = 8 **Output:** 20 **Explanation: ** Enumerating by the values (arr[i], arr[j], arr[k]): (1, 2, 5) occurs 8 times; (1, 3, 4) occurs 8 times; (2, 2, 4) occurs 2 times; (2, 3, 3) occurs 2 times. ``` **Example 2:** ``` **Input:** arr = [1,1,2,2,2,2], target = 5 **Output:** 12 **Explanation: ** arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times: We choose one 1 from [1,1] in 2 ways, and two 2s from [2,2,2,2] in 6 ways. ``` **Example 3:** ``` **Input:** arr = [2,1,3], target = 6 **Output:** 1 **Explanation:** (1, 2, 3) occured one time in the array so we return 1. ``` **Constraints:** `3 <= arr.length <= 3000` `0 <= arr[i] <= 100` `0 <= target <= 300`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,1,2,2,3,3,4,4,5,5], target = 8', 'output': '20 Explanation: Enumerating by the values (arr[i], arr[j], arr[k]):\\n(1, 2, 5) occurs 8 times;\\n(1, 3, 4) occurs 8 times;\\n(2, 2, 4) occurs 2 times;\\n(2, 3, 3) occurs 2 times.'}, {'label': 'Example 2', 'input': 'arr = [1,1,2,2,2,2], target = 5', 'output': '12 Explanation: arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\\nWe choose one 1 from [1,1] in 2 ways,\\nand two 2s from [2,2,2,2] in 6 ways.'}, {'label': 'Example 3', 'input': 'arr = [2,1,3], target = 6', 'output': '1 Explanation: (1, 2, 3) occured one time in the array so we return 1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec three_sum_multi(arr :: [integer], target :: integer) :: integer\\n  def three_sum_multi(arr, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec three_sum_multi(Arr :: [integer()], Target :: integer()) -> integer().\\nthree_sum_multi(Arr, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def threeSumMulti(arr: Array[Int], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!206\n",
            "sort-array-by-parity-ii 958\n",
            "{'id': 958, 'name': 'sort-array-by-parity-ii', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/sort-array-by-parity-ii/', 'task_description': 'Given an array of integers `nums`, half of the integers in `nums` are **odd**, and the other half are **even**. Sort the array so that whenever `nums[i]` is odd, `i` is **odd**, and whenever `nums[i]` is even, `i` is **even**. Return _any answer array that satisfies this condition_. **Example 1:** ``` **Input:** nums = [4,2,5,7] **Output:** [4,5,2,7] **Explanation:** [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted. ``` **Example 2:** ``` **Input:** nums = [2,3] **Output:** [2,3] ``` **Constraints:** `2 <= nums.length <= 2 * 104` `nums.length` is even. Half of the integers in `nums` are even. `0 <= nums[i] <= 1000` **Follow Up:** Could you solve it in-place?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,2,5,7]', 'output': '[4,5,2,7] Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.'}, {'label': 'Example 2', 'input': 'nums = [2,3]', 'output': '[2,3]'}], 'elixir_template': 'defmodule Solution do\\n  @spec sort_array_by_parity_ii(nums :: [integer]) :: [integer]\\n  def sort_array_by_parity_ii(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec sort_array_by_parity_ii(Nums :: [integer()]) -> [integer()].\\nsort_array_by_parity_ii(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def sortArrayByParityII(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!207\n",
            "minimum-add-to-make-parentheses-valid 957\n",
            "{'id': 957, 'name': 'minimum-add-to-make-parentheses-valid', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/', 'task_description': 'A parentheses string is valid if and only if: It is the empty string, It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or It can be written as `(A)`, where `A` is a valid string. You are given a parentheses string `s`. In one move, you can insert a parenthesis at any position of the string. For example, if `s = \"()))\"`, you can insert an opening parenthesis to be `\"(**(**)))\"` or a closing parenthesis to be `\"())**)**)\"`. Return _the minimum number of moves required to make _`s`_ valid_. **Example 1:** ``` **Input:** s = \"())\" **Output:** 1 ``` **Example 2:** ``` **Input:** s = \"(((\" **Output:** 3 ``` **Constraints:** `1 <= s.length <= 1000` `s[i]` is either `\\'(\\'` or `\\')\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"())\"', 'output': '1'}, {'label': 'Example 2', 'input': 's = \"(((\"', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_add_to_make_valid(s :: String.t) :: integer\\n  def min_add_to_make_valid(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_add_to_make_valid(S :: unicode:unicode_binary()) -> integer().\\nmin_add_to_make_valid(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def minAddToMakeValid(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!208\n",
            "number-of-music-playlists 956\n",
            "{'id': 956, 'name': 'number-of-music-playlists', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/number-of-music-playlists/', 'task_description': 'Your music player contains `n` different songs. You want to listen to `goal` songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that: Every song is played **at least once**. A song can only be played again only if `k` other songs have been played. Given `n`, `goal`, and `k`, return _the number of possible playlists that you can create_. Since the answer can be very large, return it **modulo** `109 + 7`. **Example 1:** ``` **Input:** n = 3, goal = 3, k = 1 **Output:** 6 **Explanation:** There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1]. ``` **Example 2:** ``` **Input:** n = 2, goal = 3, k = 0 **Output:** 6 **Explanation:** There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2]. ``` **Example 3:** ``` **Input:** n = 2, goal = 3, k = 1 **Output:** 2 **Explanation:** There are 2 possible playlists: [1, 2, 1] and [2, 1, 2]. ``` **Constraints:** `0 <= k < n <= goal <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3, goal = 3, k = 1', 'output': '6 Explanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].'}, {'label': 'Example 2', 'input': 'n = 2, goal = 3, k = 0', 'output': '6 Explanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].'}, {'label': 'Example 3', 'input': 'n = 2, goal = 3, k = 1', 'output': '2 Explanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_music_playlists(n :: integer, goal :: integer, k :: integer) :: integer\\n  def num_music_playlists(n, goal, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_music_playlists(N :: integer(), Goal :: integer(), K :: integer()) -> integer().\\nnum_music_playlists(N, Goal, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def numMusicPlaylists(n: Int, goal: Int, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!209\n",
            "complete-binary-tree-inserter 955\n",
            "{'id': 955, 'name': 'complete-binary-tree-inserter', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/complete-binary-tree-inserter/', 'task_description': 'A **complete binary tree** is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. Design an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion. Implement the `CBTInserter` class: `CBTInserter(TreeNode root)` Initializes the data structure with the `root` of the complete binary tree. `int insert(int v)` Inserts a `TreeNode` into the tree with value `Node.val == val` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`. `TreeNode get_root()` Returns the root node of the tree. **Example 1:** ``` **Input** [\"CBTInserter\", \"insert\", \"insert\", \"get_root\"] [[[1, 2]], [3], [4], []] **Output** [null, 1, 2, [1, 2, 3, 4]] **Explanation** CBTInserter cBTInserter = new CBTInserter([1, 2]); cBTInserter.insert(3); // return 1 cBTInserter.insert(4); // return 2 cBTInserter.get_root(); // return [1, 2, 3, 4] ``` **Constraints:** The number of nodes in the tree will be in the range `[1, 1000]`. `0 <= Node.val <= 5000` `root` is a complete binary tree. `0 <= val <= 5000` At most `104` calls will be made to `insert` and `get_root`.', 'test_case': [], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule CBTInserter do\\n  @spec init_(root :: TreeNode.t | nil) :: any\\n  def init_(root) do\\n    \\n  end\\n\\n  @spec insert(val :: integer) :: integer\\n  def insert(val) do\\n    \\n  end\\n\\n  @spec get_root() :: TreeNode.t | nil\\n  def get_root() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# CBTInserter.init_(root)\\n# param_1 = CBTInserter.insert(val)\\n# param_2 = CBTInserter.get_root()\\n\\n# CBTInserter.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec cbt_inserter_init_(Root :: #tree_node{} | null) -> any().\\ncbt_inserter_init_(Root) ->\\n  .\\n\\n-spec cbt_inserter_insert(Val :: integer()) -> integer().\\ncbt_inserter_insert(Val) ->\\n  .\\n\\n-spec cbt_inserter_get_root() -> #tree_node{} | null.\\ncbt_inserter_get_root() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% cbt_inserter_init_(Root),\\n%% Param_1 = cbt_inserter_insert(Val),\\n%% Param_2 = cbt_inserter_get_root(),\\n\\n%% cbt_inserter_init_ will be called before every test case, in which you can do some necessary initializations.\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nclass CBTInserter(_root: TreeNode) {\\n\\n    def insert(`val`: Int): Int = {\\n        \\n    }\\n\\n    def get_root(): TreeNode = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your CBTInserter object will be instantiated and called as such:\\n * val obj = new CBTInserter(root)\\n * val param_1 = obj.insert(`val`)\\n * val param_2 = obj.get_root()\\n */'}\n",
            "Done!210\n",
            "maximum-sum-circular-subarray 954\n",
            "{'id': 954, 'name': 'maximum-sum-circular-subarray', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-sum-circular-subarray/', 'task_description': 'Given a **circular integer array** `nums` of length `n`, return _the maximum possible sum of a non-empty **subarray** of _`nums`. A **circular array** means the end of the array connects to the beginning of the array. Formally, the next element of `nums[i]` is `nums[(i + 1) % n]` and the previous element of `nums[i]` is `nums[(i - 1 + n) % n]`. A **subarray** may only include each element of the fixed buffer `nums` at most once. Formally, for a subarray `nums[i], nums[i + 1], ..., nums[j]`, there does not exist `i <= k1`, `k2 <= j` with `k1 % n == k2 % n`. **Example 1:** ``` **Input:** nums = [1,-2,3,-2] **Output:** 3 **Explanation:** Subarray [3] has maximum sum 3. ``` **Example 2:** ``` **Input:** nums = [5,-3,5] **Output:** 10 **Explanation:** Subarray [5,5] has maximum sum 5 + 5 = 10. ``` **Example 3:** ``` **Input:** nums = [-3,-2,-3] **Output:** -2 **Explanation:** Subarray [-2] has maximum sum -2. ``` **Constraints:** `n == nums.length` `1 <= n <= 3 * 104` `-3 * 104 <= nums[i] <= 3 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,-2,3,-2]', 'output': '3 Explanation: Subarray [3] has maximum sum 3.'}, {'label': 'Example 2', 'input': 'nums = [5,-3,5]', 'output': '10 Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.'}, {'label': 'Example 3', 'input': 'nums = [-3,-2,-3]', 'output': '-2 Explanation: Subarray [-2] has maximum sum -2. Constraints: n == nums.length 1 <= n <= 3 * 10 4 -3 * 10 4 <= nums[i] <= 3 * 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_subarray_sum_circular(nums :: [integer]) :: integer\\n  def max_subarray_sum_circular(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_subarray_sum_circular(Nums :: [integer()]) -> integer().\\nmax_subarray_sum_circular(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxSubarraySumCircular(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!211\n",
            "reverse-only-letters 953\n",
            "{'id': 953, 'name': 'reverse-only-letters', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/reverse-only-letters/', 'task_description': 'Given a string `s`, reverse the string according to the following rules: All the characters that are not English letters remain in the same position. All the English letters (lowercase or uppercase) should be reversed. Return `s`_ after reversing it_. **Example 1:** ``` **Input:** s = \"ab-cd\" **Output:** \"dc-ba\" ``` **Example 2:** ``` **Input:** s = \"a-bC-dEf-ghIj\" **Output:** \"j-Ih-gfE-dCba\" ``` **Example 3:** ``` **Input:** s = \"Test1ng-Leet=code-Q!\" **Output:** \"Qedo1ct-eeLg=ntse-T!\" ``` **Constraints:** `1 <= s.length <= 100` `s` consists of characters with ASCII values in the range `[33, 122]`. `s` does not contain `\\'\\\\\"\\'` or `\\'\\\\\\\\\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"ab-cd\"', 'output': '\"dc-ba\"'}, {'label': 'Example 2', 'input': 's = \"a-bC-dEf-ghIj\"', 'output': '\"j-Ih-gfE-dCba\"'}, {'label': 'Example 3', 'input': 's = \"Test1ng-Leet=code-Q!\"', 'output': '\"Qedo1ct-eeLg=ntse-T!\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec reverse_only_letters(s :: String.t) :: String.t\\n  def reverse_only_letters(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec reverse_only_letters(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nreverse_only_letters(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def reverseOnlyLetters(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!212\n",
            "word-subsets 952\n",
            "{'id': 952, 'name': 'word-subsets', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/word-subsets/', 'task_description': 'You are given two string arrays `words1` and `words2`. A string `b` is a **subset** of string `a` if every letter in `b` occurs in `a` including multiplicity. For example, `\"wrr\"` is a subset of `\"warrior\"` but is not a subset of `\"world\"`. A string `a` from `words1` is **universal** if for every string `b` in `words2`, `b` is a subset of `a`. Return an array of all the **universal** strings in `words1`. You may return the answer in **any order**. **Example 1:** ``` **Input:** words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"] **Output:** [\"facebook\",\"google\",\"leetcode\"] ``` **Example 2:** ``` **Input:** words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"] **Output:** [\"apple\",\"google\",\"leetcode\"] ``` **Constraints:** `1 <= words1.length, words2.length <= 104` `1 <= words1[i].length, words2[i].length <= 10` `words1[i]` and `words2[i]` consist only of lowercase English letters. All the strings of `words1` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]', 'output': '[\"facebook\",\"google\",\"leetcode\"]'}, {'label': 'Example 2', 'input': 'words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]', 'output': '[\"apple\",\"google\",\"leetcode\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec word_subsets(words1 :: [String.t], words2 :: [String.t]) :: [String.t]\\n  def word_subsets(words1, words2) do\\n    \\n  end\\nend', 'erlang_template': '-spec word_subsets(Words1 :: [unicode:unicode_binary()], Words2 :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nword_subsets(Words1, Words2) ->\\n  .', 'scala_template': 'object Solution {\\n    def wordSubsets(words1: Array[String], words2: Array[String]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!213\n",
            "partition-array-into-disjoint-intervals 951\n",
            "{'id': 951, 'name': 'partition-array-into-disjoint-intervals', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/partition-array-into-disjoint-intervals/', 'task_description': 'Given an integer array `nums`, partition it into two (contiguous) subarrays `left` and `right` so that: Every element in `left` is less than or equal to every element in `right`. `left` and `right` are non-empty. `left` has the smallest possible size. Return _the length of _`left`_ after such a partitioning_. Test cases are generated such that partitioning exists. **Example 1:** ``` **Input:** nums = [5,0,3,8,6] **Output:** 3 **Explanation:** left = [5,0,3], right = [8,6] ``` **Example 2:** ``` **Input:** nums = [1,1,1,0,6,12] **Output:** 4 **Explanation:** left = [1,1,1,0], right = [6,12] ``` **Constraints:** `2 <= nums.length <= 105` `0 <= nums[i] <= 106` There is at least one valid answer for the given input.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [5,0,3,8,6]', 'output': '3 Explanation: left = [5,0,3], right = [8,6]'}, {'label': 'Example 2', 'input': 'nums = [1,1,1,0,6,12]', 'output': '4 Explanation: left = [1,1,1,0], right = [6,12]'}], 'elixir_template': 'defmodule Solution do\\n  @spec partition_disjoint(nums :: [integer]) :: integer\\n  def partition_disjoint(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec partition_disjoint(Nums :: [integer()]) -> integer().\\npartition_disjoint(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def partitionDisjoint(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!214\n",
            "x-of-a-kind-in-a-deck-of-cards 950\n",
            "{'id': 950, 'name': 'x-of-a-kind-in-a-deck-of-cards', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/', 'task_description': 'You are given an integer array `deck` where `deck[i]` represents the number written on the `ith` card. Partition the cards into **one or more groups** such that: Each group has **exactly** `x` cards where `x > 1`, and All the cards in one group have the same integer written on them. Return `true`_ if such partition is possible, or _`false`_ otherwise_. **Example 1:** ``` **Input:** deck = [1,2,3,4,4,3,2,1] **Output:** true **Explanation**: Possible partition [1,1],[2,2],[3,3],[4,4]. ``` **Example 2:** ``` **Input:** deck = [1,1,1,2,2,2,3,3] **Output:** false **Explanation**: No possible partition. ``` **Constraints:** `1 <= deck.length <= 104` `0 <= deck[i] < 104`', 'test_case': [{'label': 'Example 1', 'input': 'deck = [1,2,3,4,4,3,2,1]', 'output': 'true Explanation : Possible partition [1,1],[2,2],[3,3],[4,4].'}, {'label': 'Example 2', 'input': 'deck = [1,1,1,2,2,2,3,3]', 'output': 'false Explanation : No possible partition.'}], 'elixir_template': 'defmodule Solution do\\n  @spec has_groups_size_x(deck :: [integer]) :: boolean\\n  def has_groups_size_x(deck) do\\n    \\n  end\\nend', 'erlang_template': '-spec has_groups_size_x(Deck :: [integer()]) -> boolean().\\nhas_groups_size_x(Deck) ->\\n  .', 'scala_template': 'object Solution {\\n    def hasGroupsSizeX(deck: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!215\n",
            "cat-and-mouse 949\n",
            "{'id': 949, 'name': 'cat-and-mouse', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/cat-and-mouse/', 'task_description': \"A game on an **undirected** graph is played by two players, Mouse and Cat, who alternate turns. The graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph. The mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`. During each player's turn, they **must** travel along one edge of the graph that meets where they are. For example, if the Mouse is at node 1, it **must** travel to any node in `graph[1]`. Additionally, it is not allowed for the Cat to travel to the Hole (node `0`). Then, the game can end in three ways: If ever the Cat occupies the same node as the Mouse, the Cat wins. If ever the Mouse reaches the Hole, the Mouse wins. If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw. Given a `graph`, and assuming both players play optimally, return `1` if the mouse wins the game, `2` if the cat wins the game, or `0` if the game is a draw. **Example 1:** ``` **Input:** graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]] **Output:** 0 ``` **Example 2:** ``` **Input:** graph = [[1,3],[0],[3],[0,2]] **Output:** 1 ``` **Constraints:** `3 <= graph.length <= 50` `1 <= graph[i].length < graph.length` `0 <= graph[i][j] < graph.length` `graph[i][j] != i` `graph[i]` is unique. The mouse and the cat can always move.\", 'test_case': [{'label': 'Example 1', 'input': 'graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]', 'output': '0'}, {'label': 'Example 2', 'input': 'graph = [[1,3],[0],[3],[0,2]]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec cat_mouse_game(graph :: [[integer]]) :: integer\\n  def cat_mouse_game(graph) do\\n    \\n  end\\nend', 'erlang_template': '-spec cat_mouse_game(Graph :: [[integer()]]) -> integer().\\ncat_mouse_game(Graph) ->\\n  .', 'scala_template': 'object Solution {\\n    def catMouseGame(graph: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!216\n",
            "sort-an-array 948\n",
            "{'id': 948, 'name': 'sort-an-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sort-an-array/', 'task_description': 'Given an array of integers `nums`, sort the array in ascending order and return it. You must solve the problem **without using any built-in** functions in `O(nlog(n))` time complexity and with the smallest space complexity possible. **Example 1:** ``` **Input:** nums = [5,2,3,1] **Output:** [1,2,3,5] **Explanation:** After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5). ``` **Example 2:** ``` **Input:** nums = [5,1,1,2,0,0] **Output:** [0,0,1,1,2,5] **Explanation:** Note that the values of nums are not necessairly unique. ``` **Constraints:** `1 <= nums.length <= 5 * 104` `-5 * 104 <= nums[i] <= 5 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [5,2,3,1]', 'output': '[1,2,3,5] Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).'}, {'label': 'Example 2', 'input': 'nums = [5,1,1,2,0,0]', 'output': '[0,0,1,1,2,5] Explanation: Note that the values of nums are not necessairly unique.'}], 'elixir_template': 'defmodule Solution do\\n  @spec sort_array(nums :: [integer]) :: [integer]\\n  def sort_array(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec sort_array(Nums :: [integer()]) -> [integer()].\\nsort_array(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def sortArray(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!217\n",
            "online-election 947\n",
            "{'id': 947, 'name': 'online-election', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/online-election/', 'task_description': 'You are given two integer arrays `persons` and `times`. In an election, the `ith` vote was cast for `persons[i]` at time `times[i]`. For each query at a time `t`, find the person that was leading the election at time `t`. Votes cast at time `t` will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins. Implement the `TopVotedCandidate` class: `TopVotedCandidate(int[] persons, int[] times)` Initializes the object with the `persons` and `times` arrays. `int q(int t)` Returns the number of the person that was leading the election at time `t` according to the mentioned rules. **Example 1:** ``` **Input** [\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"] [[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]] **Output** [null, 0, 1, 1, 0, 0, 1] **Explanation** TopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]); topVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading. topVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading. topVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.) topVotedCandidate.q(15); // return 0 topVotedCandidate.q(24); // return 0 topVotedCandidate.q(8); // return 1 ``` **Constraints:** `1 <= persons.length <= 5000` `times.length == persons.length` `0 <= persons[i] < persons.length` `0 <= times[i] <= 109` `times` is sorted in a strictly increasing order. `times[0] <= t <= 109` At most `104` calls will be made to `q`.', 'test_case': [], 'elixir_template': 'defmodule TopVotedCandidate do\\n  @spec init_(persons :: [integer], times :: [integer]) :: any\\n  def init_(persons, times) do\\n    \\n  end\\n\\n  @spec q(t :: integer) :: integer\\n  def q(t) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# TopVotedCandidate.init_(persons, times)\\n# param_1 = TopVotedCandidate.q(t)\\n\\n# TopVotedCandidate.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec top_voted_candidate_init_(Persons :: [integer()], Times :: [integer()]) -> any().\\ntop_voted_candidate_init_(Persons, Times) ->\\n  .\\n\\n-spec top_voted_candidate_q(T :: integer()) -> integer().\\ntop_voted_candidate_q(T) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% top_voted_candidate_init_(Persons, Times),\\n%% Param_1 = top_voted_candidate_q(T),\\n\\n%% top_voted_candidate_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class TopVotedCandidate(_persons: Array[Int], _times: Array[Int]) {\\n\\n    def q(t: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your TopVotedCandidate object will be instantiated and called as such:\\n * val obj = new TopVotedCandidate(persons, times)\\n * val param_1 = obj.q(t)\\n */'}\n",
            "Done!218\n",
            "smallest-range-ii 946\n",
            "{'id': 946, 'name': 'smallest-range-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/smallest-range-ii/', 'task_description': 'You are given an integer array `nums` and an integer `k`. For each index `i` where `0 <= i < nums.length`, change `nums[i]` to be either `nums[i] + k` or `nums[i] - k`. The **score** of `nums` is the difference between the maximum and minimum elements in `nums`. Return _the minimum **score** of _`nums`_ after changing the values at each index_. **Example 1:** ``` **Input:** nums = [1], k = 0 **Output:** 0 **Explanation:** The score is max(nums) - min(nums) = 1 - 1 = 0. ``` **Example 2:** ``` **Input:** nums = [0,10], k = 2 **Output:** 6 **Explanation:** Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6. ``` **Example 3:** ``` **Input:** nums = [1,3,6], k = 3 **Output:** 3 **Explanation:** Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3. ``` **Constraints:** `1 <= nums.length <= 104` `0 <= nums[i] <= 104` `0 <= k <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1], k = 0', 'output': '0 Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.'}, {'label': 'Example 2', 'input': 'nums = [0,10], k = 2', 'output': '6 Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.'}, {'label': 'Example 3', 'input': 'nums = [1,3,6], k = 3', 'output': '3 Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_range_ii(nums :: [integer], k :: integer) :: integer\\n  def smallest_range_ii(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_range_ii(Nums :: [integer()], K :: integer()) -> integer().\\nsmallest_range_ii(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestRangeII(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!219\n",
            "snakes-and-ladders 945\n",
            "{'id': 945, 'name': 'snakes-and-ladders', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/snakes-and-ladders/', 'task_description': 'You are given an `n x n` integer matrix `board` where the cells are labeled from `1` to `n2` in a **Boustrophedon style** starting from the bottom left of the board (i.e. `board[n - 1][0]`) and alternating direction each row. You start on square `1` of the board. In each move, starting from square `curr`, do the following: Choose a destination square `next` with a label in the range `[curr + 1, min(curr + 6, n2)]`. This choice simulates the result of a standard **6-sided die roll**: i.e., there are always at most 6 destinations, regardless of the size of the board. If `next` has a snake or ladder, you **must** move to the destination of that snake or ladder. Otherwise, you move to `next`. The game ends when you reach the square `n2`. A board square on row `r` and column `c` has a snake or ladder if `board[r][c] != -1`. The destination of that snake or ladder is `board[r][c]`. Squares `1` and `n2` are not the starting points of any snake or ladder. Note that you only take a snake or ladder at most once per dice roll. If the destination to a snake or ladder is the start of another snake or ladder, you do **not** follow the subsequent snake or ladder. For example, suppose the board is `[[-1,4],[-1,3]]`, and on the first move, your destination square is `2`. You follow the ladder to square `3`, but do **not** follow the subsequent ladder to `4`. Return _the least number of dice rolls required to reach the square _`n2`_. If it is not possible to reach the square, return _`-1`. **Example 1:** ``` **Input:** board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]] **Output:** 4 **Explanation:** In the beginning, you start at square 1 (at row 5, column 0). You decide to move to square 2 and must take the ladder to square 15. You then decide to move to square 17 and must take the snake to square 13. You then decide to move to square 14 and must take the ladder to square 35. You then decide to move to square 36, ending the game. This is the lowest possible number of moves to reach the last square, so return 4. ``` **Example 2:** ``` **Input:** board = [[-1,-1],[-1,3]] **Output:** 1 ``` **Constraints:** `n == board.length == board[i].length` `2 <= n <= 20` `board[i][j]` is either `-1` or in the range `[1, n2]`. The squares labeled `1` and `n2` are not the starting points of any snake or ladder.', 'test_case': [{'label': 'Example 1', 'input': 'board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]', 'output': '4 Explanation: In the beginning, you start at square 1 (at row 5, column 0).\\nYou decide to move to square 2 and must take the ladder to square 15.\\nYou then decide to move to square 17 and must take the snake to square 13.\\nYou then decide to move to square 14 and must take the ladder to square 35.\\nYou then decide to move to square 36, ending the game.\\nThis is the lowest possible number of moves to reach the last square, so return 4.'}, {'label': 'Example 2', 'input': 'board = [[-1,-1],[-1,3]]', 'output': '1 Constraints: n == board.length == board[i].length 2 <= n <= 20 board[i][j] is either -1 or in the range [1, n 2 ] . The squares labeled 1 and n 2 are not the starting points of any snake or ladder.'}], 'elixir_template': 'defmodule Solution do\\n  @spec snakes_and_ladders(board :: [[integer]]) :: integer\\n  def snakes_and_ladders(board) do\\n    \\n  end\\nend', 'erlang_template': '-spec snakes_and_ladders(Board :: [[integer()]]) -> integer().\\nsnakes_and_ladders(Board) ->\\n  .', 'scala_template': 'object Solution {\\n    def snakesAndLadders(board: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!220\n",
            "smallest-range-i 944\n",
            "{'id': 944, 'name': 'smallest-range-i', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/smallest-range-i/', 'task_description': 'You are given an integer array `nums` and an integer `k`. In one operation, you can choose any index `i` where `0 <= i < nums.length` and change `nums[i]` to `nums[i] + x` where `x` is an integer from the range `[-k, k]`. You can apply this operation **at most once** for each index `i`. The **score** of `nums` is the difference between the maximum and minimum elements in `nums`. Return _the minimum **score** of _`nums`_ after applying the mentioned operation at most once for each index in it_. **Example 1:** ``` **Input:** nums = [1], k = 0 **Output:** 0 **Explanation:** The score is max(nums) - min(nums) = 1 - 1 = 0. ``` **Example 2:** ``` **Input:** nums = [0,10], k = 2 **Output:** 6 **Explanation:** Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6. ``` **Example 3:** ``` **Input:** nums = [1,3,6], k = 3 **Output:** 0 **Explanation:** Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0. ``` **Constraints:** `1 <= nums.length <= 104` `0 <= nums[i] <= 104` `0 <= k <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1], k = 0', 'output': '0 Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.'}, {'label': 'Example 2', 'input': 'nums = [0,10], k = 2', 'output': '6 Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.'}, {'label': 'Example 3', 'input': 'nums = [1,3,6], k = 3', 'output': '0 Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_range_i(nums :: [integer], k :: integer) :: integer\\n  def smallest_range_i(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_range_i(Nums :: [integer()], K :: integer()) -> integer().\\nsmallest_range_i(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestRangeI(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!221\n",
            "sum-of-subarray-minimums 943\n",
            "{'id': 943, 'name': 'sum-of-subarray-minimums', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sum-of-subarray-minimums/', 'task_description': 'Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer **modulo** `109 + 7`. **Example 1:** ``` **Input:** arr = [3,1,2,4] **Output:** 17 **Explanation:** Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 17. ``` **Example 2:** ``` **Input:** arr = [11,81,94,43,3] **Output:** 444 ``` **Constraints:** `1 <= arr.length <= 3 * 104` `1 <= arr[i] <= 3 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [3,1,2,4]', 'output': '17 Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \\nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\\nSum is 17.'}, {'label': 'Example 2', 'input': 'arr = [11,81,94,43,3]', 'output': '444'}], 'elixir_template': 'defmodule Solution do\\n  @spec sum_subarray_mins(arr :: [integer]) :: integer\\n  def sum_subarray_mins(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec sum_subarray_mins(Arr :: [integer()]) -> integer().\\nsum_subarray_mins(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def sumSubarrayMins(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!222\n",
            "super-palindromes 942\n",
            "{'id': 942, 'name': 'super-palindromes', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/super-palindromes/', 'task_description': 'Let\\'s say a positive integer is a **super-palindrome** if it is a palindrome, and it is also the square of a palindrome. Given two positive integers `left` and `right` represented as strings, return _the number of **super-palindromes** integers in the inclusive range_ `[left, right]`. **Example 1:** ``` **Input:** left = \"4\", right = \"1000\" **Output:** 4 **Explanation**: 4, 9, 121, and 484 are superpalindromes. Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome. ``` **Example 2:** ``` **Input:** left = \"1\", right = \"2\" **Output:** 1 ``` **Constraints:** `1 <= left.length, right.length <= 18` `left` and `right` consist of only digits. `left` and `right` cannot have leading zeros. `left` and `right` represent integers in the range `[1, 1018 - 1]`. `left` is less than or equal to `right`.', 'test_case': [{'label': 'Example 1', 'input': 'left = \"4\", right = \"1000\"', 'output': '4 Explanation : 4, 9, 121, and 484 are superpalindromes.\\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.'}, {'label': 'Example 2', 'input': 'left = \"1\", right = \"2\"', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec superpalindromes_in_range(left :: String.t, right :: String.t) :: integer\\n  def superpalindromes_in_range(left, right) do\\n    \\n  end\\nend', 'erlang_template': '-spec superpalindromes_in_range(Left :: unicode:unicode_binary(), Right :: unicode:unicode_binary()) -> integer().\\nsuperpalindromes_in_range(Left, Right) ->\\n  .', 'scala_template': 'object Solution {\\n    def superpalindromesInRange(left: String, right: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!223\n",
            "sort-array-by-parity 941\n",
            "{'id': 941, 'name': 'sort-array-by-parity', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/sort-array-by-parity/', 'task_description': 'Given an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers. Return _**any array** that satisfies this condition_. **Example 1:** ``` **Input:** nums = [3,1,2,4] **Output:** [2,4,3,1] **Explanation:** The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted. ``` **Example 2:** ``` **Input:** nums = [0] **Output:** [0] ``` **Constraints:** `1 <= nums.length <= 5000` `0 <= nums[i] <= 5000`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,1,2,4]', 'output': '[2,4,3,1] Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.'}, {'label': 'Example 2', 'input': 'nums = [0]', 'output': '[0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec sort_array_by_parity(nums :: [integer]) :: [integer]\\n  def sort_array_by_parity(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec sort_array_by_parity(Nums :: [integer()]) -> [integer()].\\nsort_array_by_parity(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def sortArrayByParity(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!224\n",
            "fruit-into-baskets 940\n",
            "{'id': 940, 'name': 'fruit-into-baskets', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/fruit-into-baskets/', 'task_description': 'You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array `fruits` where `fruits[i]` is the **type** of fruit the `ith` tree produces. You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow: You only have **two** baskets, and each basket can only hold a **single type** of fruit. There is no limit on the amount of fruit each basket can hold. Starting from any tree of your choice, you must pick **exactly one fruit** from **every** tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets. Once you reach a tree with fruit that cannot fit in your baskets, you must stop. Given the integer array `fruits`, return _the **maximum** number of fruits you can pick_. **Example 1:** ``` **Input:** fruits = [1,2,1] **Output:** 3 **Explanation:** We can pick from all 3 trees. ``` **Example 2:** ``` **Input:** fruits = [0,1,2,2] **Output:** 3 **Explanation:** We can pick from trees [1,2,2]. If we had started at the first tree, we would only pick from trees [0,1]. ``` **Example 3:** ``` **Input:** fruits = [1,2,3,2,2] **Output:** 4 **Explanation:** We can pick from trees [2,3,2,2]. If we had started at the first tree, we would only pick from trees [1,2]. ``` **Constraints:** `1 <= fruits.length <= 105` `0 <= fruits[i] < fruits.length`', 'test_case': [{'label': 'Example 1', 'input': 'fruits = [ 1,2,1 ]', 'output': '3 Explanation: We can pick from all 3 trees.'}, {'label': 'Example 2', 'input': 'fruits = [0, 1,2,2 ]', 'output': '3 Explanation: We can pick from trees [1,2,2].\\nIf we had started at the first tree, we would only pick from trees [0,1].'}, {'label': 'Example 3', 'input': 'fruits = [1, 2,3,2,2 ]', 'output': '4 Explanation: We can pick from trees [2,3,2,2].\\nIf we had started at the first tree, we would only pick from trees [1,2].'}], 'elixir_template': 'defmodule Solution do\\n  @spec total_fruit(fruits :: [integer]) :: integer\\n  def total_fruit(fruits) do\\n    \\n  end\\nend', 'erlang_template': '-spec total_fruit(Fruits :: [integer()]) -> integer().\\ntotal_fruit(Fruits) ->\\n  .', 'scala_template': 'object Solution {\\n    def totalFruit(fruits: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!225\n",
            "valid-permutations-for-di-sequence 939\n",
            "{'id': 939, 'name': 'valid-permutations-for-di-sequence', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/valid-permutations-for-di-sequence/', 'task_description': 'You are given a string `s` of length `n` where `s[i]` is either: `\\'D\\'` means decreasing, or `\\'I\\'` means increasing. A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` is called a **valid permutation** if for all valid `i`: If `s[i] == \\'D\\'`, then `perm[i] > perm[i + 1]`, and If `s[i] == \\'I\\'`, then `perm[i] < perm[i + 1]`. Return _the number of **valid permutations** _`perm`. Since the answer may be large, return it **modulo** `109 + 7`. **Example 1:** ``` **Input:** s = \"DID\" **Output:** 5 **Explanation:** The 5 valid permutations of (0, 1, 2, 3) are: (1, 0, 3, 2) (2, 0, 3, 1) (2, 1, 3, 0) (3, 0, 2, 1) (3, 1, 2, 0) ``` **Example 2:** ``` **Input:** s = \"D\" **Output:** 1 ``` **Constraints:** `n == s.length` `1 <= n <= 200` `s[i]` is either `\\'I\\'` or `\\'D\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"DID\"', 'output': '5 Explanation: The 5 valid permutations of (0, 1, 2, 3) are:\\n(1, 0, 3, 2)\\n(2, 0, 3, 1)\\n(2, 1, 3, 0)\\n(3, 0, 2, 1)\\n(3, 1, 2, 0)'}, {'label': 'Example 2', 'input': 's = \"D\"', 'output': \"1 Constraints: n == s.length 1 <= n <= 200 s[i] is either 'I' or 'D' .\"}], 'elixir_template': 'defmodule Solution do\\n  @spec num_perms_di_sequence(s :: String.t) :: integer\\n  def num_perms_di_sequence(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_perms_di_sequence(S :: unicode:unicode_binary()) -> integer().\\nnum_perms_di_sequence(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def numPermsDISequence(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!226\n",
            "numbers-at-most-n-given-digit-set 938\n",
            "{'id': 938, 'name': 'numbers-at-most-n-given-digit-set', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/numbers-at-most-n-given-digit-set/', 'task_description': 'Given an array of `digits` which is sorted in **non-decreasing** order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = [\\'1\\',\\'3\\',\\'5\\']`, we may write numbers such as `\\'13\\'`, `\\'551\\'`, and `\\'1351315\\'`. Return _the number of positive integers that can be generated _that are less than or equal to a given integer `n`. **Example 1:** ``` **Input:** digits = [\"1\",\"3\",\"5\",\"7\"], n = 100 **Output:** 20 **Explanation: ** The 20 numbers that can be written are: 1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77. ``` **Example 2:** ``` **Input:** digits = [\"1\",\"4\",\"9\"], n = 1000000000 **Output:** 29523 **Explanation: ** We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers, 81 four digit numbers, 243 five digit numbers, 729 six digit numbers, 2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers. In total, this is 29523 integers that can be written using the digits array. ``` **Example 3:** ``` **Input:** digits = [\"7\"], n = 8 **Output:** 1 ``` **Constraints:** `1 <= digits.length <= 9` `digits[i].length == 1` `digits[i]` is a digit from `\\'1\\'` to `\\'9\\'`. All the values in `digits` are **unique**. `digits` is sorted in **non-decreasing** order. `1 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'digits = [\"1\",\"3\",\"5\",\"7\"], n = 100', 'output': '20 Explanation: The 20 numbers that can be written are:\\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.'}, {'label': 'Example 2', 'input': 'digits = [\"1\",\"4\",\"9\"], n = 1000000000', 'output': '29523 Explanation: We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\\nIn total, this is 29523 integers that can be written using the digits array.'}, {'label': 'Example 3', 'input': 'digits = [\"7\"], n = 8', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec at_most_n_given_digit_set(digits :: [String.t], n :: integer) :: integer\\n  def at_most_n_given_digit_set(digits, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec at_most_n_given_digit_set(Digits :: [unicode:unicode_binary()], N :: integer()) -> integer().\\nat_most_n_given_digit_set(Digits, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def atMostNGivenDigitSet(digits: Array[String], n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!227\n",
            "online-stock-span 937\n",
            "{'id': 937, 'name': 'online-stock-span', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/online-stock-span/', 'task_description': 'Design an algorithm that collects daily price quotes for some stock and returns **the span** of that stock\\'s price for the current day. The **span** of the stock\\'s price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day. For example, if the prices of the stock in the last four days is `[7,2,1,2]` and the price of the stock today is `2`, then the span of today is `4` because starting from today, the price of the stock was less than or equal `2` for `4` consecutive days. Also, if the prices of the stock in the last four days is `[7,34,1,2]` and the price of the stock today is `8`, then the span of today is `3` because starting from today, the price of the stock was less than or equal `8` for `3` consecutive days. Implement the `StockSpanner` class: `StockSpanner()` Initializes the object of the class. `int next(int price)` Returns the **span** of the stock\\'s price given that today\\'s price is `price`. **Example 1:** ``` **Input** [\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"] [[], [100], [80], [60], [70], [60], [75], [85]] **Output** [null, 1, 1, 1, 2, 1, 4, 6] **Explanation** StockSpanner stockSpanner = new StockSpanner(); stockSpanner.next(100); // return 1 stockSpanner.next(80); // return 1 stockSpanner.next(60); // return 1 stockSpanner.next(70); // return 2 stockSpanner.next(60); // return 1 stockSpanner.next(75); // return 4, because the last 4 prices (including today\\'s price of 75) were less than or equal to today\\'s price. stockSpanner.next(85); // return 6 ``` **Constraints:** `1 <= price <= 105` At most `104` calls will be made to `next`.', 'test_case': [], 'elixir_template': 'defmodule StockSpanner do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec next(price :: integer) :: integer\\n  def next(price) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# StockSpanner.init_()\\n# param_1 = StockSpanner.next(price)\\n\\n# StockSpanner.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec stock_spanner_init_() -> any().\\nstock_spanner_init_() ->\\n  .\\n\\n-spec stock_spanner_next(Price :: integer()) -> integer().\\nstock_spanner_next(Price) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% stock_spanner_init_(),\\n%% Param_1 = stock_spanner_next(Price),\\n\\n%% stock_spanner_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class StockSpanner() {\\n\\n    def next(price: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your StockSpanner object will be instantiated and called as such:\\n * val obj = new StockSpanner()\\n * val param_1 = obj.next(price)\\n */'}\n",
            "Done!228\n",
            "rle-iterator 936\n",
            "{'id': 936, 'name': 'rle-iterator', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rle-iterator/', 'task_description': 'We can use run-length encoding (i.e., **RLE**) to encode a sequence of integers. In a run-length encoded array of even length `encoding` (**0-indexed**), for all even `i`, `encoding[i]` tells us the number of times that the non-negative integer value `encoding[i + 1]` is repeated in the sequence. For example, the sequence `arr = [8,8,8,5,5]` can be encoded to be `encoding = [3,8,2,5]`. `encoding = [3,8,0,9,2,5]` and `encoding = [2,8,1,8,2,5]` are also valid **RLE** of `arr`. Given a run-length encoded array, design an iterator that iterates through it. Implement the `RLEIterator` class: `RLEIterator(int[] encoded)` Initializes the object with the encoded array `encoded`. `int next(int n)` Exhausts the next `n` elements and returns the last element exhausted in this way. If there is no element left to exhaust, return `-1` instead. **Example 1:** ``` **Input** [\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"] [[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]] **Output** [null, 8, 8, 5, -1] **Explanation** RLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5]. rLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5]. rLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5]. rLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5]. rLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5, but the second term did not exist. Since the last term exhausted does not exist, we return -1. ``` **Constraints:** `2 <= encoding.length <= 1000` `encoding.length` is even. `0 <= encoding[i] <= 109` `1 <= n <= 109` At most `1000` calls will be made to `next`.', 'test_case': [], 'elixir_template': 'defmodule RLEIterator do\\n  @spec init_(encoding :: [integer]) :: any\\n  def init_(encoding) do\\n    \\n  end\\n\\n  @spec next(n :: integer) :: integer\\n  def next(n) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# RLEIterator.init_(encoding)\\n# param_1 = RLEIterator.next(n)\\n\\n# RLEIterator.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec rle_iterator_init_(Encoding :: [integer()]) -> any().\\nrle_iterator_init_(Encoding) ->\\n  .\\n\\n-spec rle_iterator_next(N :: integer()) -> integer().\\nrle_iterator_next(N) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% rle_iterator_init_(Encoding),\\n%% Param_1 = rle_iterator_next(N),\\n\\n%% rle_iterator_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class RLEIterator(_encoding: Array[Int]) {\\n\\n    def next(n: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your RLEIterator object will be instantiated and called as such:\\n * val obj = new RLEIterator(encoding)\\n * val param_1 = obj.next(n)\\n */'}\n",
            "Done!229\n",
            "orderly-queue 935\n",
            "{'id': 935, 'name': 'orderly-queue', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/orderly-queue/', 'task_description': 'You are given a string `s` and an integer `k`. You can choose one of the first `k` letters of `s` and append it at the end of the string. Return _the lexicographically smallest string you could have after applying the mentioned step any number of moves_. **Example 1:** ``` **Input:** s = \"cba\", k = 1 **Output:** \"acb\" **Explanation:** In the first move, we move the 1st character \\'c\\' to the end, obtaining the string \"bac\". In the second move, we move the 1st character \\'b\\' to the end, obtaining the final result \"acb\". ``` **Example 2:** ``` **Input:** s = \"baaca\", k = 3 **Output:** \"aaabc\" **Explanation:** In the first move, we move the 1st character \\'b\\' to the end, obtaining the string \"aacab\". In the second move, we move the 3rd character \\'c\\' to the end, obtaining the final result \"aaabc\". ``` **Constraints:** `1 <= k <= s.length <= 1000` `s` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"cba\", k = 1', 'output': '\"acb\" Explanation: In the first move, we move the 1 st character \\'c\\' to the end, obtaining the string \"bac\".\\nIn the second move, we move the 1 st character \\'b\\' to the end, obtaining the final result \"acb\".'}, {'label': 'Example 2', 'input': 's = \"baaca\", k = 3', 'output': '\"aaabc\" Explanation: In the first move, we move the 1 st character \\'b\\' to the end, obtaining the string \"aacab\".\\nIn the second move, we move the 3 rd character \\'c\\' to the end, obtaining the final result \"aaabc\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec orderly_queue(s :: String.t, k :: integer) :: String.t\\n  def orderly_queue(s, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec orderly_queue(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\\norderly_queue(S, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def orderlyQueue(s: String, k: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!230\n",
            "bitwise-ors-of-subarrays 934\n",
            "{'id': 934, 'name': 'bitwise-ors-of-subarrays', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/bitwise-ors-of-subarrays/', 'task_description': 'Given an integer array `arr`, return _the number of distinct bitwise ORs of all the non-empty subarrays of_ `arr`. The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer. A **subarray** is a contiguous non-empty sequence of elements within an array. **Example 1:** ``` **Input:** arr = [0] **Output:** 1 **Explanation:** There is only one possible result: 0. ``` **Example 2:** ``` **Input:** arr = [1,1,2] **Output:** 3 **Explanation:** The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]. These yield the results 1, 1, 2, 1, 3, 3. There are 3 unique values, so the answer is 3. ``` **Example 3:** ``` **Input:** arr = [1,2,4] **Output:** 6 **Explanation:** The possible results are 1, 2, 3, 4, 6, and 7. ``` **Constraints:** `1 <= arr.length <= 5 * 104` `0 <= arr[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [0]', 'output': '1 Explanation: There is only one possible result: 0.'}, {'label': 'Example 2', 'input': 'arr = [1,1,2]', 'output': '3 Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\\nThese yield the results 1, 1, 2, 1, 3, 3.\\nThere are 3 unique values, so the answer is 3.'}, {'label': 'Example 3', 'input': 'arr = [1,2,4]', 'output': '6 Explanation: The possible results are 1, 2, 3, 4, 6, and 7.'}], 'elixir_template': 'defmodule Solution do\\n  @spec subarray_bitwise_o_rs(arr :: [integer]) :: integer\\n  def subarray_bitwise_o_rs(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec subarray_bitwise_o_rs(Arr :: [integer()]) -> integer().\\nsubarray_bitwise_o_rs(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def subarrayBitwiseORs(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!231\n",
            "increasing-order-search-tree 933\n",
            "{'id': 933, 'name': 'increasing-order-search-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/increasing-order-search-tree/', 'task_description': 'Given the `root` of a binary search tree, rearrange the tree in **in-order** so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child. **Example 1:** ``` **Input:** root = [5,3,6,2,4,null,8,1,null,null,null,7,9] **Output:** [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9] ``` **Example 2:** ``` **Input:** root = [5,1,7] **Output:** [1,null,5,null,7] ``` **Constraints:** The number of nodes in the given tree will be in the range `[1, 100]`. `0 <= Node.val <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [5,3,6,2,4,null,8,1,null,null,null,7,9]', 'output': '[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]'}, {'label': 'Example 2', 'input': 'root = [5,1,7]', 'output': '[1,null,5,null,7] Constraints: The number of nodes in the given tree will be in the range [1, 100] . 0 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec increasing_bst(root :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def increasing_bst(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec increasing_bst(Root :: #tree_node{} | null) -> #tree_node{} | null.\\nincreasing_bst(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def increasingBST(root: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!232\n",
            "monotonic-array 932\n",
            "{'id': 932, 'name': 'monotonic-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/monotonic-array/', 'task_description': 'An array is **monotonic** if it is either monotone increasing or monotone decreasing. An array `nums` is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. An array `nums` is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`. Given an integer array `nums`, return `true`_ if the given array is monotonic, or _`false`_ otherwise_. **Example 1:** ``` **Input:** nums = [1,2,2,3] **Output:** true ``` **Example 2:** ``` **Input:** nums = [6,5,4,4] **Output:** true ``` **Example 3:** ``` **Input:** nums = [1,3,2] **Output:** false ``` **Constraints:** `1 <= nums.length <= 105` `-105 <= nums[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,2,3]', 'output': 'true'}, {'label': 'Example 2', 'input': 'nums = [6,5,4,4]', 'output': 'true'}, {'label': 'Example 3', 'input': 'nums = [1,3,2]', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_monotonic(nums :: [integer]) :: boolean\\n  def is_monotonic(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_monotonic(Nums :: [integer()]) -> boolean().\\nis_monotonic(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def isMonotonic(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!233\n",
            "maximum-frequency-stack 931\n",
            "{'id': 931, 'name': 'maximum-frequency-stack', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/maximum-frequency-stack/', 'task_description': 'Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack. Implement the `FreqStack` class: `FreqStack()` constructs an empty frequency stack. `void push(int val)` pushes an integer `val` onto the top of the stack. `int pop()` removes and returns the most frequent element in the stack. If there is a tie for the most frequent element, the element closest to the stack\\'s top is removed and returned. **Example 1:** ``` **Input** [\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"] [[], [5], [7], [5], [7], [4], [5], [], [], [], []] **Output** [null, null, null, null, null, null, null, 5, 7, 5, 4] **Explanation** FreqStack freqStack = new FreqStack(); freqStack.push(5); // The stack is [5] freqStack.push(7); // The stack is [5,7] freqStack.push(5); // The stack is [5,7,5] freqStack.push(7); // The stack is [5,7,5,7] freqStack.push(4); // The stack is [5,7,5,7,4] freqStack.push(5); // The stack is [5,7,5,7,4,5] freqStack.pop(); // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4]. freqStack.pop(); // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4]. freqStack.pop(); // return 5, as 5 is the most frequent. The stack becomes [5,7,4]. freqStack.pop(); // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7]. ``` **Constraints:** `0 <= val <= 109` At most `2 * 104` calls will be made to `push` and `pop`. It is guaranteed that there will be at least one element in the stack before calling `pop`.', 'test_case': [], 'elixir_template': 'defmodule FreqStack do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec push(val :: integer) :: any\\n  def push(val) do\\n    \\n  end\\n\\n  @spec pop() :: integer\\n  def pop() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# FreqStack.init_()\\n# FreqStack.push(val)\\n# param_2 = FreqStack.pop()\\n\\n# FreqStack.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec freq_stack_init_() -> any().\\nfreq_stack_init_() ->\\n  .\\n\\n-spec freq_stack_push(Val :: integer()) -> any().\\nfreq_stack_push(Val) ->\\n  .\\n\\n-spec freq_stack_pop() -> integer().\\nfreq_stack_pop() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% freq_stack_init_(),\\n%% freq_stack_push(Val),\\n%% Param_2 = freq_stack_pop(),\\n\\n%% freq_stack_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class FreqStack() {\\n\\n    def push(`val`: Int): Unit = {\\n        \\n    }\\n\\n    def pop(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your FreqStack object will be instantiated and called as such:\\n * val obj = new FreqStack()\\n * obj.push(`val`)\\n * val param_2 = obj.pop()\\n */'}\n",
            "Done!234\n",
            "all-possible-full-binary-trees 930\n",
            "{'id': 930, 'name': 'all-possible-full-binary-trees', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/all-possible-full-binary-trees/', 'task_description': 'Given an integer `n`, return _a list of all possible **full binary trees** with_ `n` _nodes_. Each node of each tree in the answer must have `Node.val == 0`. Each element of the answer is the root node of one possible tree. You may return the final list of trees in **any order**. A **full binary tree** is a binary tree where each node has exactly `0` or `2` children. **Example 1:** ``` **Input:** n = 7 **Output:** [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]] ``` **Example 2:** ``` **Input:** n = 3 **Output:** [[0,0,0]] ``` **Constraints:** `1 <= n <= 20`', 'test_case': [{'label': 'Example 1', 'input': 'n = 7', 'output': '[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]'}, {'label': 'Example 2', 'input': 'n = 3', 'output': '[[0,0,0]]'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec all_possible_fbt(n :: integer) :: [TreeNode.t | nil]\\n  def all_possible_fbt(n) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec all_possible_fbt(N :: integer()) -> [#tree_node{} | null].\\nall_possible_fbt(N) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def allPossibleFBT(n: Int): List[TreeNode] = {\\n        \\n    }\\n}'}\n",
            "Done!235\n",
            "groups-of-special-equivalent-strings 929\n",
            "{'id': 929, 'name': 'groups-of-special-equivalent-strings', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/groups-of-special-equivalent-strings/', 'task_description': 'You are given an array of strings of the same length `words`. In one **move**, you can swap any two even indexed characters or any two odd indexed characters of a string `words[i]`. Two strings `words[i]` and `words[j]` are **special-equivalent** if after any number of moves, `words[i] == words[j]`. For example, `words[i] = \"zzxy\"` and `words[j] = \"xyzz\"` are **special-equivalent** because we may make the moves `\"zzxy\" -> \"xzzy\" -> \"xyzz\"`. A **group of special-equivalent strings** from `words` is a non-empty subset of words such that: Every pair of strings in the group are special equivalent, and The group is the largest size possible (i.e., there is not a string `words[i]` not in the group such that `words[i]` is special-equivalent to every string in the group). Return _the number of **groups of special-equivalent strings** from _`words`. **Example 1:** ``` **Input:** words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"] **Output:** 3 **Explanation:** One group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these. The other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"]. Note that in particular, \"zzxy\" is not special equivalent to \"zzyx\". ``` **Example 2:** ``` **Input:** words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"] **Output:** 3 ``` **Constraints:** `1 <= words.length <= 1000` `1 <= words[i].length <= 20` `words[i]` consist of lowercase English letters. All the strings are of the same length.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]', 'output': '3 Explanation: One group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\".'}, {'label': 'Example 2', 'input': 'words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_special_equiv_groups(words :: [String.t]) :: integer\\n  def num_special_equiv_groups(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_special_equiv_groups(Words :: [unicode:unicode_binary()]) -> integer().\\nnum_special_equiv_groups(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSpecialEquivGroups(words: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!236\n",
            "surface-area-of-3d-shapes 928\n",
            "{'id': 928, 'name': 'surface-area-of-3d-shapes', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/surface-area-of-3d-shapes/', 'task_description': 'You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`. After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes. Return _the total surface area of the resulting shapes_. **Note:** The bottom face of each shape counts toward its surface area. **Example 1:** ``` **Input:** grid = [[1,2],[3,4]] **Output:** 34 ``` **Example 2:** ``` **Input:** grid = [[1,1,1],[1,0,1],[1,1,1]] **Output:** 32 ``` **Example 3:** ``` **Input:** grid = [[2,2,2],[2,1,2],[2,2,2]] **Output:** 46 ``` **Constraints:** `n == grid.length == grid[i].length` `1 <= n <= 50` `0 <= grid[i][j] <= 50`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,2],[3,4]]', 'output': '34'}, {'label': 'Example 2', 'input': 'grid = [[1,1,1],[1,0,1],[1,1,1]]', 'output': '32'}, {'label': 'Example 3', 'input': 'grid = [[2,2,2],[2,1,2],[2,2,2]]', 'output': '46 Constraints: n == grid.length == grid[i].length 1 <= n <= 50 0 <= grid[i][j] <= 50'}], 'elixir_template': 'defmodule Solution do\\n  @spec surface_area(grid :: [[integer]]) :: integer\\n  def surface_area(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec surface_area(Grid :: [[integer()]]) -> integer().\\nsurface_area(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def surfaceArea(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!237\n",
            "sum-of-subsequence-widths 927\n",
            "{'id': 927, 'name': 'sum-of-subsequence-widths', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/sum-of-subsequence-widths/', 'task_description': 'The **width** of a sequence is the difference between the maximum and minimum elements in the sequence. Given an array of integers `nums`, return _the sum of the **widths** of all the non-empty **subsequences** of _`nums`. Since the answer may be very large, return it **modulo** `109 + 7`. A **subsequence** is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`. **Example 1:** ``` **Input:** nums = [2,1,3] **Output:** 6 Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3]. The corresponding widths are 0, 0, 0, 1, 1, 2, 2. The sum of these widths is 6. ``` **Example 2:** ``` **Input:** nums = [2] **Output:** 0 ``` **Constraints:** `1 <= nums.length <= 105` `1 <= nums[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,1,3]', 'output': '6\\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\\nThe sum of these widths is 6.'}, {'label': 'Example 2', 'input': 'nums = [2]', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec sum_subseq_widths(nums :: [integer]) :: integer\\n  def sum_subseq_widths(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec sum_subseq_widths(Nums :: [integer()]) -> integer().\\nsum_subseq_widths(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def sumSubseqWidths(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!238\n",
            "find-and-replace-pattern 926\n",
            "{'id': 926, 'name': 'find-and-replace-pattern', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-and-replace-pattern/', 'task_description': 'Given a list of strings `words` and a string `pattern`, return _a list of_ `words[i]` _that match_ `pattern`. You may return the answer in **any order**. A word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word. Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter. **Example 1:** ``` **Input:** words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\" **Output:** [\"mee\",\"aqq\"] **Explanation:** \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter. ``` **Example 2:** ``` **Input:** words = [\"a\",\"b\",\"c\"], pattern = \"a\" **Output:** [\"a\",\"b\",\"c\"] ``` **Constraints:** `1 <= pattern.length <= 20` `1 <= words.length <= 50` `words[i].length == pattern.length` `pattern` and `words[i]` are lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"', 'output': '[\"mee\",\"aqq\"] Explanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \\n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.'}, {'label': 'Example 2', 'input': 'words = [\"a\",\"b\",\"c\"], pattern = \"a\"', 'output': '[\"a\",\"b\",\"c\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_and_replace_pattern(words :: [String.t], pattern :: String.t) :: [String.t]\\n  def find_and_replace_pattern(words, pattern) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_and_replace_pattern(Words :: [unicode:unicode_binary()], Pattern :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nfind_and_replace_pattern(Words, Pattern) ->\\n  .', 'scala_template': 'object Solution {\\n    def findAndReplacePattern(words: Array[String], pattern: String): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!239\n",
            "construct-binary-tree-from-preorder-and-postorder-traversal 925\n",
            "{'id': 925, 'name': 'construct-binary-tree-from-preorder-and-postorder-traversal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/', 'task_description': 'Given two integer arrays, `preorder` and `postorder` where `preorder` is the preorder traversal of a binary tree of **distinct** values and `postorder` is the postorder traversal of the same tree, reconstruct and return _the binary tree_. If there exist multiple answers, you can **return any** of them. **Example 1:** ``` **Input:** preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1] **Output:** [1,2,3,4,5,6,7] ``` **Example 2:** ``` **Input:** preorder = [1], postorder = [1] **Output:** [1] ``` **Constraints:** `1 <= preorder.length <= 30` `1 <= preorder[i] <= preorder.length` All the values of `preorder` are **unique**. `postorder.length == preorder.length` `1 <= postorder[i] <= postorder.length` All the values of `postorder` are **unique**. It is guaranteed that `preorder` and `postorder` are the preorder traversal and postorder traversal of the same binary tree.', 'test_case': [{'label': 'Example 1', 'input': 'preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]', 'output': '[1,2,3,4,5,6,7]'}, {'label': 'Example 2', 'input': 'preorder = [1], postorder = [1]', 'output': '[1]'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec construct_from_pre_post(preorder :: [integer], postorder :: [integer]) :: TreeNode.t | nil\\n  def construct_from_pre_post(preorder, postorder) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec construct_from_pre_post(Preorder :: [integer()], Postorder :: [integer()]) -> #tree_node{} | null.\\nconstruct_from_pre_post(Preorder, Postorder) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def constructFromPrePost(preorder: Array[Int], postorder: Array[Int]): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!240\n",
            "fair-candy-swap 924\n",
            "{'id': 924, 'name': 'fair-candy-swap', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/fair-candy-swap/', 'task_description': 'Alice and Bob have a different total number of candies. You are given two integer arrays `aliceSizes` and `bobSizes` where `aliceSizes[i]` is the number of candies of the `ith` box of candy that Alice has and `bobSizes[j]` is the number of candies of the `jth` box of candy that Bob has. Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have. Return a_n integer array _`answer`_ where _`answer[0]`_ is the number of candies in the box that Alice must exchange, and _`answer[1]`_ is the number of candies in the box that Bob must exchange_. If there are multiple answers, you may **return any** one of them. It is guaranteed that at least one answer exists. **Example 1:** ``` **Input:** aliceSizes = [1,1], bobSizes = [2,2] **Output:** [1,2] ``` **Example 2:** ``` **Input:** aliceSizes = [1,2], bobSizes = [2,3] **Output:** [1,2] ``` **Example 3:** ``` **Input:** aliceSizes = [2], bobSizes = [1,3] **Output:** [2,3] ``` **Constraints:** `1 <= aliceSizes.length, bobSizes.length <= 104` `1 <= aliceSizes[i], bobSizes[j] <= 105` Alice and Bob have a different total number of candies. There will be at least one valid answer for the given input.', 'test_case': [{'label': 'Example 1', 'input': 'aliceSizes = [1,1], bobSizes = [2,2]', 'output': '[1,2]'}, {'label': 'Example 2', 'input': 'aliceSizes = [1,2], bobSizes = [2,3]', 'output': '[1,2]'}, {'label': 'Example 3', 'input': 'aliceSizes = [2], bobSizes = [1,3]', 'output': '[2,3]'}], 'elixir_template': 'defmodule Solution do\\n  @spec fair_candy_swap(alice_sizes :: [integer], bob_sizes :: [integer]) :: [integer]\\n  def fair_candy_swap(alice_sizes, bob_sizes) do\\n    \\n  end\\nend', 'erlang_template': '-spec fair_candy_swap(AliceSizes :: [integer()], BobSizes :: [integer()]) -> [integer()].\\nfair_candy_swap(AliceSizes, BobSizes) ->\\n  .', 'scala_template': 'object Solution {\\n    def fairCandySwap(aliceSizes: Array[Int], bobSizes: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!241\n",
            "super-egg-drop 923\n",
            "{'id': 923, 'name': 'super-egg-drop', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/super-egg-drop/', 'task_description': 'You are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`. You know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor **higher** than `f` will **break**, and any egg dropped **at or below** floor `f` will **not break**. Each move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may **reuse** it in future moves. Return _the **minimum number of moves** that you need to determine **with certainty** what the value of _`f` is. **Example 1:** ``` **Input:** k = 1, n = 2 **Output:** 2 **Explanation: ** Drop the egg from floor 1. If it breaks, we know that f = 0. Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1. If it does not break, then we know f = 2. Hence, we need at minimum 2 moves to determine with certainty what the value of f is. ``` **Example 2:** ``` **Input:** k = 2, n = 6 **Output:** 3 ``` **Example 3:** ``` **Input:** k = 3, n = 14 **Output:** 4 ``` **Constraints:** `1 <= k <= 100` `1 <= n <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'k = 1, n = 2', 'output': '2 Explanation: Drop the egg from floor 1. If it breaks, we know that f = 0.\\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\\nIf it does not break, then we know f = 2.\\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.'}, {'label': 'Example 2', 'input': 'k = 2, n = 6', 'output': '3'}, {'label': 'Example 3', 'input': 'k = 3, n = 14', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec super_egg_drop(k :: integer, n :: integer) :: integer\\n  def super_egg_drop(k, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec super_egg_drop(K :: integer(), N :: integer()) -> integer().\\nsuper_egg_drop(K, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def superEggDrop(k: Int, n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!242\n",
            "possible-bipartition 922\n",
            "{'id': 922, 'name': 'possible-bipartition', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/possible-bipartition/', 'task_description': 'We want to split a group of `n` people (labeled from `1` to `n`) into two groups of **any size**. Each person may dislike some other people, and they should not go into the same group. Given the integer `n` and the array `dislikes` where `dislikes[i] = [ai, bi]` indicates that the person labeled `ai` does not like the person labeled `bi`, return `true` _if it is possible to split everyone into two groups in this way_. **Example 1:** ``` **Input:** n = 4, dislikes = [[1,2],[1,3],[2,4]] **Output:** true **Explanation:** The first group has [1,4], and the second group has [2,3]. ``` **Example 2:** ``` **Input:** n = 3, dislikes = [[1,2],[1,3],[2,3]] **Output:** false **Explanation:** We need at least 3 groups to divide them. We cannot put them in two groups. ``` **Constraints:** `1 <= n <= 2000` `0 <= dislikes.length <= 104` `dislikes[i].length == 2` `1 <= ai < bi <= n` All the pairs of `dislikes` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'n = 4, dislikes = [[1,2],[1,3],[2,4]]', 'output': 'true Explanation: The first group has [1,4], and the second group has [2,3].'}, {'label': 'Example 2', 'input': 'n = 3, dislikes = [[1,2],[1,3],[2,3]]', 'output': 'false Explanation: We need at least 3 groups to divide them. We cannot put them in two groups.'}], 'elixir_template': 'defmodule Solution do\\n  @spec possible_bipartition(n :: integer, dislikes :: [[integer]]) :: boolean\\n  def possible_bipartition(n, dislikes) do\\n    \\n  end\\nend', 'erlang_template': '-spec possible_bipartition(N :: integer(), Dislikes :: [[integer()]]) -> boolean().\\npossible_bipartition(N, Dislikes) ->\\n  .', 'scala_template': 'object Solution {\\n    def possibleBipartition(n: Int, dislikes: Array[Array[Int]]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!243\n",
            "spiral-matrix-iii 921\n",
            "{'id': 921, 'name': 'spiral-matrix-iii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/spiral-matrix-iii/', 'task_description': \"You start at the cell `(rStart, cStart)` of an `rows x cols` grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column. You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all `rows * cols` spaces of the grid. Return _an array of coordinates representing the positions of the grid in the order you visited them_. **Example 1:** ``` **Input:** rows = 1, cols = 4, rStart = 0, cStart = 0 **Output:** [[0,0],[0,1],[0,2],[0,3]] ``` **Example 2:** ``` **Input:** rows = 5, cols = 6, rStart = 1, cStart = 4 **Output:** [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]] ``` **Constraints:** `1 <= rows, cols <= 100` `0 <= rStart < rows` `0 <= cStart < cols`\", 'test_case': [{'label': 'Example 1', 'input': 'rows = 1, cols = 4, rStart = 0, cStart = 0', 'output': '[[0,0],[0,1],[0,2],[0,3]]'}, {'label': 'Example 2', 'input': 'rows = 5, cols = 6, rStart = 1, cStart = 4', 'output': '[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec spiral_matrix_iii(rows :: integer, cols :: integer, r_start :: integer, c_start :: integer) :: [[integer]]\\n  def spiral_matrix_iii(rows, cols, r_start, c_start) do\\n    \\n  end\\nend', 'erlang_template': '-spec spiral_matrix_iii(Rows :: integer(), Cols :: integer(), RStart :: integer(), CStart :: integer()) -> [[integer()]].\\nspiral_matrix_iii(Rows, Cols, RStart, CStart) ->\\n  .', 'scala_template': 'object Solution {\\n    def spiralMatrixIII(rows: Int, cols: Int, rStart: Int, cStart: Int): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!244\n",
            "uncommon-words-from-two-sentences 920\n",
            "{'id': 920, 'name': 'uncommon-words-from-two-sentences', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/uncommon-words-from-two-sentences/', 'task_description': 'A **sentence** is a string of single-space separated words where each word consists only of lowercase letters. A word is **uncommon** if it appears exactly once in one of the sentences, and **does not appear** in the other sentence. Given two **sentences** `s1` and `s2`, return _a list of all the **uncommon words**_. You may return the answer in **any order**. **Example 1:** **Input:** s1 = \"this apple is sweet\", s2 = \"this apple is sour\" **Output:** [\"sweet\",\"sour\"] **Explanation:** The word `\"sweet\"` appears only in `s1`, while the word `\"sour\"` appears only in `s2`. **Example 2:** **Input:** s1 = \"apple apple\", s2 = \"banana\" **Output:** [\"banana\"] **Constraints:** `1 <= s1.length, s2.length <= 200` `s1` and `s2` consist of lowercase English letters and spaces. `s1` and `s2` do not have leading or trailing spaces. All the words in `s1` and `s2` are separated by a single space.', 'test_case': [{'label': 'Example 1', 'input': 's1 = \"this apple is sweet\", s2 = \"this apple is sour\"', 'output': '[\"sweet\",\"sour\"] Explanation: The word \"sweet\" appears only in s1 , while the word \"sour\" appears only in s2 .'}, {'label': 'Example 2', 'input': 's1 = \"apple apple\", s2 = \"banana\"', 'output': '[\"banana\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec uncommon_from_sentences(s1 :: String.t, s2 :: String.t) :: [String.t]\\n  def uncommon_from_sentences(s1, s2) do\\n    \\n  end\\nend', 'erlang_template': '-spec uncommon_from_sentences(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nuncommon_from_sentences(S1, S2) ->\\n  .', 'scala_template': 'object Solution {\\n    def uncommonFromSentences(s1: String, s2: String): Array[String] = {\\n        \\n    }\\n}'}\n",
            "Done!245\n",
            "projection-area-of-3d-shapes 919\n",
            "{'id': 919, 'name': 'projection-area-of-3d-shapes', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/projection-area-of-3d-shapes/', 'task_description': 'You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`. We view the projection of these cubes onto the `xy`, `yz`, and `zx` planes. A **projection** is like a shadow, that maps our **3-dimensional** figure to a **2-dimensional** plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side. Return _the total area of all three projections_. **Example 1:** ``` **Input:** grid = [[1,2],[3,4]] **Output:** 17 **Explanation:** Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane. ``` **Example 2:** ``` **Input:** grid = [[2]] **Output:** 5 ``` **Example 3:** ``` **Input:** grid = [[1,0],[0,2]] **Output:** 8 ``` **Constraints:** `n == grid.length == grid[i].length` `1 <= n <= 50` `0 <= grid[i][j] <= 50`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,2],[3,4]]', 'output': '17 Explanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.'}, {'label': 'Example 2', 'input': 'grid = [[2]]', 'output': '5'}, {'label': 'Example 3', 'input': 'grid = [[1,0],[0,2]]', 'output': '8 Constraints: n == grid.length == grid[i].length 1 <= n <= 50 0 <= grid[i][j] <= 50'}], 'elixir_template': 'defmodule Solution do\\n  @spec projection_area(grid :: [[integer]]) :: integer\\n  def projection_area(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec projection_area(Grid :: [[integer()]]) -> integer().\\nprojection_area(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def projectionArea(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!246\n",
            "reachable-nodes-in-subdivided-graph 918\n",
            "{'id': 918, 'name': 'reachable-nodes-in-subdivided-graph', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/reachable-nodes-in-subdivided-graph/', 'task_description': 'You are given an undirected graph (the **\"original graph\"**) with `n` nodes labeled from `0` to `n - 1`. You decide to **subdivide** each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge. The graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will **subdivide** the edge into. Note that `cnti == 0` means you will not subdivide the edge. To **subdivide** the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti-1, xcnti]`, `[xcnti, vi]`. In this **new graph**, you want to know how many nodes are **reachable** from the node `0`, where a node is **reachable** if the distance is `maxMoves` or less. Given the original graph and `maxMoves`, return _the number of nodes that are **reachable** from node _`0`_ in the new graph_. **Example 1:** ``` **Input:** edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3 **Output:** 13 **Explanation:** The edge subdivisions are shown in the image above. The nodes that are reachable are highlighted in yellow. ``` **Example 2:** ``` **Input:** edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4 **Output:** 23 ``` **Example 3:** ``` **Input:** edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5 **Output:** 1 **Explanation:** Node 0 is disconnected from the rest of the graph, so only node 0 is reachable. ``` **Constraints:** `0 <= edges.length <= min(n * (n - 1) / 2, 104)` `edges[i].length == 3` `0 <= ui < vi < n` There are **no multiple edges** in the graph. `0 <= cnti <= 104` `0 <= maxMoves <= 109` `1 <= n <= 3000`', 'test_case': [{'label': 'Example 1', 'input': 'edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3', 'output': '13 Explanation: The edge subdivisions are shown in the image above.\\nThe nodes that are reachable are highlighted in yellow.'}, {'label': 'Example 2', 'input': 'edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4', 'output': '23'}, {'label': 'Example 3', 'input': 'edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5', 'output': '1 Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.'}], 'elixir_template': 'defmodule Solution do\\n  @spec reachable_nodes(edges :: [[integer]], max_moves :: integer, n :: integer) :: integer\\n  def reachable_nodes(edges, max_moves, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec reachable_nodes(Edges :: [[integer()]], MaxMoves :: integer(), N :: integer()) -> integer().\\nreachable_nodes(Edges, MaxMoves, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def reachableNodes(edges: Array[Array[Int]], maxMoves: Int, n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!247\n",
            "boats-to-save-people 917\n",
            "{'id': 917, 'name': 'boats-to-save-people', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/boats-to-save-people/', 'task_description': 'You are given an array `people` where `people[i]` is the weight of the `ith` person, and an **infinite number of boats** where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`. Return _the minimum number of boats to carry every given person_. **Example 1:** ``` **Input:** people = [1,2], limit = 3 **Output:** 1 **Explanation:** 1 boat (1, 2) ``` **Example 2:** ``` **Input:** people = [3,2,2,1], limit = 3 **Output:** 3 **Explanation:** 3 boats (1, 2), (2) and (3) ``` **Example 3:** ``` **Input:** people = [3,5,3,4], limit = 5 **Output:** 4 **Explanation:** 4 boats (3), (3), (4), (5) ``` **Constraints:** `1 <= people.length <= 5 * 104` `1 <= people[i] <= limit <= 3 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'people = [1,2], limit = 3', 'output': '1 Explanation: 1 boat (1, 2)'}, {'label': 'Example 2', 'input': 'people = [3,2,2,1], limit = 3', 'output': '3 Explanation: 3 boats (1, 2), (2) and (3)'}, {'label': 'Example 3', 'input': 'people = [3,5,3,4], limit = 5', 'output': '4 Explanation: 4 boats (3), (3), (4), (5)'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_rescue_boats(people :: [integer], limit :: integer) :: integer\\n  def num_rescue_boats(people, limit) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_rescue_boats(People :: [integer()], Limit :: integer()) -> integer().\\nnum_rescue_boats(People, Limit) ->\\n  .', 'scala_template': 'object Solution {\\n    def numRescueBoats(people: Array[Int], limit: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!248\n",
            "decoded-string-at-index 916\n",
            "{'id': 916, 'name': 'decoded-string-at-index', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/decoded-string-at-index/', 'task_description': 'You are given an encoded string `s`. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken: If the character read is a letter, that letter is written onto the tape. If the character read is a digit `d`, the entire current tape is repeatedly written `d - 1` more times in total. Given an integer `k`, return _the _`kth`_ letter (**1-indexed)** in the decoded string_. **Example 1:** ``` **Input:** s = \"leet2code3\", k = 10 **Output:** \"o\" **Explanation:** The decoded string is \"leetleetcodeleetleetcodeleetleetcode\". The 10th letter in the string is \"o\". ``` **Example 2:** ``` **Input:** s = \"ha22\", k = 5 **Output:** \"h\" **Explanation:** The decoded string is \"hahahaha\". The 5th letter is \"h\". ``` **Example 3:** ``` **Input:** s = \"a2345678999999999999999\", k = 1 **Output:** \"a\" **Explanation:** The decoded string is \"a\" repeated 8301530446056247680 times. The 1st letter is \"a\". ``` **Constraints:** `2 <= s.length <= 100` `s` consists of lowercase English letters and digits `2` through `9`. `s` starts with a letter. `1 <= k <= 109` It is guaranteed that `k` is less than or equal to the length of the decoded string. The decoded string is guaranteed to have less than `263` letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"leet2code3\", k = 10', 'output': '\"o\" Explanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\\nThe 10 th letter in the string is \"o\".'}, {'label': 'Example 2', 'input': 's = \"ha22\", k = 5', 'output': '\"h\" Explanation: The decoded string is \"hahahaha\".\\nThe 5 th letter is \"h\".'}, {'label': 'Example 3', 'input': 's = \"a2345678999999999999999\", k = 1', 'output': '\"a\" Explanation: The decoded string is \"a\" repeated 8301530446056247680 times.\\nThe 1 st letter is \"a\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec decode_at_index(s :: String.t, k :: integer) :: String.t\\n  def decode_at_index(s, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec decode_at_index(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\\ndecode_at_index(S, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def decodeAtIndex(s: String, k: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!249\n",
            "generate-random-point-in-a-circle 915\n",
            "{'id': 915, 'name': 'generate-random-point-in-a-circle', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/generate-random-point-in-a-circle/', 'task_description': 'Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle. Implement the `Solution` class: `Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`. `randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`. **Example 1:** ``` **Input** [\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"] [[1.0, 0.0, 0.0], [], [], []] **Output** [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]] **Explanation** Solution solution = new Solution(1.0, 0.0, 0.0); solution.randPoint(); // return [-0.02493, -0.38077] solution.randPoint(); // return [0.82314, 0.38945] solution.randPoint(); // return [0.36572, 0.17248] ``` **Constraints:** `0 < radius <= 108` `-107 <= x_center, y_center <= 107` At most `3 * 104` calls will be made to `randPoint`.', 'test_case': [], 'elixir_template': 'defmodule Solution do\\n  @spec init_(radius :: float, x_center :: float, y_center :: float) :: any\\n  def init_(radius, x_center, y_center) do\\n    \\n  end\\n\\n  @spec rand_point() :: [float]\\n  def rand_point() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Solution.init_(radius, x_center, y_center)\\n# param_1 = Solution.rand_point()\\n\\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec solution_init_(Radius :: float(), X_center :: float(), Y_center :: float()) -> any().\\nsolution_init_(Radius, X_center, Y_center) ->\\n  .\\n\\n-spec solution_rand_point() -> [float()].\\nsolution_rand_point() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% solution_init_(Radius, X_center, Y_center),\\n%% Param_1 = solution_rand_point(),\\n\\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Solution(_radius: Double, _x_center: Double, _y_center: Double) {\\n\\n    def randPoint(): Array[Double] = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * val obj = new Solution(radius, x_center, y_center)\\n * val param_1 = obj.randPoint()\\n */'}\n",
            "Done!250\n",
            "random-point-in-non-overlapping-rectangles 914\n",
            "{'id': 914, 'name': 'random-point-in-non-overlapping-rectangles', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/', 'task_description': 'You are given an array of non-overlapping axis-aligned rectangles `rects` where `rects[i] = [ai, bi, xi, yi]` indicates that `(ai, bi)` is the bottom-left corner point of the `ith` rectangle and `(xi, yi)` is the top-right corner point of the `ith` rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle. Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned. **Note** that an integer point is a point that has integer coordinates. Implement the `Solution` class: `Solution(int[][] rects)` Initializes the object with the given rectangles `rects`. `int[] pick()` Returns a random integer point `[u, v]` inside the space covered by one of the given rectangles. **Example 1:** ``` **Input** [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"] [[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []] **Output** [null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]] **Explanation** Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]); solution.pick(); // return [1, -2] solution.pick(); // return [1, -1] solution.pick(); // return [-1, -2] solution.pick(); // return [-2, -2] solution.pick(); // return [0, 0] ``` **Constraints:** `1 <= rects.length <= 100` `rects[i].length == 4` `-109 <= ai < xi <= 109` `-109 <= bi < yi <= 109` `xi - ai <= 2000` `yi - bi <= 2000` All the rectangles do not overlap. At most `104` calls will be made to `pick`.', 'test_case': [], 'elixir_template': 'defmodule Solution do\\n  @spec init_(rects :: [[integer]]) :: any\\n  def init_(rects) do\\n    \\n  end\\n\\n  @spec pick() :: [integer]\\n  def pick() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Solution.init_(rects)\\n# param_1 = Solution.pick()\\n\\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec solution_init_(Rects :: [[integer()]]) -> any().\\nsolution_init_(Rects) ->\\n  .\\n\\n-spec solution_pick() -> [integer()].\\nsolution_pick() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% solution_init_(Rects),\\n%% Param_1 = solution_pick(),\\n\\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Solution(_rects: Array[Array[Int]]) {\\n\\n    def pick(): Array[Int] = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * val obj = new Solution(rects)\\n * val param_1 = obj.pick()\\n */'}\n",
            "Done!251\n",
            "random-flip-matrix 913\n",
            "{'id': 913, 'name': 'random-flip-matrix', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/random-flip-matrix/', 'task_description': 'There is an `m x n` binary grid `matrix` with all the values set `0` initially. Design an algorithm to randomly pick an index `(i, j)` where `matrix[i][j] == 0` and flips it to `1`. All the indices `(i, j)` where `matrix[i][j] == 0` should be equally likely to be returned. Optimize your algorithm to minimize the number of calls made to the **built-in** random function of your language and optimize the time and space complexity. Implement the `Solution` class: `Solution(int m, int n)` Initializes the object with the size of the binary matrix `m` and `n`. `int[] flip()` Returns a random index `[i, j]` of the matrix where `matrix[i][j] == 0` and flips it to `1`. `void reset()` Resets all the values of the matrix to be `0`. **Example 1:** ``` **Input** [\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"] [[3, 1], [], [], [], [], []] **Output** [null, [1, 0], [2, 0], [0, 0], null, [2, 0]] **Explanation** Solution solution = new Solution(3, 1); solution.flip(); // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned. solution.flip(); // return [2, 0], Since [1,0] was returned, [2,0] and [0,0] solution.flip(); // return [0, 0], Based on the previously returned indices, only [0,0] can be returned. solution.reset(); // All the values are reset to 0 and can be returned. solution.flip(); // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned. ``` **Constraints:** `1 <= m, n <= 104` There will be at least one free cell for each call to `flip`. At most `1000` calls will be made to `flip` and `reset`.', 'test_case': [], 'elixir_template': 'defmodule Solution do\\n  @spec init_(m :: integer, n :: integer) :: any\\n  def init_(m, n) do\\n    \\n  end\\n\\n  @spec flip() :: [integer]\\n  def flip() do\\n    \\n  end\\n\\n  @spec reset() :: any\\n  def reset() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Solution.init_(m, n)\\n# param_1 = Solution.flip()\\n# Solution.reset()\\n\\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec solution_init_(M :: integer(), N :: integer()) -> any().\\nsolution_init_(M, N) ->\\n  .\\n\\n-spec solution_flip() -> [integer()].\\nsolution_flip() ->\\n  .\\n\\n-spec solution_reset() -> any().\\nsolution_reset() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% solution_init_(M, N),\\n%% Param_1 = solution_flip(),\\n%% solution_reset(),\\n\\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Solution(_m: Int, _n: Int) {\\n\\n    def flip(): Array[Int] = {\\n        \\n    }\\n\\n    def reset(): Unit = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * val obj = new Solution(m, n)\\n * val param_1 = obj.flip()\\n * obj.reset()\\n */'}\n",
            "Done!252\n",
            "random-pick-with-weight 912\n",
            "{'id': 912, 'name': 'random-pick-with-weight', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/random-pick-with-weight/', 'task_description': 'You are given a **0-indexed** array of positive integers `w` where `w[i]` describes the **weight** of the `ith` index. You need to implement the function `pickIndex()`, which **randomly** picks an index in the range `[0, w.length - 1]` (**inclusive**) and returns it. The **probability** of picking an index `i` is `w[i] / sum(w)`. For example, if `w = [1, 3]`, the probability of picking index `0` is `1 / (1 + 3) = 0.25` (i.e., `25%`), and the probability of picking index `1` is `3 / (1 + 3) = 0.75` (i.e., `75%`). **Example 1:** ``` **Input** [\"Solution\",\"pickIndex\"] [[[1]],[]] **Output** [null,0] **Explanation** Solution solution = new Solution([1]); solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w. ``` **Example 2:** ``` **Input** [\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"] [[[1,3]],[],[],[],[],[]] **Output** [null,1,1,1,1,0] **Explanation** Solution solution = new Solution([1, 3]); solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4. solution.pickIndex(); // return 1 solution.pickIndex(); // return 1 solution.pickIndex(); // return 1 solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4. Since this is a randomization problem, multiple answers are allowed. All of the following outputs can be considered correct: [null,1,1,1,1,0] [null,1,1,1,1,1] [null,1,1,1,0,0] [null,1,1,1,0,1] [null,1,0,1,0,0] ...... and so on. ``` **Constraints:** `1 <= w.length <= 104` `1 <= w[i] <= 105` `pickIndex` will be called at most `104` times.', 'test_case': [], 'elixir_template': 'defmodule Solution do\\n  @spec init_(w :: [integer]) :: any\\n  def init_(w) do\\n    \\n  end\\n\\n  @spec pick_index() :: integer\\n  def pick_index() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Solution.init_(w)\\n# param_1 = Solution.pick_index()\\n\\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec solution_init_(W :: [integer()]) -> any().\\nsolution_init_(W) ->\\n  .\\n\\n-spec solution_pick_index() -> integer().\\nsolution_pick_index() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% solution_init_(W),\\n%% Param_1 = solution_pick_index(),\\n\\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Solution(_w: Array[Int]) {\\n\\n    def pickIndex(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * val obj = new Solution(w)\\n * val param_1 = obj.pickIndex()\\n */'}\n",
            "Done!253\n",
            "profitable-schemes 911\n",
            "{'id': 911, 'name': 'profitable-schemes', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/profitable-schemes/', 'task_description': \"There is a group of `n` members, and a list of various crimes they could commit. The `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. If a member participates in one crime, that member can't participate in another crime. Let's call a **profitable scheme** any subset of these crimes that generates at least `minProfit` profit, and the total number of members participating in that subset of crimes is at most `n`. Return the number of schemes that can be chosen. Since the answer may be very large, **return it modulo** `109 + 7`. **Example 1:** ``` **Input:** n = 5, minProfit = 3, group = [2,2], profit = [2,3] **Output:** 2 **Explanation:** To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1. In total, there are 2 schemes. ``` **Example 2:** ``` **Input:** n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8] **Output:** 7 **Explanation:** To make a profit of at least 5, the group could commit any crimes, as long as they commit one. There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2). ``` **Constraints:** `1 <= n <= 100` `0 <= minProfit <= 100` `1 <= group.length <= 100` `1 <= group[i] <= 100` `profit.length == group.length` `0 <= profit[i] <= 100`\", 'test_case': [{'label': 'Example 1', 'input': 'n = 5, minProfit = 3, group = [2,2], profit = [2,3]', 'output': '2 Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\\nIn total, there are 2 schemes.'}, {'label': 'Example 2', 'input': 'n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]', 'output': '7 Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).'}], 'elixir_template': 'defmodule Solution do\\n  @spec profitable_schemes(n :: integer, min_profit :: integer, group :: [integer], profit :: [integer]) :: integer\\n  def profitable_schemes(n, min_profit, group, profit) do\\n    \\n  end\\nend', 'erlang_template': '-spec profitable_schemes(N :: integer(), MinProfit :: integer(), Group :: [integer()], Profit :: [integer()]) -> integer().\\nprofitable_schemes(N, MinProfit, Group, Profit) ->\\n  .', 'scala_template': 'object Solution {\\n    def profitableSchemes(n: Int, minProfit: Int, group: Array[Int], profit: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!254\n",
            "nth-magical-number 910\n",
            "{'id': 910, 'name': 'nth-magical-number', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/nth-magical-number/', 'task_description': 'A positive integer is _magical_ if it is divisible by either `a` or `b`. Given the three integers `n`, `a`, and `b`, return the `nth` magical number. Since the answer may be very large, **return it modulo **`109 + 7`. **Example 1:** ``` **Input:** n = 1, a = 2, b = 3 **Output:** 2 ``` **Example 2:** ``` **Input:** n = 4, a = 2, b = 3 **Output:** 6 ``` **Constraints:** `1 <= n <= 109` `2 <= a, b <= 4 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'n = 1, a = 2, b = 3', 'output': '2'}, {'label': 'Example 2', 'input': 'n = 4, a = 2, b = 3', 'output': '6'}], 'elixir_template': 'defmodule Solution do\\n  @spec nth_magical_number(n :: integer, a :: integer, b :: integer) :: integer\\n  def nth_magical_number(n, a, b) do\\n    \\n  end\\nend', 'erlang_template': '-spec nth_magical_number(N :: integer(), A :: integer(), B :: integer()) -> integer().\\nnth_magical_number(N, A, B) ->\\n  .', 'scala_template': 'object Solution {\\n    def nthMagicalNumber(n: Int, a: Int, b: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!255\n",
            "stone-game 909\n",
            "{'id': 909, 'name': 'stone-game', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/stone-game/', 'task_description': 'Alice and Bob play a game with piles of stones. There are an **even** number of piles arranged in a row, and each pile has a **positive** integer number of stones `piles[i]`. The objective of the game is to end with the most stones. The **total** number of stones across all the piles is **odd**, so there are no ties. Alice and Bob take turns, with **Alice starting first**. Each turn, a player takes the entire pile of stones either from the **beginning** or from the **end** of the row. This continues until there are no more piles left, at which point the person with the **most stones wins**. Assuming Alice and Bob play optimally, return `true`_ if Alice wins the game, or _`false`_ if Bob wins_. **Example 1:** ``` **Input:** piles = [5,3,4,5] **Output:** true **Explanation:** Alice starts first, and can only take the first 5 or the last 5. Say she takes the first 5, so that the row becomes [3, 4, 5]. If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points. If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points. This demonstrated that taking the first 5 was a winning move for Alice, so we return true. ``` **Example 2:** ``` **Input:** piles = [3,7,2,3] **Output:** true ``` **Constraints:** `2 <= piles.length <= 500` `piles.length` is **even**. `1 <= piles[i] <= 500` `sum(piles[i])` is **odd**.', 'test_case': [{'label': 'Example 1', 'input': 'piles = [5,3,4,5]', 'output': 'true Explanation: Alice starts first, and can only take the first 5 or the last 5.\\nSay she takes the first 5, so that the row becomes [3, 4, 5].\\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.'}, {'label': 'Example 2', 'input': 'piles = [3,7,2,3]', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec stone_game(piles :: [integer]) :: boolean\\n  def stone_game(piles) do\\n    \\n  end\\nend', 'erlang_template': '-spec stone_game(Piles :: [integer()]) -> boolean().\\nstone_game(Piles) ->\\n  .', 'scala_template': 'object Solution {\\n    def stoneGame(piles: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!256\n",
            "middle-of-the-linked-list 908\n",
            "{'id': 908, 'name': 'middle-of-the-linked-list', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/middle-of-the-linked-list/', 'task_description': 'Given the `head` of a singly linked list, return _the middle node of the linked list_. If there are two middle nodes, return **the second middle** node. **Example 1:** ``` **Input:** head = [1,2,3,4,5] **Output:** [3,4,5] **Explanation:** The middle node of the list is node 3. ``` **Example 2:** ``` **Input:** head = [1,2,3,4,5,6] **Output:** [4,5,6] **Explanation:** Since the list has two middle nodes with values 3 and 4, we return the second one. ``` **Constraints:** The number of nodes in the list is in the range `[1, 100]`. `1 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5]', 'output': '[3,4,5] Explanation: The middle node of the list is node 3.'}, {'label': 'Example 2', 'input': 'head = [1,2,3,4,5,6]', 'output': '[4,5,6] Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one. Constraints: The number of nodes in the list is in the range [1, 100] . 1 <= Node.val <= 100'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec middle_node(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def middle_node(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec middle_node(Head :: #list_node{} | null) -> #list_node{} | null.\\nmiddle_node(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def middleNode(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!257\n",
            "koko-eating-bananas 907\n",
            "{'id': 907, 'name': 'koko-eating-bananas', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/koko-eating-bananas/', 'task_description': 'Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours. Koko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour. Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. Return _the minimum integer_ `k` _such that she can eat all the bananas within_ `h` _hours_. **Example 1:** ``` **Input:** piles = [3,6,7,11], h = 8 **Output:** 4 ``` **Example 2:** ``` **Input:** piles = [30,11,23,4,20], h = 5 **Output:** 30 ``` **Example 3:** ``` **Input:** piles = [30,11,23,4,20], h = 6 **Output:** 23 ``` **Constraints:** `1 <= piles.length <= 104` `piles.length <= h <= 109` `1 <= piles[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'piles = [3,6,7,11], h = 8', 'output': '4'}, {'label': 'Example 2', 'input': 'piles = [30,11,23,4,20], h = 5', 'output': '30'}, {'label': 'Example 3', 'input': 'piles = [30,11,23,4,20], h = 6', 'output': '23'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_eating_speed(piles :: [integer], h :: integer) :: integer\\n  def min_eating_speed(piles, h) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_eating_speed(Piles :: [integer()], H :: integer()) -> integer().\\nmin_eating_speed(Piles, H) ->\\n  .', 'scala_template': 'object Solution {\\n    def minEatingSpeed(piles: Array[Int], h: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!258\n",
            "walking-robot-simulation 906\n",
            "{'id': 906, 'name': 'walking-robot-simulation', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/walking-robot-simulation/', 'task_description': 'A robot on an infinite XY-plane starts at point `(0, 0)` facing north. The robot receives an array of integers `commands`, which represents a sequence of moves that it needs to execute. There are only three possible types of instructions the robot can receive: `-2`: Turn left `90` degrees. `-1`: Turn right `90` degrees. `1 <= k <= 9`: Move forward `k` units, one unit at a time. Some of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`. If the robot runs into an obstacle, it will stay in its current location (on the block adjacent to the obstacle) and move onto the next command. Return the **maximum squared Euclidean distance** that the robot reaches at any point in its path (i.e. if the distance is `5`, return `25`). **Note:** There can be an obstacle at `(0, 0)`. If this happens, the robot will ignore the obstacle until it has moved off the origin. However, it will be unable to return to `(0, 0)` due to the obstacle. North means +Y direction. East means +X direction. South means -Y direction. West means -X direction. **Example 1:** **Input:** commands = [4,-1,3], obstacles = [] **Output:** 25 **Explanation: ** The robot starts at `(0, 0)`: Move north 4 units to `(0, 4)`. Turn right. Move east 3 units to `(3, 4)`. The furthest point the robot ever gets from the origin is `(3, 4)`, which squared is `32 + 42 = 25` units away. **Example 2:** **Input:** commands = [4,-1,4,-2,4], obstacles = [[2,4]] **Output:** 65 **Explanation:** The robot starts at `(0, 0)`: Move north 4 units to `(0, 4)`. Turn right. Move east 1 unit and get blocked by the obstacle at `(2, 4)`, robot is at `(1, 4)`. Turn left. Move north 4 units to `(1, 8)`. The furthest point the robot ever gets from the origin is `(1, 8)`, which squared is `12 + 82 = 65` units away. **Example 3:** **Input:** commands = [6,-1,-1,6], obstacles = [[0,0]] **Output:** 36 **Explanation:** The robot starts at `(0, 0)`: Move north 6 units to `(0, 6)`. Turn right. Turn right. Move south 5 units and get blocked by the obstacle at `(0,0)`, robot is at `(0, 1)`. The furthest point the robot ever gets from the origin is `(0, 6)`, which squared is `62 = 36` units away. **Constraints:** `1 <= commands.length <= 104` `commands[i]` is either `-2`, `-1`, or an integer in the range `[1, 9]`. `0 <= obstacles.length <= 104` `-3 * 104 <= xi, yi <= 3 * 104` The answer is guaranteed to be less than `231`.', 'test_case': [{'label': 'Example 1', 'input': 'commands = [4,-1,3], obstacles = []', 'output': '25 Explanation: The robot starts at (0, 0) : Move north 4 units to (0, 4) . Turn right. Move east 3 units to (3, 4) . The furthest point the robot ever gets from the origin is (3, 4) , which squared is 3 2 + 4 2 = 25 units away.'}, {'label': 'Example 2', 'input': 'commands = [4,-1,4,-2,4], obstacles = [[2,4]]', 'output': '65 Explanation: The robot starts at (0, 0) : Move north 4 units to (0, 4) . Turn right. Move east 1 unit and get blocked by the obstacle at (2, 4) , robot is at (1, 4) . Turn left. Move north 4 units to (1, 8) . The furthest point the robot ever gets from the origin is (1, 8) , which squared is 1 2 + 8 2 = 65 units away.'}, {'label': 'Example 3', 'input': 'commands = [6,-1,-1,6], obstacles = [[0,0]]', 'output': '36 Explanation: The robot starts at (0, 0) : Move north 6 units to (0, 6) . Turn right. Turn right. Move south 5 units and get blocked by the obstacle at (0,0) , robot is at (0, 1) . The furthest point the robot ever gets from the origin is (0, 6) , which squared is 6 2 = 36 units away.'}], 'elixir_template': 'defmodule Solution do\\n  @spec robot_sim(commands :: [integer], obstacles :: [[integer]]) :: integer\\n  def robot_sim(commands, obstacles) do\\n    \\n  end\\nend', 'erlang_template': '-spec robot_sim(Commands :: [integer()], Obstacles :: [[integer()]]) -> integer().\\nrobot_sim(Commands, Obstacles) ->\\n  .', 'scala_template': 'object Solution {\\n    def robotSim(commands: Array[Int], obstacles: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!259\n",
            "length-of-longest-fibonacci-subsequence 905\n",
            "{'id': 905, 'name': 'length-of-longest-fibonacci-subsequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/', 'task_description': 'A sequence `x1, x2, ..., xn` is _Fibonacci-like_ if: `n >= 3` `xi + xi+1 == xi+2` for all `i + 2 <= n` Given a strictly increasing array `arr` of positive integers forming a sequence, return _the **length** of the longest Fibonacci-like subsequence of_ `arr`. If one does not exist, return `0`. A **subsequence** is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`. **Example 1:** ``` **Input:** arr = [1,2,3,4,5,6,7,8] **Output:** 5 **Explanation:** The longest subsequence that is fibonacci-like: [1,2,3,5,8]. ``` **Example 2:** ``` **Input:** arr = [1,3,7,11,12,14,18] **Output:** 3 **Explanation**:** **The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]. ``` **Constraints:** `3 <= arr.length <= 1000` `1 <= arr[i] < arr[i + 1] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,2,3,4,5,6,7,8]', 'output': '5 Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].'}, {'label': 'Example 2', 'input': 'arr = [1,3,7,11,12,14,18]', 'output': '3 Explanation : The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].'}], 'elixir_template': 'defmodule Solution do\\n  @spec len_longest_fib_subseq(arr :: [integer]) :: integer\\n  def len_longest_fib_subseq(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec len_longest_fib_subseq(Arr :: [integer()]) -> integer().\\nlen_longest_fib_subseq(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def lenLongestFibSubseq(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!260\n",
            "leaf-similar-trees 904\n",
            "{'id': 904, 'name': 'leaf-similar-trees', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/leaf-similar-trees/', 'task_description': 'Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a **leaf value sequence**_._ For example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`. Two binary trees are considered _leaf-similar_ if their leaf value sequence is the same. Return `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar. **Example 1:** ``` **Input:** root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8] **Output:** true ``` **Example 2:** ``` **Input:** root1 = [1,2,3], root2 = [1,3,2] **Output:** false ``` **Constraints:** The number of nodes in each tree will be in the range `[1, 200]`. Both of the given trees will have values in the range `[0, 200]`.', 'test_case': [{'label': 'Example 1', 'input': 'root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]', 'output': 'true'}, {'label': 'Example 2', 'input': 'root1 = [1,2,3], root2 = [1,3,2]', 'output': 'false Constraints: The number of nodes in each tree will be in the range [1, 200] . Both of the given trees will have values in the range [0, 200] .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec leaf_similar(root1 :: TreeNode.t | nil, root2 :: TreeNode.t | nil) :: boolean\\n  def leaf_similar(root1, root2) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec leaf_similar(Root1 :: #tree_node{} | null, Root2 :: #tree_node{} | null) -> boolean().\\nleaf_similar(Root1, Root2) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def leafSimilar(root1: TreeNode, root2: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!261\n",
            "implement-rand10-using-rand7 903\n",
            "{'id': 903, 'name': 'implement-rand10-using-rand7', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/implement-rand10-using-rand7/', 'task_description': \"Given the **API** `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please **do not** use a language's built-in random API. Each test case will have one **internal** argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is **not an argument** passed to `rand10()`. **Example 1:** ``` **Input:** n = 1 **Output:** [2] ``` **Example 2:** ``` **Input:** n = 2 **Output:** [2,8] ``` **Example 3:** ``` **Input:** n = 3 **Output:** [3,8,10] ``` **Constraints:** `1 <= n <= 105` **Follow up:** What is the expected value for the number of calls to `rand7()` function? Could you minimize the number of calls to `rand7()`?\", 'test_case': [{'label': 'Example 1', 'input': 'n = 1', 'output': '[2]'}, {'label': 'Example 2', 'input': 'n = 2', 'output': '[2,8]'}, {'label': 'Example 3', 'input': 'n = 3', 'output': '[3,8,10]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * The rand7() API is already defined in the parent class SolBase.\\n * def rand7(): Int = {}\\n * @return a random integer in the range 1 to 7\\n */\\nobject Solution extends SolBase {\\n    def rand10(): Int = {\\n        \\n    }\\n}'}\n",
            "Done!262\n",
            "minimum-number-of-refueling-stops 902\n",
            "{'id': 902, 'name': 'minimum-number-of-refueling-stops', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimum-number-of-refueling-stops/', 'task_description': 'A car travels from a starting position to a destination which is `target` miles east of the starting position. There are gas stations along the way. The gas stations are represented as an array `stations` where `stations[i] = [positioni, fueli]` indicates that the `ith` gas station is `positioni` miles east of the starting position and has `fueli` liters of gas. The car starts with an infinite tank of gas, which initially has `startFuel` liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car. Return _the minimum number of refueling stops the car must make in order to reach its destination_. If it cannot reach the destination, return `-1`. Note that if the car reaches a gas station with `0` fuel left, the car can still refuel there. If the car reaches the destination with `0` fuel left, it is still considered to have arrived. **Example 1:** ``` **Input:** target = 1, startFuel = 1, stations = [] **Output:** 0 **Explanation:** We can reach the target without refueling. ``` **Example 2:** ``` **Input:** target = 100, startFuel = 1, stations = [[10,100]] **Output:** -1 **Explanation:** We can not reach the target (or even the first gas station). ``` **Example 3:** ``` **Input:** target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]] **Output:** 2 **Explanation:** We start with 10 liters of fuel. We drive to position 10, expending 10 liters of fuel. We refuel from 0 liters to 60 liters of gas. Then, we drive from position 10 to position 60 (expending 50 liters of fuel), and refuel from 10 liters to 50 liters of gas. We then drive to and reach the target. We made 2 refueling stops along the way, so we return 2. ``` **Constraints:** `1 <= target, startFuel <= 109` `0 <= stations.length <= 500` `1 <= positioni < positioni+1 < target` `1 <= fueli < 109`', 'test_case': [{'label': 'Example 1', 'input': 'target = 1, startFuel = 1, stations = []', 'output': '0 Explanation: We can reach the target without refueling.'}, {'label': 'Example 2', 'input': 'target = 100, startFuel = 1, stations = [[10,100]]', 'output': '-1 Explanation: We can not reach the target (or even the first gas station).'}, {'label': 'Example 3', 'input': 'target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]', 'output': '2 Explanation: We start with 10 liters of fuel.\\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\\nWe made 2 refueling stops along the way, so we return 2.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_refuel_stops(target :: integer, start_fuel :: integer, stations :: [[integer]]) :: integer\\n  def min_refuel_stops(target, start_fuel, stations) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_refuel_stops(Target :: integer(), StartFuel :: integer(), Stations :: [[integer()]]) -> integer().\\nmin_refuel_stops(Target, StartFuel, Stations) ->\\n  .', 'scala_template': 'object Solution {\\n    def minRefuelStops(target: Int, startFuel: Int, stations: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!263\n",
            "advantage-shuffle 901\n",
            "{'id': 901, 'name': 'advantage-shuffle', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/advantage-shuffle/', 'task_description': 'You are given two integer arrays `nums1` and `nums2` both of the same length. The **advantage** of `nums1` with respect to `nums2` is the number of indices `i` for which `nums1[i] > nums2[i]`. Return _any permutation of _`nums1`_ that maximizes its **advantage** with respect to _`nums2`. **Example 1:** ``` **Input:** nums1 = [2,7,11,15], nums2 = [1,10,4,11] **Output:** [2,11,7,15] ``` **Example 2:** ``` **Input:** nums1 = [12,24,8,32], nums2 = [13,25,32,11] **Output:** [24,32,8,12] ``` **Constraints:** `1 <= nums1.length <= 105` `nums2.length == nums1.length` `0 <= nums1[i], nums2[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [2,7,11,15], nums2 = [1,10,4,11]', 'output': '[2,11,7,15]'}, {'label': 'Example 2', 'input': 'nums1 = [12,24,8,32], nums2 = [13,25,32,11]', 'output': '[24,32,8,12]'}], 'elixir_template': 'defmodule Solution do\\n  @spec advantage_count(nums1 :: [integer], nums2 :: [integer]) :: [integer]\\n  def advantage_count(nums1, nums2) do\\n    \\n  end\\nend', 'erlang_template': '-spec advantage_count(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\\nadvantage_count(Nums1, Nums2) ->\\n  .', 'scala_template': 'object Solution {\\n    def advantageCount(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!264\n",
            "reordered-power-of-2 900\n",
            "{'id': 900, 'name': 'reordered-power-of-2', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reordered-power-of-2/', 'task_description': 'You are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero. Return `true` _if and only if we can do this so that the resulting number is a power of two_. **Example 1:** ``` **Input:** n = 1 **Output:** true ``` **Example 2:** ``` **Input:** n = 10 **Output:** false ``` **Constraints:** `1 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 1', 'output': 'true'}, {'label': 'Example 2', 'input': 'n = 10', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec reordered_power_of2(n :: integer) :: boolean\\n  def reordered_power_of2(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec reordered_power_of2(N :: integer()) -> boolean().\\nreordered_power_of2(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def reorderedPowerOf2(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!265\n",
            "binary-gap 899\n",
            "{'id': 899, 'name': 'binary-gap', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-gap/', 'task_description': 'Given a positive integer `n`, find and return _the **longest distance** between any two **adjacent** _`1`_\\'s in the binary representation of _`n`_. If there are no two adjacent _`1`_\\'s, return _`0`_._ Two `1`\\'s are **adjacent** if there are only `0`\\'s separating them (possibly no `0`\\'s). The distance between two `1`\\'s is the absolute difference between their bit positions. For example, the two `1`\\'s in `\"1001\"` have a distance of 3. **Example 1:** ``` **Input:** n = 22 **Output:** 2 **Explanation:** 22 in binary is \"10110\". The first adjacent pair of 1\\'s is \"10110\" with a distance of 2. The second adjacent pair of 1\\'s is \"10110\" with a distance of 1. The answer is the largest of these two distances, which is 2. Note that \"10110\" is not a valid pair since there is a 1 separating the two 1\\'s underlined. ``` **Example 2:** ``` **Input:** n = 8 **Output:** 0 **Explanation:** 8 in binary is \"1000\". There are not any adjacent pairs of 1\\'s in the binary representation of 8, so we return 0. ``` **Example 3:** ``` **Input:** n = 5 **Output:** 2 **Explanation:** 5 in binary is \"101\". ``` **Constraints:** `1 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 22', 'output': '2 Explanation: 22 in binary is \"10110\".\\nThe first adjacent pair of 1\\'s is \" 1 0 1 10\" with a distance of 2.\\nThe second adjacent pair of 1\\'s is \"10 11 0\" with a distance of 1.\\nThe answer is the largest of these two distances, which is 2.\\nNote that \" 1 01 1 0\" is not a valid pair since there is a 1 separating the two 1\\'s underlined.'}, {'label': 'Example 2', 'input': 'n = 8', 'output': '0 Explanation: 8 in binary is \"1000\".\\nThere are not any adjacent pairs of 1\\'s in the binary representation of 8, so we return 0.'}, {'label': 'Example 3', 'input': 'n = 5', 'output': '2 Explanation: 5 in binary is \"101\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec binary_gap(n :: integer) :: integer\\n  def binary_gap(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec binary_gap(N :: integer()) -> integer().\\nbinary_gap(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def binaryGap(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!266\n",
            "transpose-matrix 898\n",
            "{'id': 898, 'name': 'transpose-matrix', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/transpose-matrix/', 'task_description': \"Given a 2D integer array `matrix`, return _the **transpose** of_ `matrix`. The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices. **Example 1:** ``` **Input:** matrix = [[1,2,3],[4,5,6],[7,8,9]] **Output:** [[1,4,7],[2,5,8],[3,6,9]] ``` **Example 2:** ``` **Input:** matrix = [[1,2,3],[4,5,6]] **Output:** [[1,4],[2,5],[3,6]] ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 1000` `1 <= m * n <= 105` `-109 <= matrix[i][j] <= 109`\", 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,2,3],[4,5,6],[7,8,9]]', 'output': '[[1,4,7],[2,5,8],[3,6,9]]'}, {'label': 'Example 2', 'input': 'matrix = [[1,2,3],[4,5,6]]', 'output': '[[1,4],[2,5],[3,6]] Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 1000 1 <= m * n <= 10 5 -10 9 <= matrix[i][j] <= 10 9'}], 'elixir_template': 'defmodule Solution do\\n  @spec transpose(matrix :: [[integer]]) :: [[integer]]\\n  def transpose(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec transpose(Matrix :: [[integer()]]) -> [[integer()]].\\ntranspose(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def transpose(matrix: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!267\n",
            "prime-palindrome 897\n",
            "{'id': 897, 'name': 'prime-palindrome', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/prime-palindrome/', 'task_description': 'Given an integer n, return _the smallest **prime palindrome** greater than or equal to _`n`. An integer is **prime** if it has exactly two divisors: `1` and itself. Note that `1` is not a prime number. For example, `2`, `3`, `5`, `7`, `11`, and `13` are all primes. An integer is a **palindrome** if it reads the same from left to right as it does from right to left. For example, `101` and `12321` are palindromes. The test cases are generated so that the answer always exists and is in the range `[2, 2 * 108]`. **Example 1:** ``` **Input:** n = 6 **Output:** 7 ``` **Example 2:** ``` **Input:** n = 8 **Output:** 11 ``` **Example 3:** ``` **Input:** n = 13 **Output:** 101 ``` **Constraints:** `1 <= n <= 108`', 'test_case': [{'label': 'Example 1', 'input': 'n = 6', 'output': '7'}, {'label': 'Example 2', 'input': 'n = 8', 'output': '11'}, {'label': 'Example 3', 'input': 'n = 13', 'output': '101'}], 'elixir_template': 'defmodule Solution do\\n  @spec prime_palindrome(n :: integer) :: integer\\n  def prime_palindrome(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec prime_palindrome(N :: integer()) -> integer().\\nprime_palindrome(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def primePalindrome(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!268\n",
            "smallest-subtree-with-all-the-deepest-nodes 896\n",
            "{'id': 896, 'name': 'smallest-subtree-with-all-the-deepest-nodes', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/', 'task_description': 'Given the `root` of a binary tree, the depth of each node is **the shortest distance to the root**. Return _the smallest subtree_ such that it contains **all the deepest nodes** in the original tree. A node is called **the deepest** if it has the largest depth possible among any node in the entire tree. The **subtree** of a node is a tree consisting of that node, plus the set of all descendants of that node. **Example 1:** ``` **Input:** root = [3,5,1,6,2,0,8,null,null,7,4] **Output:** [2,7,4] **Explanation:** We return the node with value 2, colored in yellow in the diagram. The nodes coloured in blue are the deepest nodes of the tree. Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it. ``` **Example 2:** ``` **Input:** root = [1] **Output:** [1] **Explanation:** The root is the deepest node in the tree. ``` **Example 3:** ``` **Input:** root = [0,1,3,null,2] **Output:** [2] **Explanation:** The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest. ``` **Constraints:** The number of nodes in the tree will be in the range `[1, 500]`. `0 <= Node.val <= 500` The values of the nodes in the tree are **unique**. **Note:** This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,5,1,6,2,0,8,null,null,7,4]', 'output': '[2,7,4] Explanation: We return the node with value 2, colored in yellow in the diagram.\\nThe nodes coloured in blue are the deepest nodes of the tree.\\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.'}, {'label': 'Example 2', 'input': 'root = [1]', 'output': '[1] Explanation: The root is the deepest node in the tree.'}, {'label': 'Example 3', 'input': 'root = [0,1,3,null,2]', 'output': '[2] Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest. Constraints: The number of nodes in the tree will be in the range [1, 500] . 0 <= Node.val <= 500 The values of the nodes in the tree are unique . Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec subtree_with_all_deepest(root :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def subtree_with_all_deepest(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec subtree_with_all_deepest(Root :: #tree_node{} | null) -> #tree_node{} | null.\\nsubtree_with_all_deepest(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def subtreeWithAllDeepest(root: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!269\n",
            "shortest-path-to-get-all-keys 895\n",
            "{'id': 895, 'name': 'shortest-path-to-get-all-keys', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/shortest-path-to-get-all-keys/', 'task_description': 'You are given an `m x n` grid `grid` where: `\\'.\\'` is an empty cell. `\\'#\\'` is a wall. `\\'@\\'` is the starting point. Lowercase letters represent keys. Uppercase letters represent locks. You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall. If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key. For some `1 <= k <= 6`, there is exactly one lowercase and one uppercase letter of the first `k` letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet. Return _the lowest number of moves to acquire all keys_. If it is impossible, return `-1`. **Example 1:** ``` **Input:** grid = [\"@.a..\",\"###.#\",\"b.A.B\"] **Output:** 8 **Explanation:** Note that the goal is to obtain all the keys not to open all the locks. ``` **Example 2:** ``` **Input:** grid = [\"@..aA\",\"..B#.\",\"....b\"] **Output:** 6 ``` **Example 3:** ``` **Input:** grid = [\"@Aa\"] **Output:** -1 ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 30` `grid[i][j]` is either an English letter, `\\'.\\'`, `\\'#\\'`, or `\\'@\\'`. There is exactly one `\\'@\\'` in the grid. The number of keys in the grid is in the range `[1, 6]`. Each key in the grid is **unique**. Each key in the grid has a matching lock.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [\"@.a..\",\"###.#\",\"b.A.B\"]', 'output': '8 Explanation: Note that the goal is to obtain all the keys not to open all the locks.'}, {'label': 'Example 2', 'input': 'grid = [\"@..aA\",\"..B#.\",\"....b\"]', 'output': '6'}, {'label': 'Example 3', 'input': 'grid = [\"@Aa\"]', 'output': \"-1 Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 30 grid[i][j] is either an English letter, '.' , '#' , or '@' . There is exactly one '@' in the grid. The number of keys in the grid is in the range [1, 6] . Each key in the grid is unique . Each key in the grid has a matching lock.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_path_all_keys(grid :: [String.t]) :: integer\\n  def shortest_path_all_keys(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_path_all_keys(Grid :: [unicode:unicode_binary()]) -> integer().\\nshortest_path_all_keys(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestPathAllKeys(grid: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!270\n",
            "random-pick-with-blacklist 894\n",
            "{'id': 894, 'name': 'random-pick-with-blacklist', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/random-pick-with-blacklist/', 'task_description': 'You are given an integer `n` and an array of **unique** integers `blacklist`. Design an algorithm to pick a random integer in the range `[0, n - 1]` that is **not** in `blacklist`. Any integer that is in the mentioned range and not in `blacklist` should be **equally likely** to be returned. Optimize your algorithm such that it minimizes the number of calls to the **built-in** random function of your language. Implement the `Solution` class: `Solution(int n, int[] blacklist)` Initializes the object with the integer `n` and the blacklisted integers `blacklist`. `int pick()` Returns a random integer in the range `[0, n - 1]` and not in `blacklist`. **Example 1:** ``` **Input** [\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"] [[7, [2, 3, 5]], [], [], [], [], [], [], []] **Output** [null, 0, 4, 1, 6, 1, 0, 4] **Explanation** Solution solution = new Solution(7, [2, 3, 5]); solution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick, // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4). solution.pick(); // return 4 solution.pick(); // return 1 solution.pick(); // return 6 solution.pick(); // return 1 solution.pick(); // return 0 solution.pick(); // return 4 ``` **Constraints:** `1 <= n <= 109` `0 <= blacklist.length <= min(105, n - 1)` `0 <= blacklist[i] < n` All the values of `blacklist` are **unique**. At most `2 * 104` calls will be made to `pick`.', 'test_case': [], 'elixir_template': 'defmodule Solution do\\n  @spec init_(n :: integer, blacklist :: [integer]) :: any\\n  def init_(n, blacklist) do\\n    \\n  end\\n\\n  @spec pick() :: integer\\n  def pick() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Solution.init_(n, blacklist)\\n# param_1 = Solution.pick()\\n\\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec solution_init_(N :: integer(), Blacklist :: [integer()]) -> any().\\nsolution_init_(N, Blacklist) ->\\n  .\\n\\n-spec solution_pick() -> integer().\\nsolution_pick() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% solution_init_(N, Blacklist),\\n%% Param_1 = solution_pick(),\\n\\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Solution(_n: Int, _blacklist: Array[Int]) {\\n\\n    def pick(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * val obj = new Solution(n, blacklist)\\n * val param_1 = obj.pick()\\n */'}\n",
            "Done!271\n",
            "all-nodes-distance-k-in-binary-tree 893\n",
            "{'id': 893, 'name': 'all-nodes-distance-k-in-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/', 'task_description': 'Given the `root` of a binary tree, the value of a target node `target`, and an integer `k`, return _an array of the values of all nodes that have a distance _`k`_ from the target node._ You can return the answer in **any order**. **Example 1:** ``` **Input:** root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2 **Output:** [7,4,1] Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1. ``` **Example 2:** ``` **Input:** root = [1], target = 1, k = 3 **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 500]`. `0 <= Node.val <= 500` All the values `Node.val` are **unique**. `target` is the value of one of the nodes in the tree. `0 <= k <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2', 'output': '[7,4,1]\\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.'}, {'label': 'Example 2', 'input': 'root = [1], target = 1, k = 3', 'output': '[] Constraints: The number of nodes in the tree is in the range [1, 500] . 0 <= Node.val <= 500 All the values Node.val are unique . target is the value of one of the nodes in the tree. 0 <= k <= 1000'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\nobject Solution {\\n    def distanceK(root: TreeNode, target: TreeNode, k: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!272\n",
            "shortest-subarray-with-sum-at-least-k 892\n",
            "{'id': 892, 'name': 'shortest-subarray-with-sum-at-least-k', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/', 'task_description': 'Given an integer array `nums` and an integer `k`, return _the length of the shortest non-empty **subarray** of _`nums`_ with a sum of at least _`k`. If there is no such **subarray**, return `-1`. A **subarray** is a **contiguous** part of an array. **Example 1:** ``` **Input:** nums = [1], k = 1 **Output:** 1 ``` **Example 2:** ``` **Input:** nums = [1,2], k = 4 **Output:** -1 ``` **Example 3:** ``` **Input:** nums = [2,-1,2], k = 3 **Output:** 3 ``` **Constraints:** `1 <= nums.length <= 105` `-105 <= nums[i] <= 105` `1 <= k <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1], k = 1', 'output': '1'}, {'label': 'Example 2', 'input': 'nums = [1,2], k = 4', 'output': '-1'}, {'label': 'Example 3', 'input': 'nums = [2,-1,2], k = 3', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_subarray(nums :: [integer], k :: integer) :: integer\\n  def shortest_subarray(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_subarray(Nums :: [integer()], K :: integer()) -> integer().\\nshortest_subarray(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestSubarray(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!273\n",
            "score-after-flipping-matrix 891\n",
            "{'id': 891, 'name': 'score-after-flipping-matrix', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/score-after-flipping-matrix/', 'task_description': \"You are given an `m x n` binary matrix `grid`. A **move** consists of choosing any row or column and toggling each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s). Every row of the matrix is interpreted as a binary number, and the **score** of the matrix is the sum of these numbers. Return _the highest possible **score** after making any number of **moves** (including zero moves)_. **Example 1:** ``` **Input:** grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]] **Output:** 39 **Explanation:** 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39 ``` **Example 2:** ``` **Input:** grid = [[0]] **Output:** 1 ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 20` `grid[i][j]` is either `0` or `1`.\", 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]', 'output': '39 Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39'}, {'label': 'Example 2', 'input': 'grid = [[0]]', 'output': '1 Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 20 grid[i][j] is either 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec matrix_score(grid :: [[integer]]) :: integer\\n  def matrix_score(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec matrix_score(Grid :: [[integer()]]) -> integer().\\nmatrix_score(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def matrixScore(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!274\n",
            "lemonade-change 890\n",
            "{'id': 890, 'name': 'lemonade-change', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/lemonade-change/', 'task_description': 'At a lemonade stand, each lemonade costs `$5`. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill. You must provide the correct change to each customer so that the net transaction is that the customer pays `$5`. Note that you do not have any change in hand at first. Given an integer array `bills` where `bills[i]` is the bill the `ith` customer pays, return `true` _if you can provide every customer with the correct change, or_ `false` _otherwise_. **Example 1:** ``` **Input:** bills = [5,5,5,10,20] **Output:** true **Explanation:** From the first 3 customers, we collect three $5 bills in order. From the fourth customer, we collect a $10 bill and give back a $5. From the fifth customer, we give a $10 bill and a $5 bill. Since all customers got correct change, we output true. ``` **Example 2:** ``` **Input:** bills = [5,5,10,10,20] **Output:** false **Explanation:** From the first two customers in order, we collect two $5 bills. For the next two customers in order, we collect a $10 bill and give back a $5 bill. For the last customer, we can not give the change of $15 back because we only have two $10 bills. Since not every customer received the correct change, the answer is false. ``` **Constraints:** `1 <= bills.length <= 105` `bills[i]` is either `5`, `10`, or `20`.', 'test_case': [{'label': 'Example 1', 'input': 'bills = [5,5,5,10,20]', 'output': 'true Explanation: From the first 3 customers, we collect three $5 bills in order.\\nFrom the fourth customer, we collect a $10 bill and give back a $5.\\nFrom the fifth customer, we give a $10 bill and a $5 bill.\\nSince all customers got correct change, we output true.'}, {'label': 'Example 2', 'input': 'bills = [5,5,10,10,20]', 'output': 'false Explanation: From the first two customers in order, we collect two $5 bills.\\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\\nSince not every customer received the correct change, the answer is false.'}], 'elixir_template': 'defmodule Solution do\\n  @spec lemonade_change(bills :: [integer]) :: boolean\\n  def lemonade_change(bills) do\\n    \\n  end\\nend', 'erlang_template': '-spec lemonade_change(Bills :: [integer()]) -> boolean().\\nlemonade_change(Bills) ->\\n  .', 'scala_template': 'object Solution {\\n    def lemonadeChange(bills: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!275\n",
            "buddy-strings 889\n",
            "{'id': 889, 'name': 'buddy-strings', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/buddy-strings/', 'task_description': 'Given two strings `s` and `goal`, return `true`_ if you can swap two letters in _`s`_ so the result is equal to _`goal`_, otherwise, return _`false`_._ Swapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `s[i]` and `s[j]`. For example, swapping at indices `0` and `2` in `\"abcd\"` results in `\"cbad\"`. **Example 1:** ``` **Input:** s = \"ab\", goal = \"ba\" **Output:** true **Explanation:** You can swap s[0] = \\'a\\' and s[1] = \\'b\\' to get \"ba\", which is equal to goal. ``` **Example 2:** ``` **Input:** s = \"ab\", goal = \"ab\" **Output:** false **Explanation:** The only letters you can swap are s[0] = \\'a\\' and s[1] = \\'b\\', which results in \"ba\" != goal. ``` **Example 3:** ``` **Input:** s = \"aa\", goal = \"aa\" **Output:** true **Explanation:** You can swap s[0] = \\'a\\' and s[1] = \\'a\\' to get \"aa\", which is equal to goal. ``` **Constraints:** `1 <= s.length, goal.length <= 2 * 104` `s` and `goal` consist of lowercase letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"ab\", goal = \"ba\"', 'output': 'true Explanation: You can swap s[0] = \\'a\\' and s[1] = \\'b\\' to get \"ba\", which is equal to goal.'}, {'label': 'Example 2', 'input': 's = \"ab\", goal = \"ab\"', 'output': 'false Explanation: The only letters you can swap are s[0] = \\'a\\' and s[1] = \\'b\\', which results in \"ba\" != goal.'}, {'label': 'Example 3', 'input': 's = \"aa\", goal = \"aa\"', 'output': 'true Explanation: You can swap s[0] = \\'a\\' and s[1] = \\'a\\' to get \"aa\", which is equal to goal.'}], 'elixir_template': 'defmodule Solution do\\n  @spec buddy_strings(s :: String.t, goal :: String.t) :: boolean\\n  def buddy_strings(s, goal) do\\n    \\n  end\\nend', 'erlang_template': '-spec buddy_strings(S :: unicode:unicode_binary(), Goal :: unicode:unicode_binary()) -> boolean().\\nbuddy_strings(S, Goal) ->\\n  .', 'scala_template': 'object Solution {\\n    def buddyStrings(s: String, goal: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!276\n",
            "mirror-reflection 888\n",
            "{'id': 888, 'name': 'mirror-reflection', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/mirror-reflection/', 'task_description': 'There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`. The square room has walls of length `p` and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0th` receptor. Given the two integers `p` and `q`, return _the number of the receptor that the ray meets first_. The test cases are guaranteed so that the ray will meet a receptor eventually. **Example 1:** ``` **Input:** p = 2, q = 1 **Output:** 2 **Explanation:** The ray meets receptor 2 the first time it gets reflected back to the left wall. ``` **Example 2:** ``` **Input:** p = 3, q = 1 **Output:** 1 ``` **Constraints:** `1 <= q <= p <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'p = 2, q = 1', 'output': '2 Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.'}, {'label': 'Example 2', 'input': 'p = 3, q = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec mirror_reflection(p :: integer, q :: integer) :: integer\\n  def mirror_reflection(p, q) do\\n    \\n  end\\nend', 'erlang_template': '-spec mirror_reflection(P :: integer(), Q :: integer()) -> integer().\\nmirror_reflection(P, Q) ->\\n  .', 'scala_template': 'object Solution {\\n    def mirrorReflection(p: Int, q: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!277\n",
            "minimum-cost-to-hire-k-workers 887\n",
            "{'id': 887, 'name': 'minimum-cost-to-hire-k-workers', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimum-cost-to-hire-k-workers/', 'task_description': \"There are `n` workers. You are given two integer arrays `quality` and `wage` where `quality[i]` is the quality of the `ith` worker and `wage[i]` is the minimum wage expectation for the `ith` worker. We want to hire exactly `k` workers to form a **paid group**. To hire a group of `k` workers, we must pay them according to the following rules: Every worker in the paid group must be paid at least their minimum wage expectation. In the group, each worker's pay must be directly proportional to their quality. This means if a worker’s quality is double that of another worker in the group, then they must be paid twice as much as the other worker. Given the integer `k`, return _the least amount of money needed to form a paid group satisfying the above conditions_. Answers within `10-5` of the actual answer will be accepted. **Example 1:** ``` **Input:** quality = [10,20,5], wage = [70,50,30], k = 2 **Output:** 105.00000 **Explanation:** We pay 70 to 0th worker and 35 to 2nd worker. ``` **Example 2:** ``` **Input:** quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3 **Output:** 30.66667 **Explanation:** We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately. ``` **Constraints:** `n == quality.length == wage.length` `1 <= k <= n <= 104` `1 <= quality[i], wage[i] <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'quality = [10,20,5], wage = [70,50,30], k = 2', 'output': '105.00000 Explanation: We pay 70 to 0 th worker and 35 to 2 nd worker.'}, {'label': 'Example 2', 'input': 'quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3', 'output': '30.66667 Explanation: We pay 4 to 0 th worker, 13.33333 to 2 nd and 3 rd workers separately. Constraints: n == quality.length == wage.length 1 <= k <= n <= 10 4 1 <= quality[i], wage[i] <= 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec mincost_to_hire_workers(quality :: [integer], wage :: [integer], k :: integer) :: float\\n  def mincost_to_hire_workers(quality, wage, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec mincost_to_hire_workers(Quality :: [integer()], Wage :: [integer()], K :: integer()) -> float().\\nmincost_to_hire_workers(Quality, Wage, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def mincostToHireWorkers(quality: Array[Int], wage: Array[Int], k: Int): Double = {\\n        \\n    }\\n}'}\n",
            "Done!278\n",
            "score-of-parentheses 886\n",
            "{'id': 886, 'name': 'score-of-parentheses', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/score-of-parentheses/', 'task_description': 'Given a balanced parentheses string `s`, return _the **score** of the string_. The **score** of a balanced parentheses string is based on the following rule: `\"()\"` has score `1`. `AB` has score `A + B`, where `A` and `B` are balanced parentheses strings. `(A)` has score `2 * A`, where `A` is a balanced parentheses string. **Example 1:** ``` **Input:** s = \"()\" **Output:** 1 ``` **Example 2:** ``` **Input:** s = \"(())\" **Output:** 2 ``` **Example 3:** ``` **Input:** s = \"()()\" **Output:** 2 ``` **Constraints:** `2 <= s.length <= 50` `s` consists of only `\\'(\\'` and `\\')\\'`. `s` is a balanced parentheses string.', 'test_case': [{'label': 'Example 1', 'input': 's = \"()\"', 'output': '1'}, {'label': 'Example 2', 'input': 's = \"(())\"', 'output': '2'}, {'label': 'Example 3', 'input': 's = \"()()\"', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec score_of_parentheses(s :: String.t) :: integer\\n  def score_of_parentheses(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec score_of_parentheses(S :: unicode:unicode_binary()) -> integer().\\nscore_of_parentheses(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def scoreOfParentheses(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!279\n",
            "exam-room 885\n",
            "{'id': 885, 'name': 'exam-room', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/exam-room/', 'task_description': 'There is an exam room with `n` seats in a single row labeled from `0` to `n - 1`. When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number `0`. Design a class that simulates the mentioned exam room. Implement the `ExamRoom` class: `ExamRoom(int n)` Initializes the object of the exam room with the number of the seats `n`. `int seat()` Returns the label of the seat at which the next student will set. `void leave(int p)` Indicates that the student sitting at seat `p` will leave the room. It is guaranteed that there will be a student sitting at seat `p`. **Example 1:** ``` **Input** [\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"] [[10], [], [], [], [], [4], []] **Output** [null, 0, 9, 4, 2, null, 5] **Explanation** ExamRoom examRoom = new ExamRoom(10); examRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0. examRoom.seat(); // return 9, the student sits at the last seat number 9. examRoom.seat(); // return 4, the student sits at the last seat number 4. examRoom.seat(); // return 2, the student sits at the last seat number 2. examRoom.leave(4); examRoom.seat(); // return 5, the student sits at the last seat number 5. ``` **Constraints:** `1 <= n <= 109` It is guaranteed that there is a student sitting at seat `p`. At most `104` calls will be made to `seat` and `leave`.', 'test_case': [], 'elixir_template': 'defmodule ExamRoom do\\n  @spec init_(n :: integer) :: any\\n  def init_(n) do\\n    \\n  end\\n\\n  @spec seat() :: integer\\n  def seat() do\\n    \\n  end\\n\\n  @spec leave(p :: integer) :: any\\n  def leave(p) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# ExamRoom.init_(n)\\n# param_1 = ExamRoom.seat()\\n# ExamRoom.leave(p)\\n\\n# ExamRoom.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec exam_room_init_(N :: integer()) -> any().\\nexam_room_init_(N) ->\\n  .\\n\\n-spec exam_room_seat() -> integer().\\nexam_room_seat() ->\\n  .\\n\\n-spec exam_room_leave(P :: integer()) -> any().\\nexam_room_leave(P) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% exam_room_init_(N),\\n%% Param_1 = exam_room_seat(),\\n%% exam_room_leave(P),\\n\\n%% exam_room_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class ExamRoom(_n: Int) {\\n\\n    def seat(): Int = {\\n        \\n    }\\n\\n    def leave(p: Int): Unit = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your ExamRoom object will be instantiated and called as such:\\n * val obj = new ExamRoom(n)\\n * val param_1 = obj.seat()\\n * obj.leave(p)\\n */'}\n",
            "Done!280\n",
            "k-similar-strings 884\n",
            "{'id': 884, 'name': 'k-similar-strings', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/k-similar-strings/', 'task_description': 'Strings `s1` and `s2` are `k`**-similar** (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`. Given two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`**-similar**. **Example 1:** ``` **Input:** s1 = \"ab\", s2 = \"ba\" **Output:** 1 **Explanation:** The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --> \"ba\". ``` **Example 2:** ``` **Input:** s1 = \"abc\", s2 = \"bca\" **Output:** 2 **Explanation:** The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --> \"bac\" --> \"bca\". ``` **Constraints:** `1 <= s1.length <= 20` `s2.length == s1.length` `s1` and `s2` contain only lowercase letters from the set `{\\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\', \\'f\\'}`. `s2` is an anagram of `s1`.', 'test_case': [{'label': 'Example 1', 'input': 's1 = \"ab\", s2 = \"ba\"', 'output': '1 Explanation: The two string are 1-similar because we can use one swap to change s1 to s2: \"ab\" --> \"ba\".'}, {'label': 'Example 2', 'input': 's1 = \"abc\", s2 = \"bca\"', 'output': '2 Explanation: The two strings are 2-similar because we can use two swaps to change s1 to s2: \"abc\" --> \"bac\" --> \"bca\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec k_similarity(s1 :: String.t, s2 :: String.t) :: integer\\n  def k_similarity(s1, s2) do\\n    \\n  end\\nend', 'erlang_template': '-spec k_similarity(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> integer().\\nk_similarity(S1, S2) ->\\n  .', 'scala_template': 'object Solution {\\n    def kSimilarity(s1: String, s2: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!281\n",
            "car-fleet 883\n",
            "{'id': 883, 'name': 'car-fleet', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/car-fleet/', 'task_description': 'There are `n` cars at given miles away from the starting mile 0, traveling to reach the mile `target`. You are given two integer array `position` and `speed`, both of length `n`, where `position[i]` is the starting mile of the `ith` car and `speed[i]` is the speed of the `ith` car in miles per hour. A car cannot pass another car, but it can catch up and then travel next to it at the speed of the slower car. A **car fleet** is a car or cars driving next to each other. The speed of the car fleet is the **minimum** speed of any car in the fleet. If a car catches up to a car fleet at the mile `target`, it will still be considered as part of the car fleet. Return the number of car fleets that will arrive at the destination. **Example 1:** **Input:** target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3] **Output:** 3 **Explanation:** The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at `target`. The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself. The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches `target`. **Example 2:** **Input:** target = 10, position = [3], speed = [3] **Output:** 1 **Explanation:** There is only one car, hence there is only one fleet. **Example 3:** **Input:** target = 100, position = [0,2,4], speed = [4,2,1] **Output:** 1 **Explanation:** The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5. Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches `target`. **Constraints:** `n == position.length == speed.length` `1 <= n <= 105` `0 < target <= 106` `0 <= position[i] < target` All the values of `position` are **unique**. `0 < speed[i] <= 106`', 'test_case': [{'label': 'Example 1', 'input': 'target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]', 'output': '3 Explanation: The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12. The fleet forms at target . The car starting at 0 (speed 1) does not catch up to any other car, so it is a fleet by itself. The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target .'}, {'label': 'Example 2', 'input': 'target = 10, position = [3], speed = [3]', 'output': '1 Explanation: There is only one car, hence there is only one fleet.'}, {'label': 'Example 3', 'input': 'target = 100, position = [0,2,4], speed = [4,2,1]', 'output': '1 Explanation: The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The car starting at 4 (speed 1) travels to 5. Then, the fleet at 4 (speed 2) and the car at position 5 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target . Constraints: n == position.length == speed.length 1 <= n <= 10 5 0 < target <= 10 6 0 <= position[i] < target All the values of position are unique . 0 < speed[i] <= 10 6'}], 'elixir_template': 'defmodule Solution do\\n  @spec car_fleet(target :: integer, position :: [integer], speed :: [integer]) :: integer\\n  def car_fleet(target, position, speed) do\\n    \\n  end\\nend', 'erlang_template': '-spec car_fleet(Target :: integer(), Position :: [integer()], Speed :: [integer()]) -> integer().\\ncar_fleet(Target, Position, Speed) ->\\n  .', 'scala_template': 'object Solution {\\n    def carFleet(target: Int, position: Array[Int], speed: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!282\n",
            "peak-index-in-a-mountain-array 882\n",
            "{'id': 882, 'name': 'peak-index-in-a-mountain-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/peak-index-in-a-mountain-array/', 'task_description': 'You are given an integer **mountain** array `arr` of length `n` where the values increase to a **peak element** and then decrease. Return the index of the peak element. Your task is to solve it in `O(log(n))` time complexity. **Example 1:** **Input:** arr = [0,1,0] **Output:** 1 **Example 2:** **Input:** arr = [0,2,1,0] **Output:** 1 **Example 3:** **Input:** arr = [0,10,5,2] **Output:** 1 **Constraints:** `3 <= arr.length <= 105` `0 <= arr[i] <= 106` `arr` is **guaranteed** to be a mountain array.', 'test_case': [{'label': 'Example 1', 'input': 'arr = [0,1,0]', 'output': '1'}, {'label': 'Example 2', 'input': 'arr = [0,2,1,0]', 'output': '1'}, {'label': 'Example 3', 'input': 'arr = [0,10,5,2]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec peak_index_in_mountain_array(arr :: [integer]) :: integer\\n  def peak_index_in_mountain_array(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec peak_index_in_mountain_array(Arr :: [integer()]) -> integer().\\npeak_index_in_mountain_array(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def peakIndexInMountainArray(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!283\n",
            "loud-and-rich 881\n",
            "{'id': 881, 'name': 'loud-and-rich', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/loud-and-rich/', 'task_description': 'There is a group of `n` people labeled from `0` to `n - 1` where each person has a different amount of money and a different level of quietness. You are given an array `richer` where `richer[i] = [ai, bi]` indicates that `ai` has more money than `bi` and an integer array `quiet` where `quiet[i]` is the quietness of the `ith` person. All the given data in richer are **logically correct** (i.e., the data will not lead you to a situation where `x` is richer than `y` and `y` is richer than `x` at the same time). Return _an integer array _`answer`_ where _`answer[x] = y`_ if _`y`_ is the least quiet person (that is, the person _`y`_ with the smallest value of _`quiet[y]`_) among all people who definitely have equal to or more money than the person _`x`. **Example 1:** ``` **Input:** richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0] **Output:** [5,5,2,5,4,5,6,7] **Explanation:** answer[0] = 5. Person 5 has more money than 3, which has more money than 1, which has more money than 0. The only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0. answer[7] = 7. Among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7. The other answers can be filled out with similar reasoning. ``` **Example 2:** ``` **Input:** richer = [], quiet = [0] **Output:** [0] ``` **Constraints:** `n == quiet.length` `1 <= n <= 500` `0 <= quiet[i] < n` All the values of `quiet` are **unique**. `0 <= richer.length <= n * (n - 1) / 2` `0 <= ai, bi < n` `ai != bi` All the pairs of `richer` are **unique**. The observations in `richer` are all logically consistent.', 'test_case': [{'label': 'Example 1', 'input': 'richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]', 'output': '[5,5,2,5,4,5,6,7] Explanation: answer[0] = 5.\\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\\nanswer[7] = 7.\\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\\nThe other answers can be filled out with similar reasoning.'}, {'label': 'Example 2', 'input': 'richer = [], quiet = [0]', 'output': '[0] Constraints: n == quiet.length 1 <= n <= 500 0 <= quiet[i] < n All the values of quiet are unique . 0 <= richer.length <= n * (n - 1) / 2 0 <= a i , b i < n a i != b i All the pairs of richer are unique . The observations in richer are all logically consistent.'}], 'elixir_template': 'defmodule Solution do\\n  @spec loud_and_rich(richer :: [[integer]], quiet :: [integer]) :: [integer]\\n  def loud_and_rich(richer, quiet) do\\n    \\n  end\\nend', 'erlang_template': '-spec loud_and_rich(Richer :: [[integer()]], Quiet :: [integer()]) -> [integer()].\\nloud_and_rich(Richer, Quiet) ->\\n  .', 'scala_template': 'object Solution {\\n    def loudAndRich(richer: Array[Array[Int]], quiet: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!284\n",
            "rectangle-area-ii 880\n",
            "{'id': 880, 'name': 'rectangle-area-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/rectangle-area-ii/', 'task_description': 'You are given a 2D array of axis-aligned `rectangles`. Each `rectangle[i] = [xi1, yi1, xi2, yi2]` denotes the `ith` rectangle where `(xi1, yi1)` are the coordinates of the **bottom-left corner**, and `(xi2, yi2)` are the coordinates of the **top-right corner**. Calculate the **total area** covered by all `rectangles` in the plane. Any area covered by two or more rectangles should only be counted **once**. Return _the **total area**_. Since the answer may be too large, return it **modulo** `109 + 7`. **Example 1:** ``` **Input:** rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]] **Output:** 6 **Explanation:** A total area of 6 is covered by all three rectangles, as illustrated in the picture. From (1,1) to (2,2), the green and red rectangles overlap. From (1,0) to (2,3), all three rectangles overlap. ``` **Example 2:** ``` **Input:** rectangles = [[0,0,1000000000,1000000000]] **Output:** 49 **Explanation:** The answer is 1018 modulo (109 + 7), which is 49. ``` **Constraints:** `1 <= rectangles.length <= 200` `rectanges[i].length == 4` `0 <= xi1, yi1, xi2, yi2 <= 109` `xi1 <= xi2` `yi1 <= yi2`', 'test_case': [{'label': 'Example 1', 'input': 'rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]', 'output': '6 Explanation: A total area of 6 is covered by all three rectangles, as illustrated in the picture.\\nFrom (1,1) to (2,2), the green and red rectangles overlap.\\nFrom (1,0) to (2,3), all three rectangles overlap.'}, {'label': 'Example 2', 'input': 'rectangles = [[0,0,1000000000,1000000000]]', 'output': '49 Explanation: The answer is 10 18 modulo (10 9 + 7), which is 49.'}], 'elixir_template': 'defmodule Solution do\\n  @spec rectangle_area(rectangles :: [[integer]]) :: integer\\n  def rectangle_area(rectangles) do\\n    \\n  end\\nend', 'erlang_template': '-spec rectangle_area(Rectangles :: [[integer()]]) -> integer().\\nrectangle_area(Rectangles) ->\\n  .', 'scala_template': 'object Solution {\\n    def rectangleArea(rectangles: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!285\n",
            "maximize-distance-to-closest-person 879\n",
            "{'id': 879, 'name': 'maximize-distance-to-closest-person', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximize-distance-to-closest-person/', 'task_description': 'You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty **(0-indexed)**. There is at least one empty seat, and at least one person sitting. Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. Return _that maximum distance to the closest person_. **Example 1:** ``` **Input:** seats = [1,0,0,0,1,0,1] **Output:** 2 **Explanation: ** If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2. If Alex sits in any other open seat, the closest person has distance 1. Thus, the maximum distance to the closest person is 2. ``` **Example 2:** ``` **Input:** seats = [1,0,0,0] **Output:** 3 **Explanation: ** If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away. This is the maximum distance possible, so the answer is 3. ``` **Example 3:** ``` **Input:** seats = [0,1] **Output:** 1 ``` **Constraints:** `2 <= seats.length <= 2 * 104` `seats[i]` is `0` or `1`. At least one seat is **empty**. At least one seat is **occupied**.', 'test_case': [{'label': 'Example 1', 'input': 'seats = [1,0,0,0,1,0,1]', 'output': '2 Explanation: If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\\nIf Alex sits in any other open seat, the closest person has distance 1.\\nThus, the maximum distance to the closest person is 2.'}, {'label': 'Example 2', 'input': 'seats = [1,0,0,0]', 'output': '3 Explanation: If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\\nThis is the maximum distance possible, so the answer is 3.'}, {'label': 'Example 3', 'input': 'seats = [0,1]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_dist_to_closest(seats :: [integer]) :: integer\\n  def max_dist_to_closest(seats) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_dist_to_closest(Seats :: [integer()]) -> integer().\\nmax_dist_to_closest(Seats) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxDistToClosest(seats: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!286\n",
            "shifting-letters 878\n",
            "{'id': 878, 'name': 'shifting-letters', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/shifting-letters/', 'task_description': 'You are given a string `s` of lowercase English letters and an integer array `shifts` of the same length. Call the `shift()` of a letter, the next letter in the alphabet, (wrapping around so that `\\'z\\'` becomes `\\'a\\'`). For example, `shift(\\'a\\') = \\'b\\'`, `shift(\\'t\\') = \\'u\\'`, and `shift(\\'z\\') = \\'a\\'`. Now for each `shifts[i] = x`, we want to shift the first `i + 1` letters of `s`, `x` times. Return _the final string after all such shifts to s are applied_. **Example 1:** ``` **Input:** s = \"abc\", shifts = [3,5,9] **Output:** \"rpl\" **Explanation:** We start with \"abc\". After shifting the first 1 letters of s by 3, we have \"dbc\". After shifting the first 2 letters of s by 5, we have \"igc\". After shifting the first 3 letters of s by 9, we have \"rpl\", the answer. ``` **Example 2:** ``` **Input:** s = \"aaa\", shifts = [1,2,3] **Output:** \"gfd\" ``` **Constraints:** `1 <= s.length <= 105` `s` consists of lowercase English letters. `shifts.length == s.length` `0 <= shifts[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 's = \"abc\", shifts = [3,5,9]', 'output': '\"rpl\" Explanation: We start with \"abc\".\\nAfter shifting the first 1 letters of s by 3, we have \"dbc\".\\nAfter shifting the first 2 letters of s by 5, we have \"igc\".\\nAfter shifting the first 3 letters of s by 9, we have \"rpl\", the answer.'}, {'label': 'Example 2', 'input': 's = \"aaa\", shifts = [1,2,3]', 'output': '\"gfd\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec shifting_letters(s :: String.t, shifts :: [integer]) :: String.t\\n  def shifting_letters(s, shifts) do\\n    \\n  end\\nend', 'erlang_template': '-spec shifting_letters(S :: unicode:unicode_binary(), Shifts :: [integer()]) -> unicode:unicode_binary().\\nshifting_letters(S, Shifts) ->\\n  .', 'scala_template': 'object Solution {\\n    def shiftingLetters(s: String, shifts: Array[Int]): String = {\\n        \\n    }\\n}'}\n",
            "Done!287\n",
            "shortest-path-visiting-all-nodes 877\n",
            "{'id': 877, 'name': 'shortest-path-visiting-all-nodes', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/shortest-path-visiting-all-nodes/', 'task_description': 'You have an undirected, connected graph of `n` nodes labeled from `0` to `n - 1`. You are given an array `graph` where `graph[i]` is a list of all the nodes connected with node `i` by an edge. Return _the length of the shortest path that visits every node_. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges. **Example 1:** ``` **Input:** graph = [[1,2,3],[0],[0],[0]] **Output:** 4 **Explanation:** One possible path is [1,0,2,0,3] ``` **Example 2:** ``` **Input:** graph = [[1],[0,2,4],[1,3,4],[2],[1,2]] **Output:** 4 **Explanation:** One possible path is [0,1,4,2,3] ``` **Constraints:** `n == graph.length` `1 <= n <= 12` `0 <= graph[i].length < n` `graph[i]` does not contain `i`. If `graph[a]` contains `b`, then `graph[b]` contains `a`. The input graph is always connected.', 'test_case': [{'label': 'Example 1', 'input': 'graph = [[1,2,3],[0],[0],[0]]', 'output': '4 Explanation: One possible path is [1,0,2,0,3]'}, {'label': 'Example 2', 'input': 'graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]', 'output': '4 Explanation: One possible path is [0,1,4,2,3] Constraints: n == graph.length 1 <= n <= 12 0 <= graph[i].length <\\xa0n graph[i] does not contain i . If graph[a] contains b , then graph[b] contains a . The input graph is always connected.'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_path_length(graph :: [[integer]]) :: integer\\n  def shortest_path_length(graph) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_path_length(Graph :: [[integer()]]) -> integer().\\nshortest_path_length(Graph) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestPathLength(graph: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!288\n",
            "hand-of-straights 876\n",
            "{'id': 876, 'name': 'hand-of-straights', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/hand-of-straights/', 'task_description': \"Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size `groupSize`, and consists of `groupSize` consecutive cards. Given an integer array `hand` where `hand[i]` is the value written on the `ith` card and an integer `groupSize`, return `true` if she can rearrange the cards, or `false` otherwise. **Example 1:** ``` **Input:** hand = [1,2,3,6,2,3,4,7,8], groupSize = 3 **Output:** true **Explanation:** Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8] ``` **Example 2:** ``` **Input:** hand = [1,2,3,4,5], groupSize = 4 **Output:** false **Explanation:** Alice's hand can not be rearranged into groups of 4. ``` **Constraints:** `1 <= hand.length <= 104` `0 <= hand[i] <= 109` `1 <= groupSize <= hand.length` **Note:** This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\", 'test_case': [{'label': 'Example 1', 'input': 'hand = [1,2,3,6,2,3,4,7,8], groupSize = 3', 'output': \"true Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\"}, {'label': 'Example 2', 'input': 'hand = [1,2,3,4,5], groupSize = 4', 'output': \"false Explanation: Alice's hand can not be rearranged into groups of 4.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec is_n_straight_hand(hand :: [integer], group_size :: integer) :: boolean\\n  def is_n_straight_hand(hand, group_size) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_n_straight_hand(Hand :: [integer()], GroupSize :: integer()) -> boolean().\\nis_n_straight_hand(Hand, GroupSize) ->\\n  .', 'scala_template': 'object Solution {\\n    def isNStraightHand(hand: Array[Int], groupSize: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!289\n",
            "longest-mountain-in-array 875\n",
            "{'id': 875, 'name': 'longest-mountain-in-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-mountain-in-array/', 'task_description': 'You may recall that an array `arr` is a **mountain array** if and only if: `arr.length >= 3` There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that: `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` Given an integer array `arr`, return _the length of the longest subarray, which is a mountain_. Return `0` if there is no mountain subarray. **Example 1:** ``` **Input:** arr = [2,1,4,7,3,2,5] **Output:** 5 **Explanation:** The largest mountain is [1,4,7,3,2] which has length 5. ``` **Example 2:** ``` **Input:** arr = [2,2,2] **Output:** 0 **Explanation:** There is no mountain. ``` **Constraints:** `1 <= arr.length <= 104` `0 <= arr[i] <= 104` **Follow up:** Can you solve it using only one pass? Can you solve it in `O(1)` space?', 'test_case': [{'label': 'Example 1', 'input': 'arr = [2,1,4,7,3,2,5]', 'output': '5 Explanation: The largest mountain is [1,4,7,3,2] which has length 5.'}, {'label': 'Example 2', 'input': 'arr = [2,2,2]', 'output': '0 Explanation: There is no mountain.'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_mountain(arr :: [integer]) :: integer\\n  def longest_mountain(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_mountain(Arr :: [integer()]) -> integer().\\nlongest_mountain(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestMountain(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!290\n",
            "backspace-string-compare 874\n",
            "{'id': 874, 'name': 'backspace-string-compare', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/backspace-string-compare/', 'task_description': 'Given two strings `s` and `t`, return `true` _if they are equal when both are typed into empty text editors_. `\\'#\\'` means a backspace character. Note that after backspacing an empty text, the text will continue empty. **Example 1:** ``` **Input:** s = \"ab#c\", t = \"ad#c\" **Output:** true **Explanation:** Both s and t become \"ac\". ``` **Example 2:** ``` **Input:** s = \"ab##\", t = \"c#d#\" **Output:** true **Explanation:** Both s and t become \"\". ``` **Example 3:** ``` **Input:** s = \"a#c\", t = \"b\" **Output:** false **Explanation:** s becomes \"c\" while t becomes \"b\". ``` **Constraints:** `1 <= s.length, t.length <= 200` `s` and `t` only contain lowercase letters and `\\'#\\'` characters. **Follow up:** Can you solve it in `O(n)` time and `O(1)` space?', 'test_case': [{'label': 'Example 1', 'input': 's = \"ab#c\", t = \"ad#c\"', 'output': 'true Explanation: Both s and t become \"ac\".'}, {'label': 'Example 2', 'input': 's = \"ab##\", t = \"c#d#\"', 'output': 'true Explanation: Both s and t become \"\".'}, {'label': 'Example 3', 'input': 's = \"a#c\", t = \"b\"', 'output': 'false Explanation: s becomes \"c\" while t becomes \"b\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec backspace_compare(s :: String.t, t :: String.t) :: boolean\\n  def backspace_compare(s, t) do\\n    \\n  end\\nend', 'erlang_template': '-spec backspace_compare(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\\nbackspace_compare(S, T) ->\\n  .', 'scala_template': 'object Solution {\\n    def backspaceCompare(s: String, t: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!291\n",
            "guess-the-word 873\n",
            "{'id': 873, 'name': 'guess-the-word', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/guess-the-word/', 'task_description': 'You are given an array of unique strings `words` where `words[i]` is six letters long. One word of `words` was chosen as a secret word. You are also given the helper object `Master`. You may call `Master.guess(word)` where `word` is a six-letter-long string, and it must be from `words`. `Master.guess(word)` returns: `-1` if `word` is not from `words`, or an integer representing the number of exact matches (value and position) of your guess to the secret word. There is a parameter `allowedGuesses` for each test case where `allowedGuesses` is the maximum number of times you can call `Master.guess(word)`. For each test case, you should call `Master.guess` with the secret word without exceeding the maximum number of allowed guesses. You will get: **`\"Either you took too many guesses, or you did not find the secret word.\"`** if you called `Master.guess` more than `allowedGuesses` times or if you did not call `Master.guess` with the secret word, or **`\"You guessed the secret word correctly.\"`** if you called `Master.guess` with the secret word with the number of calls to `Master.guess` less than or equal to `allowedGuesses`. The test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method). **Example 1:** ``` **Input:** secret = \"acckzz\", words = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], allowedGuesses = 10 **Output:** You guessed the secret word correctly. **Explanation:** master.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist. master.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches. master.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches. master.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches. master.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches. We made 5 calls to master.guess, and one of them was the secret, so we pass the test case. ``` **Example 2:** ``` **Input:** secret = \"hamada\", words = [\"hamada\",\"khaled\"], allowedGuesses = 10 **Output:** You guessed the secret word correctly. **Explanation:** Since there are two words, you can guess both. ``` **Constraints:** `1 <= words.length <= 100` `words[i].length == 6` `words[i]` consist of lowercase English letters. All the strings of `wordlist` are **unique**. `secret` exists in `words`. `10 <= allowedGuesses <= 30`', 'test_case': [{'label': 'Example 1', 'input': 'secret = \"acckzz\", words = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], allowedGuesses = 10', 'output': 'You guessed the secret word correctly. Explanation: master.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\\nWe made 5 calls to master.guess, and one of them was the secret, so we pass the test case.'}, {'label': 'Example 2', 'input': 'secret = \"hamada\", words = [\"hamada\",\"khaled\"], allowedGuesses = 10', 'output': 'You guessed the secret word correctly. Explanation: Since there are two words, you can guess both.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': \"/**\\n * // This is the Master's API interface.\\n * // You should not implement it, or speculate about its implementation\\n * class Master {\\n *\\n *   def guess(word: String): Int = {}\\n *\\n * }\\n */\\nobject Solution {\\n    def findSecretWord(words: Array[String], master: Master): Unit = {\\n        \\n    }\\n}\"}\n",
            "Done!292\n",
            "split-array-into-fibonacci-sequence 872\n",
            "{'id': 872, 'name': 'split-array-into-fibonacci-sequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/split-array-into-fibonacci-sequence/', 'task_description': 'You are given a string of digits `num`, such as `\"123456579\"`. We can split it into a Fibonacci-like sequence `[123, 456, 579]`. Formally, a **Fibonacci-like** sequence is a list `f` of non-negative integers such that: `0 <= f[i] < 231`, (that is, each integer fits in a **32-bit** signed integer type), `f.length >= 3`, and `f[i] + f[i + 1] == f[i + 2]` for all `0 <= i < f.length - 2`. Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number `0` itself. Return any Fibonacci-like sequence split from `num`, or return `[]` if it cannot be done. **Example 1:** ``` **Input:** num = \"1101111\" **Output:** [11,0,11,11] **Explanation:** The output [110, 1, 111] would also be accepted. ``` **Example 2:** ``` **Input:** num = \"112358130\" **Output:** [] **Explanation:** The task is impossible. ``` **Example 3:** ``` **Input:** num = \"0123\" **Output:** [] **Explanation:** Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid. ``` **Constraints:** `1 <= num.length <= 200` `num` contains only digits.', 'test_case': [{'label': 'Example 1', 'input': 'num = \"1101111\"', 'output': '[11,0,11,11] Explanation: The output [110, 1, 111] would also be accepted.'}, {'label': 'Example 2', 'input': 'num = \"112358130\"', 'output': '[] Explanation: The task is impossible.'}, {'label': 'Example 3', 'input': 'num = \"0123\"', 'output': '[] Explanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.'}], 'elixir_template': 'defmodule Solution do\\n  @spec split_into_fibonacci(num :: String.t) :: [integer]\\n  def split_into_fibonacci(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec split_into_fibonacci(Num :: unicode:unicode_binary()) -> [integer()].\\nsplit_into_fibonacci(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def splitIntoFibonacci(num: String): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!293\n",
            "keys-and-rooms 871\n",
            "{'id': 871, 'name': 'keys-and-rooms', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/keys-and-rooms/', 'task_description': 'There are `n` rooms labeled from `0` to `n - 1` and all the rooms are locked except for room `0`. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key. When you visit a room, you may find a set of **distinct keys** in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms. Given an array `rooms` where `rooms[i]` is the set of keys that you can obtain if you visited room `i`, return `true` _if you can visit **all** the rooms, or_ `false` _otherwise_. **Example 1:** ``` **Input:** rooms = [[1],[2],[3],[]] **Output:** true **Explanation:** We visit room 0 and pick up key 1. We then visit room 1 and pick up key 2. We then visit room 2 and pick up key 3. We then visit room 3. Since we were able to visit every room, we return true. ``` **Example 2:** ``` **Input:** rooms = [[1,3],[3,0,1],[2],[0]] **Output:** false **Explanation:** We can not enter room number 2 since the only key that unlocks it is in that room. ``` **Constraints:** `n == rooms.length` `2 <= n <= 1000` `0 <= rooms[i].length <= 1000` `1 <= sum(rooms[i].length) <= 3000` `0 <= rooms[i][j] < n` All the values of `rooms[i]` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'rooms = [[1],[2],[3],[]]', 'output': 'true Explanation: We visit room 0 and pick up key 1.\\nWe then visit room 1 and pick up key 2.\\nWe then visit room 2 and pick up key 3.\\nWe then visit room 3.\\nSince we were able to visit every room, we return true.'}, {'label': 'Example 2', 'input': 'rooms = [[1,3],[3,0,1],[2],[0]]', 'output': 'false Explanation: We can not enter room number 2 since the only key that unlocks it is in that room. Constraints: n == rooms.length 2 <= n <= 1000 0 <= rooms[i].length <= 1000 1 <= sum(rooms[i].length) <= 3000 0 <= rooms[i][j] < n All the values of rooms[i] are unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_visit_all_rooms(rooms :: [[integer]]) :: boolean\\n  def can_visit_all_rooms(rooms) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_visit_all_rooms(Rooms :: [[integer()]]) -> boolean().\\ncan_visit_all_rooms(Rooms) ->\\n  .', 'scala_template': 'object Solution {\\n    def canVisitAllRooms(rooms: List[List[Int]]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!294\n",
            "magic-squares-in-grid 870\n",
            "{'id': 870, 'name': 'magic-squares-in-grid', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/magic-squares-in-grid/', 'task_description': 'A `3 x 3` **magic square** is a `3 x 3` grid filled with distinct numbers **from **1** to **9 such that each row, column, and both diagonals all have the same sum. Given a `row x col` `grid` of integers, how many `3 x 3` magic square subgrids are there? Note: while a magic square can only contain numbers from 1 to 9, `grid` may contain numbers up to 15. **Example 1:** ``` **Input:** grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]] **Output:** 1 **Explanation: ** The following subgrid is a 3 x 3 magic square: while this one is not: In total, there is only one magic square inside the given grid. ``` **Example 2:** ``` **Input:** grid = [[8]] **Output:** 0 ``` **Constraints:** `row == grid.length` `col == grid[i].length` `1 <= row, col <= 10` `0 <= grid[i][j] <= 15`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]', 'output': '1 Explanation: The following subgrid is a 3 x 3 magic square: while this one is not: In total, there is only one magic square inside the given grid.'}, {'label': 'Example 2', 'input': 'grid = [[8]]', 'output': '0 Constraints: row == grid.length col == grid[i].length 1 <= row, col <= 10 0 <= grid[i][j] <= 15'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_magic_squares_inside(grid :: [[integer]]) :: integer\\n  def num_magic_squares_inside(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_magic_squares_inside(Grid :: [[integer()]]) -> integer().\\nnum_magic_squares_inside(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def numMagicSquaresInside(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!295\n",
            "similar-string-groups 869\n",
            "{'id': 869, 'name': 'similar-string-groups', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/similar-string-groups/', 'task_description': 'Two strings, `X` and `Y`, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string `X`. For example, `\"tars\"` and `\"rats\"` are similar (swapping at positions `0` and `2`), and `\"rats\"` and `\"arts\"` are similar, but `\"star\"` is not similar to `\"tars\"`, `\"rats\"`, or `\"arts\"`. Together, these form two connected groups by similarity: `{\"tars\", \"rats\", \"arts\"}` and `{\"star\"}`. Notice that `\"tars\"` and `\"arts\"` are in the same group even though they are not similar. Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group. We are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there? **Example 1:** ``` **Input:** strs = [\"tars\",\"rats\",\"arts\",\"star\"] **Output:** 2 ``` **Example 2:** ``` **Input:** strs = [\"omv\",\"ovm\"] **Output:** 1 ``` **Constraints:** `1 <= strs.length <= 300` `1 <= strs[i].length <= 300` `strs[i]` consists of lowercase letters only. All words in `strs` have the same length and are anagrams of each other.', 'test_case': [{'label': 'Example 1', 'input': 'strs = [\"tars\",\"rats\",\"arts\",\"star\"]', 'output': '2'}, {'label': 'Example 2', 'input': 'strs = [\"omv\",\"ovm\"]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_similar_groups(strs :: [String.t]) :: integer\\n  def num_similar_groups(strs) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_similar_groups(Strs :: [unicode:unicode_binary()]) -> integer().\\nnum_similar_groups(Strs) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSimilarGroups(strs: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!296\n",
            "push-dominoes 868\n",
            "{'id': 868, 'name': 'push-dominoes', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/push-dominoes/', 'task_description': 'There are `n` dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right. After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino. You are given a string `dominoes` representing the initial state where: `dominoes[i] = \\'L\\'`, if the `ith` domino has been pushed to the left, `dominoes[i] = \\'R\\'`, if the `ith` domino has been pushed to the right, and `dominoes[i] = \\'.\\'`, if the `ith` domino has not been pushed. Return _a string representing the final state_. **Example 1:** ``` **Input:** dominoes = \"RR.L\" **Output:** \"RR.L\" **Explanation:** The first domino expends no additional force on the second domino. ``` **Example 2:** ``` **Input:** dominoes = \".L.R...LR..L..\" **Output:** \"LL.RR.LLRRLL..\" ``` **Constraints:** `n == dominoes.length` `1 <= n <= 105` `dominoes[i]` is either `\\'L\\'`, `\\'R\\'`, or `\\'.\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'dominoes = \"RR.L\"', 'output': '\"RR.L\" Explanation: The first domino expends no additional force on the second domino.'}, {'label': 'Example 2', 'input': 'dominoes = \".L.R...LR..L..\"', 'output': '\"LL.RR.LLRRLL..\" Constraints: n == dominoes.length 1 <= n <= 10 5 dominoes[i] is either \\'L\\' , \\'R\\' , or \\'.\\' .'}], 'elixir_template': 'defmodule Solution do\\n  @spec push_dominoes(dominoes :: String.t) :: String.t\\n  def push_dominoes(dominoes) do\\n    \\n  end\\nend', 'erlang_template': '-spec push_dominoes(Dominoes :: unicode:unicode_binary()) -> unicode:unicode_binary().\\npush_dominoes(Dominoes) ->\\n  .', 'scala_template': 'object Solution {\\n    def pushDominoes(dominoes: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!297\n",
            "new-21-game 867\n",
            "{'id': 867, 'name': 'new-21-game', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/new-21-game/', 'task_description': 'Alice plays the following game, loosely based on the card game **\"21\"**. Alice starts with `0` points and draws numbers while she has less than `k` points. During each draw, she gains an integer number of points randomly from the range `[1, maxPts]`, where `maxPts` is an integer. Each draw is independent and the outcomes have equal probabilities. Alice stops drawing numbers when she gets `k` **or more points**. Return the probability that Alice has `n` or fewer points. Answers within `10-5` of the actual answer are considered accepted. **Example 1:** ``` **Input:** n = 10, k = 1, maxPts = 10 **Output:** 1.00000 **Explanation:** Alice gets a single card, then stops. ``` **Example 2:** ``` **Input:** n = 6, k = 1, maxPts = 10 **Output:** 0.60000 **Explanation:** Alice gets a single card, then stops. In 6 out of 10 possibilities, she is at or below 6 points. ``` **Example 3:** ``` **Input:** n = 21, k = 17, maxPts = 10 **Output:** 0.73278 ``` **Constraints:** `0 <= k <= n <= 104` `1 <= maxPts <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'n = 10, k = 1, maxPts = 10', 'output': '1.00000 Explanation: Alice gets a single card, then stops.'}, {'label': 'Example 2', 'input': 'n = 6, k = 1, maxPts = 10', 'output': '0.60000 Explanation: Alice gets a single card, then stops.\\nIn 6 out of 10 possibilities, she is at or below 6 points.'}, {'label': 'Example 3', 'input': 'n = 21, k = 17, maxPts = 10', 'output': '0.73278'}], 'elixir_template': 'defmodule Solution do\\n  @spec new21_game(n :: integer, k :: integer, max_pts :: integer) :: float\\n  def new21_game(n, k, max_pts) do\\n    \\n  end\\nend', 'erlang_template': '-spec new21_game(N :: integer(), K :: integer(), MaxPts :: integer()) -> float().\\nnew21_game(N, K, MaxPts) ->\\n  .', 'scala_template': 'object Solution {\\n    def new21Game(n: Int, k: Int, maxPts: Int): Double = {\\n        \\n    }\\n}'}\n",
            "Done!298\n",
            "rectangle-overlap 866\n",
            "{'id': 866, 'name': 'rectangle-overlap', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/rectangle-overlap/', 'task_description': 'An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis. Two rectangles overlap if the area of their intersection is **positive**. To be clear, two rectangles that only touch at the corner or edges do not overlap. Given two axis-aligned rectangles `rec1` and `rec2`, return `true`_ if they overlap, otherwise return _`false`. **Example 1:** ``` **Input:** rec1 = [0,0,2,2], rec2 = [1,1,3,3] **Output:** true ``` **Example 2:** ``` **Input:** rec1 = [0,0,1,1], rec2 = [1,0,2,1] **Output:** false ``` **Example 3:** ``` **Input:** rec1 = [0,0,1,1], rec2 = [2,2,3,3] **Output:** false ``` **Constraints:** `rec1.length == 4` `rec2.length == 4` `-109 <= rec1[i], rec2[i] <= 109` `rec1` and `rec2` represent a valid rectangle with a non-zero area.', 'test_case': [{'label': 'Example 1', 'input': 'rec1 = [0,0,2,2], rec2 = [1,1,3,3]', 'output': 'true'}, {'label': 'Example 2', 'input': 'rec1 = [0,0,1,1], rec2 = [1,0,2,1]', 'output': 'false'}, {'label': 'Example 3', 'input': 'rec1 = [0,0,1,1], rec2 = [2,2,3,3]', 'output': 'false Constraints: rec1.length == 4 rec2.length == 4 -10 9 <= rec1[i], rec2[i] <= 10 9 rec1 and rec2 represent a valid rectangle with a non-zero area.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_rectangle_overlap(rec1 :: [integer], rec2 :: [integer]) :: boolean\\n  def is_rectangle_overlap(rec1, rec2) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_rectangle_overlap(Rec1 :: [integer()], Rec2 :: [integer()]) -> boolean().\\nis_rectangle_overlap(Rec1, Rec2) ->\\n  .', 'scala_template': 'object Solution {\\n    def isRectangleOverlap(rec1: Array[Int], rec2: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!299\n",
            "image-overlap 864\n",
            "{'id': 864, 'name': 'image-overlap', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/image-overlap/', 'task_description': 'You are given two images, `img1` and `img2`, represented as binary, square matrices of size `n x n`. A binary matrix has only `0`s and `1`s as values. We **translate** one image however we choose by sliding all the `1` bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the **overlap** by counting the number of positions that have a `1` in **both** images. Note also that a translation does **not** include any kind of rotation. Any `1` bits that are translated outside of the matrix borders are erased. Return _the largest possible overlap_. **Example 1:** ``` **Input:** img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]] **Output:** 3 **Explanation:** We translate img1 to right by 1 unit and down by 1 unit. The number of positions that have a 1 in both images is 3 (shown in red). ``` **Example 2:** ``` **Input:** img1 = [[1]], img2 = [[1]] **Output:** 1 ``` **Example 3:** ``` **Input:** img1 = [[0]], img2 = [[0]] **Output:** 0 ``` **Constraints:** `n == img1.length == img1[i].length` `n == img2.length == img2[i].length` `1 <= n <= 30` `img1[i][j]` is either `0` or `1`. `img2[i][j]` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]', 'output': '3 Explanation: We translate img1 to right by 1 unit and down by 1 unit. The number of positions that have a 1 in both images is 3 (shown in red).'}, {'label': 'Example 2', 'input': 'img1 = [[1]], img2 = [[1]]', 'output': '1'}, {'label': 'Example 3', 'input': 'img1 = [[0]], img2 = [[0]]', 'output': '0 Constraints: n == img1.length == img1[i].length n == img2.length == img2[i].length 1 <= n <= 30 img1[i][j] is either 0 or 1 . img2[i][j] is either 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_overlap(img1 :: [[integer]], img2 :: [[integer]]) :: integer\\n  def largest_overlap(img1, img2) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_overlap(Img1 :: [[integer()]], Img2 :: [[integer()]]) -> integer().\\nlargest_overlap(Img1, Img2) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestOverlap(img1: Array[Array[Int]], img2: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!300\n",
            "sum-of-distances-in-tree 863\n",
            "{'id': 863, 'name': 'sum-of-distances-in-tree', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/sum-of-distances-in-tree/', 'task_description': 'There is an undirected connected tree with `n` nodes labeled from `0` to `n - 1` and `n - 1` edges. You are given the integer `n` and the array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree. Return an array `answer` of length `n` where `answer[i]` is the sum of the distances between the `ith` node in the tree and all other nodes. **Example 1:** ``` **Input:** n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]] **Output:** [8,12,6,10,10,10] **Explanation:** The tree is shown above. We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) equals 1 + 1 + 2 + 2 + 2 = 8. Hence, answer[0] = 8, and so on. ``` **Example 2:** ``` **Input:** n = 1, edges = [] **Output:** [0] ``` **Example 3:** ``` **Input:** n = 2, edges = [[1,0]] **Output:** [1,1] ``` **Constraints:** `1 <= n <= 3 * 104` `edges.length == n - 1` `edges[i].length == 2` `0 <= ai, bi < n` `ai != bi` The given input represents a valid tree.', 'test_case': [{'label': 'Example 1', 'input': 'n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]', 'output': '[8,12,6,10,10,10] Explanation: The tree is shown above.\\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\\nequals 1 + 1 + 2 + 2 + 2 = 8.\\nHence, answer[0] = 8, and so on.'}, {'label': 'Example 2', 'input': 'n = 1, edges = []', 'output': '[0]'}, {'label': 'Example 3', 'input': 'n = 2, edges = [[1,0]]', 'output': '[1,1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec sum_of_distances_in_tree(n :: integer, edges :: [[integer]]) :: [integer]\\n  def sum_of_distances_in_tree(n, edges) do\\n    \\n  end\\nend', 'erlang_template': '-spec sum_of_distances_in_tree(N :: integer(), Edges :: [[integer()]]) -> [integer()].\\nsum_of_distances_in_tree(N, Edges) ->\\n  .', 'scala_template': 'object Solution {\\n    def sumOfDistancesInTree(n: Int, edges: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!301\n",
            "find-and-replace-in-string 862\n",
            "{'id': 862, 'name': 'find-and-replace-in-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-and-replace-in-string/', 'task_description': 'You are given a **0-indexed** string `s` that you must perform `k` replacement operations on. The replacement operations are given as three **0-indexed** parallel arrays, `indices`, `sources`, and `targets`, all of length `k`. To complete the `ith` replacement operation: Check if the **substring** `sources[i]` occurs at index `indices[i]` in the **original string** `s`. If it does not occur, **do nothing**. Otherwise if it does occur, **replace** that substring with `targets[i]`. For example, if `s = \"abcd\"`, `indices[i] = 0`, `sources[i] = \"ab\"`, and `targets[i] = \"eee\"`, then the result of this replacement will be `\"eeecd\"`. All replacement operations must occur **simultaneously**, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will **not overlap**. For example, a testcase with `s = \"abc\"`, `indices = [0, 1]`, and `sources = [\"ab\",\"bc\"]` will not be generated because the `\"ab\"` and `\"bc\"` replacements overlap. Return _the **resulting string** after performing all replacement operations on _`s`. A **substring** is a contiguous sequence of characters in a string. **Example 1:** ``` **Input:** s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"] **Output:** \"eeebffff\" **Explanation:** \"a\" occurs at index 0 in s, so we replace it with \"eee\". \"cd\" occurs at index 2 in s, so we replace it with \"ffff\". ``` **Example 2:** ``` **Input:** s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"] **Output:** \"eeecd\" **Explanation:** \"ab\" occurs at index 0 in s, so we replace it with \"eee\". \"ec\" does not occur at index 2 in s, so we do nothing. ``` **Constraints:** `1 <= s.length <= 1000` `k == indices.length == sources.length == targets.length` `1 <= k <= 100` `0 <= indexes[i] < s.length` `1 <= sources[i].length, targets[i].length <= 50` `s` consists of only lowercase English letters. `sources[i]` and `targets[i]` consist of only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]', 'output': '\"eeebffff\" Explanation: \"a\" occurs at index 0 in s, so we replace it with \"eee\".\\n\"cd\" occurs at index 2 in s, so we replace it with \"ffff\".'}, {'label': 'Example 2', 'input': 's = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]', 'output': '\"eeecd\" Explanation: \"ab\" occurs at index 0 in s, so we replace it with \"eee\".\\n\"ec\" does not occur at index 2 in s, so we do nothing.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_replace_string(s :: String.t, indices :: [integer], sources :: [String.t], targets :: [String.t]) :: String.t\\n  def find_replace_string(s, indices, sources, targets) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_replace_string(S :: unicode:unicode_binary(), Indices :: [integer()], Sources :: [unicode:unicode_binary()], Targets :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nfind_replace_string(S, Indices, Sources, Targets) ->\\n  .', 'scala_template': 'object Solution {\\n    def findReplaceString(s: String, indices: Array[Int], sources: Array[String], targets: Array[String]): String = {\\n        \\n    }\\n}'}\n",
            "Done!302\n",
            "flipping-an-image 861\n",
            "{'id': 861, 'name': 'flipping-an-image', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/flipping-an-image/', 'task_description': 'Given an `n x n` binary matrix `image`, flip the image **horizontally**, then invert it, and return _the resulting image_. To flip an image horizontally means that each row of the image is reversed. For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`. To invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`. For example, inverting `[0,1,1]` results in `[1,0,0]`. **Example 1:** ``` **Input:** image = [[1,1,0],[1,0,1],[0,0,0]] **Output:** [[1,0,0],[0,1,0],[1,1,1]] **Explanation:** First reverse each row: [[0,1,1],[1,0,1],[0,0,0]]. Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]] ``` **Example 2:** ``` **Input:** image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]] **Output:** [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] **Explanation:** First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] ``` **Constraints:** `n == image.length` `n == image[i].length` `1 <= n <= 20` `images[i][j]` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'image = [[1,1,0],[1,0,1],[0,0,0]]', 'output': '[[1,0,0],[0,1,0],[1,1,1]] Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]'}, {'label': 'Example 2', 'input': 'image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]', 'output': '[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Constraints: n == image.length n == image[i].length 1 <= n <= 20 images[i][j] is either 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec flip_and_invert_image(image :: [[integer]]) :: [[integer]]\\n  def flip_and_invert_image(image) do\\n    \\n  end\\nend', 'erlang_template': '-spec flip_and_invert_image(Image :: [[integer()]]) -> [[integer()]].\\nflip_and_invert_image(Image) ->\\n  .', 'scala_template': 'object Solution {\\n    def flipAndInvertImage(image: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!303\n",
            "design-circular-queue 860\n",
            "{'id': 860, 'name': 'design-circular-queue', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/design-circular-queue/', 'task_description': 'Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\". One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values. Implement the `MyCircularQueue` class: `MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`. `int Front()` Gets the front item from the queue. If the queue is empty, return `-1`. `int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`. `boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful. `boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful. `boolean isEmpty()` Checks whether the circular queue is empty or not. `boolean isFull()` Checks whether the circular queue is full or not. You must solve the problem without using the built-in queue data structure in your programming language. **Example 1:** ``` **Input** [\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"] [[3], [1], [2], [3], [4], [], [], [], [4], []] **Output** [null, true, true, true, false, 3, true, true, true, 4] **Explanation** MyCircularQueue myCircularQueue = new MyCircularQueue(3); myCircularQueue.enQueue(1); // return True myCircularQueue.enQueue(2); // return True myCircularQueue.enQueue(3); // return True myCircularQueue.enQueue(4); // return False myCircularQueue.Rear(); // return 3 myCircularQueue.isFull(); // return True myCircularQueue.deQueue(); // return True myCircularQueue.enQueue(4); // return True myCircularQueue.Rear(); // return 4 ``` **Constraints:** `1 <= k <= 1000` `0 <= value <= 1000` At most `3000` calls will be made to `enQueue`, `deQueue`, `Front`, `Rear`, `isEmpty`, and `isFull`.', 'test_case': [], 'elixir_template': 'defmodule MyCircularQueue do\\n  @spec init_(k :: integer) :: any\\n  def init_(k) do\\n    \\n  end\\n\\n  @spec en_queue(value :: integer) :: boolean\\n  def en_queue(value) do\\n    \\n  end\\n\\n  @spec de_queue() :: boolean\\n  def de_queue() do\\n    \\n  end\\n\\n  @spec front() :: integer\\n  def front() do\\n    \\n  end\\n\\n  @spec rear() :: integer\\n  def rear() do\\n    \\n  end\\n\\n  @spec is_empty() :: boolean\\n  def is_empty() do\\n    \\n  end\\n\\n  @spec is_full() :: boolean\\n  def is_full() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyCircularQueue.init_(k)\\n# param_1 = MyCircularQueue.en_queue(value)\\n# param_2 = MyCircularQueue.de_queue()\\n# param_3 = MyCircularQueue.front()\\n# param_4 = MyCircularQueue.rear()\\n# param_5 = MyCircularQueue.is_empty()\\n# param_6 = MyCircularQueue.is_full()\\n\\n# MyCircularQueue.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_circular_queue_init_(K :: integer()) -> any().\\nmy_circular_queue_init_(K) ->\\n  .\\n\\n-spec my_circular_queue_en_queue(Value :: integer()) -> boolean().\\nmy_circular_queue_en_queue(Value) ->\\n  .\\n\\n-spec my_circular_queue_de_queue() -> boolean().\\nmy_circular_queue_de_queue() ->\\n  .\\n\\n-spec my_circular_queue_front() -> integer().\\nmy_circular_queue_front() ->\\n  .\\n\\n-spec my_circular_queue_rear() -> integer().\\nmy_circular_queue_rear() ->\\n  .\\n\\n-spec my_circular_queue_is_empty() -> boolean().\\nmy_circular_queue_is_empty() ->\\n  .\\n\\n-spec my_circular_queue_is_full() -> boolean().\\nmy_circular_queue_is_full() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_circular_queue_init_(K),\\n%% Param_1 = my_circular_queue_en_queue(Value),\\n%% Param_2 = my_circular_queue_de_queue(),\\n%% Param_3 = my_circular_queue_front(),\\n%% Param_4 = my_circular_queue_rear(),\\n%% Param_5 = my_circular_queue_is_empty(),\\n%% Param_6 = my_circular_queue_is_full(),\\n\\n%% my_circular_queue_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyCircularQueue(_k: Int) {\\n\\n    def enQueue(value: Int): Boolean = {\\n        \\n    }\\n\\n    def deQueue(): Boolean = {\\n        \\n    }\\n\\n    def Front(): Int = {\\n        \\n    }\\n\\n    def Rear(): Int = {\\n        \\n    }\\n\\n    def isEmpty(): Boolean = {\\n        \\n    }\\n\\n    def isFull(): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyCircularQueue object will be instantiated and called as such:\\n * val obj = new MyCircularQueue(k)\\n * val param_1 = obj.enQueue(value)\\n * val param_2 = obj.deQueue()\\n * val param_3 = obj.Front()\\n * val param_4 = obj.Rear()\\n * val param_5 = obj.isEmpty()\\n * val param_6 = obj.isFull()\\n */'}\n",
            "Done!304\n",
            "design-circular-deque 859\n",
            "{'id': 859, 'name': 'design-circular-deque', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/design-circular-deque/', 'task_description': 'Design your implementation of the circular double-ended queue (deque). Implement the `MyCircularDeque` class: `MyCircularDeque(int k)` Initializes the deque with a maximum size of `k`. `boolean insertFront()` Adds an item at the front of Deque. Returns `true` if the operation is successful, or `false` otherwise. `boolean insertLast()` Adds an item at the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise. `boolean deleteFront()` Deletes an item from the front of Deque. Returns `true` if the operation is successful, or `false` otherwise. `boolean deleteLast()` Deletes an item from the rear of Deque. Returns `true` if the operation is successful, or `false` otherwise. `int getFront()` Returns the front item from the Deque. Returns `-1` if the deque is empty. `int getRear()` Returns the last item from Deque. Returns `-1` if the deque is empty. `boolean isEmpty()` Returns `true` if the deque is empty, or `false` otherwise. `boolean isFull()` Returns `true` if the deque is full, or `false` otherwise. **Example 1:** ``` **Input** [\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"] [[3], [1], [2], [3], [4], [], [], [], [4], []] **Output** [null, true, true, true, false, 2, true, true, true, 4] **Explanation** MyCircularDeque myCircularDeque = new MyCircularDeque(3); myCircularDeque.insertLast(1); // return True myCircularDeque.insertLast(2); // return True myCircularDeque.insertFront(3); // return True myCircularDeque.insertFront(4); // return False, the queue is full. myCircularDeque.getRear(); // return 2 myCircularDeque.isFull(); // return True myCircularDeque.deleteLast(); // return True myCircularDeque.insertFront(4); // return True myCircularDeque.getFront(); // return 4 ``` **Constraints:** `1 <= k <= 1000` `0 <= value <= 1000` At most `2000` calls will be made to `insertFront`, `insertLast`, `deleteFront`, `deleteLast`, `getFront`, `getRear`, `isEmpty`, `isFull`.', 'test_case': [], 'elixir_template': 'defmodule MyCircularDeque do\\n  @spec init_(k :: integer) :: any\\n  def init_(k) do\\n    \\n  end\\n\\n  @spec insert_front(value :: integer) :: boolean\\n  def insert_front(value) do\\n    \\n  end\\n\\n  @spec insert_last(value :: integer) :: boolean\\n  def insert_last(value) do\\n    \\n  end\\n\\n  @spec delete_front() :: boolean\\n  def delete_front() do\\n    \\n  end\\n\\n  @spec delete_last() :: boolean\\n  def delete_last() do\\n    \\n  end\\n\\n  @spec get_front() :: integer\\n  def get_front() do\\n    \\n  end\\n\\n  @spec get_rear() :: integer\\n  def get_rear() do\\n    \\n  end\\n\\n  @spec is_empty() :: boolean\\n  def is_empty() do\\n    \\n  end\\n\\n  @spec is_full() :: boolean\\n  def is_full() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyCircularDeque.init_(k)\\n# param_1 = MyCircularDeque.insert_front(value)\\n# param_2 = MyCircularDeque.insert_last(value)\\n# param_3 = MyCircularDeque.delete_front()\\n# param_4 = MyCircularDeque.delete_last()\\n# param_5 = MyCircularDeque.get_front()\\n# param_6 = MyCircularDeque.get_rear()\\n# param_7 = MyCircularDeque.is_empty()\\n# param_8 = MyCircularDeque.is_full()\\n\\n# MyCircularDeque.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_circular_deque_init_(K :: integer()) -> any().\\nmy_circular_deque_init_(K) ->\\n  .\\n\\n-spec my_circular_deque_insert_front(Value :: integer()) -> boolean().\\nmy_circular_deque_insert_front(Value) ->\\n  .\\n\\n-spec my_circular_deque_insert_last(Value :: integer()) -> boolean().\\nmy_circular_deque_insert_last(Value) ->\\n  .\\n\\n-spec my_circular_deque_delete_front() -> boolean().\\nmy_circular_deque_delete_front() ->\\n  .\\n\\n-spec my_circular_deque_delete_last() -> boolean().\\nmy_circular_deque_delete_last() ->\\n  .\\n\\n-spec my_circular_deque_get_front() -> integer().\\nmy_circular_deque_get_front() ->\\n  .\\n\\n-spec my_circular_deque_get_rear() -> integer().\\nmy_circular_deque_get_rear() ->\\n  .\\n\\n-spec my_circular_deque_is_empty() -> boolean().\\nmy_circular_deque_is_empty() ->\\n  .\\n\\n-spec my_circular_deque_is_full() -> boolean().\\nmy_circular_deque_is_full() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_circular_deque_init_(K),\\n%% Param_1 = my_circular_deque_insert_front(Value),\\n%% Param_2 = my_circular_deque_insert_last(Value),\\n%% Param_3 = my_circular_deque_delete_front(),\\n%% Param_4 = my_circular_deque_delete_last(),\\n%% Param_5 = my_circular_deque_get_front(),\\n%% Param_6 = my_circular_deque_get_rear(),\\n%% Param_7 = my_circular_deque_is_empty(),\\n%% Param_8 = my_circular_deque_is_full(),\\n\\n%% my_circular_deque_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyCircularDeque(_k: Int) {\\n\\n    def insertFront(value: Int): Boolean = {\\n        \\n    }\\n\\n    def insertLast(value: Int): Boolean = {\\n        \\n    }\\n\\n    def deleteFront(): Boolean = {\\n        \\n    }\\n\\n    def deleteLast(): Boolean = {\\n        \\n    }\\n\\n    def getFront(): Int = {\\n        \\n    }\\n\\n    def getRear(): Int = {\\n        \\n    }\\n\\n    def isEmpty(): Boolean = {\\n        \\n    }\\n\\n    def isFull(): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyCircularDeque object will be instantiated and called as such:\\n * val obj = new MyCircularDeque(k)\\n * val param_1 = obj.insertFront(value)\\n * val param_2 = obj.insertLast(value)\\n * val param_3 = obj.deleteFront()\\n * val param_4 = obj.deleteLast()\\n * val param_5 = obj.getFront()\\n * val param_6 = obj.getRear()\\n * val param_7 = obj.isEmpty()\\n * val param_8 = obj.isFull()\\n */'}\n",
            "Done!305\n",
            "masking-personal-information 858\n",
            "{'id': 858, 'name': 'masking-personal-information', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/masking-personal-information/', 'task_description': 'You are given a personal information string `s`, representing either an **email address** or a **phone number**. Return _the **masked** personal information using the below rules_. **Email address:** An email address is: A **name** consisting of uppercase and lowercase English letters, followed by The `\\'@\\'` symbol, followed by The **domain** consisting of uppercase and lowercase English letters with a dot `\\'.\\'` somewhere in the middle (not the first or last character). To mask an email: The uppercase letters in the **name** and **domain** must be converted to lowercase letters. The middle letters of the **name** (i.e., all but the first and last letters) must be replaced by 5 asterisks `\"*****\"`. **Phone number:** A phone number is formatted as follows: The phone number contains 10-13 digits. The last 10 digits make up the **local number**. The remaining 0-3 digits, in the beginning, make up the **country code**. **Separation characters** from the set `{\\'+\\', \\'-\\', \\'(\\', \\')\\', \\' \\'}` separate the above digits in some way. To mask a phone number: Remove all **separation characters**. The masked phone number should have the form: `\"***-***-XXXX\"` if the country code has 0 digits. `\"+*-***-***-XXXX\"` if the country code has 1 digit. `\"+**-***-***-XXXX\"` if the country code has 2 digits. `\"+***-***-***-XXXX\"` if the country code has 3 digits. `\"XXXX\"` is the last 4 digits of the **local number**. **Example 1:** ``` **Input:** s = \"LeetCode@LeetCode.com\" **Output:** \"l*****e@leetcode.com\" **Explanation:** s is an email address. The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks. ``` **Example 2:** ``` **Input:** s = \"AB@qq.com\" **Output:** \"a*****b@qq.com\" **Explanation:** s is an email address. The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks. Note that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle. ``` **Example 3:** ``` **Input:** s = \"1(234)567-890\" **Output:** \"***-***-7890\" **Explanation:** s is a phone number. There are 10 digits, so the local number is 10 digits and the country code is 0 digits. Thus, the resulting masked number is \"***-***-7890\". ``` **Constraints:** `s` is either a **valid** email or a phone number. If `s` is an email: `8 <= s.length <= 40` `s` consists of uppercase and lowercase English letters and exactly one `\\'@\\'` symbol and `\\'.\\'` symbol. If `s` is a phone number: `10 <= s.length <= 20` `s` consists of digits, spaces, and the symbols `\\'(\\'`, `\\')\\'`, `\\'-\\'`, and `\\'+\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"LeetCode@LeetCode.com\"', 'output': '\"l*****e@leetcode.com\" Explanation: s is an email address.\\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.'}, {'label': 'Example 2', 'input': 's = \"AB@qq.com\"', 'output': '\"a*****b@qq.com\" Explanation: s is an email address.\\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\\nNote that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle.'}, {'label': 'Example 3', 'input': 's = \"1(234)567-890\"', 'output': '\"***-***-7890\" Explanation: s is a phone number.\\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\\nThus, the resulting masked number is \"***-***-7890\". Constraints: s is either a valid email or a phone number. If s is an email: 8 <= s.length <= 40 s consists of uppercase and lowercase English letters and exactly one \\'@\\' symbol and \\'.\\' symbol. If s is a phone number: 10 <= s.length <= 20 s consists of digits, spaces, and the symbols \\'(\\' , \\')\\' , \\'-\\' , and \\'+\\' .'}], 'elixir_template': 'defmodule Solution do\\n  @spec mask_pii(s :: String.t) :: String.t\\n  def mask_pii(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec mask_pii(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nmask_pii(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def maskPII(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!306\n",
            "positions-of-large-groups 857\n",
            "{'id': 857, 'name': 'positions-of-large-groups', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/positions-of-large-groups/', 'task_description': 'In a string `s` of lowercase letters, these letters form consecutive groups of the same character. For example, a string like `s = \"abbxxxxzyy\"` has the groups `\"a\"`, `\"bb\"`, `\"xxxx\"`, `\"z\"`, and `\"yy\"`. A group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `\"xxxx\"` has the interval `[3,6]`. A group is considered **large** if it has 3 or more characters. Return _the intervals of every **large** group sorted in **increasing order by start index**_. **Example 1:** ``` **Input:** s = \"abbxxxxzzy\" **Output:** [[3,6]] **Explanation:** `\"xxxx\" is the only `large group with start index 3 and end index 6. ``` **Example 2:** ``` **Input:** s = \"abc\" **Output:** [] **Explanation:** We have groups \"a\", \"b\", and \"c\", none of which are large groups. ``` **Example 3:** ``` **Input:** s = \"abcdddeeeeaabbbcd\" **Output:** [[3,5],[6,9],[12,14]] **Explanation:** The large groups are \"ddd\", \"eeee\", and \"bbb\". ``` **Constraints:** `1 <= s.length <= 1000` `s` contains lowercase English letters only.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abbxxxxzzy\"', 'output': '[[3,6]] Explanation: \"xxxx\" is the only large group with start index 3 and end index 6.'}, {'label': 'Example 2', 'input': 's = \"abc\"', 'output': '[] Explanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.'}, {'label': 'Example 3', 'input': 's = \"abcdddeeeeaabbbcd\"', 'output': '[[3,5],[6,9],[12,14]] Explanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec large_group_positions(s :: String.t) :: [[integer]]\\n  def large_group_positions(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec large_group_positions(S :: unicode:unicode_binary()) -> [[integer()]].\\nlarge_group_positions(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def largeGroupPositions(s: String): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!307\n",
            "consecutive-numbers-sum 856\n",
            "{'id': 856, 'name': 'consecutive-numbers-sum', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/consecutive-numbers-sum/', 'task_description': 'Given an integer `n`, return _the number of ways you can write _`n`_ as the sum of consecutive positive integers._ **Example 1:** ``` **Input:** n = 5 **Output:** 2 **Explanation:** 5 = 2 + 3 ``` **Example 2:** ``` **Input:** n = 9 **Output:** 3 **Explanation:** 9 = 4 + 5 = 2 + 3 + 4 ``` **Example 3:** ``` **Input:** n = 15 **Output:** 4 **Explanation:** 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5 ``` **Constraints:** `1 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 5', 'output': '2 Explanation: 5 = 2 + 3'}, {'label': 'Example 2', 'input': 'n = 9', 'output': '3 Explanation: 9 = 4 + 5 = 2 + 3 + 4'}, {'label': 'Example 3', 'input': 'n = 15', 'output': '4 Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5'}], 'elixir_template': 'defmodule Solution do\\n  @spec consecutive_numbers_sum(n :: integer) :: integer\\n  def consecutive_numbers_sum(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec consecutive_numbers_sum(N :: integer()) -> integer().\\nconsecutive_numbers_sum(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def consecutiveNumbersSum(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!308\n",
            "count-unique-characters-of-all-substrings-of-a-given-string 855\n",
            "{'id': 855, 'name': 'count-unique-characters-of-all-substrings-of-a-given-string', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/', 'task_description': 'Let\\'s define a function `countUniqueChars(s)` that returns the number of unique characters in `s`. For example, calling `countUniqueChars(s)` if `s = \"LEETCODE\"` then `\"L\"`, `\"T\"`, `\"C\"`, `\"O\"`, `\"D\"` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`. Given a string `s`, return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. The test cases are generated such that the answer fits in a 32-bit integer. Notice that some substrings can be repeated so in this case you have to count the repeated ones too. **Example 1:** ``` **Input:** s = \"ABC\" **Output:** 10 **Explanation: **All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\". Every substring is composed with only unique letters. Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10 ``` **Example 2:** ``` **Input:** s = \"ABA\" **Output:** 8 **Explanation: **The same as example 1, except `countUniqueChars`(\"ABA\") = 1. ``` **Example 3:** ``` **Input:** s = \"LEETCODE\" **Output:** 92 ``` **Constraints:** `1 <= s.length <= 105` `s` consists of uppercase English letters only.', 'test_case': [{'label': 'Example 1', 'input': 's = \"ABC\"', 'output': '10 Explanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\\nEvery substring is composed with only unique letters.\\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10'}, {'label': 'Example 2', 'input': 's = \"ABA\"', 'output': '8 Explanation: The same as example 1, except countUniqueChars (\"ABA\") = 1.'}, {'label': 'Example 3', 'input': 's = \"LEETCODE\"', 'output': '92'}], 'elixir_template': 'defmodule Solution do\\n  @spec unique_letter_string(s :: String.t) :: integer\\n  def unique_letter_string(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec unique_letter_string(S :: unicode:unicode_binary()) -> integer().\\nunique_letter_string(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def uniqueLetterString(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!309\n",
            "making-a-large-island 854\n",
            "{'id': 854, 'name': 'making-a-large-island', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/making-a-large-island/', 'task_description': \"You are given an `n x n` binary matrix `grid`. You are allowed to change **at most one** `0` to be `1`. Return _the size of the largest **island** in_ `grid` _after applying this operation_. An **island** is a 4-directionally connected group of `1`s. **Example 1:** ``` **Input:** grid = [[1,0],[0,1]] **Output:** 3 **Explanation:** Change one 0 to 1 and connect two 1s, then we get an island with area = 3. ``` **Example 2:** ``` **Input:** grid = [[1,1],[1,0]] **Output:** 4 **Explanation: **Change the 0 to 1 and make the island bigger, only one island with area = 4. ``` **Example 3:** ``` **Input:** grid = [[1,1],[1,1]] **Output:** 4 **Explanation:** Can't change any 0 to 1, only one island with area = 4. ``` **Constraints:** `n == grid.length` `n == grid[i].length` `1 <= n <= 500` `grid[i][j]` is either `0` or `1`.\", 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,0],[0,1]]', 'output': '3 Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.'}, {'label': 'Example 2', 'input': 'grid = [[1,1],[1,0]]', 'output': '4 Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.'}, {'label': 'Example 3', 'input': 'grid = [[1,1],[1,1]]', 'output': \"4 Explanation: Can't change any 0 to 1, only one island with area = 4. Constraints: n == grid.length n == grid[i].length 1 <= n <= 500 grid[i][j] is either 0 or 1 .\"}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_island(grid :: [[integer]]) :: integer\\n  def largest_island(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_island(Grid :: [[integer()]]) -> integer().\\nlargest_island(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestIsland(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!310\n",
            "most-profit-assigning-work 853\n",
            "{'id': 853, 'name': 'most-profit-assigning-work', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/most-profit-assigning-work/', 'task_description': 'You have `n` jobs and `m` workers. You are given three arrays: `difficulty`, `profit`, and `worker` where: `difficulty[i]` and `profit[i]` are the difficulty and the profit of the `ith` job, and `worker[j]` is the ability of `jth` worker (i.e., the `jth` worker can only complete a job with difficulty at most `worker[j]`). Every worker can be assigned **at most one job**, but one job can be **completed multiple times**. For example, if three workers attempt the same job that pays `$1`, then the total profit will be `$3`. If a worker cannot complete any job, their profit is `$0`. Return the maximum profit we can achieve after assigning the workers to the jobs. **Example 1:** ``` **Input:** difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7] **Output:** 100 **Explanation:** Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately. ``` **Example 2:** ``` **Input:** difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25] **Output:** 0 ``` **Constraints:** `n == difficulty.length` `n == profit.length` `m == worker.length` `1 <= n, m <= 104` `1 <= difficulty[i], profit[i], worker[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]', 'output': '100 Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.'}, {'label': 'Example 2', 'input': 'difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]', 'output': '0 Constraints: n == difficulty.length n == profit.length m == worker.length 1 <= n, m <= 10 4 1 <= difficulty[i], profit[i], worker[i] <= 10 5'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_profit_assignment(difficulty :: [integer], profit :: [integer], worker :: [integer]) :: integer\\n  def max_profit_assignment(difficulty, profit, worker) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_profit_assignment(Difficulty :: [integer()], Profit :: [integer()], Worker :: [integer()]) -> integer().\\nmax_profit_assignment(Difficulty, Profit, Worker) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProfitAssignment(difficulty: Array[Int], profit: Array[Int], worker: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!311\n",
            "friends-of-appropriate-ages 852\n",
            "{'id': 852, 'name': 'friends-of-appropriate-ages', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/friends-of-appropriate-ages/', 'task_description': 'There are `n` persons on a social media website. You are given an integer array `ages` where `ages[i]` is the age of the `ith` person. A Person `x` will not send a friend request to a person `y` (`x != y`) if any of the following conditions is true: `age[y] <= 0.5 * age[x] + 7` `age[y] > age[x]` `age[y] > 100 && age[x] < 100` Otherwise, `x` will send a friend request to `y`. Note that if `x` sends a request to `y`, `y` will not necessarily send a request to `x`. Also, a person will not send a friend request to themself. Return _the total number of friend requests made_. **Example 1:** ``` **Input:** ages = [16,16] **Output:** 2 **Explanation:** 2 people friend request each other. ``` **Example 2:** ``` **Input:** ages = [16,17,18] **Output:** 2 **Explanation:** Friend requests are made 17 -> 16, 18 -> 17. ``` **Example 3:** ``` **Input:** ages = [20,30,100,110,120] **Output:** 3 **Explanation:** Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100. ``` **Constraints:** `n == ages.length` `1 <= n <= 2 * 104` `1 <= ages[i] <= 120`', 'test_case': [{'label': 'Example 1', 'input': 'ages = [16,16]', 'output': '2 Explanation: 2 people friend request each other.'}, {'label': 'Example 2', 'input': 'ages = [16,17,18]', 'output': '2 Explanation: Friend requests are made 17 -> 16, 18 -> 17.'}, {'label': 'Example 3', 'input': 'ages = [20,30,100,110,120]', 'output': '3 Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100. Constraints: n == ages.length 1 <= n <= 2 * 10 4 1 <= ages[i] <= 120'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_friend_requests(ages :: [integer]) :: integer\\n  def num_friend_requests(ages) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_friend_requests(Ages :: [integer()]) -> integer().\\nnum_friend_requests(Ages) ->\\n  .', 'scala_template': 'object Solution {\\n    def numFriendRequests(ages: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!312\n",
            "goat-latin 851\n",
            "{'id': 851, 'name': 'goat-latin', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/goat-latin/', 'task_description': 'You are given a string `sentence` that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only. We would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows: If a word begins with a vowel (`\\'a\\'`, `\\'e\\'`, `\\'i\\'`, `\\'o\\'`, or `\\'u\\'`), append `\"ma\"` to the end of the word. For example, the word `\"apple\"` becomes `\"applema\"`. If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add `\"ma\"`. For example, the word `\"goat\"` becomes `\"oatgma\"`. Add one letter `\\'a\\'` to the end of each word per its word index in the sentence, starting with `1`. For example, the first word gets `\"a\"` added to the end, the second word gets `\"aa\"` added to the end, and so on. Return_ the final sentence representing the conversion from sentence to Goat Latin_. **Example 1:** ``` **Input:** sentence = \"I speak Goat Latin\" **Output:** \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\" ``` **Example 2:** ``` **Input:** sentence = \"The quick brown fox jumped over the lazy dog\" **Output:** \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\" ``` **Constraints:** `1 <= sentence.length <= 150` `sentence` consists of English letters and spaces. `sentence` has no leading or trailing spaces. All the words in `sentence` are separated by a single space.', 'test_case': [{'label': 'Example 1', 'input': 'sentence = \"I speak Goat Latin\"', 'output': '\"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"'}, {'label': 'Example 2', 'input': 'sentence = \"The quick brown fox jumped over the lazy dog\"', 'output': '\"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec to_goat_latin(sentence :: String.t) :: String.t\\n  def to_goat_latin(sentence) do\\n    \\n  end\\nend', 'erlang_template': '-spec to_goat_latin(Sentence :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nto_goat_latin(Sentence) ->\\n  .', 'scala_template': 'object Solution {\\n    def toGoatLatin(sentence: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!313\n",
            "binary-trees-with-factors 843\n",
            "{'id': 843, 'name': 'binary-trees-with-factors', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-trees-with-factors/', 'task_description': \"Given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`. We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children. Return _the number of binary trees we can make_. The answer may be too large so return the answer **modulo** `109 + 7`. **Example 1:** ``` **Input:** arr = [2,4] **Output:** 3 **Explanation:** We can make these trees: `[2], [4], [4, 2, 2]` ``` **Example 2:** ``` **Input:** arr = [2,4,5,10] **Output:** 7 **Explanation:** We can make these trees: `[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]`. ``` **Constraints:** `1 <= arr.length <= 1000` `2 <= arr[i] <= 109` All the values of `arr` are **unique**.\", 'test_case': [{'label': 'Example 1', 'input': 'arr = [2,4]', 'output': '3 Explanation: We can make these trees: [2], [4], [4, 2, 2]'}, {'label': 'Example 2', 'input': 'arr = [2,4,5,10]', 'output': '7 Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2] .'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_factored_binary_trees(arr :: [integer]) :: integer\\n  def num_factored_binary_trees(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_factored_binary_trees(Arr :: [integer()]) -> integer().\\nnum_factored_binary_trees(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def numFactoredBinaryTrees(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!314\n",
            "card-flipping-game 842\n",
            "{'id': 842, 'name': 'card-flipping-game', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/card-flipping-game/', 'task_description': 'You are given two **0-indexed** integer arrays `fronts` and `backs` of length `n`, where the `ith` card has the positive integer `fronts[i]` printed on the front and `backs[i]` printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero). After flipping the cards, an integer is considered **good** if it is facing down on some card and **not** facing up on any card. Return _the minimum possible good integer after flipping the cards_. If there are no good integers, return `0`. **Example 1:** ``` **Input:** fronts = [1,2,4,4,7], backs = [1,3,4,1,3] **Output:** 2 **Explanation:** If we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3]. 2 is the minimum good integer as it appears facing down but not facing up. It can be shown that 2 is the minimum possible good integer obtainable after flipping some cards. ``` **Example 2:** ``` **Input:** fronts = [1], backs = [1] **Output:** 0 **Explanation:** There are no good integers no matter how we flip the cards, so we return 0. ``` **Constraints:** `n == fronts.length == backs.length` `1 <= n <= 1000` `1 <= fronts[i], backs[i] <= 2000`', 'test_case': [{'label': 'Example 1', 'input': 'fronts = [1,2,4,4,7], backs = [1,3,4,1,3]', 'output': '2 Explanation: If we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\\n2 is the minimum good integer as it appears facing down but not facing up.\\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.'}, {'label': 'Example 2', 'input': 'fronts = [1], backs = [1]', 'output': '0 Explanation: There are no good integers no matter how we flip the cards, so we return 0. Constraints: n == fronts.length == backs.length 1 <= n <= 1000 1 <= fronts[i], backs[i] <= 2000'}], 'elixir_template': 'defmodule Solution do\\n  @spec flipgame(fronts :: [integer], backs :: [integer]) :: integer\\n  def flipgame(fronts, backs) do\\n    \\n  end\\nend', 'erlang_template': '-spec flipgame(Fronts :: [integer()], Backs :: [integer()]) -> integer().\\nflipgame(Fronts, Backs) ->\\n  .', 'scala_template': 'object Solution {\\n    def flipgame(fronts: Array[Int], backs: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!315\n",
            "shortest-distance-to-a-character 841\n",
            "{'id': 841, 'name': 'shortest-distance-to-a-character', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/shortest-distance-to-a-character/', 'task_description': 'Given a string `s` and a character `c` that occurs in `s`, return _an array of integers _`answer`_ where _`answer.length == s.length`_ and _`answer[i]`_ is the **distance** from index _`i`_ to the **closest** occurrence of character _`c`_ in _`s`. The **distance** between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function. **Example 1:** ``` **Input:** s = \"loveleetcode\", c = \"e\" **Output:** [3,2,1,0,1,0,0,1,2,2,1,0] **Explanation:** The character \\'e\\' appears at indices 3, 5, 6, and 11 (0-indexed). The closest occurrence of \\'e\\' for index 0 is at index 3, so the distance is abs(0 - 3) = 3. The closest occurrence of \\'e\\' for index 1 is at index 3, so the distance is abs(1 - 3) = 2. For index 4, there is a tie between the \\'e\\' at index 3 and the \\'e\\' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1. The closest occurrence of \\'e\\' for index 8 is at index 6, so the distance is abs(8 - 6) = 2. ``` **Example 2:** ``` **Input:** s = \"aaab\", c = \"b\" **Output:** [3,2,1,0] ``` **Constraints:** `1 <= s.length <= 104` `s[i]` and `c` are lowercase English letters. It is guaranteed that `c` occurs at least once in `s`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"loveleetcode\", c = \"e\"', 'output': \"[3,2,1,0,1,0,0,1,2,2,1,0] Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\"}, {'label': 'Example 2', 'input': 's = \"aaab\", c = \"b\"', 'output': '[3,2,1,0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_to_char(s :: String.t, c :: char) :: [integer]\\n  def shortest_to_char(s, c) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_to_char(S :: unicode:unicode_binary(), C :: char()) -> [integer()].\\nshortest_to_char(S, C) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestToChar(s: String, c: Char): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!316\n",
            "short-encoding-of-words 839\n",
            "{'id': 839, 'name': 'short-encoding-of-words', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/short-encoding-of-words/', 'task_description': 'A **valid encoding** of an array of `words` is any reference string `s` and array of indices `indices` such that: `words.length == indices.length` The reference string `s` ends with the `\\'#\\'` character. For each index `indices[i]`, the **substring** of `s` starting from `indices[i]` and up to (but not including) the next `\\'#\\'` character is equal to `words[i]`. Given an array of `words`, return _the **length of the shortest reference string** _`s`_ possible of any **valid encoding** of _`words`_._ **Example 1:** ``` **Input:** words = [\"time\", \"me\", \"bell\"] **Output:** 10 **Explanation:** A valid encoding would be s = `\"time#bell#\" and indices = [0, 2, 5`]. words[0] = \"time\", the substring of s starting from indices[0] = 0 to the next \\'#\\' is underlined in \"time#bell#\" words[1] = \"me\", the substring of s starting from indices[1] = 2 to the next \\'#\\' is underlined in \"time#bell#\" words[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next \\'#\\' is underlined in \"time#bell#\" ``` **Example 2:** ``` **Input:** words = [\"t\"] **Output:** 2 **Explanation:** A valid encoding would be s = \"t#\" and indices = [0]. ``` **Constraints:** `1 <= words.length <= 2000` `1 <= words[i].length <= 7` `words[i]` consists of only lowercase letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"time\", \"me\", \"bell\"]', 'output': '10 Explanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5 ].\\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next \\'#\\' is underlined in \" time #bell#\"\\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next \\'#\\' is underlined in \"ti me #bell#\"\\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next \\'#\\' is underlined in \"time# bell #\"'}, {'label': 'Example 2', 'input': 'words = [\"t\"]', 'output': '2 Explanation: A valid encoding would be s = \"t#\" and indices = [0].'}], 'elixir_template': 'defmodule Solution do\\n  @spec minimum_length_encoding(words :: [String.t]) :: integer\\n  def minimum_length_encoding(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec minimum_length_encoding(Words :: [unicode:unicode_binary()]) -> integer().\\nminimum_length_encoding(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def minimumLengthEncoding(words: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!317\n",
            "design-linked-list 838\n",
            "{'id': 838, 'name': 'design-linked-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/design-linked-list/', 'task_description': 'Design your implementation of the linked list. You can choose to use a singly or doubly linked list. A node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are **0-indexed**. Implement the `MyLinkedList` class: `MyLinkedList()` Initializes the `MyLinkedList` object. `int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`. `void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. `void addAtTail(int val)` Append a node of value `val` as the last element of the linked list. `void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node **will not be inserted**. `void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid. **Example 1:** ``` **Input** [\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"] [[], [1], [3], [1, 2], [1], [1], [1]] **Output** [null, null, null, null, 2, null, 3] **Explanation** MyLinkedList myLinkedList = new MyLinkedList(); myLinkedList.addAtHead(1); myLinkedList.addAtTail(3); myLinkedList.addAtIndex(1, 2); // linked list becomes 1->2->3 myLinkedList.get(1); // return 2 myLinkedList.deleteAtIndex(1); // now the linked list is 1->3 myLinkedList.get(1); // return 3 ``` **Constraints:** `0 <= index, val <= 1000` Please do not use the built-in LinkedList library. At most `2000` calls will be made to `get`, `addAtHead`, `addAtTail`, `addAtIndex` and `deleteAtIndex`.', 'test_case': [], 'elixir_template': 'defmodule MyLinkedList do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec get(index :: integer) :: integer\\n  def get(index) do\\n    \\n  end\\n\\n  @spec add_at_head(val :: integer) :: any\\n  def add_at_head(val) do\\n    \\n  end\\n\\n  @spec add_at_tail(val :: integer) :: any\\n  def add_at_tail(val) do\\n    \\n  end\\n\\n  @spec add_at_index(index :: integer, val :: integer) :: any\\n  def add_at_index(index, val) do\\n    \\n  end\\n\\n  @spec delete_at_index(index :: integer) :: any\\n  def delete_at_index(index) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyLinkedList.init_()\\n# param_1 = MyLinkedList.get(index)\\n# MyLinkedList.add_at_head(val)\\n# MyLinkedList.add_at_tail(val)\\n# MyLinkedList.add_at_index(index, val)\\n# MyLinkedList.delete_at_index(index)\\n\\n# MyLinkedList.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_linked_list_init_() -> any().\\nmy_linked_list_init_() ->\\n  .\\n\\n-spec my_linked_list_get(Index :: integer()) -> integer().\\nmy_linked_list_get(Index) ->\\n  .\\n\\n-spec my_linked_list_add_at_head(Val :: integer()) -> any().\\nmy_linked_list_add_at_head(Val) ->\\n  .\\n\\n-spec my_linked_list_add_at_tail(Val :: integer()) -> any().\\nmy_linked_list_add_at_tail(Val) ->\\n  .\\n\\n-spec my_linked_list_add_at_index(Index :: integer(), Val :: integer()) -> any().\\nmy_linked_list_add_at_index(Index, Val) ->\\n  .\\n\\n-spec my_linked_list_delete_at_index(Index :: integer()) -> any().\\nmy_linked_list_delete_at_index(Index) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_linked_list_init_(),\\n%% Param_1 = my_linked_list_get(Index),\\n%% my_linked_list_add_at_head(Val),\\n%% my_linked_list_add_at_tail(Val),\\n%% my_linked_list_add_at_index(Index, Val),\\n%% my_linked_list_delete_at_index(Index),\\n\\n%% my_linked_list_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyLinkedList() {\\n\\n    def get(index: Int): Int = {\\n        \\n    }\\n\\n    def addAtHead(`val`: Int): Unit = {\\n        \\n    }\\n\\n    def addAtTail(`val`: Int): Unit = {\\n        \\n    }\\n\\n    def addAtIndex(index: Int, `val`: Int): Unit = {\\n        \\n    }\\n\\n    def deleteAtIndex(index: Int): Unit = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyLinkedList object will be instantiated and called as such:\\n * val obj = new MyLinkedList()\\n * val param_1 = obj.get(index)\\n * obj.addAtHead(`val`)\\n * obj.addAtTail(`val`)\\n * obj.addAtIndex(index,`val`)\\n * obj.deleteAtIndex(index)\\n */'}\n",
            "Done!318\n",
            "most-common-word 837\n",
            "{'id': 837, 'name': 'most-common-word', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/most-common-word/', 'task_description': 'Given a string `paragraph` and a string array of the banned words `banned`, return _the most frequent word that is not banned_. It is **guaranteed** there is **at least one word** that is not banned, and that the answer is **unique**. The words in `paragraph` are **case-insensitive** and the answer should be returned in **lowercase**. **Example 1:** ``` **Input:** paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"] **Output:** \"ball\" **Explanation:** \"hit\" occurs 3 times, but it is a banned word. \"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. Note that words in the paragraph are not case sensitive, that punctuation is ignored (even if adjacent to words, such as \"ball,\"), and that \"hit\" isn\\'t the answer even though it occurs more because it is banned. ``` **Example 2:** ``` **Input:** paragraph = \"a.\", banned = [] **Output:** \"a\" ``` **Constraints:** `1 <= paragraph.length <= 1000` paragraph consists of English letters, space `\\' \\'`, or one of the symbols: `\"!?\\',;.\"`. `0 <= banned.length <= 100` `1 <= banned[i].length <= 10` `banned[i]` consists of only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]', 'output': '\"ball\" Explanation: \"hit\" occurs 3 times, but it is a banned word.\\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \\nNote that words in the paragraph are not case sensitive,\\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \\nand that \"hit\" isn\\'t the answer even though it occurs more because it is banned.'}, {'label': 'Example 2', 'input': 'paragraph = \"a.\", banned = []', 'output': '\"a\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec most_common_word(paragraph :: String.t, banned :: [String.t]) :: String.t\\n  def most_common_word(paragraph, banned) do\\n    \\n  end\\nend', 'erlang_template': '-spec most_common_word(Paragraph :: unicode:unicode_binary(), Banned :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nmost_common_word(Paragraph, Banned) ->\\n  .', 'scala_template': 'object Solution {\\n    def mostCommonWord(paragraph: String, banned: Array[String]): String = {\\n        \\n    }\\n}'}\n",
            "Done!319\n",
            "race-car 836\n",
            "{'id': 836, 'name': 'race-car', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/race-car/', 'task_description': 'Your car starts at position `0` and speed `+1` on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions `\\'A\\'` (accelerate) and `\\'R\\'` (reverse): When you get an instruction `\\'A\\'`, your car does the following: `position += speed` `speed *= 2` When you get an instruction `\\'R\\'`, your car does the following: If your speed is positive then `speed = -1` otherwise `speed = 1` Your position stays the same. For example, after commands `\"AAR\"`, your car goes to positions `0 --> 1 --> 3 --> 3`, and your speed goes to `1 --> 2 --> 4 --> -1`. Given a target position `target`, return _the length of the shortest sequence of instructions to get there_. **Example 1:** ``` **Input:** target = 3 **Output:** 2 **Explanation:** The shortest instruction sequence is \"AA\". Your position goes from 0 --> 1 --> 3. ``` **Example 2:** ``` **Input:** target = 6 **Output:** 5 **Explanation:** The shortest instruction sequence is \"AAARA\". Your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6. ``` **Constraints:** `1 <= target <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'target = 3', 'output': '2 Explanation: The shortest instruction sequence is \"AA\".\\nYour position goes from 0 --> 1 --> 3.'}, {'label': 'Example 2', 'input': 'target = 6', 'output': '5 Explanation: The shortest instruction sequence is \"AAARA\".\\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.'}], 'elixir_template': 'defmodule Solution do\\n  @spec racecar(target :: integer) :: integer\\n  def racecar(target) do\\n    \\n  end\\nend', 'erlang_template': '-spec racecar(Target :: integer()) -> integer().\\nracecar(Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def racecar(target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!320\n",
            "linked-list-components 835\n",
            "{'id': 835, 'name': 'linked-list-components', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/linked-list-components/', 'task_description': 'You are given the `head` of a linked list containing unique integer values and an integer array `nums` that is a subset of the linked list values. Return _the number of connected components in _`nums`_ where two values are connected if they appear **consecutively** in the linked list_. **Example 1:** ``` **Input:** head = [0,1,2,3], nums = [0,1,3] **Output:** 2 **Explanation:** 0 and 1 are connected, so [0, 1] and [3] are the two connected components. ``` **Example 2:** ``` **Input:** head = [0,1,2,3,4], nums = [0,3,1,4] **Output:** 2 **Explanation:** 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components. ``` **Constraints:** The number of nodes in the linked list is `n`. `1 <= n <= 104` `0 <= Node.val < n` All the values `Node.val` are **unique**. `1 <= nums.length <= n` `0 <= nums[i] < n` All the values of `nums` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'head = [0,1,2,3], nums = [0,1,3]', 'output': '2 Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.'}, {'label': 'Example 2', 'input': 'head = [0,1,2,3,4], nums = [0,3,1,4]', 'output': '2 Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components. Constraints: The number of nodes in the linked list is n . 1 <= n <= 10 4 0 <= Node.val < n All the values Node.val are unique . 1 <= nums.length <= n 0 <= nums[i] < n All the values of nums are unique .'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec num_components(head :: ListNode.t | nil, nums :: [integer]) :: integer\\n  def num_components(head, nums) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec num_components(Head :: #list_node{} | null, Nums :: [integer()]) -> integer().\\nnum_components(Head, Nums) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def numComponents(head: ListNode, nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!321\n",
            "ambiguous-coordinates 834\n",
            "{'id': 834, 'name': 'ambiguous-coordinates', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/ambiguous-coordinates/', 'task_description': 'We had some 2-dimensional coordinates, like `\"(1, 3)\"` or `\"(2, 0.5)\"`. Then, we removed all commas, decimal points, and spaces and ended up with the string s. For example, `\"(1, 3)\"` becomes `s = \"(13)\"` and `\"(2, 0.5)\"` becomes `s = \"(205)\"`. Return _a list of strings representing all possibilities for what our original coordinates could have been_. Our original representation never had extraneous zeroes, so we never started with numbers like `\"00\"`, `\"0.0\"`, `\"0.00\"`, `\"1.0\"`, `\"001\"`, `\"00.01\"`, or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like `\".1\"`. The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.) **Example 1:** ``` **Input:** s = \"(123)\" **Output:** [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"] ``` **Example 2:** ``` **Input:** s = \"(0123)\" **Output:** [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"] **Explanation:** 0.0, 00, 0001 or 00.01 are not allowed. ``` **Example 3:** ``` **Input:** s = \"(00011)\" **Output:** [\"(0, 0.011)\",\"(0.001, 1)\"] ``` **Constraints:** `4 <= s.length <= 12` `s[0] == \\'(\\'` and `s[s.length - 1] == \\')\\'`. The rest of `s` are digits.', 'test_case': [{'label': 'Example 1', 'input': 's = \"(123)\"', 'output': '[\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]'}, {'label': 'Example 2', 'input': 's = \"(0123)\"', 'output': '[\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"] Explanation: 0.0, 00, 0001 or 00.01 are not allowed.'}, {'label': 'Example 3', 'input': 's = \"(00011)\"', 'output': '[\"(0, 0.011)\",\"(0.001, 1)\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec ambiguous_coordinates(s :: String.t) :: [String.t]\\n  def ambiguous_coordinates(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec ambiguous_coordinates(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nambiguous_coordinates(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def ambiguousCoordinates(s: String): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!322\n",
            "bus-routes 833\n",
            "{'id': 833, 'name': 'bus-routes', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/bus-routes/', 'task_description': 'You are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever. For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever. You will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only. Return _the least number of buses you must take to travel from _`source`_ to _`target`. Return `-1` if it is not possible. **Example 1:** ``` **Input:** routes = [[1,2,7],[3,6,7]], source = 1, target = 6 **Output:** 2 **Explanation:** The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6. ``` **Example 2:** ``` **Input:** routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12 **Output:** -1 ``` **Constraints:** `1 <= routes.length <= 500`. `1 <= routes[i].length <= 105` All the values of `routes[i]` are **unique**. `sum(routes[i].length) <= 105` `0 <= routes[i][j] < 106` `0 <= source, target < 106`', 'test_case': [{'label': 'Example 1', 'input': 'routes = [[1,2,7],[3,6,7]], source = 1, target = 6', 'output': '2 Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.'}, {'label': 'Example 2', 'input': 'routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12', 'output': '-1'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_buses_to_destination(routes :: [[integer]], source :: integer, target :: integer) :: integer\\n  def num_buses_to_destination(routes, source, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_buses_to_destination(Routes :: [[integer()]], Source :: integer(), Target :: integer()) -> integer().\\nnum_buses_to_destination(Routes, Source, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def numBusesToDestination(routes: Array[Array[Int]], source: Int, target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!323\n",
            "binary-tree-pruning 832\n",
            "{'id': 832, 'name': 'binary-tree-pruning', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-tree-pruning/', 'task_description': 'Given the `root` of a binary tree, return _the same tree where every subtree (of the given tree) not containing a _`1`_ has been removed_. A subtree of a node `node` is `node` plus every node that is a descendant of `node`. **Example 1:** ``` **Input:** root = [1,null,0,0,1] **Output:** [1,null,0,null,1] **Explanation:** Only the red nodes satisfy the property \"every subtree not containing a 1\". The diagram on the right represents the answer. ``` **Example 2:** ``` **Input:** root = [1,0,1,0,0,0,1] **Output:** [1,null,1,null,1] ``` **Example 3:** ``` **Input:** root = [1,1,0,1,1,0,1,0] **Output:** [1,1,0,1,1,null,1] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 200]`. `Node.val` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,0,0,1]', 'output': '[1,null,0,null,1] Explanation: Only the red nodes satisfy the property \"every subtree not containing a 1\".\\nThe diagram on the right represents the answer.'}, {'label': 'Example 2', 'input': 'root = [1,0,1,0,0,0,1]', 'output': '[1,null,1,null,1]'}, {'label': 'Example 3', 'input': 'root = [1,1,0,1,1,0,1,0]', 'output': '[1,1,0,1,1,null,1] Constraints: The number of nodes in the tree is in the range [1, 200] . Node.val is either 0 or 1 .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec prune_tree(root :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def prune_tree(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec prune_tree(Root :: #tree_node{} | null) -> #tree_node{} | null.\\nprune_tree(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def pruneTree(root: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!324\n",
            "largest-sum-of-averages 831\n",
            "{'id': 831, 'name': 'largest-sum-of-averages', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/largest-sum-of-averages/', 'task_description': 'You are given an integer array `nums` and an integer `k`. You can partition the array into **at most** `k` non-empty adjacent subarrays. The **score** of a partition is the sum of the averages of each subarray. Note that the partition must use every integer in `nums`, and that the score is not necessarily an integer. Return _the maximum **score** you can achieve of all the possible partitions_. Answers within `10-6` of the actual answer will be accepted. **Example 1:** ``` **Input:** nums = [9,1,2,3,9], k = 3 **Output:** 20.00000 **Explanation:** The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20. We could have also partitioned nums into [9, 1], [2], [3, 9], for example. That partition would lead to a score of 5 + 2 + 6 = 13, which is worse. ``` **Example 2:** ``` **Input:** nums = [1,2,3,4,5,6,7], k = 4 **Output:** 20.50000 ``` **Constraints:** `1 <= nums.length <= 100` `1 <= nums[i] <= 104` `1 <= k <= nums.length`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [9,1,2,3,9], k = 3', 'output': '20.00000 Explanation: The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4,5,6,7], k = 4', 'output': '20.50000'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_sum_of_averages(nums :: [integer], k :: integer) :: float\\n  def largest_sum_of_averages(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_sum_of_averages(Nums :: [integer()], K :: integer()) -> float().\\nlargest_sum_of_averages(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestSumOfAverages(nums: Array[Int], k: Int): Double = {\\n        \\n    }\\n}'}\n",
            "Done!325\n",
            "largest-triangle-area 830\n",
            "{'id': 830, 'name': 'largest-triangle-area', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/largest-triangle-area/', 'task_description': 'Given an array of points on the **X-Y** plane `points` where `points[i] = [xi, yi]`, return _the area of the largest triangle that can be formed by any three different points_. Answers within `10-5` of the actual answer will be accepted. **Example 1:** ``` **Input:** points = [[0,0],[0,1],[1,0],[0,2],[2,0]] **Output:** 2.00000 **Explanation:** The five points are shown in the above figure. The red triangle is the largest. ``` **Example 2:** ``` **Input:** points = [[1,0],[0,0],[0,1]] **Output:** 0.50000 ``` **Constraints:** `3 <= points.length <= 50` `-50 <= xi, yi <= 50` All the given points are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'points = [[0,0],[0,1],[1,0],[0,2],[2,0]]', 'output': '2.00000 Explanation: The five points are shown in the above figure. The red triangle is the largest.'}, {'label': 'Example 2', 'input': 'points = [[1,0],[0,0],[0,1]]', 'output': '0.50000'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_triangle_area(points :: [[integer]]) :: float\\n  def largest_triangle_area(points) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_triangle_area(Points :: [[integer()]]) -> float().\\nlargest_triangle_area(Points) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestTriangleArea(points: Array[Array[Int]]): Double = {\\n        \\n    }\\n}'}\n",
            "Done!326\n",
            "subdomain-visit-count 829\n",
            "{'id': 829, 'name': 'subdomain-visit-count', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/subdomain-visit-count/', 'task_description': 'A website domain `\"discuss.leetcode.com\"` consists of various subdomains. At the top level, we have `\"com\"`, at the next level, we have `\"leetcode.com\"` and at the lowest level, `\"discuss.leetcode.com\"`. When we visit a domain like `\"discuss.leetcode.com\"`, we will also visit the parent domains `\"leetcode.com\"` and `\"com\"` implicitly. A **count-paired domain** is a domain that has one of the two formats `\"rep d1.d2.d3\"` or `\"rep d1.d2\"` where `rep` is the number of visits to the domain and `d1.d2.d3` is the domain itself. For example, `\"9001 discuss.leetcode.com\"` is a **count-paired domain** that indicates that `discuss.leetcode.com` was visited `9001` times. Given an array of **count-paired domains** `cpdomains`, return _an array of the **count-paired domains** of each subdomain in the input_. You may return the answer in **any order**. **Example 1:** ``` **Input:** cpdomains = [\"9001 discuss.leetcode.com\"] **Output:** [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"] **Explanation:** We only have one website domain: \"discuss.leetcode.com\". As discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times. ``` **Example 2:** ``` **Input:** cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"] **Output:** [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"] **Explanation:** We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times. For the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times. ``` **Constraints:** `1 <= cpdomain.length <= 100` `1 <= cpdomain[i].length <= 100` `cpdomain[i]` follows either the `\"repi d1i.d2i.d3i\"` format or the `\"repi d1i.d2i\"` format. `repi` is an integer in the range `[1, 104]`. `d1i`, `d2i`, and `d3i` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'cpdomains = [\"9001 discuss.leetcode.com\"]', 'output': '[\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"] Explanation: We only have one website domain: \"discuss.leetcode.com\".\\nAs discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.'}, {'label': 'Example 2', 'input': 'cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]', 'output': '[\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"] Explanation: We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\\nFor the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.'}], 'elixir_template': 'defmodule Solution do\\n  @spec subdomain_visits(cpdomains :: [String.t]) :: [String.t]\\n  def subdomain_visits(cpdomains) do\\n    \\n  end\\nend', 'erlang_template': '-spec subdomain_visits(Cpdomains :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nsubdomain_visits(Cpdomains) ->\\n  .', 'scala_template': 'object Solution {\\n    def subdomainVisits(cpdomains: Array[String]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!327\n",
            "chalkboard-xor-game 828\n",
            "{'id': 828, 'name': 'chalkboard-xor-game', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/chalkboard-xor-game/', 'task_description': 'You are given an array of integers `nums` represents the numbers written on a chalkboard. Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become `0`, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is `0`. Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to `0`, then that player wins. Return `true` _if and only if Alice wins the game, assuming both players play optimally_. **Example 1:** ``` **Input:** nums = [1,1,2] **Output:** false **Explanation:** Alice has two choices: erase 1 or erase 2. If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. If Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose. ``` **Example 2:** ``` **Input:** nums = [0,1] **Output:** true ``` **Example 3:** ``` **Input:** nums = [1,2,3] **Output:** true ``` **Constraints:** `1 <= nums.length <= 1000` `0 <= nums[i] < 216`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,2]', 'output': 'false Explanation: Alice has two choices: erase 1 or erase 2. \\nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \\nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.'}, {'label': 'Example 2', 'input': 'nums = [0,1]', 'output': 'true'}, {'label': 'Example 3', 'input': 'nums = [1,2,3]', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec xor_game(nums :: [integer]) :: boolean\\n  def xor_game(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec xor_game(Nums :: [integer()]) -> boolean().\\nxor_game(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def xorGame(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!328\n",
            "expressive-words 827\n",
            "{'id': 827, 'name': 'expressive-words', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/expressive-words/', 'task_description': 'Sometimes people repeat letters to represent extra feeling. For example: `\"hello\" -> \"heeellooo\"` `\"hi\" -> \"hiiii\"` In these strings like `\"heeellooo\"`, we have groups of adjacent letters that are all the same: `\"h\"`, `\"eee\"`, `\"ll\"`, `\"ooo\"`. You are given a string `s` and an array of query strings `words`. A query word is **stretchy** if it can be made to be equal to `s` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is **three or more**. For example, starting with `\"hello\"`, we could do an extension on the group `\"o\"` to get `\"hellooo\"`, but we cannot get `\"helloo\"` since the group `\"oo\"` has a size less than three. Also, we could do another extension like `\"ll\" -> \"lllll\"` to get `\"helllllooo\"`. If `s = \"helllllooo\"`, then the query word `\"hello\"` would be **stretchy** because of these two extension operations: `query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = s`. Return _the number of query strings that are **stretchy**_. **Example 1:** ``` **Input:** s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"] **Output:** 1 **Explanation:** We can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\". We can\\'t extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more. ``` **Example 2:** ``` **Input:** s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"] **Output:** 3 ``` **Constraints:** `1 <= s.length, words.length <= 100` `1 <= words[i].length <= 100` `s` and `words[i]` consist of lowercase letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]', 'output': '1 Explanation: We can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\\nWe can\\'t extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.'}, {'label': 'Example 2', 'input': 's = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec expressive_words(s :: String.t, words :: [String.t]) :: integer\\n  def expressive_words(s, words) do\\n    \\n  end\\nend', 'erlang_template': '-spec expressive_words(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> integer().\\nexpressive_words(S, Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def expressiveWords(s: String, words: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!329\n",
            "soup-servings 826\n",
            "{'id': 826, 'name': 'soup-servings', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/soup-servings/', 'task_description': \"There are two types of soup: **type A** and **type B**. Initially, we have `n` ml of each type of soup. There are four kinds of operations: Serve `100` ml of **soup A** and `0` ml of **soup B**, Serve `75` ml of **soup A** and `25` ml of **soup B**, Serve `50` ml of **soup A** and `50` ml of **soup B**, and Serve `25` ml of **soup A** and `75` ml of **soup B**. When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability `0.25`. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup. **Note** that we do not have an operation where all `100` ml's of **soup B** are used first. Return _the probability that **soup A** will be empty first, plus half the probability that **A** and **B** become empty at the same time_. Answers within `10-5` of the actual answer will be accepted. **Example 1:** ``` **Input:** n = 50 **Output:** 0.62500 **Explanation:** If we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625. ``` **Example 2:** ``` **Input:** n = 100 **Output:** 0.71875 ``` **Constraints:** `0 <= n <= 109`\", 'test_case': [{'label': 'Example 1', 'input': 'n = 50', 'output': '0.62500 Explanation: If we choose the first two operations, A will become empty first.\\nFor the third operation, A and B will become empty at the same time.\\nFor the fourth operation, B will become empty first.\\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.'}, {'label': 'Example 2', 'input': 'n = 100', 'output': '0.71875'}], 'elixir_template': 'defmodule Solution do\\n  @spec soup_servings(n :: integer) :: float\\n  def soup_servings(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec soup_servings(N :: integer()) -> float().\\nsoup_servings(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def soupServings(n: Int): Double = {\\n        \\n    }\\n}'}\n",
            "Done!330\n",
            "max-increase-to-keep-city-skyline 825\n",
            "{'id': 825, 'name': 'max-increase-to-keep-city-skyline', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/max-increase-to-keep-city-skyline/', 'task_description': \"There is a city composed of `n x n` blocks, where each block contains a single building shaped like a vertical square prism. You are given a **0-indexed** `n x n` integer matrix `grid` where `grid[r][c]` represents the **height** of the building located in the block at row `r` and column `c`. A city's **skyline** is the outer contour formed by all the building when viewing the side of the city from a distance. The **skyline** from each cardinal direction north, east, south, and west may be different. We are allowed to increase the height of **any number of buildings by any amount** (the amount can be different per building). The height of a `0`-height building can also be increased. However, increasing the height of a building should **not** affect the city's **skyline** from any cardinal direction. Return _the **maximum total sum** that the height of the buildings can be increased by **without** changing the city's **skyline** from any cardinal direction_. **Example 1:** ``` **Input:** grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]] **Output:** 35 **Explanation:** The building heights are shown in the center of the above image. The skylines when viewed from each cardinal direction are drawn in red. The grid after increasing the height of buildings without affecting skylines is: gridNew = [ [8, 4, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [3, 3, 3, 3] ] ``` **Example 2:** ``` **Input:** grid = [[0,0,0],[0,0,0],[0,0,0]] **Output:** 0 **Explanation:** Increasing the height of any building will result in the skyline changing. ``` **Constraints:** `n == grid.length` `n == grid[r].length` `2 <= n <= 50` `0 <= grid[r][c] <= 100`\", 'test_case': [{'label': 'Example 1', 'input': 'grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]', 'output': '35 Explanation: The building heights are shown in the center of the above image.\\nThe skylines when viewed from each cardinal direction are drawn in red.\\nThe grid after increasing the height of buildings without affecting skylines is:\\ngridNew = [ [8, 4, 8, 7],\\n            [7, 4, 7, 7],\\n            [9, 4, 8, 7],\\n            [3, 3, 3, 3] ]'}, {'label': 'Example 2', 'input': 'grid = [[0,0,0],[0,0,0],[0,0,0]]', 'output': '0 Explanation: Increasing the height of any building will result in the skyline changing. Constraints: n == grid.length n == grid[r].length 2 <= n <= 50 0 <= grid[r][c] <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_increase_keeping_skyline(grid :: [[integer]]) :: integer\\n  def max_increase_keeping_skyline(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_increase_keeping_skyline(Grid :: [[integer()]]) -> integer().\\nmax_increase_keeping_skyline(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxIncreaseKeepingSkyline(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!331\n",
            "number-of-lines-to-write-string 824\n",
            "{'id': 824, 'name': 'number-of-lines-to-write-string', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/number-of-lines-to-write-string/', 'task_description': 'You are given a string `s` of lowercase English letters and an array `widths` denoting **how many pixels wide** each lowercase English letter is. Specifically, `widths[0]` is the width of `\\'a\\'`, `widths[1]` is the width of `\\'b\\'`, and so on. You are trying to write `s` across several lines, where **each line is no longer than **`100`** pixels**. Starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. Then, from where you stopped in `s`, continue writing as many letters as you can on the second line. Continue this process until you have written all of `s`. Return _an array _`result`_ of length 2 where:_ `result[0]`_ is the total number of lines._ `result[1]`_ is the width of the last line in pixels._ **Example 1:** ``` **Input:** widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\" **Output:** [3,60] **Explanation:** You can write s as follows: abcdefghij // 100 pixels wide klmnopqrst // 100 pixels wide uvwxyz // 60 pixels wide There are a total of 3 lines, and the last line is 60 pixels wide. ``` **Example 2:** ``` **Input:** widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\" **Output:** [2,4] **Explanation:** You can write s as follows: bbbcccdddaa // 98 pixels wide a // 4 pixels wide There are a total of 2 lines, and the last line is 4 pixels wide. ``` **Constraints:** `widths.length == 26` `2 <= widths[i] <= 10` `1 <= s.length <= 1000` `s` contains only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"', 'output': '[3,60] Explanation: You can write s as follows:\\nabcdefghij  // 100 pixels wide\\nklmnopqrst  // 100 pixels wide\\nuvwxyz      // 60 pixels wide\\nThere are a total of 3 lines, and the last line is 60 pixels wide.'}, {'label': 'Example 2', 'input': 'widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"', 'output': '[2,4] Explanation: You can write s as follows:\\nbbbcccdddaa  // 98 pixels wide\\na            // 4 pixels wide\\nThere are a total of 2 lines, and the last line is 4 pixels wide. Constraints: widths.length == 26 2 <= widths[i] <= 10 1 <= s.length <= 1000 s contains only lowercase English letters.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def numberOfLines(widths: Array[Int], s: String): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!332\n",
            "split-array-with-same-average 823\n",
            "{'id': 823, 'name': 'split-array-with-same-average', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/split-array-with-same-average/', 'task_description': 'You are given an integer array `nums`. You should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`. Return `true` if it is possible to achieve that and `false` otherwise. **Note** that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`. **Example 1:** ``` **Input:** nums = [1,2,3,4,5,6,7,8] **Output:** true **Explanation:** We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5. ``` **Example 2:** ``` **Input:** nums = [3,1] **Output:** false ``` **Constraints:** `1 <= nums.length <= 30` `0 <= nums[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,4,5,6,7,8]', 'output': 'true Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.'}, {'label': 'Example 2', 'input': 'nums = [3,1]', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec split_array_same_average(nums :: [integer]) :: boolean\\n  def split_array_same_average(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec split_array_same_average(Nums :: [integer()]) -> boolean().\\nsplit_array_same_average(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def splitArraySameAverage(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!333\n",
            "unique-morse-code-words 822\n",
            "{'id': 822, 'name': 'unique-morse-code-words', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/unique-morse-code-words/', 'task_description': 'International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: `\\'a\\'` maps to `\".-\"`, `\\'b\\'` maps to `\"-...\"`, `\\'c\\'` maps to `\"-.-.\"`, and so on. For convenience, the full table for the `26` letters of the English alphabet is given below: ``` [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"] ``` Given an array of strings `words` where each word can be written as a concatenation of the Morse code of each letter. For example, `\"cab\"` can be written as `\"-.-..--...\"`, which is the concatenation of `\"-.-.\"`, `\".-\"`, and `\"-...\"`. We will call such a concatenation the **transformation** of a word. Return _the number of different **transformations** among all words we have_. **Example 1:** ``` **Input:** words = [\"gin\",\"zen\",\"gig\",\"msg\"] **Output:** 2 **Explanation:** The transformation of each word is: \"gin\" -> \"--...-.\" \"zen\" -> \"--...-.\" \"gig\" -> \"--...--.\" \"msg\" -> \"--...--.\" There are 2 different transformations: \"--...-.\" and \"--...--.\". ``` **Example 2:** ``` **Input:** words = [\"a\"] **Output:** 1 ``` **Constraints:** `1 <= words.length <= 100` `1 <= words[i].length <= 12` `words[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"gin\",\"zen\",\"gig\",\"msg\"]', 'output': '2 Explanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\".'}, {'label': 'Example 2', 'input': 'words = [\"a\"]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec unique_morse_representations(words :: [String.t]) :: integer\\n  def unique_morse_representations(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec unique_morse_representations(Words :: [unicode:unicode_binary()]) -> integer().\\nunique_morse_representations(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def uniqueMorseRepresentations(words: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!334\n",
            "bricks-falling-when-hit 821\n",
            "{'id': 821, 'name': 'bricks-falling-when-hit', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/bricks-falling-when-hit/', 'task_description': 'You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is **stable** if: It is directly connected to the top of the grid, or At least one other brick in its four adjacent cells is **stable**. You are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will **fall**. Once a brick falls, it is **immediately** erased from the `grid` (i.e., it does not land on other stable bricks). Return _an array _`result`_, where each _`result[i]`_ is the number of bricks that will **fall** after the _`ith`_ erasure is applied._ **Note** that an erasure may refer to a location with no brick, and if it does, no bricks drop. **Example 1:** ``` **Input:** grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]] **Output:** [2] **Explanation: **Starting with the grid: [[1,0,0,0], [1,1,1,0]] We erase the underlined brick at (1,0), resulting in the grid: [[1,0,0,0], [0,1,1,0]] The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is: [[1,0,0,0], [0,0,0,0]] Hence the result is [2]. ``` **Example 2:** ``` **Input:** grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]] **Output:** [0,0] **Explanation: **Starting with the grid: [[1,0,0,0], [1,1,0,0]] We erase the underlined brick at (1,1), resulting in the grid: [[1,0,0,0], [1,0,0,0]] All remaining bricks are still stable, so no bricks fall. The grid remains the same: [[1,0,0,0], [1,0,0,0]] Next, we erase the underlined brick at (1,0), resulting in the grid: [[1,0,0,0], [0,0,0,0]] Once again, all remaining bricks are still stable, so no bricks fall. Hence the result is [0,0]. ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 200` `grid[i][j]` is `0` or `1`. `1 <= hits.length <= 4 * 104` `hits[i].length == 2` `0 <= xi <= m - 1` `0 <= yi <= n - 1` All `(xi, yi)` are unique.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]', 'output': '[2] Explanation: Starting with the grid:\\n[[1,0,0,0],\\n [ 1 ,1,1,0]]\\nWe erase the underlined brick at (1,0), resulting in the grid:\\n[[1,0,0,0],\\n [0, 1 , 1 ,0]]\\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\\n[[1,0,0,0],\\n [0,0,0,0]]\\nHence the result is [2].'}, {'label': 'Example 2', 'input': 'grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]', 'output': '[0,0] Explanation: Starting with the grid:\\n[[1,0,0,0],\\n [1, 1 ,0,0]]\\nWe erase the underlined brick at (1,1), resulting in the grid:\\n[[1,0,0,0],\\n [1,0,0,0]]\\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\\n[[1,0,0,0],\\n [ 1 ,0,0,0]]\\nNext, we erase the underlined brick at (1,0), resulting in the grid:\\n[[1,0,0,0],\\n [0,0,0,0]]\\nOnce again, all remaining bricks are still stable, so no bricks fall.\\nHence the result is [0,0]. Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 200 grid[i][j] is 0 or 1 . 1 <= hits.length <= 4 * 10 4 hits[i].length == 2 0 <= x i <= m - 1 0 <=\\xa0y i <= n - 1 All (x i , y i ) are unique.'}], 'elixir_template': 'defmodule Solution do\\n  @spec hit_bricks(grid :: [[integer]], hits :: [[integer]]) :: [integer]\\n  def hit_bricks(grid, hits) do\\n    \\n  end\\nend', 'erlang_template': '-spec hit_bricks(Grid :: [[integer()]], Hits :: [[integer()]]) -> [integer()].\\nhit_bricks(Grid, Hits) ->\\n  .', 'scala_template': 'object Solution {\\n    def hitBricks(grid: Array[Array[Int]], hits: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!335\n",
            "find-eventual-safe-states 820\n",
            "{'id': 820, 'name': 'find-eventual-safe-states', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-eventual-safe-states/', 'task_description': 'There is a directed graph of `n` nodes with each node labeled from `0` to `n - 1`. The graph is represented by a **0-indexed** 2D integer array `graph` where `graph[i]` is an integer array of nodes adjacent to node `i`, meaning there is an edge from node `i` to each node in `graph[i]`. A node is a **terminal node** if there are no outgoing edges. A node is a **safe node** if every possible path starting from that node leads to a **terminal node** (or another safe node). Return _an array containing all the **safe nodes** of the graph_. The answer should be sorted in **ascending** order. **Example 1:** ``` **Input:** graph = [[1,2],[2,3],[5],[0],[5],[],[]] **Output:** [2,4,5,6] **Explanation:** The given graph is shown above. Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them. Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6. ``` **Example 2:** ``` **Input:** graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]] **Output:** [4] **Explanation:** Only node 4 is a terminal node, and every path starting at node 4 leads to node 4. ``` **Constraints:** `n == graph.length` `1 <= n <= 104` `0 <= graph[i].length <= n` `0 <= graph[i][j] <= n - 1` `graph[i]` is sorted in a strictly increasing order. The graph may contain self-loops. The number of edges in the graph will be in the range `[1, 4 * 104]`.', 'test_case': [{'label': 'Example 1', 'input': 'graph = [[1,2],[2,3],[5],[0],[5],[],[]]', 'output': '[2,4,5,6] Explanation: The given graph is shown above.\\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.'}, {'label': 'Example 2', 'input': 'graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]', 'output': '[4] Explanation: Only node 4 is a terminal node, and every path starting at node 4 leads to node 4. Constraints: n == graph.length 1 <= n <= 10 4 0 <= graph[i].length <= n 0 <= graph[i][j] <= n - 1 graph[i] is sorted in a strictly increasing order. The graph may contain self-loops. The number of edges in the graph will be in the range [1, 4 * 10 4 ] .'}], 'elixir_template': 'defmodule Solution do\\n  @spec eventual_safe_nodes(graph :: [[integer]]) :: [integer]\\n  def eventual_safe_nodes(graph) do\\n    \\n  end\\nend', 'erlang_template': '-spec eventual_safe_nodes(Graph :: [[integer()]]) -> [integer()].\\neventual_safe_nodes(Graph) ->\\n  .', 'scala_template': 'object Solution {\\n    def eventualSafeNodes(graph: Array[Array[Int]]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!336\n",
            "minimum-swaps-to-make-sequences-increasing 819\n",
            "{'id': 819, 'name': 'minimum-swaps-to-make-sequences-increasing', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/', 'task_description': 'You are given two integer arrays of the same length `nums1` and `nums2`. In one operation, you are allowed to swap `nums1[i]` with `nums2[i]`. For example, if `nums1 = [1,2,3,8]`, and `nums2 = [5,6,7,4]`, you can swap the element at `i = 3` to obtain `nums1 = [1,2,3,4]` and `nums2 = [5,6,7,8]`. Return _the minimum number of needed operations to make _`nums1`_ and _`nums2`_ **strictly increasing**_. The test cases are generated so that the given input always makes it possible. An array `arr` is **strictly increasing** if and only if `arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1]`. **Example 1:** ``` **Input:** nums1 = [1,3,5,4], nums2 = [1,2,3,7] **Output:** 1 **Explanation:** Swap nums1[3] and nums2[3]. Then the sequences are: nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4] which are both strictly increasing. ``` **Example 2:** ``` **Input:** nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9] **Output:** 1 ``` **Constraints:** `2 <= nums1.length <= 105` `nums2.length == nums1.length` `0 <= nums1[i], nums2[i] <= 2 * 105`', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,3,5,4], nums2 = [1,2,3,7]', 'output': '1 Explanation: Swap nums1[3] and nums2[3]. Then the sequences are:\\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\\nwhich are both strictly increasing.'}, {'label': 'Example 2', 'input': 'nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_swap(nums1 :: [integer], nums2 :: [integer]) :: integer\\n  def min_swap(nums1, nums2) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_swap(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\\nmin_swap(Nums1, Nums2) ->\\n  .', 'scala_template': 'object Solution {\\n    def minSwap(nums1: Array[Int], nums2: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!337\n",
            "design-hashmap 817\n",
            "{'id': 817, 'name': 'design-hashmap', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/design-hashmap/', 'task_description': 'Design a HashMap without using any built-in hash table libraries. Implement the `MyHashMap` class: `MyHashMap()` initializes the object with an empty map. `void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`. `int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`. `void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`. **Example 1:** ``` **Input** [\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"] [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]] **Output** [null, null, null, 1, -1, null, 1, null, -1] **Explanation** MyHashMap myHashMap = new MyHashMap(); myHashMap.put(1, 1); // The map is now [[1,1]] myHashMap.put(2, 2); // The map is now [[1,1], [2,2]] myHashMap.get(1); // return 1, The map is now [[1,1], [2,2]] myHashMap.get(3); // return -1 (i.e., not found), The map is now [[1,1], [2,2]] myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value) myHashMap.get(2); // return 1, The map is now [[1,1], [2,1]] myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]] myHashMap.get(2); // return -1 (i.e., not found), The map is now [[1,1]] ``` **Constraints:** `0 <= key, value <= 106` At most `104` calls will be made to `put`, `get`, and `remove`.', 'test_case': [], 'elixir_template': 'defmodule MyHashMap do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec put(key :: integer, value :: integer) :: any\\n  def put(key, value) do\\n    \\n  end\\n\\n  @spec get(key :: integer) :: integer\\n  def get(key) do\\n    \\n  end\\n\\n  @spec remove(key :: integer) :: any\\n  def remove(key) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyHashMap.init_()\\n# MyHashMap.put(key, value)\\n# param_2 = MyHashMap.get(key)\\n# MyHashMap.remove(key)\\n\\n# MyHashMap.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_hash_map_init_() -> any().\\nmy_hash_map_init_() ->\\n  .\\n\\n-spec my_hash_map_put(Key :: integer(), Value :: integer()) -> any().\\nmy_hash_map_put(Key, Value) ->\\n  .\\n\\n-spec my_hash_map_get(Key :: integer()) -> integer().\\nmy_hash_map_get(Key) ->\\n  .\\n\\n-spec my_hash_map_remove(Key :: integer()) -> any().\\nmy_hash_map_remove(Key) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_hash_map_init_(),\\n%% my_hash_map_put(Key, Value),\\n%% Param_2 = my_hash_map_get(Key),\\n%% my_hash_map_remove(Key),\\n\\n%% my_hash_map_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyHashMap() {\\n\\n    def put(key: Int, value: Int): Unit = {\\n        \\n    }\\n\\n    def get(key: Int): Int = {\\n        \\n    }\\n\\n    def remove(key: Int): Unit = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * val obj = new MyHashMap()\\n * obj.put(key,value)\\n * val param_2 = obj.get(key)\\n * obj.remove(key)\\n */'}\n",
            "Done!338\n",
            "design-hashset 816\n",
            "{'id': 816, 'name': 'design-hashset', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/design-hashset/', 'task_description': 'Design a HashSet without using any built-in hash table libraries. Implement `MyHashSet` class: `void add(key)` Inserts the value `key` into the HashSet. `bool contains(key)` Returns whether the value `key` exists in the HashSet or not. `void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing. **Example 1:** ``` **Input** [\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"] [[], [1], [2], [1], [3], [2], [2], [2], [2]] **Output** [null, null, null, true, false, null, true, null, false] **Explanation** MyHashSet myHashSet = new MyHashSet(); myHashSet.add(1); // set = [1] myHashSet.add(2); // set = [1, 2] myHashSet.contains(1); // return True myHashSet.contains(3); // return False, (not found) myHashSet.add(2); // set = [1, 2] myHashSet.contains(2); // return True myHashSet.remove(2); // set = [1] myHashSet.contains(2); // return False, (already removed) ``` **Constraints:** `0 <= key <= 106` At most `104` calls will be made to `add`, `remove`, and `contains`.', 'test_case': [], 'elixir_template': 'defmodule MyHashSet do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec add(key :: integer) :: any\\n  def add(key) do\\n    \\n  end\\n\\n  @spec remove(key :: integer) :: any\\n  def remove(key) do\\n    \\n  end\\n\\n  @spec contains(key :: integer) :: boolean\\n  def contains(key) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyHashSet.init_()\\n# MyHashSet.add(key)\\n# MyHashSet.remove(key)\\n# param_3 = MyHashSet.contains(key)\\n\\n# MyHashSet.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_hash_set_init_() -> any().\\nmy_hash_set_init_() ->\\n  .\\n\\n-spec my_hash_set_add(Key :: integer()) -> any().\\nmy_hash_set_add(Key) ->\\n  .\\n\\n-spec my_hash_set_remove(Key :: integer()) -> any().\\nmy_hash_set_remove(Key) ->\\n  .\\n\\n-spec my_hash_set_contains(Key :: integer()) -> boolean().\\nmy_hash_set_contains(Key) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_hash_set_init_(),\\n%% my_hash_set_add(Key),\\n%% my_hash_set_remove(Key),\\n%% Param_3 = my_hash_set_contains(Key),\\n\\n%% my_hash_set_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyHashSet() {\\n\\n    def add(key: Int): Unit = {\\n        \\n    }\\n\\n    def remove(key: Int): Unit = {\\n        \\n    }\\n\\n    def contains(key: Int): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyHashSet object will be instantiated and called as such:\\n * val obj = new MyHashSet()\\n * obj.add(key)\\n * obj.remove(key)\\n * val param_3 = obj.contains(key)\\n */'}\n",
            "Done!339\n",
            "champagne-tower 815\n",
            "{'id': 815, 'name': 'champagne-tower', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/champagne-tower/', 'task_description': 'We stack glasses in a pyramid, where the **first** row has `1` glass, the **second** row has `2` glasses, and so on until the 100th row. Each glass holds one cup of champagne. Then, some champagne is poured into the first glass at the top. When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (A glass at the bottom row has its excess champagne fall on the floor.) For example, after one cup of champagne is poured, the top most glass is full. After two cups of champagne are poured, the two glasses on the second row are half full. After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below. Now after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.) **Example 1:** ``` **Input:** poured = 1, query_row = 1, query_glass = 1 **Output:** 0.00000 **Explanation:** We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty. ``` **Example 2:** ``` **Input:** poured = 2, query_row = 1, query_glass = 1 **Output:** 0.50000 **Explanation:** We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange. ``` **Example 3:** ``` **Input:** poured = 100000009, query_row = 33, query_glass = 17 **Output:** 1.00000 ``` **Constraints:** `0 <= poured <= 109` `0 <= query_glass <= query_row < 100`', 'test_case': [{'label': 'Example 1', 'input': 'poured = 1, query_row = 1, query_glass = 1', 'output': '0.00000 Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.'}, {'label': 'Example 2', 'input': 'poured = 2, query_row = 1, query_glass = 1', 'output': '0.50000 Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.'}, {'label': 'Example 3', 'input': 'poured = 100000009, query_row = 33, query_glass = 17', 'output': '1.00000'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def champagneTower(poured: Int, query_row: Int, query_glass: Int): Double = {\\n        \\n    }\\n}'}\n",
            "Done!340\n",
            "smallest-rotation-with-highest-score 814\n",
            "{'id': 814, 'name': 'smallest-rotation-with-highest-score', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/smallest-rotation-with-highest-score/', 'task_description': 'You are given an array `nums`. You can rotate it by a non-negative integer `k` so that the array becomes `[nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]`. Afterward, any entries that are less than or equal to their index are worth one point. For example, if we have `nums = [2,4,1,3,0]`, and we rotate by `k = 2`, it becomes `[1,3,0,2,4]`. This is worth `3` points because `1 > 0` [no points], `3 > 1` [no points], `0 <= 2` [one point], `2 <= 3` [one point], `4 <= 4` [one point]. Return _the rotation index _`k`_ that corresponds to the highest score we can achieve if we rotated _`nums`_ by it_. If there are multiple answers, return the smallest such index `k`. **Example 1:** ``` **Input:** nums = [2,3,1,4,0] **Output:** 3 **Explanation:** Scores for each k are listed below: k = 0, nums = [2,3,1,4,0], score 2 k = 1, nums = [3,1,4,0,2], score 3 k = 2, nums = [1,4,0,2,3], score 3 k = 3, nums = [4,0,2,3,1], score 4 k = 4, nums = [0,2,3,1,4], score 3 So we should choose k = 3, which has the highest score. ``` **Example 2:** ``` **Input:** nums = [1,3,0,2,4] **Output:** 0 **Explanation:** nums will always have 3 points no matter how it shifts. So we will choose the smallest k, which is 0. ``` **Constraints:** `1 <= nums.length <= 105` `0 <= nums[i] < nums.length`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,3,1,4,0]', 'output': '3 Explanation: Scores for each k are listed below: \\nk = 0,  nums = [2,3,1,4,0],    score 2\\nk = 1,  nums = [3,1,4,0,2],    score 3\\nk = 2,  nums = [1,4,0,2,3],    score 3\\nk = 3,  nums = [4,0,2,3,1],    score 4\\nk = 4,  nums = [0,2,3,1,4],    score 3\\nSo we should choose k = 3, which has the highest score.'}, {'label': 'Example 2', 'input': 'nums = [1,3,0,2,4]', 'output': '0 Explanation: nums will always have 3 points no matter how it shifts.\\nSo we will choose the smallest k, which is 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec best_rotation(nums :: [integer]) :: integer\\n  def best_rotation(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec best_rotation(Nums :: [integer()]) -> integer().\\nbest_rotation(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def bestRotation(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!341\n",
            "all-paths-from-source-to-target 813\n",
            "{'id': 813, 'name': 'all-paths-from-source-to-target', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/all-paths-from-source-to-target/', 'task_description': 'Given a directed acyclic graph (**DAG**) of `n` nodes labeled from `0` to `n - 1`, find all possible paths from node `0` to node `n - 1` and return them in **any order**. The graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`). **Example 1:** ``` **Input:** graph = [[1,2],[3],[3],[]] **Output:** [[0,1,3],[0,2,3]] **Explanation:** There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3. ``` **Example 2:** ``` **Input:** graph = [[4,3,1],[3,2,4],[3],[4],[]] **Output:** [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]] ``` **Constraints:** `n == graph.length` `2 <= n <= 15` `0 <= graph[i][j] < n` `graph[i][j] != i` (i.e., there will be no self-loops). All the elements of `graph[i]` are **unique**. The input graph is **guaranteed** to be a **DAG**.', 'test_case': [{'label': 'Example 1', 'input': 'graph = [[1,2],[3],[3],[]]', 'output': '[[0,1,3],[0,2,3]] Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.'}, {'label': 'Example 2', 'input': 'graph = [[4,3,1],[3,2,4],[3],[4],[]]', 'output': '[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]] Constraints: n == graph.length 2 <= n <= 15 0 <= graph[i][j] < n graph[i][j] != i (i.e., there will be no self-loops). All the elements of graph[i] are unique . The input graph is guaranteed to be a DAG .'}], 'elixir_template': 'defmodule Solution do\\n  @spec all_paths_source_target(graph :: [[integer]]) :: [[integer]]\\n  def all_paths_source_target(graph) do\\n    \\n  end\\nend', 'erlang_template': '-spec all_paths_source_target(Graph :: [[integer()]]) -> [[integer()]].\\nall_paths_source_target(Graph) ->\\n  .', 'scala_template': 'object Solution {\\n    def allPathsSourceTarget(graph: Array[Array[Int]]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!342\n",
            "rotate-string 812\n",
            "{'id': 812, 'name': 'rotate-string', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/rotate-string/', 'task_description': 'Given two strings `s` and `goal`, return `true` _if and only if_ `s` _can become_ `goal` _after some number of **shifts** on_ `s`. A **shift** on `s` consists of moving the leftmost character of `s` to the rightmost position. For example, if `s = \"abcde\"`, then it will be `\"bcdea\"` after one shift. **Example 1:** ``` **Input:** s = \"abcde\", goal = \"cdeab\" **Output:** true ``` **Example 2:** ``` **Input:** s = \"abcde\", goal = \"abced\" **Output:** false ``` **Constraints:** `1 <= s.length, goal.length <= 100` `s` and `goal` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abcde\", goal = \"cdeab\"', 'output': 'true'}, {'label': 'Example 2', 'input': 's = \"abcde\", goal = \"abced\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec rotate_string(s :: String.t, goal :: String.t) :: boolean\\n  def rotate_string(s, goal) do\\n    \\n  end\\nend', 'erlang_template': '-spec rotate_string(S :: unicode:unicode_binary(), Goal :: unicode:unicode_binary()) -> boolean().\\nrotate_string(S, Goal) ->\\n  .', 'scala_template': 'object Solution {\\n    def rotateString(s: String, goal: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!343\n",
            "number-of-subarrays-with-bounded-maximum 811\n",
            "{'id': 811, 'name': 'number-of-subarrays-with-bounded-maximum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/', 'task_description': 'Given an integer array `nums` and two integers `left` and `right`, return _the number of contiguous non-empty **subarrays** such that the value of the maximum array element in that subarray is in the range _`[left, right]`. The test cases are generated so that the answer will fit in a **32-bit** integer. **Example 1:** ``` **Input:** nums = [2,1,4,3], left = 2, right = 3 **Output:** 3 **Explanation:** There are three subarrays that meet the requirements: [2], [2, 1], [3]. ``` **Example 2:** ``` **Input:** nums = [2,9,2,5,6], left = 2, right = 8 **Output:** 7 ``` **Constraints:** `1 <= nums.length <= 105` `0 <= nums[i] <= 109` `0 <= left <= right <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,1,4,3], left = 2, right = 3', 'output': '3 Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].'}, {'label': 'Example 2', 'input': 'nums = [2,9,2,5,6], left = 2, right = 8', 'output': '7'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_subarray_bounded_max(nums :: [integer], left :: integer, right :: integer) :: integer\\n  def num_subarray_bounded_max(nums, left, right) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_subarray_bounded_max(Nums :: [integer()], Left :: integer(), Right :: integer()) -> integer().\\nnum_subarray_bounded_max(Nums, Left, Right) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSubarrayBoundedMax(nums: Array[Int], left: Int, right: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!344\n",
            "valid-tic-tac-toe-state 810\n",
            "{'id': 810, 'name': 'valid-tic-tac-toe-state', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/valid-tic-tac-toe-state/', 'task_description': 'Given a Tic-Tac-Toe board as a string array `board`, return `true` if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game. The board is a `3 x 3` array that consists of characters `\\' \\'`, `\\'X\\'`, and `\\'O\\'`. The `\\' \\'` character represents an empty square. Here are the rules of Tic-Tac-Toe: Players take turns placing characters into empty squares `\\' \\'`. The first player always places `\\'X\\'` characters, while the second player always places `\\'O\\'` characters. `\\'X\\'` and `\\'O\\'` characters are always placed into empty squares, never filled ones. The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal. The game also ends if all squares are non-empty. No more moves can be played if the game is over. **Example 1:** ``` **Input:** board = [\"O \",\" \",\" \"] **Output:** false **Explanation:** The first player always plays \"X\". ``` **Example 2:** ``` **Input:** board = [\"XOX\",\" X \",\" \"] **Output:** false **Explanation:** Players take turns making moves. ``` **Example 3:** ``` **Input:** board = [\"XOX\",\"O O\",\"XOX\"] **Output:** true ``` **Constraints:** `board.length == 3` `board[i].length == 3` `board[i][j]` is either `\\'X\\'`, `\\'O\\'`, or `\\' \\'`.', 'test_case': [{'label': 'Example 1', 'input': 'board = [\"O  \",\"   \",\"   \"]', 'output': 'false Explanation: The first player always plays \"X\".'}, {'label': 'Example 2', 'input': 'board = [\"XOX\",\" X \",\"   \"]', 'output': 'false Explanation: Players take turns making moves.'}, {'label': 'Example 3', 'input': 'board = [\"XOX\",\"O O\",\"XOX\"]', 'output': \"true Constraints: board.length == 3 board[i].length == 3 board[i][j] is either 'X' , 'O' , or ' ' .\"}], 'elixir_template': 'defmodule Solution do\\n  @spec valid_tic_tac_toe(board :: [String.t]) :: boolean\\n  def valid_tic_tac_toe(board) do\\n    \\n  end\\nend', 'erlang_template': '-spec valid_tic_tac_toe(Board :: [unicode:unicode_binary()]) -> boolean().\\nvalid_tic_tac_toe(Board) ->\\n  .', 'scala_template': 'object Solution {\\n    def validTicTacToe(board: Array[String]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!345\n",
            "preimage-size-of-factorial-zeroes-function 809\n",
            "{'id': 809, 'name': 'preimage-size-of-factorial-zeroes-function', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function/', 'task_description': 'Let `f(x)` be the number of zeroes at the end of `x!`. Recall that `x! = 1 * 2 * 3 * ... * x` and by convention, `0! = 1`. For example, `f(3) = 0` because `3! = 6` has no zeroes at the end, while `f(11) = 2` because `11! = 39916800` has two zeroes at the end. Given an integer `k`, return the number of non-negative integers `x` have the property that `f(x) = k`. **Example 1:** ``` **Input:** k = 0 **Output:** 5 **Explanation:** 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes. ``` **Example 2:** ``` **Input:** k = 5 **Output:** 0 **Explanation:** There is no x such that x! ends in k = 5 zeroes. ``` **Example 3:** ``` **Input:** k = 3 **Output:** 5 ``` **Constraints:** `0 <= k <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'k = 0', 'output': '5 Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.'}, {'label': 'Example 2', 'input': 'k = 5', 'output': '0 Explanation: There is no x such that x! ends in k = 5 zeroes.'}, {'label': 'Example 3', 'input': 'k = 3', 'output': '5'}], 'elixir_template': 'defmodule Solution do\\n  @spec preimage_size_fzf(k :: integer) :: integer\\n  def preimage_size_fzf(k) do\\n    \\n  end\\nend', 'erlang_template': '-spec preimage_size_fzf(K :: integer()) -> integer().\\npreimage_size_fzf(K) ->\\n  .', 'scala_template': 'object Solution {\\n    def preimageSizeFZF(k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!346\n",
            "number-of-matching-subsequences 808\n",
            "{'id': 808, 'name': 'number-of-matching-subsequences', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/number-of-matching-subsequences/', 'task_description': 'Given a string `s` and an array of strings `words`, return _the number of_ `words[i]` _that is a subsequence of_ `s`. A **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, `\"ace\"` is a subsequence of `\"abcde\"`. **Example 1:** ``` **Input:** s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"] **Output:** 3 **Explanation:** There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\". ``` **Example 2:** ``` **Input:** s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"] **Output:** 2 ``` **Constraints:** `1 <= s.length <= 5 * 104` `1 <= words.length <= 5000` `1 <= words[i].length <= 50` `s` and `words[i]` consist of only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]', 'output': '3 Explanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".'}, {'label': 'Example 2', 'input': 's = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_matching_subseq(s :: String.t, words :: [String.t]) :: integer\\n  def num_matching_subseq(s, words) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_matching_subseq(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> integer().\\nnum_matching_subseq(S, Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def numMatchingSubseq(s: String, words: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!347\n",
            "custom-sort-string 807\n",
            "{'id': 807, 'name': 'custom-sort-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/custom-sort-string/', 'task_description': 'You are given two strings `order` and `s`. All the characters of `order` are **unique** and were sorted in some custom order previously. Permute the characters of `s` so that they match the order that `order` was sorted. More specifically, if a character `x` occurs before a character `y` in `order`, then `x` should occur before `y` in the permuted string. Return _any permutation of _`s`_ that satisfies this property_. **Example 1:** **Input: ** order = \"cba\", s = \"abcd\" **Output: ** \"cbad\" **Explanation: ** `\"a\"`, `\"b\"`, `\"c\"` appear in order, so the order of `\"a\"`, `\"b\"`, `\"c\"` should be `\"c\"`, `\"b\"`, and `\"a\"`. Since `\"d\"` does not appear in `order`, it can be at any position in the returned string. `\"dcba\"`, `\"cdba\"`, `\"cbda\"` are also valid outputs. **Example 2:** **Input: ** order = \"bcafg\", s = \"abcd\" **Output: ** \"bcad\" **Explanation: ** The characters `\"b\"`, `\"c\"`, and `\"a\"` from `order` dictate the order for the characters in `s`. The character `\"d\"` in `s` does not appear in `order`, so its position is flexible. Following the order of appearance in `order`, `\"b\"`, `\"c\"`, and `\"a\"` from `s` should be arranged as `\"b\"`, `\"c\"`, `\"a\"`. `\"d\"` can be placed at any position since it\\'s not in order. The output `\"bcad\"` correctly follows this rule. Other arrangements like `\"dbca\"` or `\"bcda\"` would also be valid, as long as `\"b\"`, `\"c\"`, `\"a\"` maintain their order. **Constraints:** `1 <= order.length <= 26` `1 <= s.length <= 200` `order` and `s` consist of lowercase English letters. All the characters of `order` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'order = \"cba\", s = \"abcd\"', 'output': '\"cbad\" Explanation: \"a\" , \"b\" , \"c\" appear in order, so the order of \"a\" , \"b\" , \"c\" should be \"c\" , \"b\" , and \"a\" . Since \"d\" does not appear in order , it can be at any position in the returned string. \"dcba\" , \"cdba\" , \"cbda\" are also valid outputs.'}, {'label': 'Example 2', 'input': 'order = \"bcafg\", s = \"abcd\"', 'output': '\"bcad\" Explanation: The characters \"b\" , \"c\" , and \"a\" from order dictate the order for the characters in s . The character \"d\" in s does not appear in order , so its position is flexible. Following the order of appearance in order , \"b\" , \"c\" , and \"a\" from s should be arranged as \"b\" , \"c\" , \"a\" . \"d\" can be placed at any position since it\\'s not in order. The output \"bcad\" correctly follows this rule. Other arrangements like \"dbca\" or \"bcda\" would also be valid, as long as \"b\" , \"c\" , \"a\" maintain their order.'}], 'elixir_template': 'defmodule Solution do\\n  @spec custom_sort_string(order :: String.t, s :: String.t) :: String.t\\n  def custom_sort_string(order, s) do\\n    \\n  end\\nend', 'erlang_template': '-spec custom_sort_string(Order :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\ncustom_sort_string(Order, S) ->\\n  .', 'scala_template': 'object Solution {\\n    def customSortString(order: String, s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!348\n",
            "domino-and-tromino-tiling 806\n",
            "{'id': 806, 'name': 'domino-and-tromino-tiling', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/domino-and-tromino-tiling/', 'task_description': 'You have two types of tiles: a `2 x 1` domino shape and a tromino shape. You may rotate these shapes. Given an integer n, return _the number of ways to tile an_ `2 x n` _board_. Since the answer may be very large, return it **modulo** `109 + 7`. In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile. **Example 1:** ``` **Input:** n = 3 **Output:** 5 **Explanation:** The five different ways are show above. ``` **Example 2:** ``` **Input:** n = 1 **Output:** 1 ``` **Constraints:** `1 <= n <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '5 Explanation: The five different ways are show above.'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_tilings(n :: integer) :: integer\\n  def num_tilings(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_tilings(N :: integer()) -> integer().\\nnum_tilings(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def numTilings(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!349\n",
            "escape-the-ghosts 805\n",
            "{'id': 805, 'name': 'escape-the-ghosts', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/escape-the-ghosts/', 'task_description': 'You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]` that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are **integral coordinates**. Each turn, you and all the ghosts may independently choose to either **move 1 unit** in any of the four cardinal directions: north, east, south, or west, or **stay still**. All actions happen **simultaneously**. You escape if and only if you can reach the target **before** any ghost reaches you. If you reach any square (including the target) at the **same time** as a ghost, it **does not** count as an escape. Return `true`_ if it is possible to escape regardless of how the ghosts move, otherwise return _`false`_._ **Example 1:** ``` **Input:** ghosts = [[1,0],[0,3]], target = [0,1] **Output:** true **Explanation:** You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you. ``` **Example 2:** ``` **Input:** ghosts = [[1,0]], target = [2,0] **Output:** false **Explanation:** You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination. ``` **Example 3:** ``` **Input:** ghosts = [[2,0]], target = [1,0] **Output:** false **Explanation:** The ghost can reach the target at the same time as you. ``` **Constraints:** `1 <= ghosts.length <= 100` `ghosts[i].length == 2` `-104 <= xi, yi <= 104` There can be **multiple ghosts** in the same location. `target.length == 2` `-104 <= xtarget, ytarget <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'ghosts = [[1,0],[0,3]], target = [0,1]', 'output': 'true Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.'}, {'label': 'Example 2', 'input': 'ghosts = [[1,0]], target = [2,0]', 'output': 'false Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.'}, {'label': 'Example 3', 'input': 'ghosts = [[2,0]], target = [1,0]', 'output': 'false Explanation: The ghost can reach the target at the same time as you.'}], 'elixir_template': 'defmodule Solution do\\n  @spec escape_ghosts(ghosts :: [[integer]], target :: [integer]) :: boolean\\n  def escape_ghosts(ghosts, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec escape_ghosts(Ghosts :: [[integer()]], Target :: [integer()]) -> boolean().\\nescape_ghosts(Ghosts, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def escapeGhosts(ghosts: Array[Array[Int]], target: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!350\n",
            "rotated-digits 804\n",
            "{'id': 804, 'name': 'rotated-digits', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rotated-digits/', 'task_description': 'An integer `x` is a **good** if after rotating each digit individually by 180 degrees, we get a valid number that is different from `x`. Each digit must be rotated - we cannot choose to leave it alone. A number is valid if each digit remains a digit after rotation. For example: `0`, `1`, and `8` rotate to themselves, `2` and `5` rotate to each other (in this case they are rotated in a different direction, in other words, `2` or `5` gets mirrored), `6` and `9` rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid. Given an integer `n`, return _the number of **good** integers in the range _`[1, n]`. **Example 1:** ``` **Input:** n = 10 **Output:** 4 **Explanation:** There are four good numbers in the range [1, 10] : 2, 5, 6, 9. Note that 1 and 10 are not good numbers, since they remain unchanged after rotating. ``` **Example 2:** ``` **Input:** n = 1 **Output:** 0 ``` **Example 3:** ``` **Input:** n = 2 **Output:** 1 ``` **Constraints:** `1 <= n <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'n = 10', 'output': '4 Explanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '0'}, {'label': 'Example 3', 'input': 'n = 2', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec rotated_digits(n :: integer) :: integer\\n  def rotated_digits(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec rotated_digits(N :: integer()) -> integer().\\nrotated_digits(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def rotatedDigits(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!351\n",
            "cheapest-flights-within-k-stops 803\n",
            "{'id': 803, 'name': 'cheapest-flights-within-k-stops', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/cheapest-flights-within-k-stops/', 'task_description': 'There are `n` cities connected by some number of flights. You are given an array `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there is a flight from city `fromi` to city `toi` with cost `pricei`. You are also given three integers `src`, `dst`, and `k`, return _**the cheapest price** from _`src`_ to _`dst`_ with at most _`k`_ stops. _If there is no such route, return_ _`-1`. **Example 1:** ``` **Input:** n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1 **Output:** 700 **Explanation:** The graph is shown above. The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700. Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops. ``` **Example 2:** ``` **Input:** n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1 **Output:** 200 **Explanation:** The graph is shown above. The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200. ``` **Example 3:** ``` **Input:** n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0 **Output:** 500 **Explanation:** The graph is shown above. The optimal path with no stops from city 0 to 2 is marked in red and has cost 500. ``` **Constraints:** `1 <= n <= 100` `0 <= flights.length <= (n * (n - 1) / 2)` `flights[i].length == 3` `0 <= fromi, toi < n` `fromi != toi` `1 <= pricei <= 104` There will not be any multiple flights between two cities. `0 <= src, dst, k < n` `src != dst`', 'test_case': [{'label': 'Example 1', 'input': 'n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1', 'output': '700 Explanation: The graph is shown above.\\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.'}, {'label': 'Example 2', 'input': 'n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1', 'output': '200 Explanation: The graph is shown above.\\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.'}, {'label': 'Example 3', 'input': 'n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0', 'output': '500 Explanation: The graph is shown above.\\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_cheapest_price(n :: integer, flights :: [[integer]], src :: integer, dst :: integer, k :: integer) :: integer\\n  def find_cheapest_price(n, flights, src, dst, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_cheapest_price(N :: integer(), Flights :: [[integer()]], Src :: integer(), Dst :: integer(), K :: integer()) -> integer().\\nfind_cheapest_price(N, Flights, Src, Dst, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def findCheapestPrice(n: Int, flights: Array[Array[Int]], src: Int, dst: Int, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!352\n",
            "k-th-smallest-prime-fraction 802\n",
            "{'id': 802, 'name': 'k-th-smallest-prime-fraction', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/k-th-smallest-prime-fraction/', 'task_description': 'You are given a sorted integer array `arr` containing `1` and **prime** numbers, where all the integers of `arr` are unique. You are also given an integer `k`. For every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`. Return _the_ `kth` _smallest fraction considered_. Return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`. **Example 1:** ``` **Input:** arr = [1,2,3,5], k = 3 **Output:** [2,5] **Explanation:** The fractions to be considered in sorted order are: 1/5, 1/3, 2/5, 1/2, 3/5, and 2/3. The third fraction is 2/5. ``` **Example 2:** ``` **Input:** arr = [1,7], k = 1 **Output:** [1,7] ``` **Constraints:** `2 <= arr.length <= 1000` `1 <= arr[i] <= 3 * 104` `arr[0] == 1` `arr[i]` is a **prime** number for `i > 0`. All the numbers of `arr` are **unique** and sorted in **strictly increasing** order. `1 <= k <= arr.length * (arr.length - 1) / 2` **Follow up:** Can you solve the problem with better than `O(n2)` complexity?', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,2,3,5], k = 3', 'output': '[2,5] Explanation: The fractions to be considered in sorted order are:\\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\\nThe third fraction is 2/5.'}, {'label': 'Example 2', 'input': 'arr = [1,7], k = 1', 'output': '[1,7]'}], 'elixir_template': 'defmodule Solution do\\n  @spec kth_smallest_prime_fraction(arr :: [integer], k :: integer) :: [integer]\\n  def kth_smallest_prime_fraction(arr, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec kth_smallest_prime_fraction(Arr :: [integer()], K :: integer()) -> [integer()].\\nkth_smallest_prime_fraction(Arr, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def kthSmallestPrimeFraction(arr: Array[Int], k: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!353\n",
            "is-graph-bipartite 801\n",
            "{'id': 801, 'name': 'is-graph-bipartite', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/is-graph-bipartite/', 'task_description': 'There is an **undirected** graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties: There are no self-edges (`graph[u]` does not contain `u`). There are no parallel edges (`graph[u]` does not contain duplicate values). If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected). The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them. A graph is **bipartite** if the nodes can be partitioned into two independent sets `A` and `B` such that **every** edge in the graph connects a node in set `A` and a node in set `B`. Return `true`_ if and only if it is **bipartite**_. **Example 1:** ``` **Input:** graph = [[1,2,3],[0,2],[0,1,3],[0,2]] **Output:** false **Explanation:** There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other. ``` **Example 2:** ``` **Input:** graph = [[1,3],[0,2],[1,3],[0,2]] **Output:** true **Explanation:** We can partition the nodes into two sets: {0, 2} and {1, 3}. ``` **Constraints:** `graph.length == n` `1 <= n <= 100` `0 <= graph[u].length < n` `0 <= graph[u][i] <= n - 1` `graph[u]` does not contain `u`. All the values of `graph[u]` are **unique**. If `graph[u]` contains `v`, then `graph[v]` contains `u`.', 'test_case': [{'label': 'Example 1', 'input': 'graph = [[1,2,3],[0,2],[0,1,3],[0,2]]', 'output': 'false Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.'}, {'label': 'Example 2', 'input': 'graph = [[1,3],[0,2],[1,3],[0,2]]', 'output': 'true Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}. Constraints: graph.length == n 1 <= n <= 100 0 <= graph[u].length < n 0 <= graph[u][i] <= n - 1 graph[u] does not contain u . All the values of graph[u] are unique . If graph[u] contains v , then graph[v] contains u .'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_bipartite(graph :: [[integer]]) :: boolean\\n  def is_bipartite(graph) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_bipartite(Graph :: [[integer()]]) -> boolean().\\nis_bipartite(Graph) ->\\n  .', 'scala_template': 'object Solution {\\n    def isBipartite(graph: Array[Array[Int]]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!354\n",
            "letter-case-permutation 800\n",
            "{'id': 800, 'name': 'letter-case-permutation', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/letter-case-permutation/', 'task_description': 'Given a string `s`, you can transform every letter individually to be lowercase or uppercase to create another string. Return _a list of all possible strings we could create_. Return the output in **any order**. **Example 1:** ``` **Input:** s = \"a1b2\" **Output:** [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"] ``` **Example 2:** ``` **Input:** s = \"3z4\" **Output:** [\"3z4\",\"3Z4\"] ``` **Constraints:** `1 <= s.length <= 12` `s` consists of lowercase English letters, uppercase English letters, and digits.', 'test_case': [{'label': 'Example 1', 'input': 's = \"a1b2\"', 'output': '[\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]'}, {'label': 'Example 2', 'input': 's = \"3z4\"', 'output': '[\"3z4\",\"3Z4\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec letter_case_permutation(s :: String.t) :: [String.t]\\n  def letter_case_permutation(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec letter_case_permutation(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nletter_case_permutation(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def letterCasePermutation(s: String): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!355\n",
            "minimum-distance-between-bst-nodes 799\n",
            "{'id': 799, 'name': 'minimum-distance-between-bst-nodes', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/minimum-distance-between-bst-nodes/', 'task_description': 'Given the `root` of a Binary Search Tree (BST), return _the minimum difference between the values of any two different nodes in the tree_. **Example 1:** ``` **Input:** root = [4,2,6,1,3] **Output:** 1 ``` **Example 2:** ``` **Input:** root = [1,0,48,null,null,12,49] **Output:** 1 ``` **Constraints:** The number of nodes in the tree is in the range `[2, 100]`. `0 <= Node.val <= 105` **Note:** This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/', 'test_case': [{'label': 'Example 1', 'input': 'root = [4,2,6,1,3]', 'output': '1'}, {'label': 'Example 2', 'input': 'root = [1,0,48,null,null,12,49]', 'output': '1 Constraints: The number of nodes in the tree is in the range [2, 100] . 0 <= Node.val <= 10 5 Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec min_diff_in_bst(root :: TreeNode.t | nil) :: integer\\n  def min_diff_in_bst(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec min_diff_in_bst(Root :: #tree_node{} | null) -> integer().\\nmin_diff_in_bst(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def minDiffInBST(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!356\n",
            "transform-to-chessboard 798\n",
            "{'id': 798, 'name': 'transform-to-chessboard', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/transform-to-chessboard/', 'task_description': \"You are given an `n x n` binary grid `board`. In each move, you can swap any two rows with each other, or any two columns with each other. Return _the minimum number of moves to transform the board into a **chessboard board**_. If the task is impossible, return `-1`. A **chessboard board** is a board where no `0`'s and no `1`'s are 4-directionally adjacent. **Example 1:** ``` **Input:** board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]] **Output:** 2 **Explanation:** One potential sequence of moves is shown. The first move swaps the first and second column. The second move swaps the second and third row. ``` **Example 2:** ``` **Input:** board = [[0,1],[1,0]] **Output:** 0 **Explanation:** Also note that the board with 0 in the top left corner, is also a valid chessboard. ``` **Example 3:** ``` **Input:** board = [[1,0],[1,0]] **Output:** -1 **Explanation:** No matter what sequence of moves you make, you cannot end with a valid chessboard. ``` **Constraints:** `n == board.length` `n == board[i].length` `2 <= n <= 30` `board[i][j]` is either `0` or `1`.\", 'test_case': [{'label': 'Example 1', 'input': 'board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]', 'output': '2 Explanation: One potential sequence of moves is shown.\\nThe first move swaps the first and second column.\\nThe second move swaps the second and third row.'}, {'label': 'Example 2', 'input': 'board = [[0,1],[1,0]]', 'output': '0 Explanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.'}, {'label': 'Example 3', 'input': 'board = [[1,0],[1,0]]', 'output': '-1 Explanation: No matter what sequence of moves you make, you cannot end with a valid chessboard. Constraints: n == board.length n == board[i].length 2 <= n <= 30 board[i][j] is either 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec moves_to_chessboard(board :: [[integer]]) :: integer\\n  def moves_to_chessboard(board) do\\n    \\n  end\\nend', 'erlang_template': '-spec moves_to_chessboard(Board :: [[integer()]]) -> integer().\\nmoves_to_chessboard(Board) ->\\n  .', 'scala_template': 'object Solution {\\n    def movesToChessboard(board: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!357\n",
            "rabbits-in-forest 797\n",
            "{'id': 797, 'name': 'rabbits-in-forest', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rabbits-in-forest/', 'task_description': 'There is a forest with an unknown number of rabbits. We asked n rabbits **\"How many rabbits have the same color as you?\"** and collected the answers in an integer array `answers` where `answers[i]` is the answer of the `ith` rabbit. Given the array `answers`, return _the minimum number of rabbits that could be in the forest_. **Example 1:** ``` **Input:** answers = [1,1,2] **Output:** 5 **Explanation:** The two rabbits that answered \"1\" could both be the same color, say red. The rabbit that answered \"2\" can\\'t be red or the answers would be inconsistent. Say the rabbit that answered \"2\" was blue. Then there should be 2 other blue rabbits in the forest that didn\\'t answer into the array. The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn\\'t. ``` **Example 2:** ``` **Input:** answers = [10,10,10] **Output:** 11 ``` **Constraints:** `1 <= answers.length <= 1000` `0 <= answers[i] < 1000`', 'test_case': [{'label': 'Example 1', 'input': 'answers = [1,1,2]', 'output': '5 Explanation: The two rabbits that answered \"1\" could both be the same color, say red.\\nThe rabbit that answered \"2\" can\\'t be red or the answers would be inconsistent.\\nSay the rabbit that answered \"2\" was blue.\\nThen there should be 2 other blue rabbits in the forest that didn\\'t answer into the array.\\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn\\'t.'}, {'label': 'Example 2', 'input': 'answers = [10,10,10]', 'output': '11'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_rabbits(answers :: [integer]) :: integer\\n  def num_rabbits(answers) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_rabbits(Answers :: [integer()]) -> integer().\\nnum_rabbits(Answers) ->\\n  .', 'scala_template': 'object Solution {\\n    def numRabbits(answers: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!358\n",
            "reaching-points 796\n",
            "{'id': 796, 'name': 'reaching-points', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/reaching-points/', 'task_description': 'Given four integers `sx`, `sy`, `tx`, and `ty`, return `true`_ if it is possible to convert the point _`(sx, sy)`_ to the point _`(tx, ty)` _through some operations__, or _`false`_ otherwise_. The allowed operation on some point `(x, y)` is to convert it to either `(x, x + y)` or `(x + y, y)`. **Example 1:** ``` **Input:** sx = 1, sy = 1, tx = 3, ty = 5 **Output:** true **Explanation:** One series of moves that transforms the starting point to the target is: (1, 1) -> (1, 2) (1, 2) -> (3, 2) (3, 2) -> (3, 5) ``` **Example 2:** ``` **Input:** sx = 1, sy = 1, tx = 2, ty = 2 **Output:** false ``` **Example 3:** ``` **Input:** sx = 1, sy = 1, tx = 1, ty = 1 **Output:** true ``` **Constraints:** `1 <= sx, sy, tx, ty <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'sx = 1, sy = 1, tx = 3, ty = 5', 'output': 'true Explanation: One series of moves that transforms the starting point to the target is:\\n(1, 1) -> (1, 2)\\n(1, 2) -> (3, 2)\\n(3, 2) -> (3, 5)'}, {'label': 'Example 2', 'input': 'sx = 1, sy = 1, tx = 2, ty = 2', 'output': 'false'}, {'label': 'Example 3', 'input': 'sx = 1, sy = 1, tx = 1, ty = 1', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec reaching_points(sx :: integer, sy :: integer, tx :: integer, ty :: integer) :: boolean\\n  def reaching_points(sx, sy, tx, ty) do\\n    \\n  end\\nend', 'erlang_template': '-spec reaching_points(Sx :: integer(), Sy :: integer(), Tx :: integer(), Ty :: integer()) -> boolean().\\nreaching_points(Sx, Sy, Tx, Ty) ->\\n  .', 'scala_template': 'object Solution {\\n    def reachingPoints(sx: Int, sy: Int, tx: Int, ty: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!359\n",
            "k-th-symbol-in-grammar 795\n",
            "{'id': 795, 'name': 'k-th-symbol-in-grammar', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/k-th-symbol-in-grammar/', 'task_description': 'We build a table of `n` rows (**1-indexed**). We start by writing `0` in the `1st` row. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`. For example, for `n = 3`, the `1st` row is `0`, the `2nd` row is `01`, and the `3rd` row is `0110`. Given two integer `n` and `k`, return the `kth` (**1-indexed**) symbol in the `nth` row of a table of `n` rows. **Example 1:** ``` **Input:** n = 1, k = 1 **Output:** 0 **Explanation:** row 1: 0 ``` **Example 2:** ``` **Input:** n = 2, k = 1 **Output:** 0 **Explanation:** row 1: 0 row 2: 01 ``` **Example 3:** ``` **Input:** n = 2, k = 2 **Output:** 1 **Explanation:** row 1: 0 row 2: 01 ``` **Constraints:** `1 <= n <= 30` `1 <= k <= 2n - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 1, k = 1', 'output': '0 Explanation: row 1: 0'}, {'label': 'Example 2', 'input': 'n = 2, k = 1', 'output': '0 Explanation: row 1: 0\\nrow 2: 0 1'}, {'label': 'Example 3', 'input': 'n = 2, k = 2', 'output': '1 Explanation: row 1: 0\\nrow 2: 0 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec kth_grammar(n :: integer, k :: integer) :: integer\\n  def kth_grammar(n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec kth_grammar(N :: integer(), K :: integer()) -> integer().\\nkth_grammar(N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def kthGrammar(n: Int, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!360\n",
            "swim-in-rising-water 794\n",
            "{'id': 794, 'name': 'swim-in-rising-water', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/swim-in-rising-water/', 'task_description': 'You are given an `n x n` integer matrix `grid` where each value `grid[i][j]` represents the elevation at that point `(i, j)`. The rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim. Return _the least time until you can reach the bottom right square _`(n - 1, n - 1)`_ if you start at the top left square _`(0, 0)`. **Example 1:** ``` **Input:** grid = [[0,2],[1,3]] **Output:** 3 Explanation: At time 0, you are in grid location (0, 0). You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0. You cannot reach point (1, 1) until time 3. When the depth of water is 3, we can swim anywhere inside the grid. ``` **Example 2:** ``` **Input:** grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]] **Output:** 16 **Explanation:** The final route is shown. We need to wait until time 16 so that (0, 0) and (4, 4) are connected. ``` **Constraints:** `n == grid.length` `n == grid[i].length` `1 <= n <= 50` `0 <= grid[i][j] < n2` Each value `grid[i][j]` is **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,2],[1,3]]', 'output': '3\\nExplanation:\\nAt time 0, you are in grid location (0, 0).\\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\\nYou cannot reach point (1, 1) until time 3.\\nWhen the depth of water is 3, we can swim anywhere inside the grid.'}, {'label': 'Example 2', 'input': 'grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]', 'output': '16 Explanation: The final route is shown.\\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected. Constraints: n == grid.length n == grid[i].length 1 <= n <= 50 0 <= grid[i][j] <\\xa0n 2 Each value grid[i][j] is unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec swim_in_water(grid :: [[integer]]) :: integer\\n  def swim_in_water(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec swim_in_water(Grid :: [[integer()]]) -> integer().\\nswim_in_water(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def swimInWater(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!361\n",
            "swap-adjacent-in-lr-string 793\n",
            "{'id': 793, 'name': 'swap-adjacent-in-lr-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/swap-adjacent-in-lr-string/', 'task_description': 'In a string composed of `\\'L\\'`, `\\'R\\'`, and `\\'X\\'` characters, like `\"RXXLRXRXL\"`, a move consists of either replacing one occurrence of `\"XL\"` with `\"LX\"`, or replacing one occurrence of `\"RX\"` with `\"XR\"`. Given the starting string `start` and the ending string `result`, return `True` if and only if there exists a sequence of moves to transform `start` to `result`. **Example 1:** ``` **Input:** start = \"RXXLRXRXL\", result = \"XRLXXRRLX\" **Output:** true **Explanation:** We can transform start to result following these steps: RXXLRXRXL -> XRXLRXRXL -> XRLXRXRXL -> XRLXXRRXL -> XRLXXRRLX ``` **Example 2:** ``` **Input:** start = \"X\", result = \"L\" **Output:** false ``` **Constraints:** `1 <= start.length <= 104` `start.length == result.length` Both `start` and `result` will only consist of characters in `\\'L\\'`, `\\'R\\'`, and `\\'X\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'start = \"RXXLRXRXL\", result = \"XRLXXRRLX\"', 'output': 'true Explanation: We can transform start to result following these steps:\\nRXXLRXRXL ->\\nXRXLRXRXL ->\\nXRLXRXRXL ->\\nXRLXXRRXL ->\\nXRLXXRRLX'}, {'label': 'Example 2', 'input': 'start = \"X\", result = \"L\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_transform(start :: String.t, result :: String.t) :: boolean\\n  def can_transform(start, result) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_transform(Start :: unicode:unicode_binary(), Result :: unicode:unicode_binary()) -> boolean().\\ncan_transform(Start, Result) ->\\n  .', 'scala_template': 'object Solution {\\n    def canTransform(start: String, result: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!362\n",
            "binary-search 792\n",
            "{'id': 792, 'name': 'binary-search', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-search/', 'task_description': 'Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`. You must write an algorithm with `O(log n)` runtime complexity. **Example 1:** ``` **Input:** nums = [-1,0,3,5,9,12], target = 9 **Output:** 4 **Explanation:** 9 exists in nums and its index is 4 ``` **Example 2:** ``` **Input:** nums = [-1,0,3,5,9,12], target = 2 **Output:** -1 **Explanation:** 2 does not exist in nums so return -1 ``` **Constraints:** `1 <= nums.length <= 104` `-104 < nums[i], target < 104` All the integers in `nums` are **unique**. `nums` is sorted in ascending order.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [-1,0,3,5,9,12], target = 9', 'output': '4 Explanation: 9 exists in nums and its index is 4'}, {'label': 'Example 2', 'input': 'nums = [-1,0,3,5,9,12], target = 2', 'output': '-1 Explanation: 2 does not exist in nums so return -1'}], 'elixir_template': 'defmodule Solution do\\n  @spec search(nums :: [integer], target :: integer) :: integer\\n  def search(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec search(Nums :: [integer()], Target :: integer()) -> integer().\\nsearch(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def search(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!363\n",
            "global-and-local-inversions 790\n",
            "{'id': 790, 'name': 'global-and-local-inversions', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/global-and-local-inversions/', 'task_description': 'You are given an integer array `nums` of length `n` which represents a permutation of all the integers in the range `[0, n - 1]`. The number of **global inversions** is the number of the different pairs `(i, j)` where: `0 <= i < j < n` `nums[i] > nums[j]` The number of **local inversions** is the number of indices `i` where: `0 <= i < n - 1` `nums[i] > nums[i + 1]` Return `true` _if the number of **global inversions** is equal to the number of **local inversions**_. **Example 1:** ``` **Input:** nums = [1,0,2] **Output:** true **Explanation:** There is 1 global inversion and 1 local inversion. ``` **Example 2:** ``` **Input:** nums = [1,2,0] **Output:** false **Explanation:** There are 2 global inversions and 1 local inversion. ``` **Constraints:** `n == nums.length` `1 <= n <= 105` `0 <= nums[i] < n` All the integers of `nums` are **unique**. `nums` is a permutation of all the numbers in the range `[0, n - 1]`.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,0,2]', 'output': 'true Explanation: There is 1 global inversion and 1 local inversion.'}, {'label': 'Example 2', 'input': 'nums = [1,2,0]', 'output': 'false Explanation: There are 2 global inversions and 1 local inversion. Constraints: n == nums.length 1 <= n <= 10 5 0 <= nums[i] < n All the integers of nums are unique . nums is a permutation of all the numbers in the range [0, n - 1] .'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_ideal_permutation(nums :: [integer]) :: boolean\\n  def is_ideal_permutation(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_ideal_permutation(Nums :: [integer()]) -> boolean().\\nis_ideal_permutation(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def isIdealPermutation(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!364\n",
            "kth-largest-element-in-a-stream 789\n",
            "{'id': 789, 'name': 'kth-largest-element-in-a-stream', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/kth-largest-element-in-a-stream/', 'task_description': 'You are part of a university admissions office and need to keep track of the `kth` highest test score from applicants in real-time. This helps to determine cut-off marks for interviews and admissions dynamically as new applicants submit their scores. You are tasked to implement a class which, for a given integer `k`, maintains a stream of test scores and continuously returns the `k`th highest test score **after** a new score has been submitted. More specifically, we are looking for the `k`th highest score in the sorted list of all scores. Implement the `KthLargest` class: `KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of test scores `nums`. `int add(int val)` Adds a new test score `val` to the stream and returns the element representing the `kth` largest element in the pool of test scores so far. **Example 1:** **Input:** [\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"] [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]] **Output:** [null, 4, 5, 5, 8, 8] **Explanation:** KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]); kthLargest.add(3); // return 4 kthLargest.add(5); // return 5 kthLargest.add(10); // return 5 kthLargest.add(9); // return 8 kthLargest.add(4); // return 8 **Example 2:** **Input:** [\"KthLargest\", \"add\", \"add\", \"add\", \"add\"] [[4, [7, 7, 7, 7, 8, 3]], [2], [10], [9], [9]] **Output:** [null, 7, 7, 7, 8] **Explanation:** KthLargest kthLargest = new KthLargest(4, [7, 7, 7, 7, 8, 3]); kthLargest.add(2); // return 7 kthLargest.add(10); // return 7 kthLargest.add(9); // return 7 kthLargest.add(9); // return 8 **Constraints:** `0 <= nums.length <= 104` `1 <= k <= nums.length + 1` `-104 <= nums[i] <= 104` `-104 <= val <= 104` At most `104` calls will be made to `add`.', 'test_case': [{'label': 'Example 1', 'input': '[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"] [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]', 'output': '[null, 4, 5, 5, 8, 8] Explanation: KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]); kthLargest.add(3); // return 4 kthLargest.add(5); // return 5 kthLargest.add(10); // return 5 kthLargest.add(9); // return 8 kthLargest.add(4); // return 8'}, {'label': 'Example 2', 'input': '[\"KthLargest\", \"add\", \"add\", \"add\", \"add\"] [[4, [7, 7, 7, 7, 8, 3]], [2], [10], [9], [9]]', 'output': '[null, 7, 7, 7, 8] Explanation: KthLargest kthLargest = new KthLargest(4, [7, 7, 7, 7, 8, 3]); kthLargest.add(2); // return 7 kthLargest.add(10); // return 7 kthLargest.add(9); // return 7 kthLargest.add(9); // return 8'}], 'elixir_template': 'defmodule KthLargest do\\n  @spec init_(k :: integer, nums :: [integer]) :: any\\n  def init_(k, nums) do\\n    \\n  end\\n\\n  @spec add(val :: integer) :: integer\\n  def add(val) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# KthLargest.init_(k, nums)\\n# param_1 = KthLargest.add(val)\\n\\n# KthLargest.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec kth_largest_init_(K :: integer(), Nums :: [integer()]) -> any().\\nkth_largest_init_(K, Nums) ->\\n  .\\n\\n-spec kth_largest_add(Val :: integer()) -> integer().\\nkth_largest_add(Val) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% kth_largest_init_(K, Nums),\\n%% Param_1 = kth_largest_add(Val),\\n\\n%% kth_largest_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class KthLargest(_k: Int, _nums: Array[Int]) {\\n\\n    def add(`val`: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your KthLargest object will be instantiated and called as such:\\n * val obj = new KthLargest(k, nums)\\n * val param_1 = obj.add(`val`)\\n */'}\n",
            "Done!365\n",
            "sliding-puzzle 787\n",
            "{'id': 787, 'name': 'sliding-puzzle', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/sliding-puzzle/', 'task_description': 'On an `2 x 3` board, there are five tiles labeled from `1` to `5`, and an empty square represented by `0`. A **move** consists of choosing `0` and a 4-directionally adjacent number and swapping it. The state of the board is solved if and only if the board is `[[1,2,3],[4,5,0]]`. Given the puzzle board `board`, return _the least number of moves required so that the state of the board is solved_. If it is impossible for the state of the board to be solved, return `-1`. **Example 1:** ``` **Input:** board = [[1,2,3],[4,0,5]] **Output:** 1 **Explanation:** Swap the 0 and the 5 in one move. ``` **Example 2:** ``` **Input:** board = [[1,2,3],[5,4,0]] **Output:** -1 **Explanation:** No number of moves will make the board solved. ``` **Example 3:** ``` **Input:** board = [[4,1,2],[5,0,3]] **Output:** 5 **Explanation:** 5 is the smallest number of moves that solves the board. An example path: After move 0: [[4,1,2],[5,0,3]] After move 1: [[4,1,2],[0,5,3]] After move 2: [[0,1,2],[4,5,3]] After move 3: [[1,0,2],[4,5,3]] After move 4: [[1,2,0],[4,5,3]] After move 5: [[1,2,3],[4,5,0]] ``` **Constraints:** `board.length == 2` `board[i].length == 3` `0 <= board[i][j] <= 5` Each value `board[i][j]` is **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'board = [[1,2,3],[4,0,5]]', 'output': '1 Explanation: Swap the 0 and the 5 in one move.'}, {'label': 'Example 2', 'input': 'board = [[1,2,3],[5,4,0]]', 'output': '-1 Explanation: No number of moves will make the board solved.'}, {'label': 'Example 3', 'input': 'board = [[4,1,2],[5,0,3]]', 'output': '5 Explanation: 5 is the smallest number of moves that solves the board.\\nAn example path:\\nAfter move 0: [[4,1,2],[5,0,3]]\\nAfter move 1: [[4,1,2],[0,5,3]]\\nAfter move 2: [[0,1,2],[4,5,3]]\\nAfter move 3: [[1,0,2],[4,5,3]]\\nAfter move 4: [[1,2,0],[4,5,3]]\\nAfter move 5: [[1,2,3],[4,5,0]] Constraints: board.length == 2 board[i].length == 3 0 <= board[i][j] <= 5 Each value board[i][j] is unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec sliding_puzzle(board :: [[integer]]) :: integer\\n  def sliding_puzzle(board) do\\n    \\n  end\\nend', 'erlang_template': '-spec sliding_puzzle(Board :: [[integer()]]) -> integer().\\nsliding_puzzle(Board) ->\\n  .', 'scala_template': 'object Solution {\\n    def slidingPuzzle(board: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!366\n",
            "insert-into-a-binary-search-tree 784\n",
            "{'id': 784, 'name': 'insert-into-a-binary-search-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/insert-into-a-binary-search-tree/', 'task_description': \"You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return _the root node of the BST after the insertion_. It is **guaranteed** that the new value does not exist in the original BST. **Notice** that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return **any of them**. **Example 1:** ``` **Input:** root = [4,2,7,1,3], val = 5 **Output:** [4,2,7,1,3,5] **Explanation:** Another accepted tree is: ``` **Example 2:** ``` **Input:** root = [40,20,60,10,30,50,70], val = 25 **Output:** [40,20,60,10,30,50,70,null,null,25] ``` **Example 3:** ``` **Input:** root = [4,2,7,1,3,null,null,null,null,null,null], val = 5 **Output:** [4,2,7,1,3,5] ``` **Constraints:** The number of nodes in the tree will be in the range `[0, 104]`. `-108 <= Node.val <= 108` All the values `Node.val` are **unique**. `-108 <= val <= 108` It's **guaranteed** that `val` does not exist in the original BST.\", 'test_case': [{'label': 'Example 1', 'input': 'root = [4,2,7,1,3], val = 5', 'output': '[4,2,7,1,3,5] Explanation: Another accepted tree is:'}, {'label': 'Example 2', 'input': 'root = [40,20,60,10,30,50,70], val = 25', 'output': '[40,20,60,10,30,50,70,null,null,25]'}, {'label': 'Example 3', 'input': 'root = [4,2,7,1,3,null,null,null,null,null,null], val = 5', 'output': \"[4,2,7,1,3,5] Constraints: The number of nodes in\\xa0the tree will be in the range [0,\\xa010 4 ] . -10 8 <= Node.val <= 10 8 All the values Node.val are unique . -10 8 <= val <= 10 8 It's guaranteed that val does not exist in the original BST.\"}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec insert_into_bst(root :: TreeNode.t | nil, val :: integer) :: TreeNode.t | nil\\n  def insert_into_bst(root, val) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec insert_into_bst(Root :: #tree_node{} | null, Val :: integer()) -> #tree_node{} | null.\\ninsert_into_bst(Root, Val) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def insertIntoBST(root: TreeNode, `val`: Int): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!367\n",
            "search-in-a-binary-search-tree 783\n",
            "{'id': 783, 'name': 'search-in-a-binary-search-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/search-in-a-binary-search-tree/', 'task_description': \"You are given the `root` of a binary search tree (BST) and an integer `val`. Find the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`. **Example 1:** ``` **Input:** root = [4,2,7,1,3], val = 2 **Output:** [2,1,3] ``` **Example 2:** ``` **Input:** root = [4,2,7,1,3], val = 5 **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 5000]`. `1 <= Node.val <= 107` `root` is a binary search tree. `1 <= val <= 107`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [4,2,7,1,3], val = 2', 'output': '[2,1,3]'}, {'label': 'Example 2', 'input': 'root = [4,2,7,1,3], val = 5', 'output': '[] Constraints: The number of nodes in the tree is in the range [1, 5000] . 1 <= Node.val <= 10 7 root is a binary search tree. 1 <= val <= 10 7'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec search_bst(root :: TreeNode.t | nil, val :: integer) :: TreeNode.t | nil\\n  def search_bst(root, val) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec search_bst(Root :: #tree_node{} | null, Val :: integer()) -> #tree_node{} | null.\\nsearch_bst(Root, Val) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def searchBST(root: TreeNode, `val`: Int): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!368\n",
            "jewels-and-stones 782\n",
            "{'id': 782, 'name': 'jewels-and-stones', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/jewels-and-stones/', 'task_description': 'You\\'re given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels. Letters are case sensitive, so `\"a\"` is considered a different type of stone from `\"A\"`. **Example 1:** ``` **Input:** jewels = \"aA\", stones = \"aAAbbbb\" **Output:** 3 ``` **Example 2:** ``` **Input:** jewels = \"z\", stones = \"ZZ\" **Output:** 0 ``` **Constraints:** `1 <= jewels.length, stones.length <= 50` `jewels` and `stones` consist of only English letters. All the characters of `jewels` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'jewels = \"aA\", stones = \"aAAbbbb\"', 'output': '3'}, {'label': 'Example 2', 'input': 'jewels = \"z\", stones = \"ZZ\"', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_jewels_in_stones(jewels :: String.t, stones :: String.t) :: integer\\n  def num_jewels_in_stones(jewels, stones) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_jewels_in_stones(Jewels :: unicode:unicode_binary(), Stones :: unicode:unicode_binary()) -> integer().\\nnum_jewels_in_stones(Jewels, Stones) ->\\n  .', 'scala_template': 'object Solution {\\n    def numJewelsInStones(jewels: String, stones: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!369\n",
            "basic-calculator-iv 781\n",
            "{'id': 781, 'name': 'basic-calculator-iv', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/basic-calculator-iv/', 'task_description': 'Given an expression such as `expression = \"e + 8 - a + 5\"` and an evaluation map such as `{\"e\": 1}` (given in terms of `evalvars = [\"e\"]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[\"-1*a\",\"14\"]` An expression alternates chunks and symbols, with a space separating each chunk and symbol. A chunk is either an expression in parentheses, a variable, or a non-negative integer. A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x\"` or `\"-x\"`. Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, `expression = \"1 + 2 * 3\"` has an answer of `[\"7\"]`. The format of the output is as follows: For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like `\"b*a*c\"`, only `\"a*b*c\"`. Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term. For example, `\"a*a*b*c\"` has degree `4`. The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed. An example of a well-formatted answer is `[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]`. Terms (including constant terms) with coefficient `0` are not included. For example, an expression of `\"0\"` has an output of `[]`. **Note:** You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`. **Example 1:** ``` **Input:** expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1] **Output:** [\"-1*a\",\"14\"] ``` **Example 2:** ``` **Input:** expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12] **Output:** [\"-1*pressure\",\"5\"] ``` **Example 3:** ``` **Input:** expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = [] **Output:** [\"1*e*e\",\"-64\"] ``` **Constraints:** `1 <= expression.length <= 250` `expression` consists of lowercase English letters, digits, `\\'+\\'`, `\\'-\\'`, `\\'*\\'`, `\\'(\\'`, `\\')\\'`, `\\' \\'`. `expression` does not contain any leading or trailing spaces. All the tokens in `expression` are separated by a single space. `0 <= evalvars.length <= 100` `1 <= evalvars[i].length <= 20` `evalvars[i]` consists of lowercase English letters. `evalints.length == evalvars.length` `-100 <= evalints[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]', 'output': '[\"-1*a\",\"14\"]'}, {'label': 'Example 2', 'input': 'expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]', 'output': '[\"-1*pressure\",\"5\"]'}, {'label': 'Example 3', 'input': 'expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []', 'output': '[\"1*e*e\",\"-64\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec basic_calculator_iv(expression :: String.t, evalvars :: [String.t], evalints :: [integer]) :: [String.t]\\n  def basic_calculator_iv(expression, evalvars, evalints) do\\n    \\n  end\\nend', 'erlang_template': '-spec basic_calculator_iv(Expression :: unicode:unicode_binary(), Evalvars :: [unicode:unicode_binary()], Evalints :: [integer()]) -> [unicode:unicode_binary()].\\nbasic_calculator_iv(Expression, Evalvars, Evalints) ->\\n  .', 'scala_template': 'object Solution {\\n    def basicCalculatorIV(expression: String, evalvars: Array[String], evalints: Array[Int]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!370\n",
            "max-chunks-to-make-sorted 780\n",
            "{'id': 780, 'name': 'max-chunks-to-make-sorted', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/max-chunks-to-make-sorted/', 'task_description': \"You are given an integer array `arr` of length `n` that represents a permutation of the integers in the range `[0, n - 1]`. We split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array. Return _the largest number of chunks we can make to sort the array_. **Example 1:** ``` **Input:** arr = [4,3,2,1,0] **Output:** 1 **Explanation:** Splitting into two or more chunks will not return the required result. For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted. ``` **Example 2:** ``` **Input:** arr = [1,0,2,3,4] **Output:** 4 **Explanation:** We can split into two chunks, such as [1, 0], [2, 3, 4]. However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible. ``` **Constraints:** `n == arr.length` `1 <= n <= 10` `0 <= arr[i] < n` All the elements of `arr` are **unique**.\", 'test_case': [{'label': 'Example 1', 'input': 'arr = [4,3,2,1,0]', 'output': \"1 Explanation: Splitting into two or more chunks will not return the required result.\\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\"}, {'label': 'Example 2', 'input': 'arr = [1,0,2,3,4]', 'output': '4 Explanation: We can split into two chunks, such as [1, 0], [2, 3, 4].\\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible. Constraints: n == arr.length 1 <= n <= 10 0 <= arr[i] < n All the elements of arr are unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_chunks_to_sorted(arr :: [integer]) :: integer\\n  def max_chunks_to_sorted(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_chunks_to_sorted(Arr :: [integer()]) -> integer().\\nmax_chunks_to_sorted(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxChunksToSorted(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!371\n",
            "max-chunks-to-make-sorted-ii 779\n",
            "{'id': 779, 'name': 'max-chunks-to-make-sorted-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/max-chunks-to-make-sorted-ii/', 'task_description': \"You are given an integer array `arr`. We split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array. Return _the largest number of chunks we can make to sort the array_. **Example 1:** ``` **Input:** arr = [5,4,3,2,1] **Output:** 1 **Explanation:** Splitting into two or more chunks will not return the required result. For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted. ``` **Example 2:** ``` **Input:** arr = [2,1,3,4,4] **Output:** 4 **Explanation:** We can split into two chunks, such as [2, 1], [3, 4, 4]. However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible. ``` **Constraints:** `1 <= arr.length <= 2000` `0 <= arr[i] <= 108`\", 'test_case': [{'label': 'Example 1', 'input': 'arr = [5,4,3,2,1]', 'output': \"1 Explanation: Splitting into two or more chunks will not return the required result.\\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.\"}, {'label': 'Example 2', 'input': 'arr = [2,1,3,4,4]', 'output': '4 Explanation: We can split into two chunks, such as [2, 1], [3, 4, 4].\\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_chunks_to_sorted(arr :: [integer]) :: integer\\n  def max_chunks_to_sorted(arr) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_chunks_to_sorted(Arr :: [integer()]) -> integer().\\nmax_chunks_to_sorted(Arr) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxChunksToSorted(arr: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!372\n",
            "reorganize-string 778\n",
            "{'id': 778, 'name': 'reorganize-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reorganize-string/', 'task_description': 'Given a string `s`, rearrange the characters of `s` so that any two adjacent characters are not the same. Return _any possible rearrangement of_ `s` _or return_ `\"\"` _if not possible_. **Example 1:** ``` **Input:** s = \"aab\" **Output:** \"aba\" ``` **Example 2:** ``` **Input:** s = \"aaab\" **Output:** \"\" ``` **Constraints:** `1 <= s.length <= 500` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"aab\"', 'output': '\"aba\"'}, {'label': 'Example 2', 'input': 's = \"aaab\"', 'output': '\"\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec reorganize_string(s :: String.t) :: String.t\\n  def reorganize_string(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec reorganize_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nreorganize_string(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def reorganizeString(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!373\n",
            "toeplitz-matrix 777\n",
            "{'id': 777, 'name': 'toeplitz-matrix', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/toeplitz-matrix/', 'task_description': 'Given an `m x n` `matrix`, return _`true` if the matrix is Toeplitz. Otherwise, return `false`._ A matrix is **Toeplitz** if every diagonal from top-left to bottom-right has the same elements. **Example 1:** ``` **Input:** matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]] **Output:** true **Explanation:** In the above grid, the diagonals are: \"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\". In each diagonal all elements are the same, so the answer is True. ``` **Example 2:** ``` **Input:** matrix = [[1,2],[2,2]] **Output:** false **Explanation:** The diagonal \"[1, 2]\" has different elements. ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 20` `0 <= matrix[i][j] <= 99` **Follow up:** What if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once? What if the `matrix` is so large that you can only load up a partial row into the memory at once?', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]', 'output': 'true Explanation: In the above grid, the\\xa0diagonals are:\\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\\nIn each diagonal all elements are the same, so the answer is True.'}, {'label': 'Example 2', 'input': 'matrix = [[1,2],[2,2]]', 'output': 'false Explanation: The diagonal \"[1, 2]\" has different elements. Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 20 0 <= matrix[i][j] <= 99 Follow up: What if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once? What if the matrix is so large that you can only load up a partial row into the memory at once?'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_toeplitz_matrix(matrix :: [[integer]]) :: boolean\\n  def is_toeplitz_matrix(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_toeplitz_matrix(Matrix :: [[integer()]]) -> boolean().\\nis_toeplitz_matrix(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def isToeplitzMatrix(matrix: Array[Array[Int]]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!374\n",
            "n-ary-tree-postorder-traversal 776\n",
            "{'id': 776, 'name': 'n-ary-tree-postorder-traversal', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/n-ary-tree-postorder-traversal/', 'task_description': \"Given the `root` of an n-ary tree, return _the postorder traversal of its nodes' values_. Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples) **Example 1:** ``` **Input:** root = [1,null,3,2,4,null,5,6] **Output:** [5,6,3,2,4,1] ``` **Example 2:** ``` **Input:** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] **Output:** [2,6,14,11,7,3,12,8,4,13,9,10,5,1] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `0 <= Node.val <= 104` The height of the n-ary tree is less than or equal to `1000`. **Follow up:** Recursive solution is trivial, could you do it iteratively?\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,3,2,4,null,5,6]', 'output': '[5,6,3,2,4,1]'}, {'label': 'Example 2', 'input': 'root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]', 'output': '[2,6,14,11,7,3,12,8,4,13,9,10,5,1] Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . 0 <= Node.val <= 10 4 The height of the n-ary tree is less than or equal to 1000 . Follow up: Recursive solution is trivial, could you do it iteratively?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var children: List[Node] = List()\\n * }\\n */\\n\\nobject Solution {\\n    def postorder(root: Node): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!375\n",
            "n-ary-tree-preorder-traversal 775\n",
            "{'id': 775, 'name': 'n-ary-tree-preorder-traversal', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/n-ary-tree-preorder-traversal/', 'task_description': \"Given the `root` of an n-ary tree, return _the preorder traversal of its nodes' values_. Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples) **Example 1:** ``` **Input:** root = [1,null,3,2,4,null,5,6] **Output:** [1,3,5,6,2,4] ``` **Example 2:** ``` **Input:** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] **Output:** [1,2,3,6,7,11,14,4,8,12,5,9,13,10] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `0 <= Node.val <= 104` The height of the n-ary tree is less than or equal to `1000`. **Follow up:** Recursive solution is trivial, could you do it iteratively?\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,3,2,4,null,5,6]', 'output': '[1,3,5,6,2,4]'}, {'label': 'Example 2', 'input': 'root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]', 'output': '[1,2,3,6,7,11,14,4,8,12,5,9,13,10] Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . 0 <= Node.val <= 10 4 The height of the n-ary tree is less than or equal to 1000 . Follow up: Recursive solution is trivial, could you do it iteratively?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var children: List[Node] = List()\\n * }\\n */\\n\\nobject Solution {\\n    def preorder(root: Node): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!376\n",
            "maximum-depth-of-n-ary-tree 774\n",
            "{'id': 774, 'name': 'maximum-depth-of-n-ary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/maximum-depth-of-n-ary-tree/', 'task_description': 'Given a n-ary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. _Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._ **Example 1:** ``` **Input:** root = [1,null,3,2,4,null,5,6] **Output:** 3 ``` **Example 2:** ``` **Input:** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] **Output:** 5 ``` **Constraints:** The total number of nodes is in the range `[0, 104]`. The depth of the n-ary tree is less than or equal to `1000`.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,3,2,4,null,5,6]', 'output': '3'}, {'label': 'Example 2', 'input': 'root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]', 'output': '5 Constraints: The total number of nodes is in the range [0, 10 4 ] . The depth of the n-ary tree is less than or equal to 1000 .'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var children: List[Node] = List()\\n * }\\n */\\n\\nobject Solution {\\n    def maxDepth(root: Node): Int = {\\n        \\n    }\\n}'}\n",
            "Done!377\n",
            "logical-or-of-two-binary-grids-represented-as-quad-trees 773\n",
            "{'id': 773, 'name': 'logical-or-of-two-binary-grids-represented-as-quad-trees', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees/', 'task_description': \"A Binary Matrix is a matrix in which all the elements are either **0** or **1**. Given `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix. Return _a Quad-Tree_ representing the `n * n` binary matrix which is the result of **logical bitwise OR** of the two binary matrixes represented by `quadTree1` and `quadTree2`. Notice that you can assign the value of a node to **True** or **False** when `isLeaf` is **False**, and both are **accepted** in the answer. A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes: `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children. ``` class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } ``` We can construct a Quad-Tree from a two-dimensional area using the following steps: If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop. If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. Recurse for each of the children with the proper sub-grid. If you want to know more about the Quad-Tree, you can refer to the wiki. **Quad-Tree format:** The input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below. It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`. If the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**. **Example 1:** ``` **Input:** quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]] , quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] **Output:** [[0,0],[1,1],[1,1],[1,1],[1,0]] **Explanation:** quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree. If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree. Notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree. ``` **Example 2:** ``` **Input:** quadTree1 = [[1,0]], quadTree2 = [[1,0]] **Output:** [[1,0]] **Explanation:** Each tree represents a binary matrix of size 1*1. Each matrix contains only zero. The resulting matrix is of size 1*1 with also zero. ``` **Constraints:** `quadTree1` and `quadTree2` are both **valid** Quad-Trees each representing a `n * n` grid. `n == 2x` where `0 <= x <= 9`.\", 'test_case': [{'label': 'Example 1', 'input': 'quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]', 'output': \"[[0,0],[1,1],[1,1],[1,1],[1,0]] Explanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\"}, {'label': 'Example 2', 'input': 'quadTree1 = [[1,0]], quadTree2 = [[1,0]]', 'output': '[[1,0]] Explanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\\nThe resulting matrix is of size 1*1 with also zero. Constraints: quadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid. n == 2 x where 0 <= x <= 9 .'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a QuadTree node.\\n * class Node(var _value: Boolean, var _isLeaf: Boolean) {\\n *   var value: Int = _value\\n *   var isLeaf: Boolean = _isLeaf\\n *   var topLeft: Node = null\\n *   var topRight: Node = null\\n *   var bottomLeft: Node = null\\n *   var bottomRight: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def intersect(quadTree1: Node, quadTree2: Node): Node = {\\n        \\n    }\\n}'}\n",
            "Done!378\n",
            "construct-quad-tree 772\n",
            "{'id': 772, 'name': 'construct-quad-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/construct-quad-tree/', 'task_description': \"Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent `grid` with a Quad-Tree. Return _the root of the Quad-Tree representing _`grid`. A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes: `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. Notice that you can assign the `val` to True or False when `isLeaf` is False, and both are accepted in the answer. `isLeaf`: True if the node is a leaf node on the tree or False if the node has four children. ``` class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } ``` We can construct a Quad-Tree from a two-dimensional area using the following steps: If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop. If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. Recurse for each of the children with the proper sub-grid. If you want to know more about the Quad-Tree, you can refer to the wiki. **Quad-Tree format:** You don't need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below. It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`. If the value of `isLeaf` or `val` is True we represent it as **1** in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as **0**. **Example 1:** ``` **Input:** grid = [[0,1],[1,0]] **Output:** [[0,1],[1,0],[1,1],[1,1],[1,0]] **Explanation:** The explanation of this example is shown below: Notice that 0 represents False and 1 represents True in the photo representing the Quad-Tree. ``` **Example 2:** ``` **Input:** grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]] **Output:** [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] **Explanation:** All values in the grid are not the same. We divide the grid into four sub-grids. The topLeft, bottomLeft and bottomRight each has the same value. The topRight have different values so we divide it into 4 sub-grids where each has the same value. Explanation is shown in the photo below: ``` **Constraints:** `n == grid.length == grid[i].length` `n == 2x` where `0 <= x <= 6`\", 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,1],[1,0]]', 'output': '[[0,1],[1,0],[1,1],[1,1],[1,0]] Explanation: The explanation of this example is shown below:\\nNotice that 0 represents False and 1 represents True in the photo representing the Quad-Tree.'}, {'label': 'Example 2', 'input': 'grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]', 'output': '[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.\\nThe topLeft, bottomLeft and bottomRight each has the same value.\\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\\nExplanation is shown in the photo below: Constraints: n == grid.length == grid[i].length n == 2 x where 0 <= x <= 6'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a QuadTree node.\\n * class Node(var _value: Boolean, var _isLeaf: Boolean) {\\n *   var value: Int = _value\\n *   var isLeaf: Boolean = _isLeaf\\n *   var topLeft: Node = null\\n *   var topRight: Node = null\\n *   var bottomLeft: Node = null\\n *   var bottomRight: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def construct(grid: Array[Array[Int]]): Node = {\\n        \\n    }\\n}'}\n",
            "Done!379\n",
            "couples-holding-hands 770\n",
            "{'id': 770, 'name': 'couples-holding-hands', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/couples-holding-hands/', 'task_description': 'There are `n` couples sitting in `2n` seats arranged in a row and want to hold hands. The people and seats are represented by an integer array `row` where `row[i]` is the ID of the person sitting in the `ith` seat. The couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2n - 2, 2n - 1)`. Return _the minimum number of swaps so that every couple is sitting side by side_. A swap consists of choosing any two people, then they stand up and switch seats. **Example 1:** ``` **Input:** row = [0,2,1,3] **Output:** 1 **Explanation:** We only need to swap the second (row[1]) and third (row[2]) person. ``` **Example 2:** ``` **Input:** row = [3,2,0,1] **Output:** 0 **Explanation:** All couples are already seated side by side. ``` **Constraints:** `2n == row.length` `2 <= n <= 30` `n` is even. `0 <= row[i] < 2n` All the elements of `row` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'row = [0,2,1,3]', 'output': '1 Explanation: We only need to swap the second (row[1]) and third (row[2]) person.'}, {'label': 'Example 2', 'input': 'row = [3,2,0,1]', 'output': '0 Explanation: All couples are already seated side by side.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_swaps_couples(row :: [integer]) :: integer\\n  def min_swaps_couples(row) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_swaps_couples(Row :: [integer()]) -> integer().\\nmin_swaps_couples(Row) ->\\n  .', 'scala_template': 'object Solution {\\n    def minSwapsCouples(row: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!380\n",
            "largest-plus-sign 769\n",
            "{'id': 769, 'name': 'largest-plus-sign', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/largest-plus-sign/', 'task_description': \"You are given an integer `n`. You have an `n x n` binary grid `grid` with all values initially `1`'s except for some indices given in the array `mines`. The `ith` element of the array `mines` is defined as `mines[i] = [xi, yi]` where `grid[xi][yi] == 0`. Return _the order of the largest **axis-aligned** plus sign of _1_'s contained in _`grid`. If there is none, return `0`. An **axis-aligned plus sign** of `1`'s of order `k` has some center `grid[r][c] == 1` along with four arms of length `k - 1` going up, down, left, and right, and made of `1`'s. Note that there could be `0`'s or `1`'s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for `1`'s. **Example 1:** ``` **Input:** n = 5, mines = [[4,2]] **Output:** 2 **Explanation:** In the above grid, the largest plus sign can only be of order 2. One of them is shown. ``` **Example 2:** ``` **Input:** n = 1, mines = [[0,0]] **Output:** 0 **Explanation:** There is no plus sign, so return 0. ``` **Constraints:** `1 <= n <= 500` `1 <= mines.length <= 5000` `0 <= xi, yi < n` All the pairs `(xi, yi)` are **unique**.\", 'test_case': [{'label': 'Example 1', 'input': 'n = 5, mines = [[4,2]]', 'output': '2 Explanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.'}, {'label': 'Example 2', 'input': 'n = 1, mines = [[0,0]]', 'output': '0 Explanation: There is no plus sign, so return 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec order_of_largest_plus_sign(n :: integer, mines :: [[integer]]) :: integer\\n  def order_of_largest_plus_sign(n, mines) do\\n    \\n  end\\nend', 'erlang_template': '-spec order_of_largest_plus_sign(N :: integer(), Mines :: [[integer()]]) -> integer().\\norder_of_largest_plus_sign(N, Mines) ->\\n  .', 'scala_template': 'object Solution {\\n    def orderOfLargestPlusSign(n: Int, mines: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!381\n",
            "partition-labels 768\n",
            "{'id': 768, 'name': 'partition-labels', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/partition-labels/', 'task_description': 'You are given a string `s`. We want to partition the string into as many parts as possible so that each letter appears in at most one part. Note that the partition is done so that after concatenating all the parts in order, the resultant string should be `s`. Return _a list of integers representing the size of these parts_. **Example 1:** ``` **Input:** s = \"ababcbacadefegdehijhklij\" **Output:** [9,7,8] **Explanation:** The partition is \"ababcbaca\", \"defegde\", \"hijhklij\". This is a partition so that each letter appears in at most one part. A partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts. ``` **Example 2:** ``` **Input:** s = \"eccbbbbdec\" **Output:** [10] ``` **Constraints:** `1 <= s.length <= 500` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"ababcbacadefegdehijhklij\"', 'output': '[9,7,8] Explanation: The partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\\nThis is a partition so that each letter appears in at most one part.\\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.'}, {'label': 'Example 2', 'input': 's = \"eccbbbbdec\"', 'output': '[10]'}], 'elixir_template': 'defmodule Solution do\\n  @spec partition_labels(s :: String.t) :: [integer]\\n  def partition_labels(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec partition_labels(S :: unicode:unicode_binary()) -> [integer()].\\npartition_labels(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def partitionLabels(s: String): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!382\n",
            "prime-number-of-set-bits-in-binary-representation 767\n",
            "{'id': 767, 'name': 'prime-number-of-set-bits-in-binary-representation', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/', 'task_description': \"Given two integers `left` and `right`, return _the **count** of numbers in the **inclusive** range _`[left, right]`_ having a **prime number of set bits** in their binary representation_. Recall that the **number of set bits** an integer has is the number of `1`'s present when written in binary. For example, `21` written in binary is `10101`, which has `3` set bits. **Example 1:** ``` **Input:** left = 6, right = 10 **Output:** 4 **Explanation:** 6 -> 110 (2 set bits, 2 is prime) 7 -> 111 (3 set bits, 3 is prime) 8 -> 1000 (1 set bit, 1 is not prime) 9 -> 1001 (2 set bits, 2 is prime) 10 -> 1010 (2 set bits, 2 is prime) 4 numbers have a prime number of set bits. ``` **Example 2:** ``` **Input:** left = 10, right = 15 **Output:** 5 **Explanation:** 10 -> 1010 (2 set bits, 2 is prime) 11 -> 1011 (3 set bits, 3 is prime) 12 -> 1100 (2 set bits, 2 is prime) 13 -> 1101 (3 set bits, 3 is prime) 14 -> 1110 (3 set bits, 3 is prime) 15 -> 1111 (4 set bits, 4 is not prime) 5 numbers have a prime number of set bits. ``` **Constraints:** `1 <= left <= right <= 106` `0 <= right - left <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'left = 6, right = 10', 'output': '4 Explanation: 6  -> 110 (2 set bits, 2 is prime)\\n7  -> 111 (3 set bits, 3 is prime)\\n8  -> 1000 (1 set bit, 1 is not prime)\\n9  -> 1001 (2 set bits, 2 is prime)\\n10 -> 1010 (2 set bits, 2 is prime)\\n4 numbers have a prime number of set bits.'}, {'label': 'Example 2', 'input': 'left = 10, right = 15', 'output': '5 Explanation: 10 -> 1010 (2 set bits, 2 is prime)\\n11 -> 1011 (3 set bits, 3 is prime)\\n12 -> 1100 (2 set bits, 2 is prime)\\n13 -> 1101 (3 set bits, 3 is prime)\\n14 -> 1110 (3 set bits, 3 is prime)\\n15 -> 1111 (4 set bits, 4 is not prime)\\n5 numbers have a prime number of set bits.'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_prime_set_bits(left :: integer, right :: integer) :: integer\\n  def count_prime_set_bits(left, right) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_prime_set_bits(Left :: integer(), Right :: integer()) -> integer().\\ncount_prime_set_bits(Left, Right) ->\\n  .', 'scala_template': 'object Solution {\\n    def countPrimeSetBits(left: Int, right: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!383\n",
            "flatten-a-multilevel-doubly-linked-list 766\n",
            "{'id': 766, 'name': 'flatten-a-multilevel-doubly-linked-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/', 'task_description': 'You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional **child pointer**. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a **multilevel data structure** as shown in the example below. Given the `head` of the first level of the list, **flatten** the list so that all the nodes appear in a single-level, doubly linked list. Let `curr` be a node with a child list. The nodes in the child list should appear **after** `curr` and **before** `curr.next` in the flattened list. Return _the _`head`_ of the flattened list. The nodes in the list must have **all** of their child pointers set to _`null`. **Example 1:** ``` **Input:** head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12] **Output:** [1,2,3,7,8,11,12,9,10,4,5,6] **Explanation:** The multilevel linked list in the input is shown. After flattening the multilevel linked list it becomes: ``` **Example 2:** ``` **Input:** head = [1,2,null,3] **Output:** [1,3,2] **Explanation:** The multilevel linked list in the input is shown. After flattening the multilevel linked list it becomes: ``` **Example 3:** ``` **Input:** head = [] **Output:** [] **Explanation:** There could be empty list in the input. ``` **Constraints:** The number of Nodes will not exceed `1000`. `1 <= Node.val <= 105` **How the multilevel linked list is represented in test cases:** We use the multilevel linked list from **Example 1** above: ``` 1---2---3---4---5---6--NULL | 7---8---9---10--NULL | 11--12--NULL ``` The serialization of each level is as follows: ``` [1,2,3,4,5,6,null] [7,8,9,10,null] [11,12,null] ``` To serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes: ``` [1, 2, 3, 4, 5, 6, null] | [null, null, 7, 8, 9, 10, null] | [ null, 11, 12, null] ``` Merging the serialization of each level and removing trailing nulls we obtain: ``` [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12] ```', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]', 'output': '[1,2,3,7,8,11,12,9,10,4,5,6] Explanation: The multilevel linked list in the input is shown.\\nAfter flattening the multilevel linked list it becomes:'}, {'label': 'Example 2', 'input': 'head = [1,2,null,3]', 'output': '[1,3,2] Explanation: The multilevel linked list in the input is shown.\\nAfter flattening the multilevel linked list it becomes:'}, {'label': 'Example 3', 'input': 'head = []', 'output': '[] Explanation: There could be empty list in the input. Constraints: The number of Nodes will not exceed 1000 . 1 <= Node.val <= 10 5 How the multilevel linked list is represented in test cases: We use the multilevel linked list from'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var prev: Node = null\\n *   var next: Node = null\\n *   var child: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def flatten(head: Node): Node = {\\n    \\t\\n    }\\n}'}\n",
            "Done!384\n",
            "n-ary-tree-level-order-traversal 764\n",
            "{'id': 764, 'name': 'n-ary-tree-level-order-traversal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/n-ary-tree-level-order-traversal/', 'task_description': \"Given an n-ary tree, return the _level order_ traversal of its nodes' values. _Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._ **Example 1:** ``` **Input:** root = [1,null,3,2,4,null,5,6] **Output:** [[1],[3,2,4],[5,6]] ``` **Example 2:** ``` **Input:** root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] **Output:** [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]] ``` **Constraints:** The height of the n-ary tree is less than or equal to `1000` The total number of nodes is between `[0, 104]`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,3,2,4,null,5,6]', 'output': '[[1],[3,2,4],[5,6]]'}, {'label': 'Example 2', 'input': 'root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]', 'output': '[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]] Constraints: The height of the n-ary tree is less than or equal to 1000 The total number of nodes is between [0, 10 4 ]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var children: List[Node] = List()\\n * }\\n */\\n\\nobject Solution {\\n    def levelOrder(root: Node): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!385\n",
            "special-binary-string 763\n",
            "{'id': 763, 'name': 'special-binary-string', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/special-binary-string/', 'task_description': '**Special binary strings** are binary strings with the following two properties: The number of `0`\\'s is equal to the number of `1`\\'s. Every prefix of the binary string has at least as many `1`\\'s as `0`\\'s. You are given a **special binary** string `s`. A move consists of choosing two consecutive, non-empty, special substrings of `s`, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string. Return _the lexicographically largest resulting string possible after applying the mentioned operations on the string_. **Example 1:** ``` **Input:** s = \"11011000\" **Output:** \"11100100\" **Explanation:** The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped. This is the lexicographically largest string possible after some number of swaps. ``` **Example 2:** ``` **Input:** s = \"10\" **Output:** \"10\" ``` **Constraints:** `1 <= s.length <= 50` `s[i]` is either `\\'0\\'` or `\\'1\\'`. `s` is a special binary string.', 'test_case': [{'label': 'Example 1', 'input': 's = \"11011000\"', 'output': '\"11100100\" Explanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\\nThis is the lexicographically largest string possible after some number of swaps.'}, {'label': 'Example 2', 'input': 's = \"10\"', 'output': '\"10\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec make_largest_special(s :: String.t) :: String.t\\n  def make_largest_special(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec make_largest_special(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nmake_largest_special(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def makeLargestSpecial(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!386\n",
            "set-intersection-size-at-least-two 759\n",
            "{'id': 759, 'name': 'set-intersection-size-at-least-two', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/set-intersection-size-at-least-two/', 'task_description': 'You are given a 2D integer array `intervals` where `intervals[i] = [starti, endi]` represents all the integers from `starti` to `endi` inclusively. A **containing set** is an array `nums` where each interval from `intervals` has **at least two** integers in `nums`. For example, if `intervals = [[1,3], [3,7], [8,9]]`, then `[1,2,4,7,8,9]` and `[2,3,4,8,9]` are **containing sets**. Return _the minimum possible size of a containing set_. **Example 1:** ``` **Input:** intervals = [[1,3],[3,7],[8,9]] **Output:** 5 **Explanation:** let nums = [2, 3, 4, 8, 9]. It can be shown that there cannot be any containing array of size 4. ``` **Example 2:** ``` **Input:** intervals = [[1,3],[1,4],[2,5],[3,5]] **Output:** 3 **Explanation:** let nums = [2, 3, 4]. It can be shown that there cannot be any containing array of size 2. ``` **Example 3:** ``` **Input:** intervals = [[1,2],[2,3],[2,4],[4,5]] **Output:** 5 **Explanation:** let nums = [1, 2, 3, 4, 5]. It can be shown that there cannot be any containing array of size 4. ``` **Constraints:** `1 <= intervals.length <= 3000` `intervals[i].length == 2` `0 <= starti < endi <= 108`', 'test_case': [{'label': 'Example 1', 'input': 'intervals = [[1,3],[3,7],[8,9]]', 'output': '5 Explanation: let nums = [2, 3, 4, 8, 9].\\nIt can be shown that there cannot be any containing array of size 4.'}, {'label': 'Example 2', 'input': 'intervals = [[1,3],[1,4],[2,5],[3,5]]', 'output': '3 Explanation: let nums = [2, 3, 4].\\nIt can be shown that there cannot be any containing array of size 2.'}, {'label': 'Example 3', 'input': 'intervals = [[1,2],[2,3],[2,4],[4,5]]', 'output': '5 Explanation: let nums = [1, 2, 3, 4, 5].\\nIt can be shown that there cannot be any containing array of size 4.'}], 'elixir_template': 'defmodule Solution do\\n  @spec intersection_size_two(intervals :: [[integer]]) :: integer\\n  def intersection_size_two(intervals) do\\n    \\n  end\\nend', 'erlang_template': '-spec intersection_size_two(Intervals :: [[integer()]]) -> integer().\\nintersection_size_two(Intervals) ->\\n  .', 'scala_template': 'object Solution {\\n    def intersectionSizeTwo(intervals: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!387\n",
            "pyramid-transition-matrix 757\n",
            "{'id': 757, 'name': 'pyramid-transition-matrix', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/pyramid-transition-matrix/', 'task_description': 'You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains **one less block** than the row beneath it and is centered on top. To make the pyramid aesthetically pleasing, there are only specific **triangular patterns** that are allowed. A triangular pattern consists of a **single block** stacked on top of **two blocks**. The patterns are given as a list of three-letter strings `allowed`, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block. For example, `\"ABC\"` represents a triangular pattern with a `\\'C\\'` block stacked on top of an `\\'A\\'` (left) and `\\'B\\'` (right) block. Note that this is different from `\"BAC\"` where `\\'B\\'` is on the left bottom and `\\'A\\'` is on the right bottom. You start with a bottom row of blocks `bottom`, given as a single string, that you **must** use as the base of the pyramid. Given `bottom` and `allowed`, return `true`_ if you can build the pyramid all the way to the top such that **every triangular pattern** in the pyramid is in _`allowed`_, or _`false`_ otherwise_. **Example 1:** ``` **Input:** bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"] **Output:** true **Explanation:** The allowed triangular patterns are shown on the right. Starting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1. There are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed. ``` **Example 2:** ``` **Input:** bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"] **Output:** false **Explanation:** The allowed triangular patterns are shown on the right. Starting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1. ``` **Constraints:** `2 <= bottom.length <= 6` `0 <= allowed.length <= 216` `allowed[i].length == 3` The letters in all input strings are from the set `{\\'A\\', \\'B\\', \\'C\\', \\'D\\', \\'E\\', \\'F\\'}`. All the values of `allowed` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]', 'output': 'true Explanation: The allowed triangular patterns are shown on the right.\\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1.\\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed.'}, {'label': 'Example 2', 'input': 'bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]', 'output': 'false Explanation: The allowed triangular patterns are shown on the right.\\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec pyramid_transition(bottom :: String.t, allowed :: [String.t]) :: boolean\\n  def pyramid_transition(bottom, allowed) do\\n    \\n  end\\nend', 'erlang_template': '-spec pyramid_transition(Bottom :: unicode:unicode_binary(), Allowed :: [unicode:unicode_binary()]) -> boolean().\\npyramid_transition(Bottom, Allowed) ->\\n  .', 'scala_template': 'object Solution {\\n    def pyramidTransition(bottom: String, allowed: List[String]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!388\n",
            "reach-a-number 755\n",
            "{'id': 755, 'name': 'reach-a-number', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reach-a-number/', 'task_description': 'You are standing at position `0` on an infinite number line. There is a destination at position `target`. You can make some number of moves `numMoves` so that: On each move, you can either go left or right. During the `ith` move (starting from `i == 1` to `i == numMoves`), you take `i` steps in the chosen direction. Given the integer `target`, return _the **minimum** number of moves required (i.e., the minimum _`numMoves`_) to reach the destination_. **Example 1:** ``` **Input:** target = 2 **Output:** 3 **Explanation:** On the 1st move, we step from 0 to 1 (1 step). On the 2nd move, we step from 1 to -1 (2 steps). On the 3rd move, we step from -1 to 2 (3 steps). ``` **Example 2:** ``` **Input:** target = 3 **Output:** 2 **Explanation:** On the 1st move, we step from 0 to 1 (1 step). On the 2nd move, we step from 1 to 3 (2 steps). ``` **Constraints:** `-109 <= target <= 109` `target != 0`', 'test_case': [{'label': 'Example 1', 'input': 'target = 2', 'output': '3 Explanation: On the 1 st move, we step from 0 to 1 (1 step).\\nOn the 2 nd move, we step from 1 to -1 (2 steps).\\nOn the 3 rd move, we step from -1 to 2 (3 steps).'}, {'label': 'Example 2', 'input': 'target = 3', 'output': '2 Explanation: On the 1 st move, we step from 0 to 1 (1 step).\\nOn the 2 nd move, we step from 1 to 3 (2 steps). Constraints: -10 9 <= target <= 10 9 target != 0'}], 'elixir_template': 'defmodule Solution do\\n  @spec reach_number(target :: integer) :: integer\\n  def reach_number(target) do\\n    \\n  end\\nend', 'erlang_template': '-spec reach_number(Target :: integer()) -> integer().\\nreach_number(Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def reachNumber(target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!389\n",
            "cracking-the-safe 754\n",
            "{'id': 754, 'name': 'cracking-the-safe', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/cracking-the-safe/', 'task_description': 'There is a safe protected by a password. The password is a sequence of `n` digits where each digit can be in the range `[0, k - 1]`. The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the **most recent **`n`** digits** that were entered each time you type a digit. For example, the correct password is `\"345\"` and you enter in `\"012345\"`: After typing `0`, the most recent `3` digits is `\"0\"`, which is incorrect. After typing `1`, the most recent `3` digits is `\"01\"`, which is incorrect. After typing `2`, the most recent `3` digits is `\"012\"`, which is incorrect. After typing `3`, the most recent `3` digits is `\"123\"`, which is incorrect. After typing `4`, the most recent `3` digits is `\"234\"`, which is incorrect. After typing `5`, the most recent `3` digits is `\"345\"`, which is correct and the safe unlocks. Return _any string of **minimum length** that will unlock the safe **at some point** of entering it_. **Example 1:** ``` **Input:** n = 1, k = 2 **Output:** \"10\" **Explanation:** The password is a single digit, so enter each digit. \"01\" would also unlock the safe. ``` **Example 2:** ``` **Input:** n = 2, k = 2 **Output:** \"01100\" **Explanation:** For each possible password: - \"00\" is typed in starting from the 4th digit. - \"01\" is typed in starting from the 1st digit. - \"10\" is typed in starting from the 3rd digit. - \"11\" is typed in starting from the 2nd digit. Thus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe. ``` **Constraints:** `1 <= n <= 4` `1 <= k <= 10` `1 <= kn <= 4096`', 'test_case': [{'label': 'Example 1', 'input': 'n = 1, k = 2', 'output': '\"10\" Explanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.'}, {'label': 'Example 2', 'input': 'n = 2, k = 2', 'output': '\"01100\" Explanation: For each possible password:\\n- \"00\" is typed in starting from the 4 th digit.\\n- \"01\" is typed in starting from the 1 st digit.\\n- \"10\" is typed in starting from the 3 rd digit.\\n- \"11\" is typed in starting from the 2 nd digit.\\nThus \"01100\" will unlock the safe. \"10011\", and \"11001\" would also unlock the safe.'}], 'elixir_template': 'defmodule Solution do\\n  @spec crack_safe(n :: integer, k :: integer) :: String.t\\n  def crack_safe(n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec crack_safe(N :: integer(), K :: integer()) -> unicode:unicode_binary().\\ncrack_safe(N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def crackSafe(n: Int, k: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!390\n",
            "open-the-lock 753\n",
            "{'id': 753, 'name': 'open-the-lock', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/open-the-lock/', 'task_description': 'You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `\\'0\\', \\'1\\', \\'2\\', \\'3\\', \\'4\\', \\'5\\', \\'6\\', \\'7\\', \\'8\\', \\'9\\'`. The wheels can rotate freely and wrap around: for example we can turn `\\'9\\'` to be `\\'0\\'`, or `\\'0\\'` to be `\\'9\\'`. Each move consists of turning one wheel one slot. The lock initially starts at `\\'0000\\'`, a string representing the state of the 4 wheels. You are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it. Given a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible. **Example 1:** ``` **Input:** deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\" **Output:** 6 **Explanation:** A sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\". Note that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid, because the wheels of the lock become stuck after the display becomes the dead end \"0102\". ``` **Example 2:** ``` **Input:** deadends = [\"8888\"], target = \"0009\" **Output:** 1 **Explanation:** We can turn the last wheel in reverse to move from \"0000\" -> \"0009\". ``` **Example 3:** ``` **Input:** deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\" **Output:** -1 **Explanation:** We cannot reach the target without getting stuck. ``` **Constraints:** `1 <= deadends.length <= 500` `deadends[i].length == 4` `target.length == 4` target **will not be** in the list `deadends`. `target` and `deadends[i]` consist of digits only.', 'test_case': [{'label': 'Example 1', 'input': 'deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"', 'output': '6 Explanation: A sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".'}, {'label': 'Example 2', 'input': 'deadends = [\"8888\"], target = \"0009\"', 'output': '1 Explanation: We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".'}, {'label': 'Example 3', 'input': 'deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"', 'output': '-1 Explanation: We cannot reach the target without getting stuck.'}], 'elixir_template': 'defmodule Solution do\\n  @spec open_lock(deadends :: [String.t], target :: String.t) :: integer\\n  def open_lock(deadends, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec open_lock(Deadends :: [unicode:unicode_binary()], Target :: unicode:unicode_binary()) -> integer().\\nopen_lock(Deadends, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def openLock(deadends: Array[String], target: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!391\n",
            "contain-virus 750\n",
            "{'id': 750, 'name': 'contain-virus', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/contain-virus/', 'task_description': 'A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls. The world is modeled as an `m x n` binary grid `isInfected`, where `isInfected[i][j] == 0` represents uninfected cells, and `isInfected[i][j] == 1` represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two **4-directionally** adjacent cells, on the shared boundary. Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There **will never be a tie**. Return _the number of walls used to quarantine all the infected regions_. If the world will become fully infected, return the number of walls used. **Example 1:** ``` **Input:** isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]] **Output:** 10 **Explanation:** There are 2 contaminated regions. On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is: On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained. ``` **Example 2:** ``` **Input:** isInfected = [[1,1,1],[1,0,1],[1,1,1]] **Output:** 4 **Explanation:** Even though there is only one cell saved, there are 4 walls built. Notice that walls are only built on the shared boundary of two different cells. ``` **Example 3:** ``` **Input:** isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]] **Output:** 13 **Explanation:** The region on the left only builds two new walls. ``` **Constraints:** `m == isInfected.length` `n == isInfected[i].length` `1 <= m, n <= 50` `isInfected[i][j]` is either `0` or `1`. There is always a contiguous viral region throughout the described process that will **infect strictly more uncontaminated squares** in the next round.', 'test_case': [{'label': 'Example 1', 'input': 'isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]', 'output': '10 Explanation: There are 2 contaminated regions.\\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is: On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.'}, {'label': 'Example 2', 'input': 'isInfected = [[1,1,1],[1,0,1],[1,1,1]]', 'output': '4 Explanation: Even though there is only one cell saved, there are 4 walls built.\\nNotice that walls are only built on the shared boundary of two different cells.'}, {'label': 'Example 3', 'input': 'isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]', 'output': '13 Explanation: The region on the left only builds two new walls. Constraints: m ==\\xa0isInfected.length n ==\\xa0isInfected[i].length 1 <= m, n <= 50 isInfected[i][j] is either 0 or 1 . There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.'}], 'elixir_template': 'defmodule Solution do\\n  @spec contain_virus(is_infected :: [[integer]]) :: integer\\n  def contain_virus(is_infected) do\\n    \\n  end\\nend', 'erlang_template': '-spec contain_virus(IsInfected :: [[integer()]]) -> integer().\\ncontain_virus(IsInfected) ->\\n  .', 'scala_template': 'object Solution {\\n    def containVirus(isInfected: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!392\n",
            "shortest-completing-word 749\n",
            "{'id': 749, 'name': 'shortest-completing-word', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/shortest-completing-word/', 'task_description': 'Given a string `licensePlate` and an array of strings `words`, find the **shortest completing** word in `words`. A **completing** word is a word that **contains all the letters** in `licensePlate`. **Ignore numbers and spaces** in `licensePlate`, and treat letters as **case insensitive**. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more. For example, if `licensePlate`` = \"aBc 12c\"`, then it contains letters `\\'a\\'`, `\\'b\\'` (ignoring case), and `\\'c\\'` twice. Possible **completing** words are `\"abccdef\"`, `\"caaacab\"`, and `\"cbca\"`. Return _the shortest **completing** word in _`words`_._ It is guaranteed an answer exists. If there are multiple shortest **completing** words, return the **first** one that occurs in `words`. **Example 1:** ``` **Input:** licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"] **Output:** \"steps\" **Explanation:** licensePlate contains letters \\'s\\', \\'p\\', \\'s\\' (ignoring case), and \\'t\\'. \"step\" contains \\'t\\' and \\'p\\', but only contains 1 \\'s\\'. \"steps\" contains \\'t\\', \\'p\\', and both \\'s\\' characters. \"stripe\" is missing an \\'s\\'. \"stepple\" is missing an \\'s\\'. Since \"steps\" is the only word containing all the letters, that is the answer. ``` **Example 2:** ``` **Input:** licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"] **Output:** \"pest\" **Explanation:** licensePlate only contains the letter \\'s\\'. All the words contain \\'s\\', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3. ``` **Constraints:** `1 <= licensePlate.length <= 7` `licensePlate` contains digits, letters (uppercase or lowercase), or space `\\' \\'`. `1 <= words.length <= 1000` `1 <= words[i].length <= 15` `words[i]` consists of lower case English letters.', 'test_case': [{'label': 'Example 1', 'input': 'licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]', 'output': '\"steps\" Explanation: licensePlate contains letters \\'s\\', \\'p\\', \\'s\\' (ignoring case), and \\'t\\'.\\n\"step\" contains \\'t\\' and \\'p\\', but only contains 1 \\'s\\'.\\n\"steps\" contains \\'t\\', \\'p\\', and both \\'s\\' characters.\\n\"stripe\" is missing an \\'s\\'.\\n\"stepple\" is missing an \\'s\\'.\\nSince \"steps\" is the only word containing all the letters, that is the answer.'}, {'label': 'Example 2', 'input': 'licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]', 'output': '\"pest\" Explanation: licensePlate only contains the letter \\'s\\'. All the words contain \\'s\\', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_completing_word(license_plate :: String.t, words :: [String.t]) :: String.t\\n  def shortest_completing_word(license_plate, words) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_completing_word(LicensePlate :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nshortest_completing_word(LicensePlate, Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestCompletingWord(licensePlate: String, words: Array[String]): String = {\\n        \\n    }\\n}'}\n",
            "Done!393\n",
            "largest-number-at-least-twice-of-others 748\n",
            "{'id': 748, 'name': 'largest-number-at-least-twice-of-others', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/largest-number-at-least-twice-of-others/', 'task_description': 'You are given an integer array `nums` where the largest integer is **unique**. Determine whether the largest element in the array is **at least twice** as much as every other number in the array. If it is, return _the **index** of the largest element, or return _`-1`_ otherwise_. **Example 1:** ``` **Input:** nums = [3,6,1,0] **Output:** 1 **Explanation:** 6 is the largest integer. For every other number in the array x, 6 is at least twice as big as x. The index of value 6 is 1, so we return 1. ``` **Example 2:** ``` **Input:** nums = [1,2,3,4] **Output:** -1 **Explanation:** 4 is less than twice the value of 3, so we return -1. ``` **Constraints:** `2 <= nums.length <= 50` `0 <= nums[i] <= 100` The largest element in `nums` is unique.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,6,1,0]', 'output': '1 Explanation: 6 is the largest integer.\\nFor every other number in the array x, 6 is at least twice as big as x.\\nThe index of value 6 is 1, so we return 1.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4]', 'output': '-1 Explanation: 4 is less than twice the value of 3, so we return -1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec dominant_index(nums :: [integer]) :: integer\\n  def dominant_index(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec dominant_index(Nums :: [integer()]) -> integer().\\ndominant_index(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def dominantIndex(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!394\n",
            "min-cost-climbing-stairs 747\n",
            "{'id': 747, 'name': 'min-cost-climbing-stairs', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/min-cost-climbing-stairs/', 'task_description': 'You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps. You can either start from the step with index `0`, or the step with index `1`. Return _the minimum cost to reach the top of the floor_. **Example 1:** ``` **Input:** cost = [10,15,20] **Output:** 15 **Explanation:** You will start at index 1. - Pay 15 and climb two steps to reach the top. The total cost is 15. ``` **Example 2:** ``` **Input:** cost = [1,100,1,1,1,100,1,1,100,1] **Output:** 6 **Explanation:** You will start at index 0. - Pay 1 and climb two steps to reach index 2. - Pay 1 and climb two steps to reach index 4. - Pay 1 and climb two steps to reach index 6. - Pay 1 and climb one step to reach index 7. - Pay 1 and climb two steps to reach index 9. - Pay 1 and climb one step to reach the top. The total cost is 6. ``` **Constraints:** `2 <= cost.length <= 1000` `0 <= cost[i] <= 999`', 'test_case': [{'label': 'Example 1', 'input': 'cost = [10, 15 ,20]', 'output': '15 Explanation: You will start at index 1.\\n- Pay 15 and climb two steps to reach the top.\\nThe total cost is 15.'}, {'label': 'Example 2', 'input': 'cost = [ 1 ,100, 1 ,1, 1 ,100, 1 , 1 ,100, 1 ]', 'output': '6 Explanation: You will start at index 0.\\n- Pay 1 and climb two steps to reach index 2.\\n- Pay 1 and climb two steps to reach index 4.\\n- Pay 1 and climb two steps to reach index 6.\\n- Pay 1 and climb one step to reach index 7.\\n- Pay 1 and climb two steps to reach index 9.\\n- Pay 1 and climb one step to reach the top.\\nThe total cost is 6.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_cost_climbing_stairs(cost :: [integer]) :: integer\\n  def min_cost_climbing_stairs(cost) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_cost_climbing_stairs(Cost :: [integer()]) -> integer().\\nmin_cost_climbing_stairs(Cost) ->\\n  .', 'scala_template': 'object Solution {\\n    def minCostClimbingStairs(cost: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!395\n",
            "prefix-and-suffix-search 746\n",
            "{'id': 746, 'name': 'prefix-and-suffix-search', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/prefix-and-suffix-search/', 'task_description': 'Design a special dictionary that searches the words in it by a prefix and a suffix. Implement the `WordFilter` class: `WordFilter(string[] words)` Initializes the object with the `words` in the dictionary. `f(string pref, string suff)` Returns _the index of the word in the dictionary,_ which has the prefix `pref` and the suffix `suff`. If there is more than one valid index, return **the largest** of them. If there is no such word in the dictionary, return `-1`. **Example 1:** ``` **Input** [\"WordFilter\", \"f\"] [[[\"apple\"]], [\"a\", \"e\"]] **Output** [null, 0] **Explanation** WordFilter wordFilter = new WordFilter([\"apple\"]); wordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = \"e\". ``` **Constraints:** `1 <= words.length <= 104` `1 <= words[i].length <= 7` `1 <= pref.length, suff.length <= 7` `words[i]`, `pref` and `suff` consist of lowercase English letters only. At most `104` calls will be made to the function `f`.', 'test_case': [], 'elixir_template': 'defmodule WordFilter do\\n  @spec init_(words :: [String.t]) :: any\\n  def init_(words) do\\n    \\n  end\\n\\n  @spec f(pref :: String.t, suff :: String.t) :: integer\\n  def f(pref, suff) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# WordFilter.init_(words)\\n# param_1 = WordFilter.f(pref, suff)\\n\\n# WordFilter.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec word_filter_init_(Words :: [unicode:unicode_binary()]) -> any().\\nword_filter_init_(Words) ->\\n  .\\n\\n-spec word_filter_f(Pref :: unicode:unicode_binary(), Suff :: unicode:unicode_binary()) -> integer().\\nword_filter_f(Pref, Suff) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% word_filter_init_(Words),\\n%% Param_1 = word_filter_f(Pref, Suff),\\n\\n%% word_filter_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class WordFilter(_words: Array[String]) {\\n\\n    def f(pref: String, suff: String): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your WordFilter object will be instantiated and called as such:\\n * val obj = new WordFilter(words)\\n * val param_1 = obj.f(pref,suff)\\n */'}\n",
            "Done!396\n",
            "find-smallest-letter-greater-than-target 745\n",
            "{'id': 745, 'name': 'find-smallest-letter-greater-than-target', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-smallest-letter-greater-than-target/', 'task_description': 'You are given an array of characters `letters` that is sorted in **non-decreasing order**, and a character `target`. There are **at least two different** characters in `letters`. Return _the smallest character in _`letters`_ that is lexicographically greater than _`target`. If such a character does not exist, return the first character in `letters`. **Example 1:** ``` **Input:** letters = [\"c\",\"f\",\"j\"], target = \"a\" **Output:** \"c\" **Explanation:** The smallest character that is lexicographically greater than \\'a\\' in letters is \\'c\\'. ``` **Example 2:** ``` **Input:** letters = [\"c\",\"f\",\"j\"], target = \"c\" **Output:** \"f\" **Explanation:** The smallest character that is lexicographically greater than \\'c\\' in letters is \\'f\\'. ``` **Example 3:** ``` **Input:** letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\" **Output:** \"x\" **Explanation:** There are no characters in letters that is lexicographically greater than \\'z\\' so we return letters[0]. ``` **Constraints:** `2 <= letters.length <= 104` `letters[i]` is a lowercase English letter. `letters` is sorted in **non-decreasing** order. `letters` contains at least two different characters. `target` is a lowercase English letter.', 'test_case': [{'label': 'Example 1', 'input': 'letters = [\"c\",\"f\",\"j\"], target = \"a\"', 'output': '\"c\" Explanation: The smallest character that is lexicographically greater than \\'a\\' in letters is \\'c\\'.'}, {'label': 'Example 2', 'input': 'letters = [\"c\",\"f\",\"j\"], target = \"c\"', 'output': '\"f\" Explanation: The smallest character that is lexicographically greater than \\'c\\' in letters is \\'f\\'.'}, {'label': 'Example 3', 'input': 'letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"', 'output': '\"x\" Explanation: There are no characters in letters that is lexicographically greater than \\'z\\' so we return letters[0].'}], 'elixir_template': 'defmodule Solution do\\n  @spec next_greatest_letter(letters :: [char], target :: char) :: char\\n  def next_greatest_letter(letters, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec next_greatest_letter(Letters :: [char()], Target :: char()) -> char().\\nnext_greatest_letter(Letters, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def nextGreatestLetter(letters: Array[Char], target: Char): Char = {\\n        \\n    }\\n}'}\n",
            "Done!397\n",
            "network-delay-time 744\n",
            "{'id': 744, 'name': 'network-delay-time', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/network-delay-time/', 'task_description': 'You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target. We will send a signal from a given node `k`. Return _the **minimum** time it takes for all the_ `n` _nodes to receive the signal_. If it is impossible for all the `n` nodes to receive the signal, return `-1`. **Example 1:** ``` **Input:** times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2 **Output:** 2 ``` **Example 2:** ``` **Input:** times = [[1,2,1]], n = 2, k = 1 **Output:** 1 ``` **Example 3:** ``` **Input:** times = [[1,2,1]], n = 2, k = 2 **Output:** -1 ``` **Constraints:** `1 <= k <= n <= 100` `1 <= times.length <= 6000` `times[i].length == 3` `1 <= ui, vi <= n` `ui != vi` `0 <= wi <= 100` All the pairs `(ui, vi)` are **unique**. (i.e., no multiple edges.)', 'test_case': [{'label': 'Example 1', 'input': 'times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2', 'output': '2'}, {'label': 'Example 2', 'input': 'times = [[1,2,1]], n = 2, k = 1', 'output': '1'}, {'label': 'Example 3', 'input': 'times = [[1,2,1]], n = 2, k = 2', 'output': '-1'}], 'elixir_template': 'defmodule Solution do\\n  @spec network_delay_time(times :: [[integer]], n :: integer, k :: integer) :: integer\\n  def network_delay_time(times, n, k) do\\n\\n  end\\nend', 'erlang_template': '-spec network_delay_time(Times :: [[integer()]], N :: integer(), K :: integer()) -> integer().\\nnetwork_delay_time(Times, N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def networkDelayTime(times: Array[Array[Int]], n: Int, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!398\n",
            "to-lower-case 742\n",
            "{'id': 742, 'name': 'to-lower-case', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/to-lower-case/', 'task_description': 'Given a string `s`, return _the string after replacing every uppercase letter with the same lowercase letter_. **Example 1:** ``` **Input:** s = \"Hello\" **Output:** \"hello\" ``` **Example 2:** ``` **Input:** s = \"here\" **Output:** \"here\" ``` **Example 3:** ``` **Input:** s = \"LOVELY\" **Output:** \"lovely\" ``` **Constraints:** `1 <= s.length <= 100` `s` consists of printable ASCII characters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"Hello\"', 'output': '\"hello\"'}, {'label': 'Example 2', 'input': 's = \"here\"', 'output': '\"here\"'}, {'label': 'Example 3', 'input': 's = \"LOVELY\"', 'output': '\"lovely\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec to_lower_case(s :: String.t) :: String.t\\n  def to_lower_case(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec to_lower_case(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nto_lower_case(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def toLowerCase(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!399\n",
            "cherry-pickup 741\n",
            "{'id': 741, 'name': 'cherry-pickup', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/cherry-pickup/', 'task_description': 'You are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers. `0` means the cell is empty, so you can pass through, `1` means the cell contains a cherry that you can pick up and pass through, or `-1` means the cell contains a thorn that blocks your way. Return _the maximum number of cherries you can collect by following the rules below_: Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`). After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells. When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`. If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected. **Example 1:** ``` **Input:** grid = [[0,1,-1],[1,0,-1],[1,1,1]] **Output:** 5 **Explanation:** The player started at (0, 0) and went down, down, right right to reach (2, 2). 4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]]. Then, the player went left, up, up, left to return home, picking up one more cherry. The total number of cherries picked up is 5, and this is the maximum possible. ``` **Example 2:** ``` **Input:** grid = [[1,1,-1],[1,-1,1],[-1,1,1]] **Output:** 0 ``` **Constraints:** `n == grid.length` `n == grid[i].length` `1 <= n <= 50` `grid[i][j]` is `-1`, `0`, or `1`. `grid[0][0] != -1` `grid[n - 1][n - 1] != -1`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,1,-1],[1,0,-1],[1,1,1]]', 'output': '5 Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\\nThen, the player went left, up, up, left to return home, picking up one more cherry.\\nThe total number of cherries picked up is 5, and this is the maximum possible.'}, {'label': 'Example 2', 'input': 'grid = [[1,1,-1],[1,-1,1],[-1,1,1]]', 'output': '0 Constraints: n == grid.length n == grid[i].length 1 <= n <= 50 grid[i][j] is -1 , 0 , or 1 . grid[0][0] != -1 grid[n - 1][n - 1] != -1'}], 'elixir_template': 'defmodule Solution do\\n  @spec cherry_pickup(grid :: [[integer]]) :: integer\\n  def cherry_pickup(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec cherry_pickup(Grid :: [[integer()]]) -> integer().\\ncherry_pickup(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def cherryPickup(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!400\n",
            "delete-and-earn 740\n",
            "{'id': 740, 'name': 'delete-and-earn', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/delete-and-earn/', 'task_description': \"You are given an integer array `nums`. You want to maximize the number of points you get by performing the following operation any number of times: Pick any `nums[i]` and delete it to earn `nums[i]` points. Afterwards, you must delete every element equal to `nums[i] - 1` and **every** element equal to `nums[i] + 1`. Return _the **maximum number of points** you can earn by applying the above operation some number of times_. **Example 1:** ``` **Input:** nums = [3,4,2] **Output:** 6 **Explanation:** You can perform the following operations: - Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2]. - Delete 2 to earn 2 points. nums = []. You earn a total of 6 points. ``` **Example 2:** ``` **Input:** nums = [2,2,3,3,3,4] **Output:** 9 **Explanation:** You can perform the following operations: - Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3]. - Delete a 3 again to earn 3 points. nums = [3]. - Delete a 3 once more to earn 3 points. nums = []. You earn a total of 9 points. ``` **Constraints:** `1 <= nums.length <= 2 * 104` `1 <= nums[i] <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,4,2]', 'output': '6 Explanation: You can perform the following operations:\\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\\n- Delete 2 to earn 2 points. nums = [].\\nYou earn a total of 6 points.'}, {'label': 'Example 2', 'input': 'nums = [2,2,3,3,3,4]', 'output': \"9 Explanation: You can perform the following operations:\\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\\n- Delete a 3 again to earn 3 points. nums = [3].\\n- Delete a 3 once more to earn 3 points. nums = [].\\nYou earn a total of 9 points.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec delete_and_earn(nums :: [integer]) :: integer\\n  def delete_and_earn(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec delete_and_earn(Nums :: [integer()]) -> integer().\\ndelete_and_earn(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def deleteAndEarn(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!401\n",
            "daily-temperatures 739\n",
            "{'id': 739, 'name': 'daily-temperatures', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/daily-temperatures/', 'task_description': 'Given an array of integers `temperatures` represents the daily temperatures, return _an array_ `answer` _such that_ `answer[i]` _is the number of days you have to wait after the_ `ith` _day to get a warmer temperature_. If there is no future day for which this is possible, keep `answer[i] == 0` instead. **Example 1:** ``` **Input:** temperatures = [73,74,75,71,69,72,76,73] **Output:** [1,1,4,2,1,1,0,0] ``` **Example 2:** ``` **Input:** temperatures = [30,40,50,60] **Output:** [1,1,1,0] ``` **Example 3:** ``` **Input:** temperatures = [30,60,90] **Output:** [1,1,0] ``` **Constraints:** `1 <= temperatures.length <= 105` `30 <= temperatures[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'temperatures = [73,74,75,71,69,72,76,73]', 'output': '[1,1,4,2,1,1,0,0]'}, {'label': 'Example 2', 'input': 'temperatures = [30,40,50,60]', 'output': '[1,1,1,0]'}, {'label': 'Example 3', 'input': 'temperatures = [30,60,90]', 'output': '[1,1,0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec daily_temperatures(temperatures :: [integer]) :: [integer]\\n  def daily_temperatures(temperatures) do\\n    \\n  end\\nend', 'erlang_template': '-spec daily_temperatures(Temperatures :: [integer()]) -> [integer()].\\ndaily_temperatures(Temperatures) ->\\n  .', 'scala_template': 'object Solution {\\n    def dailyTemperatures(temperatures: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!402\n",
            "monotone-increasing-digits 738\n",
            "{'id': 738, 'name': 'monotone-increasing-digits', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/monotone-increasing-digits/', 'task_description': 'An integer has **monotone increasing digits** if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`. Given an integer `n`, return _the largest number that is less than or equal to _`n`_ with **monotone increasing digits**_. **Example 1:** ``` **Input:** n = 10 **Output:** 9 ``` **Example 2:** ``` **Input:** n = 1234 **Output:** 1234 ``` **Example 3:** ``` **Input:** n = 332 **Output:** 299 ``` **Constraints:** `0 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 10', 'output': '9'}, {'label': 'Example 2', 'input': 'n = 1234', 'output': '1234'}, {'label': 'Example 3', 'input': 'n = 332', 'output': '299'}], 'elixir_template': 'defmodule Solution do\\n  @spec monotone_increasing_digits(n :: integer) :: integer\\n  def monotone_increasing_digits(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec monotone_increasing_digits(N :: integer()) -> integer().\\nmonotone_increasing_digits(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def monotoneIncreasingDigits(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!403\n",
            "parse-lisp-expression 736\n",
            "{'id': 736, 'name': 'parse-lisp-expression', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/parse-lisp-expression/', 'task_description': 'You are given a string expression representing a Lisp-like expression to return the integer value of. The syntax for these expressions is given as follows. An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer. (An integer could be positive or negative.) A let expression takes the form `\"(let v1 e1 v2 e2 ... vn en expr)\"`, where let is always the string `\"let\"`, then there are one or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let expression is the value of the expression `expr`. An add expression takes the form `\"(add e1 e2)\"` where add is always the string `\"add\"`, there are always two expressions `e1`, `e2` and the result is the addition of the evaluation of `e1` and the evaluation of `e2`. A mult expression takes the form `\"(mult e1 e2)\"` where mult is always the string `\"mult\"`, there are always two expressions `e1`, `e2` and the result is the multiplication of the evaluation of e1 and the evaluation of e2. For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names `\"add\"`, `\"let\"`, and `\"mult\"` are protected and will never be used as variable names. Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope. **Example 1:** ``` **Input:** expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\" **Output:** 14 **Explanation:** In the expression (add x y), when checking for the value of the variable x, we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate. Since x = 3 is found first, the value of x is 3. ``` **Example 2:** ``` **Input:** expression = \"(let x 3 x 2 x)\" **Output:** 2 **Explanation:** Assignment in let statements is processed sequentially. ``` **Example 3:** ``` **Input:** expression = \"(let x 1 y 2 x (add x y) (add x y))\" **Output:** 5 **Explanation:** The first (add x y) evaluates as 3, and is assigned to x. The second (add x y) evaluates as 3+2 = 5. ``` **Constraints:** `1 <= expression.length <= 2000` There are no leading or trailing spaces in `expression`. All tokens are separated by a single space in `expression`. The answer and all intermediate calculations of that answer are guaranteed to fit in a **32-bit** integer. The expression is guaranteed to be legal and evaluate to an integer.', 'test_case': [{'label': 'Example 1', 'input': 'expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"', 'output': '14 Explanation: In the expression (add x y), when checking for the value of the variable x,\\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\\nSince x = 3 is found first, the value of x is 3.'}, {'label': 'Example 2', 'input': 'expression = \"(let x 3 x 2 x)\"', 'output': '2 Explanation: Assignment in let statements is processed sequentially.'}, {'label': 'Example 3', 'input': 'expression = \"(let x 1 y 2 x (add x y) (add x y))\"', 'output': '5 Explanation: The first (add x y) evaluates as 3, and is assigned to x.\\nThe second (add x y) evaluates as 3+2 = 5.'}], 'elixir_template': 'defmodule Solution do\\n  @spec evaluate(expression :: String.t) :: integer\\n  def evaluate(expression) do\\n    \\n  end\\nend', 'erlang_template': '-spec evaluate(Expression :: unicode:unicode_binary()) -> integer().\\nevaluate(Expression) ->\\n  .', 'scala_template': 'object Solution {\\n    def evaluate(expression: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!404\n",
            "asteroid-collision 735\n",
            "{'id': 735, 'name': 'asteroid-collision', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/asteroid-collision/', 'task_description': 'We are given an array `asteroids` of integers representing asteroids in a row. The indices of the asteriod in the array represent their relative position in space. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed. Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet. **Example 1:** ``` **Input:** asteroids = [5,10,-5] **Output:** [5,10] **Explanation:** The 10 and -5 collide resulting in 10. The 5 and 10 never collide. ``` **Example 2:** ``` **Input:** asteroids = [8,-8] **Output:** [] **Explanation:** The 8 and -8 collide exploding each other. ``` **Example 3:** ``` **Input:** asteroids = [10,2,-5] **Output:** [10] **Explanation:** The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10. ``` **Constraints:** `2 <= asteroids.length <= 104` `-1000 <= asteroids[i] <= 1000` `asteroids[i] != 0`', 'test_case': [{'label': 'Example 1', 'input': 'asteroids = [5,10,-5]', 'output': '[5,10] Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.'}, {'label': 'Example 2', 'input': 'asteroids = [8,-8]', 'output': '[] Explanation: The 8 and -8 collide exploding each other.'}, {'label': 'Example 3', 'input': 'asteroids = [10,2,-5]', 'output': '[10] Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.'}], 'elixir_template': 'defmodule Solution do\\n  @spec asteroid_collision(asteroids :: [integer]) :: [integer]\\n  def asteroid_collision(asteroids) do\\n    \\n  end\\nend', 'erlang_template': '-spec asteroid_collision(Asteroids :: [integer()]) -> [integer()].\\nasteroid_collision(Asteroids) ->\\n  .', 'scala_template': 'object Solution {\\n    def asteroidCollision(asteroids: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!405\n",
            "flood-fill 733\n",
            "{'id': 733, 'name': 'flood-fill', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/flood-fill/', 'task_description': 'You are given an image represented by an `m x n` grid of integers `image`, where `image[i][j]` represents the pixel value of the image. You are also given three integers `sr`, `sc`, and `color`. Your task is to perform a **flood fill** on the image starting from the pixel `image[sr][sc]`. To perform a **flood fill**: Begin with the starting pixel and change its color to `color`. Perform the same process for each pixel that is **directly adjacent** (pixels that share a side with the original pixel, either horizontally or vertically) and shares the **same color** as the starting pixel. Keep **repeating** this process by checking neighboring pixels of the _updated_ pixels and modifying their color if it matches the original color of the starting pixel. The process **stops** when there are **no more** adjacent pixels of the original color to update. Return the **modified** image after performing the flood fill. **Example 1:** **Input:** image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2 **Output:** [[2,2,2],[2,2,0],[2,0,1]] **Explanation:** From the center of the image with position `(sr, sc) = (1, 1)` (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color. Note the bottom corner is **not** colored 2, because it is not horizontally or vertically connected to the starting pixel. **Example 2:** **Input:** image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0 **Output:** [[0,0,0],[0,0,0]] **Explanation:** The starting pixel is already colored with 0, which is the same as the target color. Therefore, no changes are made to the image. **Constraints:** `m == image.length` `n == image[i].length` `1 <= m, n <= 50` `0 <= image[i][j], color < 216` `0 <= sr < m` `0 <= sc < n`', 'test_case': [{'label': 'Example 1', 'input': 'image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2', 'output': '[[2,2,2],[2,2,0],[2,0,1]] Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color. Note the bottom corner is not colored 2, because it is not horizontally or vertically connected to the starting pixel.'}, {'label': 'Example 2', 'input': 'image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0', 'output': '[[0,0,0],[0,0,0]] Explanation: The starting pixel is already colored with 0, which is the same as the target color. Therefore, no changes are made to the image. Constraints: m == image.length n == image[i].length 1 <= m, n <= 50 0 <= image[i][j], color < 2 16 0 <= sr < m 0 <= sc < n'}], 'elixir_template': 'defmodule Solution do\\n  @spec flood_fill(image :: [[integer]], sr :: integer, sc :: integer, color :: integer) :: [[integer]]\\n  def flood_fill(image, sr, sc, color) do\\n    \\n  end\\nend', 'erlang_template': '-spec flood_fill(Image :: [[integer()]], Sr :: integer(), Sc :: integer(), Color :: integer()) -> [[integer()]].\\nflood_fill(Image, Sr, Sc, Color) ->\\n  .', 'scala_template': 'object Solution {\\n    def floodFill(image: Array[Array[Int]], sr: Int, sc: Int, color: Int): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!406\n",
            "my-calendar-iii 732\n",
            "{'id': 732, 'name': 'my-calendar-iii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/my-calendar-iii/', 'task_description': 'A `k`-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.) You are given some events `[startTime, endTime)`, after each given event, return an integer `k` representing the maximum `k`-booking between all the previous events. Implement the `MyCalendarThree` class: `MyCalendarThree()` Initializes the object. `int book(int startTime, int endTime)` Returns an integer `k` representing the largest integer such that there exists a `k`-booking in the calendar. **Example 1:** ``` **Input** [\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"] [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]] **Output** [null, 1, 1, 2, 3, 3, 3] **Explanation** MyCalendarThree myCalendarThree = new MyCalendarThree(); myCalendarThree.book(10, 20); // return 1 myCalendarThree.book(50, 60); // return 1 myCalendarThree.book(10, 40); // return 2 myCalendarThree.book(5, 15); // return 3 myCalendarThree.book(5, 10); // return 3 myCalendarThree.book(25, 55); // return 3 ``` **Constraints:** `0 <= startTime < endTime <= 109` At most `400` calls will be made to `book`.', 'test_case': [], 'elixir_template': 'defmodule MyCalendarThree do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec book(start_time :: integer, end_time :: integer) :: integer\\n  def book(start_time, end_time) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyCalendarThree.init_()\\n# param_1 = MyCalendarThree.book(start_time, end_time)\\n\\n# MyCalendarThree.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_calendar_three_init_() -> any().\\nmy_calendar_three_init_() ->\\n  .\\n\\n-spec my_calendar_three_book(StartTime :: integer(), EndTime :: integer()) -> integer().\\nmy_calendar_three_book(StartTime, EndTime) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_calendar_three_init_(),\\n%% Param_1 = my_calendar_three_book(StartTime, EndTime),\\n\\n%% my_calendar_three_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyCalendarThree() {\\n\\n    def book(startTime: Int, endTime: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyCalendarThree object will be instantiated and called as such:\\n * val obj = new MyCalendarThree()\\n * val param_1 = obj.book(startTime,endTime)\\n */'}\n",
            "Done!407\n",
            "my-calendar-ii 731\n",
            "{'id': 731, 'name': 'my-calendar-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/my-calendar-ii/', 'task_description': 'You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **triple booking**. A **triple booking** happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.). The event can be represented as a pair of integers `startTime` and `endTime` that represents a booking on the half-open interval `[startTime, endTime)`, the range of real numbers `x` such that `startTime <= x < endTime`. Implement the `MyCalendarTwo` class: `MyCalendarTwo()` Initializes the calendar object. `boolean book(int startTime, int endTime)` Returns `true` if the event can be added to the calendar successfully without causing a **triple booking**. Otherwise, return `false` and do not add the event to the calendar. **Example 1:** ``` **Input** [\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"] [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]] **Output** [null, true, true, true, false, true, true] **Explanation** MyCalendarTwo myCalendarTwo = new MyCalendarTwo(); myCalendarTwo.book(10, 20); // return True, The event can be booked. myCalendarTwo.book(50, 60); // return True, The event can be booked. myCalendarTwo.book(10, 40); // return True, The event can be double booked. myCalendarTwo.book(5, 15); // return False, The event cannot be booked, because it would result in a triple booking. myCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked. myCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event. ``` **Constraints:** `0 <= start < end <= 109` At most `1000` calls will be made to `book`.', 'test_case': [], 'elixir_template': 'defmodule MyCalendarTwo do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec book(start_time :: integer, end_time :: integer) :: boolean\\n  def book(start_time, end_time) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyCalendarTwo.init_()\\n# param_1 = MyCalendarTwo.book(start_time, end_time)\\n\\n# MyCalendarTwo.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_calendar_two_init_() -> any().\\nmy_calendar_two_init_() ->\\n  .\\n\\n-spec my_calendar_two_book(StartTime :: integer(), EndTime :: integer()) -> boolean().\\nmy_calendar_two_book(StartTime, EndTime) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_calendar_two_init_(),\\n%% Param_1 = my_calendar_two_book(StartTime, EndTime),\\n\\n%% my_calendar_two_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyCalendarTwo() {\\n\\n    def book(startTime: Int, endTime: Int): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyCalendarTwo object will be instantiated and called as such:\\n * val obj = new MyCalendarTwo()\\n * val param_1 = obj.book(startTime,endTime)\\n */'}\n",
            "Done!408\n",
            "count-different-palindromic-subsequences 730\n",
            "{'id': 730, 'name': 'count-different-palindromic-subsequences', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/count-different-palindromic-subsequences/', 'task_description': 'Given a string s, return _the number of different non-empty palindromic subsequences in_ `s`. Since the answer may be very large, return it **modulo** `109 + 7`. A subsequence of a string is obtained by deleting zero or more characters from the string. A sequence is palindromic if it is equal to the sequence reversed. Two sequences `a1, a2, ...` and `b1, b2, ...` are different if there is some `i` for which `ai != bi`. **Example 1:** ``` **Input:** s = \"bccb\" **Output:** 6 **Explanation:** The 6 different non-empty palindromic subsequences are \\'b\\', \\'c\\', \\'bb\\', \\'cc\\', \\'bcb\\', \\'bccb\\'. Note that \\'bcb\\' is counted only once, even though it occurs twice. ``` **Example 2:** ``` **Input:** s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\" **Output:** 104860361 **Explanation:** There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7. ``` **Constraints:** `1 <= s.length <= 1000` `s[i]` is either `\\'a\\'`, `\\'b\\'`, `\\'c\\'`, or `\\'d\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"bccb\"', 'output': \"6 Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\\nNote that 'bcb' is counted only once, even though it occurs twice.\"}, {'label': 'Example 2', 'input': 's = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"', 'output': '104860361 Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10 9 + 7.'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_palindromic_subsequences(s :: String.t) :: integer\\n  def count_palindromic_subsequences(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_palindromic_subsequences(S :: unicode:unicode_binary()) -> integer().\\ncount_palindromic_subsequences(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def countPalindromicSubsequences(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!409\n",
            "my-calendar-i 729\n",
            "{'id': 729, 'name': 'my-calendar-i', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/my-calendar-i/', 'task_description': 'You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a **double booking**. A **double booking** happens when two events have some non-empty intersection (i.e., some moment is common to both events.). The event can be represented as a pair of integers `startTime` and `endTime` that represents a booking on the half-open interval `[startTime, endTime)`, the range of real numbers `x` such that `startTime <= x < endTime`. Implement the `MyCalendar` class: `MyCalendar()` Initializes the calendar object. `boolean book(int startTime, int endTime)` Returns `true` if the event can be added to the calendar successfully without causing a **double booking**. Otherwise, return `false` and do not add the event to the calendar. **Example 1:** ``` **Input** [\"MyCalendar\", \"book\", \"book\", \"book\"] [[], [10, 20], [15, 25], [20, 30]] **Output** [null, true, false, true] **Explanation** MyCalendar myCalendar = new MyCalendar(); myCalendar.book(10, 20); // return True myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event. myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20. ``` **Constraints:** `0 <= start < end <= 109` At most `1000` calls will be made to `book`.', 'test_case': [], 'elixir_template': 'defmodule MyCalendar do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec book(start_time :: integer, end_time :: integer) :: boolean\\n  def book(start_time, end_time) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyCalendar.init_()\\n# param_1 = MyCalendar.book(start_time, end_time)\\n\\n# MyCalendar.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_calendar_init_() -> any().\\nmy_calendar_init_() ->\\n  .\\n\\n-spec my_calendar_book(StartTime :: integer(), EndTime :: integer()) -> boolean().\\nmy_calendar_book(StartTime, EndTime) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_calendar_init_(),\\n%% Param_1 = my_calendar_book(StartTime, EndTime),\\n\\n%% my_calendar_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyCalendar() {\\n\\n    def book(startTime: Int, endTime: Int): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyCalendar object will be instantiated and called as such:\\n * val obj = new MyCalendar()\\n * val param_1 = obj.book(startTime,endTime)\\n */'}\n",
            "Done!410\n",
            "self-dividing-numbers 728\n",
            "{'id': 728, 'name': 'self-dividing-numbers', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/self-dividing-numbers/', 'task_description': 'A **self-dividing number** is a number that is divisible by every digit it contains. For example, `128` is **a self-dividing number** because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`. A **self-dividing number** is not allowed to contain the digit zero. Given two integers `left` and `right`, return _a list of all the **self-dividing numbers** in the range_ `[left, right]` (both **inclusive**). **Example 1:** ``` **Input:** left = 1, right = 22 **Output:** [1,2,3,4,5,6,7,8,9,11,12,15,22] ``` **Example 2:** ``` **Input:** left = 47, right = 85 **Output:** [48,55,66,77] ``` **Constraints:** `1 <= left <= right <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'left = 1, right = 22', 'output': '[1,2,3,4,5,6,7,8,9,11,12,15,22]'}, {'label': 'Example 2', 'input': 'left = 47, right = 85', 'output': '[48,55,66,77]'}], 'elixir_template': 'defmodule Solution do\\n  @spec self_dividing_numbers(left :: integer, right :: integer) :: [integer]\\n  def self_dividing_numbers(left, right) do\\n    \\n  end\\nend', 'erlang_template': '-spec self_dividing_numbers(Left :: integer(), Right :: integer()) -> [integer()].\\nself_dividing_numbers(Left, Right) ->\\n  .', 'scala_template': 'object Solution {\\n    def selfDividingNumbers(left: Int, right: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!411\n",
            "number-of-atoms 726\n",
            "{'id': 726, 'name': 'number-of-atoms', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/number-of-atoms/', 'task_description': 'Given a string `formula` representing a chemical formula, return _the count of each atom_. The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name. One or more digits representing that element\\'s count may follow if the count is greater than `1`. If the count is `1`, no digits will follow. For example, `\"H2O\"` and `\"H2O2\"` are possible, but `\"H1O2\"` is impossible. Two formulas are concatenated together to produce another formula. For example, `\"H2O2He3Mg4\"` is also a formula. A formula placed in parentheses, and a count (optionally added) is also a formula. For example, `\"(H2O2)\"` and `\"(H2O2)3\"` are formulas. Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than `1`), followed by the second name (in sorted order), followed by its count (if that count is more than `1`), and so on. The test cases are generated so that all the values in the output fit in a **32-bit** integer. **Example 1:** ``` **Input:** formula = \"H2O\" **Output:** \"H2O\" **Explanation:** The count of elements are {\\'H\\': 2, \\'O\\': 1}. ``` **Example 2:** ``` **Input:** formula = \"Mg(OH)2\" **Output:** \"H2MgO2\" **Explanation:** The count of elements are {\\'H\\': 2, \\'Mg\\': 1, \\'O\\': 2}. ``` **Example 3:** ``` **Input:** formula = \"K4(ON(SO3)2)2\" **Output:** \"K4N2O14S4\" **Explanation:** The count of elements are {\\'K\\': 4, \\'N\\': 2, \\'O\\': 14, \\'S\\': 4}. ``` **Constraints:** `1 <= formula.length <= 1000` `formula` consists of English letters, digits, `\\'(\\'`, and `\\')\\'`. `formula` is always valid.', 'test_case': [{'label': 'Example 1', 'input': 'formula = \"H2O\"', 'output': '\"H2O\" Explanation: The count of elements are {\\'H\\': 2, \\'O\\': 1}.'}, {'label': 'Example 2', 'input': 'formula = \"Mg(OH)2\"', 'output': '\"H2MgO2\" Explanation: The count of elements are {\\'H\\': 2, \\'Mg\\': 1, \\'O\\': 2}.'}, {'label': 'Example 3', 'input': 'formula = \"K4(ON(SO3)2)2\"', 'output': '\"K4N2O14S4\" Explanation: The count of elements are {\\'K\\': 4, \\'N\\': 2, \\'O\\': 14, \\'S\\': 4}.'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_of_atoms(formula :: String.t) :: String.t\\n  def count_of_atoms(formula) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_of_atoms(Formula :: unicode:unicode_binary()) -> unicode:unicode_binary().\\ncount_of_atoms(Formula) ->\\n  .', 'scala_template': 'object Solution {\\n    def countOfAtoms(formula: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!412\n",
            "split-linked-list-in-parts 725\n",
            "{'id': 725, 'name': 'split-linked-list-in-parts', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/split-linked-list-in-parts/', 'task_description': 'Given the `head` of a singly linked list and an integer `k`, split the linked list into `k` consecutive linked list parts. The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null. The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later. Return _an array of the _`k`_ parts_. **Example 1:** ``` **Input:** head = [1,2,3], k = 5 **Output:** [[1],[2],[3],[],[]] **Explanation:** The first element output[0] has output[0].val = 1, output[0].next = null. The last element output[4] is null, but its string representation as a ListNode is []. ``` **Example 2:** ``` **Input:** head = [1,2,3,4,5,6,7,8,9,10], k = 3 **Output:** [[1,2,3,4],[5,6,7],[8,9,10]] **Explanation:** The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts. ``` **Constraints:** The number of nodes in the list is in the range `[0, 1000]`. `0 <= Node.val <= 1000` `1 <= k <= 50`', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3], k = 5', 'output': '[[1],[2],[3],[],[]] Explanation: The first element output[0] has output[0].val = 1, output[0].next = null.\\nThe last element output[4] is null, but its string representation as a ListNode is [].'}, {'label': 'Example 2', 'input': 'head = [1,2,3,4,5,6,7,8,9,10], k = 3', 'output': '[[1,2,3,4],[5,6,7],[8,9,10]] Explanation: The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts. Constraints: The number of nodes in the list is in the range [0, 1000] . 0 <= Node.val <= 1000 1 <= k <= 50'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec split_list_to_parts(head :: ListNode.t | nil, k :: integer) :: [ListNode.t | nil]\\n  def split_list_to_parts(head, k) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec split_list_to_parts(Head :: #list_node{} | null, K :: integer()) -> [#list_node{} | null].\\nsplit_list_to_parts(Head, K) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def splitListToParts(head: ListNode, k: Int): Array[ListNode] = {\\n        \\n    }\\n}'}\n",
            "Done!413\n",
            "find-pivot-index 724\n",
            "{'id': 724, 'name': 'find-pivot-index', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-pivot-index/', 'task_description': \"Given an array of integers `nums`, calculate the **pivot index** of this array. The **pivot index** is the index where the sum of all the numbers **strictly** to the left of the index is equal to the sum of all the numbers **strictly** to the index's right. If the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array. Return _the **leftmost pivot index**_. If no such index exists, return `-1`. **Example 1:** ``` **Input:** nums = [1,7,3,6,5,6] **Output:** 3 **Explanation:** The pivot index is 3. Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 Right sum = nums[4] + nums[5] = 5 + 6 = 11 ``` **Example 2:** ``` **Input:** nums = [1,2,3] **Output:** -1 **Explanation:** There is no index that satisfies the conditions in the problem statement. ``` **Example 3:** ``` **Input:** nums = [2,1,-1] **Output:** 0 **Explanation:** The pivot index is 0. Left sum = 0 (no elements to the left of index 0) Right sum = nums[1] + nums[2] = 1 + -1 = 0 ``` **Constraints:** `1 <= nums.length <= 104` `-1000 <= nums[i] <= 1000` **Note:** This question is the same as 1991: https://leetcode.com/problems/find-the-middle-index-in-array/\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,7,3,6,5,6]', 'output': '3 Explanation: The pivot index is 3.\\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\\nRight sum = nums[4] + nums[5] = 5 + 6 = 11'}, {'label': 'Example 2', 'input': 'nums = [1,2,3]', 'output': '-1 Explanation: There is no index that satisfies the conditions in the problem statement.'}, {'label': 'Example 3', 'input': 'nums = [2,1,-1]', 'output': '0 Explanation: The pivot index is 0.\\nLeft sum = 0 (no elements to the left of index 0)\\nRight sum = nums[1] + nums[2] = 1 + -1 = 0'}], 'elixir_template': 'defmodule Solution do\\n  @spec pivot_index(nums :: [integer]) :: integer\\n  def pivot_index(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec pivot_index(Nums :: [integer()]) -> integer().\\npivot_index(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def pivotIndex(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!414\n",
            "remove-comments 722\n",
            "{'id': 722, 'name': 'remove-comments', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/remove-comments/', 'task_description': 'Given a C++ program, remove comments from it. The program source is an array of strings `source` where `source[i]` is the `ith` line of the source code. This represents the result of splitting the original source code string by the newline character `\\'\\\\n\\'`. In C++, there are two types of comments, line comments, and block comments. The string `\"//\"` denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored. The string `\"/*\"` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `\"*/\"` should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string `\"/*/\"` does not yet end the block comment, as the ending would be overlapping the beginning. The first effective comment takes precedence over others. For example, if the string `\"//\"` occurs in a block comment, it is ignored. Similarly, if the string `\"/*\"` occurs in a line or block comment, it is also ignored. If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty. There will be no control characters, single quote, or double quote characters. For example, `source = \"string s = \"/* Not a comment. */\";\"` will not be a test case. Also, nothing else such as defines or macros will interfere with the comments. It is guaranteed that every open block comment will eventually be closed, so `\"/*\"` outside of a line or block comment always starts a new comment. Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details. After removing the comments from the source code, return _the source code in the same format_. **Example 1:** ``` **Input:** source = [\"/*Test program */\", \"int main()\", \"{ \", \" // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \" multiline \", \" comment for \", \" testing */\", \"a = b + c;\", \"}\"] **Output:** [\"int main()\",\"{ \",\" \",\"int a, b, c;\",\"a = b + c;\",\"}\"] **Explanation:** The line by line code is visualized as below: /*Test program */ int main() { // variable declaration int a, b, c; /* This is a test multiline comment for testing */ a = b + c; } The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments. The line by line output code is visualized as below: int main() { int a, b, c; a = b + c; } ``` **Example 2:** ``` **Input:** source = [\"a/*comment\", \"line\", \"more_comment*/b\"] **Output:** [\"ab\"] **Explanation:** The original source string is \"a/*comment\\\\nline\\\\nmore_comment*/b\", where we have bolded the newline characters. After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"]. ``` **Constraints:** `1 <= source.length <= 100` `0 <= source[i].length <= 80` `source[i]` consists of printable **ASCII** characters. Every open block comment is eventually closed. There are no single-quote or double-quote in the input.', 'test_case': [{'label': 'Example 1', 'input': 'source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]', 'output': '[\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"] Explanation: The line by line code is visualized as below:\\n/*Test program */\\nint main()\\n{ \\n  // variable declaration \\nint a, b, c;\\n/* This is a test\\n   multiline  \\n   comment for \\n   testing */\\na = b + c;\\n}\\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\\nThe line by line output code is visualized as below:\\nint main()\\n{ \\n  \\nint a, b, c;\\na = b + c;\\n}'}, {'label': 'Example 2', 'input': 'source = [\"a/*comment\", \"line\", \"more_comment*/b\"]', 'output': '[\"ab\"] Explanation: The original source string is \"a/*comment\\\\nline\\\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_comments(source :: [String.t]) :: [String.t]\\n  def remove_comments(source) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_comments(Source :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nremove_comments(Source) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeComments(source: Array[String]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!415\n",
            "accounts-merge 721\n",
            "{'id': 721, 'name': 'accounts-merge', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/accounts-merge/', 'task_description': 'Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are **emails** representing emails of the account. Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name. After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails **in sorted order**. The accounts themselves can be returned in **any order**. **Example 1:** ``` **Input:** accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]] **Output:** [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]] **Explanation:** The first and second John\\'s are the same person as they have the common email \"johnsmith@mail.com\". The third John and Mary are different people as none of their email addresses are used by other accounts. We could return these lists in any order, for example the answer [[\\'Mary\\', \\'mary@mail.com\\'], [\\'John\\', \\'johnnybravo@mail.com\\'], [\\'John\\', \\'john00@mail.com\\', \\'john_newyork@mail.com\\', \\'johnsmith@mail.com\\']] would still be accepted. ``` **Example 2:** ``` **Input:** accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]] **Output:** [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]] ``` **Constraints:** `1 <= accounts.length <= 1000` `2 <= accounts[i].length <= 10` `1 <= accounts[i][j].length <= 30` `accounts[i][0]` consists of English letters. `accounts[i][j] (for j > 0)` is a valid email.', 'test_case': [{'label': 'Example 1', 'input': 'accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]', 'output': '[[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]] Explanation: The first and second John\\'s are the same person as they have the common email \"johnsmith@mail.com\".\\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\\nWe could return these lists in any order, for example the answer [[\\'Mary\\', \\'mary@mail.com\\'], [\\'John\\', \\'johnnybravo@mail.com\\'], \\n[\\'John\\', \\'john00@mail.com\\', \\'john_newyork@mail.com\\', \\'johnsmith@mail.com\\']] would still be accepted.'}, {'label': 'Example 2', 'input': 'accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]', 'output': '[[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec accounts_merge(accounts :: [[String.t]]) :: [[String.t]]\\n  def accounts_merge(accounts) do\\n    \\n  end\\nend', 'erlang_template': '-spec accounts_merge(Accounts :: [[unicode:unicode_binary()]]) -> [[unicode:unicode_binary()]].\\naccounts_merge(Accounts) ->\\n  .', 'scala_template': 'object Solution {\\n    def accountsMerge(accounts: List[List[String]]): List[List[String]] = {\\n        \\n    }\\n}'}\n",
            "Done!416\n",
            "longest-word-in-dictionary 720\n",
            "{'id': 720, 'name': 'longest-word-in-dictionary', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-word-in-dictionary/', 'task_description': 'Given an array of strings `words` representing an English Dictionary, return _the longest word in_ `words` _that can be built one character at a time by other words in_ `words`. If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string. Note that the word should be built from left to right with each additional character being added to the end of a previous word. **Example 1:** ``` **Input:** words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"] **Output:** \"world\" **Explanation:** The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\". ``` **Example 2:** ``` **Input:** words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"] **Output:** \"apple\" **Explanation:** Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\". ``` **Constraints:** `1 <= words.length <= 1000` `1 <= words[i].length <= 30` `words[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]', 'output': '\"world\" Explanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".'}, {'label': 'Example 2', 'input': 'words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]', 'output': '\"apple\" Explanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_word(words :: [String.t]) :: String.t\\n  def longest_word(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_word(Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nlongest_word(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestWord(words: Array[String]): String = {\\n        \\n    }\\n}'}\n",
            "Done!417\n",
            "find-k-th-smallest-pair-distance 719\n",
            "{'id': 719, 'name': 'find-k-th-smallest-pair-distance', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/find-k-th-smallest-pair-distance/', 'task_description': 'The **distance of a pair** of integers `a` and `b` is defined as the absolute difference between `a` and `b`. Given an integer array `nums` and an integer `k`, return _the_ `kth` _smallest **distance among all the pairs**_ `nums[i]` _and_ `nums[j]` _where_ `0 <= i < j < nums.length`. **Example 1:** ``` **Input:** nums = [1,3,1], k = 1 **Output:** 0 **Explanation:** Here are all the pairs: (1,3) -> 2 (1,1) -> 0 (3,1) -> 2 Then the 1st smallest distance pair is (1,1), and its distance is 0. ``` **Example 2:** ``` **Input:** nums = [1,1,1], k = 2 **Output:** 0 ``` **Example 3:** ``` **Input:** nums = [1,6,1], k = 3 **Output:** 5 ``` **Constraints:** `n == nums.length` `2 <= n <= 104` `0 <= nums[i] <= 106` `1 <= k <= n * (n - 1) / 2`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,1], k = 1', 'output': '0 Explanation: Here are all the pairs:\\n(1,3) -> 2\\n(1,1) -> 0\\n(3,1) -> 2\\nThen the 1 st smallest distance pair is (1,1), and its distance is 0.'}, {'label': 'Example 2', 'input': 'nums = [1,1,1], k = 2', 'output': '0'}, {'label': 'Example 3', 'input': 'nums = [1,6,1], k = 3', 'output': '5 Constraints: n == nums.length 2 <= n <= 10 4 0 <= nums[i] <= 10 6 1 <= k <= n * (n - 1) / 2'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_distance_pair(nums :: [integer], k :: integer) :: integer\\n  def smallest_distance_pair(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_distance_pair(Nums :: [integer()], K :: integer()) -> integer().\\nsmallest_distance_pair(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestDistancePair(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!418\n",
            "maximum-length-of-repeated-subarray 718\n",
            "{'id': 718, 'name': 'maximum-length-of-repeated-subarray', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-length-of-repeated-subarray/', 'task_description': 'Given two integer arrays `nums1` and `nums2`, return _the maximum length of a subarray that appears in **both** arrays_. **Example 1:** ``` **Input:** nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7] **Output:** 3 **Explanation:** The repeated subarray with maximum length is [3,2,1]. ``` **Example 2:** ``` **Input:** nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0] **Output:** 5 **Explanation:** The repeated subarray with maximum length is [0,0,0,0,0]. ``` **Constraints:** `1 <= nums1.length, nums2.length <= 1000` `0 <= nums1[i], nums2[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]', 'output': '3 Explanation: The repeated subarray with maximum length is [3,2,1].'}, {'label': 'Example 2', 'input': 'nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]', 'output': '5 Explanation: The repeated subarray with maximum length is [0,0,0,0,0].'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_length(nums1 :: [integer], nums2 :: [integer]) :: integer\\n  def find_length(nums1, nums2) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_length(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\\nfind_length(Nums1, Nums2) ->\\n  .', 'scala_template': 'object Solution {\\n    def findLength(nums1: Array[Int], nums2: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!419\n",
            "1-bit-and-2-bit-characters 717\n",
            "{'id': 717, 'name': '1-bit-and-2-bit-characters', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/1-bit-and-2-bit-characters/', 'task_description': 'We have two special characters: The first character can be represented by one bit `0`. The second character can be represented by two bits (`10` or `11`). Given a binary array `bits` that ends with `0`, return `true` if the last character must be a one-bit character. **Example 1:** ``` **Input:** bits = [1,0,0] **Output:** true **Explanation:** The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character. ``` **Example 2:** ``` **Input:** bits = [1,1,1,0] **Output:** false **Explanation:** The only way to decode it is two-bit character and two-bit character. So the last character is not one-bit character. ``` **Constraints:** `1 <= bits.length <= 1000` `bits[i]` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'bits = [1,0,0]', 'output': 'true Explanation: The only way to decode it is two-bit character and one-bit character.\\nSo the last character is one-bit character.'}, {'label': 'Example 2', 'input': 'bits = [1,1,1,0]', 'output': 'false Explanation: The only way to decode it is two-bit character and two-bit character.\\nSo the last character is not one-bit character.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_one_bit_character(bits :: [integer]) :: boolean\\n  def is_one_bit_character(bits) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_one_bit_character(Bits :: [integer()]) -> boolean().\\nis_one_bit_character(Bits) ->\\n  .', 'scala_template': 'object Solution {\\n    def isOneBitCharacter(bits: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!420\n",
            "range-module 715\n",
            "{'id': 715, 'name': 'range-module', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/range-module/', 'task_description': 'A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as **half-open intervals** and query about them. A **half-open interval** `[left, right)` denotes all the real numbers `x` where `left <= x < right`. Implement the `RangeModule` class: `RangeModule()` Initializes the object of the data structure. `void addRange(int left, int right)` Adds the **half-open interval** `[left, right)`, tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval `[left, right)` that are not already tracked. `boolean queryRange(int left, int right)` Returns `true` if every real number in the interval `[left, right)` is currently being tracked, and `false` otherwise. `void removeRange(int left, int right)` Stops tracking every real number currently being tracked in the **half-open interval** `[left, right)`. **Example 1:** ``` **Input** [\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"] [[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]] **Output** [null, null, null, true, false, true] **Explanation** RangeModule rangeModule = new RangeModule(); rangeModule.addRange(10, 20); rangeModule.removeRange(14, 16); rangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked) rangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked) rangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation) ``` **Constraints:** `1 <= left < right <= 109` At most `104` calls will be made to `addRange`, `queryRange`, and `removeRange`.', 'test_case': [], 'elixir_template': 'defmodule RangeModule do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec add_range(left :: integer, right :: integer) :: any\\n  def add_range(left, right) do\\n    \\n  end\\n\\n  @spec query_range(left :: integer, right :: integer) :: boolean\\n  def query_range(left, right) do\\n    \\n  end\\n\\n  @spec remove_range(left :: integer, right :: integer) :: any\\n  def remove_range(left, right) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# RangeModule.init_()\\n# RangeModule.add_range(left, right)\\n# param_2 = RangeModule.query_range(left, right)\\n# RangeModule.remove_range(left, right)\\n\\n# RangeModule.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec range_module_init_() -> any().\\nrange_module_init_() ->\\n  .\\n\\n-spec range_module_add_range(Left :: integer(), Right :: integer()) -> any().\\nrange_module_add_range(Left, Right) ->\\n  .\\n\\n-spec range_module_query_range(Left :: integer(), Right :: integer()) -> boolean().\\nrange_module_query_range(Left, Right) ->\\n  .\\n\\n-spec range_module_remove_range(Left :: integer(), Right :: integer()) -> any().\\nrange_module_remove_range(Left, Right) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% range_module_init_(),\\n%% range_module_add_range(Left, Right),\\n%% Param_2 = range_module_query_range(Left, Right),\\n%% range_module_remove_range(Left, Right),\\n\\n%% range_module_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class RangeModule() {\\n\\n    def addRange(left: Int, right: Int): Unit = {\\n        \\n    }\\n\\n    def queryRange(left: Int, right: Int): Boolean = {\\n        \\n    }\\n\\n    def removeRange(left: Int, right: Int): Unit = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your RangeModule object will be instantiated and called as such:\\n * val obj = new RangeModule()\\n * obj.addRange(left,right)\\n * val param_2 = obj.queryRange(left,right)\\n * obj.removeRange(left,right)\\n */'}\n",
            "Done!421\n",
            "best-time-to-buy-and-sell-stock-with-transaction-fee 714\n",
            "{'id': 714, 'name': 'best-time-to-buy-and-sell-stock-with-transaction-fee', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/', 'task_description': 'You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee. Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. **Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). The transaction fee is only charged once for each stock purchase and sale. **Example 1:** ``` **Input:** prices = [1,3,2,8,4,9], fee = 2 **Output:** 8 **Explanation:** The maximum profit can be achieved by: - Buying at prices[0] = 1 - Selling at prices[3] = 8 - Buying at prices[4] = 4 - Selling at prices[5] = 9 The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8. ``` **Example 2:** ``` **Input:** prices = [1,3,7,5,10,3], fee = 3 **Output:** 6 ``` **Constraints:** `1 <= prices.length <= 5 * 104` `1 <= prices[i] < 5 * 104` `0 <= fee < 5 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'prices = [1,3,2,8,4,9], fee = 2', 'output': '8 Explanation: The maximum profit can be achieved by:\\n- Buying at prices[0] = 1\\n- Selling at prices[3] = 8\\n- Buying at prices[4] = 4\\n- Selling at prices[5] = 9\\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.'}, {'label': 'Example 2', 'input': 'prices = [1,3,7,5,10,3], fee = 3', 'output': '6'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_profit(prices :: [integer], fee :: integer) :: integer\\n  def max_profit(prices, fee) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_profit(Prices :: [integer()], Fee :: integer()) -> integer().\\nmax_profit(Prices, Fee) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProfit(prices: Array[Int], fee: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!422\n",
            "subarray-product-less-than-k 713\n",
            "{'id': 713, 'name': 'subarray-product-less-than-k', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/subarray-product-less-than-k/', 'task_description': 'Given an array of integers `nums` and an integer `k`, return _the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than _`k`. **Example 1:** ``` **Input:** nums = [10,5,2,6], k = 100 **Output:** 8 **Explanation:** The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6] Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k. ``` **Example 2:** ``` **Input:** nums = [1,2,3], k = 0 **Output:** 0 ``` **Constraints:** `1 <= nums.length <= 3 * 104` `1 <= nums[i] <= 1000` `0 <= k <= 106`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [10,5,2,6], k = 100', 'output': '8 Explanation: The 8 subarrays that have product less than 100 are:\\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3], k = 0', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_subarray_product_less_than_k(nums :: [integer], k :: integer) :: integer\\n  def num_subarray_product_less_than_k(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_subarray_product_less_than_k(Nums :: [integer()], K :: integer()) -> integer().\\nnum_subarray_product_less_than_k(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSubarrayProductLessThanK(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!423\n",
            "minimum-ascii-delete-sum-for-two-strings 712\n",
            "{'id': 712, 'name': 'minimum-ascii-delete-sum-for-two-strings', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/', 'task_description': 'Given two strings `s1` and `s2`, return _the lowest **ASCII** sum of deleted characters to make two strings equal_. **Example 1:** ``` **Input:** s1 = \"sea\", s2 = \"eat\" **Output:** 231 **Explanation:** Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum. Deleting \"t\" from \"eat\" adds 116 to the sum. At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this. ``` **Example 2:** ``` **Input:** s1 = \"delete\", s2 = \"leet\" **Output:** 403 **Explanation:** Deleting \"dee\" from \"delete\" to turn the string into \"let\", adds 100[d] + 101[e] + 101[e] to the sum. Deleting \"e\" from \"leet\" adds 101[e] to the sum. At the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403. If instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher. ``` **Constraints:** `1 <= s1.length, s2.length <= 1000` `s1` and `s2` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's1 = \"sea\", s2 = \"eat\"', 'output': '231 Explanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\\nDeleting \"t\" from \"eat\" adds 116 to the sum.\\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.'}, {'label': 'Example 2', 'input': 's1 = \"delete\", s2 = \"leet\"', 'output': '403 Explanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\\nadds 100[d] + 101[e] + 101[e] to the sum.\\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.'}], 'elixir_template': 'defmodule Solution do\\n  @spec minimum_delete_sum(s1 :: String.t, s2 :: String.t) :: integer\\n  def minimum_delete_sum(s1, s2) do\\n    \\n  end\\nend', 'erlang_template': '-spec minimum_delete_sum(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> integer().\\nminimum_delete_sum(S1, S2) ->\\n  .', 'scala_template': 'object Solution {\\n    def minimumDeleteSum(s1: String, s2: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!424\n",
            "falling-squares 699\n",
            "{'id': 699, 'name': 'falling-squares', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/falling-squares/', 'task_description': 'There are several squares being dropped onto the X-axis of a 2D plane. You are given a 2D integer array `positions` where `positions[i] = [lefti, sideLengthi]` represents the `ith` square with a side length of `sideLengthi` that is dropped with its left edge aligned with X-coordinate `lefti`. Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands **on the top side of another square** or **on the X-axis**. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved. After each square is dropped, you must record the **height of the current tallest stack of squares**. Return _an integer array _`ans`_ where _`ans[i]`_ represents the height described above after dropping the _`ith`_ square_. **Example 1:** ``` **Input:** positions = [[1,2],[2,3],[6,1]] **Output:** [2,5,5] **Explanation:** After the first drop, the tallest stack is square 1 with a height of 2. After the second drop, the tallest stack is squares 1 and 2 with a height of 5. After the third drop, the tallest stack is still squares 1 and 2 with a height of 5. Thus, we return an answer of [2, 5, 5]. ``` **Example 2:** ``` **Input:** positions = [[100,100],[200,100]] **Output:** [100,100] **Explanation:** After the first drop, the tallest stack is square 1 with a height of 100. After the second drop, the tallest stack is either square 1 or square 2, both with heights of 100. Thus, we return an answer of [100, 100]. Note that square 2 only brushes the right side of square 1, which does not count as landing on it. ``` **Constraints:** `1 <= positions.length <= 1000` `1 <= lefti <= 108` `1 <= sideLengthi <= 106`', 'test_case': [{'label': 'Example 1', 'input': 'positions = [[1,2],[2,3],[6,1]]', 'output': '[2,5,5] Explanation: After the first drop, the tallest stack is square 1 with a height of 2.\\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\\nThus, we return an answer of [2, 5, 5].'}, {'label': 'Example 2', 'input': 'positions = [[100,100],[200,100]]', 'output': '[100,100] Explanation: After the first drop, the tallest stack is square 1 with a height of 100.\\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\\nThus, we return an answer of [100, 100].\\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.'}], 'elixir_template': 'defmodule Solution do\\n  @spec falling_squares(positions :: [[integer]]) :: [integer]\\n  def falling_squares(positions) do\\n    \\n  end\\nend', 'erlang_template': '-spec falling_squares(Positions :: [[integer()]]) -> [integer()].\\nfalling_squares(Positions) ->\\n  .', 'scala_template': 'object Solution {\\n    def fallingSquares(positions: Array[Array[Int]]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!425\n",
            "partition-to-k-equal-sum-subsets 698\n",
            "{'id': 698, 'name': 'partition-to-k-equal-sum-subsets', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/partition-to-k-equal-sum-subsets/', 'task_description': 'Given an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal. **Example 1:** ``` **Input:** nums = [4,3,2,3,5,2,1], k = 4 **Output:** true **Explanation:** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums. ``` **Example 2:** ``` **Input:** nums = [1,2,3,4], k = 3 **Output:** false ``` **Constraints:** `1 <= k <= nums.length <= 16` `1 <= nums[i] <= 104` The frequency of each element is in the range `[1, 4]`.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,3,2,3,5,2,1], k = 4', 'output': 'true Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4], k = 3', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_partition_k_subsets(nums :: [integer], k :: integer) :: boolean\\n  def can_partition_k_subsets(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_partition_k_subsets(Nums :: [integer()], K :: integer()) -> boolean().\\ncan_partition_k_subsets(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def canPartitionKSubsets(nums: Array[Int], k: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!426\n",
            "degree-of-an-array 697\n",
            "{'id': 697, 'name': 'degree-of-an-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/degree-of-an-array/', 'task_description': 'Given a non-empty array of non-negative integers `nums`, the degree of this array is defined as the maximum frequency of any one of its elements. Your task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`. **Example 1:** ``` **Input:** nums = [1,2,2,3,1] **Output:** 2 **Explanation:** The input array has a degree of 2 because both elements 1 and 2 appear twice. Of the subarrays that have the same degree: [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2] The shortest length is 2. So return 2. ``` **Example 2:** ``` **Input:** nums = [1,2,2,3,1,4,2] **Output:** 6 **Explanation:** The degree is 3 because the element 2 is repeated 3 times. So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6. ``` **Constraints:** `nums.length` will be between 1 and 50,000. `nums[i]` will be an integer between 0 and 49,999.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,2,3,1]', 'output': '2 Explanation: The input array has a degree of 2 because both elements 1 and 2 appear twice.\\nOf the subarrays that have the same degree:\\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\\nThe shortest length is 2. So return 2.'}, {'label': 'Example 2', 'input': 'nums = [1,2,2,3,1,4,2]', 'output': '6 Explanation: The degree is 3 because the element 2 is repeated 3 times.\\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6. Constraints: nums.length will be between 1 and 50,000. nums[i] will be an integer between 0 and 49,999.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_shortest_sub_array(nums :: [integer]) :: integer\\n  def find_shortest_sub_array(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_shortest_sub_array(Nums :: [integer()]) -> integer().\\nfind_shortest_sub_array(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findShortestSubArray(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!427\n",
            "count-binary-substrings 696\n",
            "{'id': 696, 'name': 'count-binary-substrings', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/count-binary-substrings/', 'task_description': 'Given a binary string `s`, return the number of non-empty substrings that have the same number of `0`\\'s and `1`\\'s, and all the `0`\\'s and all the `1`\\'s in these substrings are grouped consecutively. Substrings that occur multiple times are counted the number of times they occur. **Example 1:** ``` **Input:** s = \"00110011\" **Output:** 6 **Explanation:** There are 6 substrings that have equal number of consecutive 1\\'s and 0\\'s: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\". Notice that some of these substrings repeat and are counted the number of times they occur. Also, \"00110011\" is not a valid substring because all the 0\\'s (and 1\\'s) are not grouped together. ``` **Example 2:** ``` **Input:** s = \"10101\" **Output:** 4 **Explanation:** There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1\\'s and 0\\'s. ``` **Constraints:** `1 <= s.length <= 105` `s[i]` is either `\\'0\\'` or `\\'1\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"00110011\"', 'output': '6 Explanation: There are 6 substrings that have equal number of consecutive 1\\'s and 0\\'s: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\\nNotice that some of these substrings repeat and are counted the number of times they occur.\\nAlso, \"00110011\" is not a valid substring because all the 0\\'s (and 1\\'s) are not grouped together.'}, {'label': 'Example 2', 'input': 's = \"10101\"', 'output': '4 Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1\\'s and 0\\'s.'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_binary_substrings(s :: String.t) :: integer\\n  def count_binary_substrings(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_binary_substrings(S :: unicode:unicode_binary()) -> integer().\\ncount_binary_substrings(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def countBinarySubstrings(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!428\n",
            "max-area-of-island 695\n",
            "{'id': 695, 'name': 'max-area-of-island', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/max-area-of-island/', 'task_description': \"You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s (representing land) connected **4-directionally** (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. The **area** of an island is the number of cells with a value `1` in the island. Return _the maximum **area** of an island in _`grid`. If there is no island, return `0`. **Example 1:** ``` **Input:** grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]] **Output:** 6 **Explanation:** The answer is not 11, because the island must be connected 4-directionally. ``` **Example 2:** ``` **Input:** grid = [[0,0,0,0,0,0,0,0]] **Output:** 0 ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 50` `grid[i][j]` is either `0` or `1`.\", 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]', 'output': '6 Explanation: The answer is not 11, because the island must be connected 4-directionally.'}, {'label': 'Example 2', 'input': 'grid = [[0,0,0,0,0,0,0,0]]', 'output': '0 Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 50 grid[i][j] is either 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_area_of_island(grid :: [[integer]]) :: integer\\n  def max_area_of_island(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_area_of_island(Grid :: [[integer()]]) -> integer().\\nmax_area_of_island(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxAreaOfIsland(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!429\n",
            "binary-number-with-alternating-bits 693\n",
            "{'id': 693, 'name': 'binary-number-with-alternating-bits', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-number-with-alternating-bits/', 'task_description': 'Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values. **Example 1:** ``` **Input:** n = 5 **Output:** true **Explanation:** The binary representation of 5 is: 101 ``` **Example 2:** ``` **Input:** n = 7 **Output:** false **Explanation:** The binary representation of 7 is: 111. ``` **Example 3:** ``` **Input:** n = 11 **Output:** false **Explanation:** The binary representation of 11 is: 1011. ``` **Constraints:** `1 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 5', 'output': 'true Explanation: The binary representation of 5 is: 101'}, {'label': 'Example 2', 'input': 'n = 7', 'output': 'false Explanation: The binary representation of 7 is: 111.'}, {'label': 'Example 3', 'input': 'n = 11', 'output': 'false Explanation: The binary representation of 11 is: 1011.'}], 'elixir_template': 'defmodule Solution do\\n  @spec has_alternating_bits(n :: integer) :: boolean\\n  def has_alternating_bits(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec has_alternating_bits(N :: integer()) -> boolean().\\nhas_alternating_bits(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def hasAlternatingBits(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!430\n",
            "top-k-frequent-words 692\n",
            "{'id': 692, 'name': 'top-k-frequent-words', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/top-k-frequent-words/', 'task_description': 'Given an array of strings `words` and an integer `k`, return _the _`k`_ most frequent strings_. Return the answer **sorted** by **the frequency** from highest to lowest. Sort the words with the same frequency by their **lexicographical order**. **Example 1:** ``` **Input:** words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2 **Output:** [\"i\",\"love\"] **Explanation:** \"i\" and \"love\" are the two most frequent words. Note that \"i\" comes before \"love\" due to a lower alphabetical order. ``` **Example 2:** ``` **Input:** words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4 **Output:** [\"the\",\"is\",\"sunny\",\"day\"] **Explanation:** \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively. ``` **Constraints:** `1 <= words.length <= 500` `1 <= words[i].length <= 10` `words[i]` consists of lowercase English letters. `k` is in the range `[1, The number of **unique** words[i]]` **Follow-up:** Could you solve it in `O(n log(k))` time and `O(n)` extra space?', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2', 'output': '[\"i\",\"love\"] Explanation: \"i\" and \"love\" are the two most frequent words.\\nNote that \"i\" comes before \"love\" due to a lower alphabetical order.'}, {'label': 'Example 2', 'input': 'words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4', 'output': '[\"the\",\"is\",\"sunny\",\"day\"] Explanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.'}], 'elixir_template': 'defmodule Solution do\\n  @spec top_k_frequent(words :: [String.t], k :: integer) :: [String.t]\\n  def top_k_frequent(words, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec top_k_frequent(Words :: [unicode:unicode_binary()], K :: integer()) -> [unicode:unicode_binary()].\\ntop_k_frequent(Words, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def topKFrequent(words: Array[String], k: Int): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!431\n",
            "stickers-to-spell-word 691\n",
            "{'id': 691, 'name': 'stickers-to-spell-word', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/stickers-to-spell-word/', 'task_description': 'We are given `n` different types of `stickers`. Each sticker has a lowercase English word on it. You would like to spell out the given string `target` by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker. Return _the minimum number of stickers that you need to spell out _`target`. If the task is impossible, return `-1`. **Note:** In all test cases, all words were chosen randomly from the `1000` most common US English words, and `target` was chosen as a concatenation of two random words. **Example 1:** ``` **Input:** stickers = [\"with\",\"example\",\"science\"], target = \"thehat\" **Output:** 3 **Explanation:** We can use 2 \"with\" stickers, and 1 \"example\" sticker. After cutting and rearrange the letters of those stickers, we can form the target \"thehat\". Also, this is the minimum number of stickers necessary to form the target string. ``` **Example 2:** ``` **Input:** stickers = [\"notice\",\"possible\"], target = \"basicbasic\" **Output:** -1 Explanation: We cannot form the target \"basicbasic\" from cutting letters from the given stickers. ``` **Constraints:** `n == stickers.length` `1 <= n <= 50` `1 <= stickers[i].length <= 10` `1 <= target.length <= 15` `stickers[i]` and `target` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"', 'output': '3 Explanation: We can use 2 \"with\" stickers, and 1 \"example\" sticker.\\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\\nAlso, this is the minimum number of stickers necessary to form the target string.'}, {'label': 'Example 2', 'input': 'stickers = [\"notice\",\"possible\"], target = \"basicbasic\"', 'output': '-1\\nExplanation:\\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers. Constraints: n == stickers.length 1 <= n <= 50 1 <= stickers[i].length <= 10 1 <= target.length <= 15 stickers[i] and target consist of lowercase English letters.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_stickers(stickers :: [String.t], target :: String.t) :: integer\\n  def min_stickers(stickers, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_stickers(Stickers :: [unicode:unicode_binary()], Target :: unicode:unicode_binary()) -> integer().\\nmin_stickers(Stickers, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def minStickers(stickers: Array[String], target: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!432\n",
            "employee-importance 690\n",
            "{'id': 690, 'name': 'employee-importance', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/employee-importance/', 'task_description': \"You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs. You are given an array of employees `employees` where: `employees[i].id` is the ID of the `ith` employee. `employees[i].importance` is the importance value of the `ith` employee. `employees[i].subordinates` is a list of the IDs of the direct subordinates of the `ith` employee. Given an integer `id` that represents an employee's ID, return _the **total** importance value of this employee and all their direct and indirect subordinates_. **Example 1:** ``` **Input:** employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1 **Output:** 11 **Explanation:** Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3. They both have an importance value of 3. Thus, the total importance value of employee 1 is 5 + 3 + 3 = 11. ``` **Example 2:** ``` **Input:** employees = [[1,2,[5]],[5,-3,[]]], id = 5 **Output:** -3 **Explanation:** Employee 5 has an importance value of -3 and has no direct subordinates. Thus, the total importance value of employee 5 is -3. ``` **Constraints:** `1 <= employees.length <= 2000` `1 <= employees[i].id <= 2000` All `employees[i].id` are **unique**. `-100 <= employees[i].importance <= 100` One employee has at most one direct leader and may have several subordinates. The IDs in `employees[i].subordinates` are valid IDs.\", 'test_case': [{'label': 'Example 1', 'input': 'employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1', 'output': '11 Explanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\\nThey both have an importance value of 3.\\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.'}, {'label': 'Example 2', 'input': 'employees = [[1,2,[5]],[5,-3,[]]], id = 5', 'output': '-3 Explanation: Employee 5 has an importance value of -3 and has no direct subordinates.\\nThus, the total importance value of employee 5 is -3.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/*\\n// Definition for Employee.\\nclass Employee() {\\n    var id: Int = 0\\n    var importance: Int = 0\\n    var subordinates: List[Int] = List()\\n};\\n*/\\n\\nobject Solution {\\n    def getImportance(employees: List[Employee], id: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!433\n",
            "maximum-sum-of-3-non-overlapping-subarrays 689\n",
            "{'id': 689, 'name': 'maximum-sum-of-3-non-overlapping-subarrays', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/', 'task_description': 'Given an integer array `nums` and an integer `k`, find three non-overlapping subarrays of length `k` with maximum sum and return them. Return the result as a list of indices representing the starting position of each interval (**0-indexed**). If there are multiple answers, return the lexicographically smallest one. **Example 1:** ``` **Input:** nums = [1,2,1,2,6,7,5,1], k = 2 **Output:** [0,3,5] **Explanation:** Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5]. We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger. ``` **Example 2:** ``` **Input:** nums = [1,2,1,2,1,2,1,2,1], k = 2 **Output:** [0,2,4] ``` **Constraints:** `1 <= nums.length <= 2 * 104` `1 <= nums[i] < 216` `1 <= k <= floor(nums.length / 3)`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,1,2,6,7,5,1], k = 2', 'output': '[0,3,5] Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.'}, {'label': 'Example 2', 'input': 'nums = [1,2,1,2,1,2,1,2,1], k = 2', 'output': '[0,2,4]'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_sum_of_three_subarrays(nums :: [integer], k :: integer) :: [integer]\\n  def max_sum_of_three_subarrays(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_sum_of_three_subarrays(Nums :: [integer()], K :: integer()) -> [integer()].\\nmax_sum_of_three_subarrays(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxSumOfThreeSubarrays(nums: Array[Int], k: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!434\n",
            "knight-probability-in-chessboard 688\n",
            "{'id': 688, 'name': 'knight-probability-in-chessboard', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/knight-probability-in-chessboard/', 'task_description': 'On an `n x n` chessboard, a knight starts at the cell `(row, column)` and attempts to make exactly `k` moves. The rows and columns are **0-indexed**, so the top-left cell is `(0, 0)`, and the bottom-right cell is `(n - 1, n - 1)`. A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction. Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there. The knight continues moving until it has made exactly `k` moves or has moved off the chessboard. Return _the probability that the knight remains on the board after it has stopped moving_. **Example 1:** ``` **Input:** n = 3, k = 2, row = 0, column = 0 **Output:** 0.06250 **Explanation:** There are two moves (to (1,2), (2,1)) that will keep the knight on the board. From each of those positions, there are also two moves that will keep the knight on the board. The total probability the knight stays on the board is 0.0625. ``` **Example 2:** ``` **Input:** n = 1, k = 0, row = 0, column = 0 **Output:** 1.00000 ``` **Constraints:** `1 <= n <= 25` `0 <= k <= 100` `0 <= row, column <= n - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3, k = 2, row = 0, column = 0', 'output': '0.06250 Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\\nFrom each of those positions, there are also two moves that will keep the knight on the board.\\nThe total probability the knight stays on the board is 0.0625.'}, {'label': 'Example 2', 'input': 'n = 1, k = 0, row = 0, column = 0', 'output': '1.00000'}], 'elixir_template': 'defmodule Solution do\\n  @spec knight_probability(n :: integer, k :: integer, row :: integer, column :: integer) :: float\\n  def knight_probability(n, k, row, column) do\\n    \\n  end\\nend', 'erlang_template': '-spec knight_probability(N :: integer(), K :: integer(), Row :: integer(), Column :: integer()) -> float().\\nknight_probability(N, K, Row, Column) ->\\n  .', 'scala_template': 'object Solution {\\n    def knightProbability(n: Int, k: Int, row: Int, column: Int): Double = {\\n        \\n    }\\n}'}\n",
            "Done!435\n",
            "longest-univalue-path 687\n",
            "{'id': 687, 'name': 'longest-univalue-path', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-univalue-path/', 'task_description': 'Given the `root` of a binary tree, return _the length of the longest path, where each node in the path has the same value_. This path may or may not pass through the root. **The length of the path** between two nodes is represented by the number of edges between them. **Example 1:** ``` **Input:** root = [5,4,5,1,1,null,5] **Output:** 2 **Explanation:** The shown image shows that the longest path of the same value (i.e. 5). ``` **Example 2:** ``` **Input:** root = [1,4,5,4,4,null,5] **Output:** 2 **Explanation:** The shown image shows that the longest path of the same value (i.e. 4). ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `-1000 <= Node.val <= 1000` The depth of the tree will not exceed `1000`.', 'test_case': [{'label': 'Example 1', 'input': 'root = [5,4,5,1,1,null,5]', 'output': '2 Explanation: The shown image shows that the longest path of the same value (i.e. 5).'}, {'label': 'Example 2', 'input': 'root = [1,4,5,4,4,null,5]', 'output': '2 Explanation: The shown image shows that the longest path of the same value (i.e. 4). Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . -1000 <= Node.val <= 1000 The depth of the tree will not exceed 1000 .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec longest_univalue_path(root :: TreeNode.t | nil) :: integer\\n  def longest_univalue_path(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec longest_univalue_path(Root :: #tree_node{} | null) -> integer().\\nlongest_univalue_path(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def longestUnivaluePath(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!436\n",
            "repeated-string-match 686\n",
            "{'id': 686, 'name': 'repeated-string-match', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/repeated-string-match/', 'task_description': 'Given two strings `a` and `b`, return _the minimum number of times you should repeat string _`a`_ so that string_ `b` _is a substring of it_. If it is impossible for `b`\\u200b\\u200b\\u200b\\u200b\\u200b\\u200b to be a substring of `a` after repeating it, return `-1`. **Notice:** string `\"abc\"` repeated 0 times is `\"\"`, repeated 1 time is `\"abc\"` and repeated 2 times is `\"abcabc\"`. **Example 1:** ``` **Input:** a = \"abcd\", b = \"cdabcdab\" **Output:** 3 **Explanation:** We return 3 because by repeating a three times \"ab**cdabcdab**cd\", b is a substring of it. ``` **Example 2:** ``` **Input:** a = \"a\", b = \"aa\" **Output:** 2 ``` **Constraints:** `1 <= a.length, b.length <= 104` `a` and `b` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'a = \"abcd\", b = \"cdabcdab\"', 'output': '3 Explanation: We return 3 because by repeating a three times \"ab cdabcdab cd\", b is a substring of it.'}, {'label': 'Example 2', 'input': 'a = \"a\", b = \"aa\"', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec repeated_string_match(a :: String.t, b :: String.t) :: integer\\n  def repeated_string_match(a, b) do\\n    \\n  end\\nend', 'erlang_template': '-spec repeated_string_match(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> integer().\\nrepeated_string_match(A, B) ->\\n  .', 'scala_template': 'object Solution {\\n    def repeatedStringMatch(a: String, b: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!437\n",
            "redundant-connection-ii 685\n",
            "{'id': 685, 'name': 'redundant-connection-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/redundant-connection-ii/', 'task_description': 'In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents. The given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed. The resulting graph is given as a 2D-array of `edges`. Each element of `edges` is a pair `[ui, vi]` that represents a directed edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`. Return _an edge that can be removed so that the resulting graph is a rooted tree of_ `n` _nodes_. If there are multiple answers, return the answer that occurs last in the given 2D-array. **Example 1:** ``` **Input:** edges = [[1,2],[1,3],[2,3]] **Output:** [2,3] ``` **Example 2:** ``` **Input:** edges = [[1,2],[2,3],[3,4],[4,1],[1,5]] **Output:** [4,1] ``` **Constraints:** `n == edges.length` `3 <= n <= 1000` `edges[i].length == 2` `1 <= ui, vi <= n` `ui != vi`', 'test_case': [{'label': 'Example 1', 'input': 'edges = [[1,2],[1,3],[2,3]]', 'output': '[2,3]'}, {'label': 'Example 2', 'input': 'edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]', 'output': '[4,1] Constraints: n == edges.length 3 <= n <= 1000 edges[i].length == 2 1 <= u i , v i <= n u i != v i'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_redundant_directed_connection(edges :: [[integer]]) :: [integer]\\n  def find_redundant_directed_connection(edges) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_redundant_directed_connection(Edges :: [[integer()]]) -> [integer()].\\nfind_redundant_directed_connection(Edges) ->\\n  .', 'scala_template': 'object Solution {\\n    def findRedundantDirectedConnection(edges: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!438\n",
            "redundant-connection 684\n",
            "{'id': 684, 'name': 'redundant-connection', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/redundant-connection/', 'task_description': 'In this problem, a tree is an **undirected graph** that is connected and has no cycles. You are given a graph that started as a tree with `n` nodes labeled from `1` to `n`, with one additional edge added. The added edge has two **different** vertices chosen from `1` to `n`, and was not an edge that already existed. The graph is represented as an array `edges` of length `n` where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the graph. Return _an edge that can be removed so that the resulting graph is a tree of _`n`_ nodes_. If there are multiple answers, return the answer that occurs last in the input. **Example 1:** ``` **Input:** edges = [[1,2],[1,3],[2,3]] **Output:** [2,3] ``` **Example 2:** ``` **Input:** edges = [[1,2],[2,3],[3,4],[1,4],[1,5]] **Output:** [1,4] ``` **Constraints:** `n == edges.length` `3 <= n <= 1000` `edges[i].length == 2` `1 <= ai < bi <= edges.length` `ai != bi` There are no repeated edges. The given graph is connected.', 'test_case': [{'label': 'Example 1', 'input': 'edges = [[1,2],[1,3],[2,3]]', 'output': '[2,3]'}, {'label': 'Example 2', 'input': 'edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]', 'output': '[1,4] Constraints: n == edges.length 3 <= n <= 1000 edges[i].length == 2 1 <= a i < b i <= edges.length a i != b i There are no repeated edges. The given graph is connected.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_redundant_connection(edges :: [[integer]]) :: [integer]\\n  def find_redundant_connection(edges) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_redundant_connection(Edges :: [[integer()]]) -> [integer()].\\nfind_redundant_connection(Edges) ->\\n  .', 'scala_template': 'object Solution {\\n    def findRedundantConnection(edges: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!439\n",
            "baseball-game 682\n",
            "{'id': 682, 'name': 'baseball-game', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/baseball-game/', 'task_description': 'You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record. You are given a list of strings `operations`, where `operations[i]` is the `ith` operation you must apply to the record and is one of the following: An integer `x`. Record a new score of `x`. `\\'+\\'`. Record a new score that is the sum of the previous two scores. `\\'D\\'`. Record a new score that is the double of the previous score. `\\'C\\'`. Invalidate the previous score, removing it from the record. Return _the sum of all the scores on the record after applying all the operations_. The test cases are generated such that the answer and all intermediate calculations fit in a **32-bit** integer and that all operations are valid. **Example 1:** ``` **Input:** ops = [\"5\",\"2\",\"C\",\"D\",\"+\"] **Output:** 30 **Explanation:** \"5\" - Add 5 to the record, record is now [5]. \"2\" - Add 2 to the record, record is now [5, 2]. \"C\" - Invalidate and remove the previous score, record is now [5]. \"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10]. \"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15]. The total sum is 5 + 10 + 15 = 30. ``` **Example 2:** ``` **Input:** ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"] **Output:** 27 **Explanation:** \"5\" - Add 5 to the record, record is now [5]. \"-2\" - Add -2 to the record, record is now [5, -2]. \"4\" - Add 4 to the record, record is now [5, -2, 4]. \"C\" - Invalidate and remove the previous score, record is now [5, -2]. \"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4]. \"9\" - Add 9 to the record, record is now [5, -2, -4, 9]. \"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]. \"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14]. The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27. ``` **Example 3:** ``` **Input:** ops = [\"1\",\"C\"] **Output:** 0 **Explanation:** \"1\" - Add 1 to the record, record is now [1]. \"C\" - Invalidate and remove the previous score, record is now []. Since the record is empty, the total sum is 0. ``` **Constraints:** `1 <= operations.length <= 1000` `operations[i]` is `\"C\"`, `\"D\"`, `\"+\"`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`. For operation `\"+\"`, there will always be at least two previous scores on the record. For operations `\"C\"` and `\"D\"`, there will always be at least one previous score on the record.', 'test_case': [{'label': 'Example 1', 'input': 'ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]', 'output': '30 Explanation: \"5\" - Add 5 to the record, record is now [5].\\n\"2\" - Add 2 to the record, record is now [5, 2].\\n\"C\" - Invalidate and remove the previous score, record is now [5].\\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\\nThe total sum is 5 + 10 + 15 = 30.'}, {'label': 'Example 2', 'input': 'ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]', 'output': '27 Explanation: \"5\" - Add 5 to the record, record is now [5].\\n\"-2\" - Add -2 to the record, record is now [5, -2].\\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.'}, {'label': 'Example 3', 'input': 'ops = [\"1\",\"C\"]', 'output': '0 Explanation: \"1\" - Add 1 to the record, record is now [1].\\n\"C\" - Invalidate and remove the previous score, record is now [].\\nSince the record is empty, the total sum is 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec cal_points(operations :: [String.t]) :: integer\\n  def cal_points(operations) do\\n    \\n  end\\nend', 'erlang_template': '-spec cal_points(Operations :: [unicode:unicode_binary()]) -> integer().\\ncal_points(Operations) ->\\n  .', 'scala_template': 'object Solution {\\n    def calPoints(operations: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!440\n",
            "valid-palindrome-ii 680\n",
            "{'id': 680, 'name': 'valid-palindrome-ii', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/valid-palindrome-ii/', 'task_description': 'Given a string `s`, return `true` _if the _`s`_ can be palindrome after deleting **at most one** character from it_. **Example 1:** ``` **Input:** s = \"aba\" **Output:** true ``` **Example 2:** ``` **Input:** s = \"abca\" **Output:** true **Explanation:** You could delete the character \\'c\\'. ``` **Example 3:** ``` **Input:** s = \"abc\" **Output:** false ``` **Constraints:** `1 <= s.length <= 105` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"aba\"', 'output': 'true'}, {'label': 'Example 2', 'input': 's = \"abca\"', 'output': \"true Explanation: You could delete the character 'c'.\"}, {'label': 'Example 3', 'input': 's = \"abc\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec valid_palindrome(s :: String.t) :: boolean\\n  def valid_palindrome(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec valid_palindrome(S :: unicode:unicode_binary()) -> boolean().\\nvalid_palindrome(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def validPalindrome(s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!441\n",
            "24-game 679\n",
            "{'id': 679, 'name': '24-game', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/24-game/', 'task_description': 'You are given an integer array `cards` of length `4`. You have four cards, each containing a number in the range `[1, 9]`. You should arrange the numbers on these cards in a mathematical expression using the operators `[\\'+\\', \\'-\\', \\'*\\', \\'/\\']` and the parentheses `\\'(\\'` and `\\')\\'` to get the value 24. You are restricted with the following rules: The division operator `\\'/\\'` represents real division, not integer division. For example, `4 / (1 - 2 / 3) = 4 / (1 / 3) = 12`. Every operation done is between two numbers. In particular, we cannot use `\\'-\\'` as a unary operator. For example, if `cards = [1, 1, 1, 1]`, the expression `\"-1 - 1 - 1 - 1\"` is **not allowed**. You cannot concatenate numbers together For example, if `cards = [1, 2, 1, 2]`, the expression `\"12 + 12\"` is not valid. Return `true` if you can get such expression that evaluates to `24`, and `false` otherwise. **Example 1:** ``` **Input:** cards = [4,1,8,7] **Output:** true **Explanation:** (8-4) * (7-1) = 24 ``` **Example 2:** ``` **Input:** cards = [1,2,1,2] **Output:** false ``` **Constraints:** `cards.length == 4` `1 <= cards[i] <= 9`', 'test_case': [{'label': 'Example 1', 'input': 'cards = [4,1,8,7]', 'output': 'true Explanation: (8-4) * (7-1) = 24'}, {'label': 'Example 2', 'input': 'cards = [1,2,1,2]', 'output': 'false Constraints: cards.length == 4 1 <= cards[i] <= 9'}], 'elixir_template': 'defmodule Solution do\\n  @spec judge_point24(cards :: [integer]) :: boolean\\n  def judge_point24(cards) do\\n    \\n  end\\nend', 'erlang_template': '-spec judge_point24(Cards :: [integer()]) -> boolean().\\njudge_point24(Cards) ->\\n  .', 'scala_template': 'object Solution {\\n    def judgePoint24(cards: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!442\n",
            "valid-parenthesis-string 678\n",
            "{'id': 678, 'name': 'valid-parenthesis-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/valid-parenthesis-string/', 'task_description': 'Given a string `s` containing only three types of characters: `\\'(\\'`, `\\')\\'` and `\\'*\\'`, return `true` _if_ `s` _is **valid**_. The following rules define a **valid** string: Any left parenthesis `\\'(\\'` must have a corresponding right parenthesis `\\')\\'`. Any right parenthesis `\\')\\'` must have a corresponding left parenthesis `\\'(\\'`. Left parenthesis `\\'(\\'` must go before the corresponding right parenthesis `\\')\\'`. `\\'*\\'` could be treated as a single right parenthesis `\\')\\'` or a single left parenthesis `\\'(\\'` or an empty string `\"\"`. **Example 1:** ``` **Input:** s = \"()\" **Output:** true ``` **Example 2:** ``` **Input:** s = \"(*)\" **Output:** true ``` **Example 3:** ``` **Input:** s = \"(*))\" **Output:** true ``` **Constraints:** `1 <= s.length <= 100` `s[i]` is `\\'(\\'`, `\\')\\'` or `\\'*\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"()\"', 'output': 'true'}, {'label': 'Example 2', 'input': 's = \"(*)\"', 'output': 'true'}, {'label': 'Example 3', 'input': 's = \"(*))\"', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec check_valid_string(s :: String.t) :: boolean\\n  def check_valid_string(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec check_valid_string(S :: unicode:unicode_binary()) -> boolean().\\ncheck_valid_string(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def checkValidString(s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!443\n",
            "map-sum-pairs 677\n",
            "{'id': 677, 'name': 'map-sum-pairs', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/map-sum-pairs/', 'task_description': 'Design a map that allows you to do the following: Maps a string key to a given value. Returns the sum of the values that have a key with a prefix equal to a given string. Implement the `MapSum` class: `MapSum()` Initializes the `MapSum` object. `void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one. `int sum(string prefix)` Returns the sum of all the pairs\\' value whose `key` starts with the `prefix`. **Example 1:** ``` **Input** [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"] [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]] **Output** [null, null, 3, null, 5] **Explanation** MapSum mapSum = new MapSum(); mapSum.insert(\"apple\", 3); mapSum.sum(\"ap\"); // return 3 (apple = 3) mapSum.insert(\"app\", 2); mapSum.sum(\"ap\"); // return 5 (apple + app = 3 + 2 = 5) ``` **Constraints:** `1 <= key.length, prefix.length <= 50` `key` and `prefix` consist of only lowercase English letters. `1 <= val <= 1000` At most `50` calls will be made to `insert` and `sum`.', 'test_case': [], 'elixir_template': 'defmodule MapSum do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec insert(key :: String.t, val :: integer) :: any\\n  def insert(key, val) do\\n    \\n  end\\n\\n  @spec sum(prefix :: String.t) :: integer\\n  def sum(prefix) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MapSum.init_()\\n# MapSum.insert(key, val)\\n# param_2 = MapSum.sum(prefix)\\n\\n# MapSum.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec map_sum_init_() -> any().\\nmap_sum_init_() ->\\n  .\\n\\n-spec map_sum_insert(Key :: unicode:unicode_binary(), Val :: integer()) -> any().\\nmap_sum_insert(Key, Val) ->\\n  .\\n\\n-spec map_sum_sum(Prefix :: unicode:unicode_binary()) -> integer().\\nmap_sum_sum(Prefix) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% map_sum_init_(),\\n%% map_sum_insert(Key, Val),\\n%% Param_2 = map_sum_sum(Prefix),\\n\\n%% map_sum_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MapSum() {\\n\\n    def insert(key: String, `val`: Int): Unit = {\\n        \\n    }\\n\\n    def sum(prefix: String): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MapSum object will be instantiated and called as such:\\n * val obj = new MapSum()\\n * obj.insert(key,`val`)\\n * val param_2 = obj.sum(prefix)\\n */'}\n",
            "Done!444\n",
            "implement-magic-dictionary 676\n",
            "{'id': 676, 'name': 'implement-magic-dictionary', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/implement-magic-dictionary/', 'task_description': 'Design a data structure that is initialized with a list of **different** words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure. Implement the `MagicDictionary` class: `MagicDictionary()` Initializes the object. `void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`. `bool search(String searchWord)` Returns `true` if you can change **exactly one character** in `searchWord` to match any string in the data structure, otherwise returns `false`. **Example 1:** ``` **Input** [\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"] [[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]] **Output** [null, null, false, true, false, false] **Explanation** MagicDictionary magicDictionary = new MagicDictionary(); magicDictionary.buildDict([\"hello\", \"leetcode\"]); magicDictionary.search(\"hello\"); // return False magicDictionary.search(\"hhllo\"); // We can change the second \\'h\\' to \\'e\\' to match \"hello\" so we return True magicDictionary.search(\"hell\"); // return False magicDictionary.search(\"leetcoded\"); // return False ``` **Constraints:** `1 <= dictionary.length <= 100` `1 <= dictionary[i].length <= 100` `dictionary[i]` consists of only lower-case English letters. All the strings in `dictionary` are **distinct**. `1 <= searchWord.length <= 100` `searchWord` consists of only lower-case English letters. `buildDict` will be called only once before `search`. At most `100` calls will be made to `search`.', 'test_case': [], 'elixir_template': 'defmodule MagicDictionary do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec build_dict(dictionary :: [String.t]) :: any\\n  def build_dict(dictionary) do\\n    \\n  end\\n\\n  @spec search(search_word :: String.t) :: boolean\\n  def search(search_word) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MagicDictionary.init_()\\n# MagicDictionary.build_dict(dictionary)\\n# param_2 = MagicDictionary.search(search_word)\\n\\n# MagicDictionary.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec magic_dictionary_init_() -> any().\\nmagic_dictionary_init_() ->\\n  .\\n\\n-spec magic_dictionary_build_dict(Dictionary :: [unicode:unicode_binary()]) -> any().\\nmagic_dictionary_build_dict(Dictionary) ->\\n  .\\n\\n-spec magic_dictionary_search(SearchWord :: unicode:unicode_binary()) -> boolean().\\nmagic_dictionary_search(SearchWord) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% magic_dictionary_init_(),\\n%% magic_dictionary_build_dict(Dictionary),\\n%% Param_2 = magic_dictionary_search(SearchWord),\\n\\n%% magic_dictionary_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MagicDictionary() {\\n\\n    def buildDict(dictionary: Array[String]): Unit = {\\n        \\n    }\\n\\n    def search(searchWord: String): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MagicDictionary object will be instantiated and called as such:\\n * val obj = new MagicDictionary()\\n * obj.buildDict(dictionary)\\n * val param_2 = obj.search(searchWord)\\n */'}\n",
            "Done!445\n",
            "cut-off-trees-for-golf-event 675\n",
            "{'id': 675, 'name': 'cut-off-trees-for-golf-event', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/cut-off-trees-for-golf-event/', 'task_description': \"You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix: `0` means the cell cannot be walked through. `1` represents an empty cell that can be walked through. A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height. In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off. You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell). Starting from the point `(0, 0)`, return _the minimum steps you need to walk to cut off all the trees_. If you cannot cut off all the trees, return `-1`. **Note:** The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off. **Example 1:** ``` **Input:** forest = [[1,2,3],[0,0,4],[7,6,5]] **Output:** 6 **Explanation:** Following the path above allows you to cut off the trees from shortest to tallest in 6 steps. ``` **Example 2:** ``` **Input:** forest = [[1,2,3],[0,0,0],[7,6,5]] **Output:** -1 **Explanation:** The trees in the bottom row cannot be accessed as the middle row is blocked. ``` **Example 3:** ``` **Input:** forest = [[2,3,4],[0,0,5],[8,7,6]] **Output:** 6 Explanation: You can follow the same path as Example 1 to cut off all the trees. Note that you can cut off the first tree at (0, 0) before making any steps. ``` **Constraints:** `m == forest.length` `n == forest[i].length` `1 <= m, n <= 50` `0 <= forest[i][j] <= 109` Heights of all trees are **distinct**.\", 'test_case': [{'label': 'Example 1', 'input': 'forest = [[1,2,3],[0,0,4],[7,6,5]]', 'output': '6 Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.'}, {'label': 'Example 2', 'input': 'forest = [[1,2,3],[0,0,0],[7,6,5]]', 'output': '-1 Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.'}, {'label': 'Example 3', 'input': 'forest = [[2,3,4],[0,0,5],[8,7,6]]', 'output': '6 Explanation: You can follow the same path as'}], 'elixir_template': 'defmodule Solution do\\n  @spec cut_off_tree(forest :: [[integer]]) :: integer\\n  def cut_off_tree(forest) do\\n    \\n  end\\nend', 'erlang_template': '-spec cut_off_tree(Forest :: [[integer()]]) -> integer().\\ncut_off_tree(Forest) ->\\n  .', 'scala_template': 'object Solution {\\n    def cutOffTree(forest: List[List[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!446\n",
            "longest-continuous-increasing-subsequence 674\n",
            "{'id': 674, 'name': 'longest-continuous-increasing-subsequence', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/longest-continuous-increasing-subsequence/', 'task_description': 'Given an unsorted array of integers `nums`, return _the length of the longest **continuous increasing subsequence** (i.e. subarray)_. The subsequence must be **strictly** increasing. A **continuous increasing subsequence** is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`. **Example 1:** ``` **Input:** nums = [1,3,5,4,7] **Output:** 3 **Explanation:** The longest continuous increasing subsequence is [1,3,5] with length 3. Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element 4. ``` **Example 2:** ``` **Input:** nums = [2,2,2,2,2] **Output:** 1 **Explanation:** The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly increasing. ``` **Constraints:** `1 <= nums.length <= 104` `-109 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,5,4,7]', 'output': '3 Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\\n4.'}, {'label': 'Example 2', 'input': 'nums = [2,2,2,2,2]', 'output': '1 Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\\nincreasing.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_length_of_lcis(nums :: [integer]) :: integer\\n  def find_length_of_lcis(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_length_of_lcis(Nums :: [integer()]) -> integer().\\nfind_length_of_lcis(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findLengthOfLCIS(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!447\n",
            "number-of-longest-increasing-subsequence 673\n",
            "{'id': 673, 'name': 'number-of-longest-increasing-subsequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/number-of-longest-increasing-subsequence/', 'task_description': 'Given an integer array `nums`, return _the number of longest increasing subsequences._ **Notice** that the sequence has to be **strictly** increasing. **Example 1:** ``` **Input:** nums = [1,3,5,4,7] **Output:** 2 **Explanation:** The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. ``` **Example 2:** ``` **Input:** nums = [2,2,2,2,2] **Output:** 5 **Explanation:** The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5. ``` **Constraints:** `1 <= nums.length <= 2000` `-106 <= nums[i] <= 106` The answer is guaranteed to fit inside a 32-bit integer.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,5,4,7]', 'output': '2 Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].'}, {'label': 'Example 2', 'input': 'nums = [2,2,2,2,2]', 'output': '5 Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_number_of_lis(nums :: [integer]) :: integer\\n  def find_number_of_lis(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_number_of_lis(Nums :: [integer()]) -> integer().\\nfind_number_of_lis(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findNumberOfLIS(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!448\n",
            "bulb-switcher-ii 672\n",
            "{'id': 672, 'name': 'bulb-switcher-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/bulb-switcher-ii/', 'task_description': 'There is a room with `n` bulbs labeled from `1` to `n` that all are turned on initially, and **four buttons** on the wall. Each of the four buttons has a different functionality where: **Button 1:** Flips the status of all the bulbs. **Button 2:** Flips the status of all the bulbs with even labels (i.e., `2, 4, ...`). **Button 3:** Flips the status of all the bulbs with odd labels (i.e., `1, 3, ...`). **Button 4:** Flips the status of all the bulbs with a label `j = 3k + 1` where `k = 0, 1, 2, ...` (i.e., `1, 4, 7, 10, ...`). You must make **exactly** `presses` button presses in total. For each press, you may pick **any** of the four buttons to press. Given the two integers `n` and `presses`, return _the number of **different possible statuses** after performing all _`presses`_ button presses_. **Example 1:** ``` **Input:** n = 1, presses = 1 **Output:** 2 **Explanation:** Status can be: - [off] by pressing button 1 - [on] by pressing button 2 ``` **Example 2:** ``` **Input:** n = 2, presses = 1 **Output:** 3 **Explanation:** Status can be: - [off, off] by pressing button 1 - [on, off] by pressing button 2 - [off, on] by pressing button 3 ``` **Example 3:** ``` **Input:** n = 3, presses = 1 **Output:** 4 **Explanation:** Status can be: - [off, off, off] by pressing button 1 - [off, on, off] by pressing button 2 - [on, off, on] by pressing button 3 - [off, on, on] by pressing button 4 ``` **Constraints:** `1 <= n <= 1000` `0 <= presses <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'n = 1, presses = 1', 'output': '2 Explanation: Status can be:\\n- [off] by pressing button 1\\n- [on] by pressing button 2'}, {'label': 'Example 2', 'input': 'n = 2, presses = 1', 'output': '3 Explanation: Status can be:\\n- [off, off] by pressing button 1\\n- [on, off] by pressing button 2\\n- [off, on] by pressing button 3'}, {'label': 'Example 3', 'input': 'n = 3, presses = 1', 'output': '4 Explanation: Status can be:\\n- [off, off, off] by pressing button 1\\n- [off, on, off] by pressing button 2\\n- [on, off, on] by pressing button 3\\n- [off, on, on] by pressing button 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec flip_lights(n :: integer, presses :: integer) :: integer\\n  def flip_lights(n, presses) do\\n    \\n  end\\nend', 'erlang_template': '-spec flip_lights(N :: integer(), Presses :: integer()) -> integer().\\nflip_lights(N, Presses) ->\\n  .', 'scala_template': 'object Solution {\\n    def flipLights(n: Int, presses: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!449\n",
            "second-minimum-node-in-a-binary-tree 671\n",
            "{'id': 671, 'name': 'second-minimum-node-in-a-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/', 'task_description': \"Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property `root.val = min(root.left.val, root.right.val)` always holds. Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree. If no such second minimum value exists, output -1 instead. **Example 1:** ``` **Input:** root = [2,2,5,null,null,5,7] **Output:** 5 **Explanation:** The smallest value is 2, the second smallest value is 5. ``` **Example 2:** ``` **Input:** root = [2,2,2] **Output:** -1 **Explanation:** The smallest value is 2, but there isn't any second smallest value. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 25]`. `1 <= Node.val <= 231 - 1` `root.val == min(root.left.val, root.right.val)` for each internal node of the tree.\", 'test_case': [{'label': 'Example 1', 'input': 'root = [2,2,5,null,null,5,7]', 'output': '5 Explanation: The smallest value is 2, the second smallest value is 5.'}, {'label': 'Example 2', 'input': 'root = [2,2,2]', 'output': \"-1 Explanation: The smallest value is 2, but there isn't any second smallest value. Constraints: The number of nodes in the tree is in the range [1, 25] . 1 <= Node.val <= 2 31 - 1 root.val == min(root.left.val, root.right.val) for each internal node of the tree.\"}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_second_minimum_value(root :: TreeNode.t | nil) :: integer\\n  def find_second_minimum_value(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_second_minimum_value(Root :: #tree_node{} | null) -> integer().\\nfind_second_minimum_value(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findSecondMinimumValue(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!450\n",
            "maximum-swap 670\n",
            "{'id': 670, 'name': 'maximum-swap', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-swap/', 'task_description': 'You are given an integer `num`. You can swap two digits at most once to get the maximum valued number. Return _the maximum valued number you can get_. **Example 1:** ``` **Input:** num = 2736 **Output:** 7236 **Explanation:** Swap the number 2 and the number 7. ``` **Example 2:** ``` **Input:** num = 9973 **Output:** 9973 **Explanation:** No swap. ``` **Constraints:** `0 <= num <= 108`', 'test_case': [{'label': 'Example 1', 'input': 'num = 2736', 'output': '7236 Explanation: Swap the number 2 and the number 7.'}, {'label': 'Example 2', 'input': 'num = 9973', 'output': '9973 Explanation: No swap.'}], 'elixir_template': 'defmodule Solution do\\n  @spec maximum_swap(num :: integer) :: integer\\n  def maximum_swap(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec maximum_swap(Num :: integer()) -> integer().\\nmaximum_swap(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def maximumSwap(num: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!451\n",
            "trim-a-binary-search-tree 669\n",
            "{'id': 669, 'name': 'trim-a-binary-search-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/trim-a-binary-search-tree/', 'task_description': \"Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should **not** change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a **unique answer**. Return _the root of the trimmed binary search tree_. Note that the root may change depending on the given bounds. **Example 1:** ``` **Input:** root = [1,0,2], low = 1, high = 2 **Output:** [1,null,2] ``` **Example 2:** ``` **Input:** root = [3,0,4,null,2,null,null,1], low = 1, high = 3 **Output:** [3,2,null,1] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `0 <= Node.val <= 104` The value of each node in the tree is **unique**. `root` is guaranteed to be a valid binary search tree. `0 <= low <= high <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,0,2], low = 1, high = 2', 'output': '[1,null,2]'}, {'label': 'Example 2', 'input': 'root = [3,0,4,null,2,null,null,1], low = 1, high = 3', 'output': '[3,2,null,1] Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . 0 <= Node.val <= 10 4 The value of each node in the tree is unique . root is guaranteed to be a valid binary search tree. 0 <= low <= high <= 10 4'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec trim_bst(root :: TreeNode.t | nil, low :: integer, high :: integer) :: TreeNode.t | nil\\n  def trim_bst(root, low, high) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec trim_bst(Root :: #tree_node{} | null, Low :: integer(), High :: integer()) -> #tree_node{} | null.\\ntrim_bst(Root, Low, High) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def trimBST(root: TreeNode, low: Int, high: Int): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!452\n",
            "kth-smallest-number-in-multiplication-table 668\n",
            "{'id': 668, 'name': 'kth-smallest-number-in-multiplication-table', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/', 'task_description': 'Nearly everyone has used the Multiplication Table. The multiplication table of size `m x n` is an integer matrix `mat` where `mat[i][j] == i * j` (**1-indexed**). Given three integers `m`, `n`, and `k`, return _the _`kth`_ smallest element in the _`m x n`_ multiplication table_. **Example 1:** ``` **Input:** m = 3, n = 3, k = 5 **Output:** 3 **Explanation:** The 5th smallest number is 3. ``` **Example 2:** ``` **Input:** m = 2, n = 3, k = 6 **Output:** 6 **Explanation:** The 6th smallest number is 6. ``` **Constraints:** `1 <= m, n <= 3 * 104` `1 <= k <= m * n`', 'test_case': [{'label': 'Example 1', 'input': 'm = 3, n = 3, k = 5', 'output': '3 Explanation: The 5 th smallest number is 3.'}, {'label': 'Example 2', 'input': 'm = 2, n = 3, k = 6', 'output': '6 Explanation: The 6 th smallest number is 6.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_kth_number(m :: integer, n :: integer, k :: integer) :: integer\\n  def find_kth_number(m, n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_kth_number(M :: integer(), N :: integer(), K :: integer()) -> integer().\\nfind_kth_number(M, N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def findKthNumber(m: Int, n: Int, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!453\n",
            "beautiful-arrangement-ii 667\n",
            "{'id': 667, 'name': 'beautiful-arrangement-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/beautiful-arrangement-ii/', 'task_description': 'Given two integers `n` and `k`, construct a list `answer` that contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement: Suppose this list is `answer = [a1, a2, a3, ... , an]`, then the list `[|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|]` has exactly `k` distinct integers. Return _the list_ `answer`. If there multiple valid answers, return **any of them**. **Example 1:** ``` **Input:** n = 3, k = 1 **Output:** [1,2,3] Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1 ``` **Example 2:** ``` **Input:** n = 3, k = 2 **Output:** [1,3,2] Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2. ``` **Constraints:** `1 <= k < n <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3, k = 1', 'output': '[1,2,3]\\nExplanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1'}, {'label': 'Example 2', 'input': 'n = 3, k = 2', 'output': '[1,3,2]\\nExplanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.'}], 'elixir_template': 'defmodule Solution do\\n  @spec construct_array(n :: integer, k :: integer) :: [integer]\\n  def construct_array(n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec construct_array(N :: integer(), K :: integer()) -> [integer()].\\nconstruct_array(N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def constructArray(n: Int, k: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!454\n",
            "non-decreasing-array 665\n",
            "{'id': 665, 'name': 'non-decreasing-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/non-decreasing-array/', 'task_description': 'Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying **at most one element**. We define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (**0-based**) such that (`0 <= i <= n - 2`). **Example 1:** ``` **Input:** nums = [4,2,3] **Output:** true **Explanation:** You could modify the first 4 to 1 to get a non-decreasing array. ``` **Example 2:** ``` **Input:** nums = [4,2,1] **Output:** false **Explanation:** You cannot get a non-decreasing array by modifying at most one element. ``` **Constraints:** `n == nums.length` `1 <= n <= 104` `-105 <= nums[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,2,3]', 'output': 'true Explanation: You could modify the first 4 to 1 to get a non-decreasing array.'}, {'label': 'Example 2', 'input': 'nums = [4,2,1]', 'output': 'false Explanation: You cannot get a non-decreasing array by modifying at most one element. Constraints: n == nums.length 1 <= n <= 10 4 -10 5 <= nums[i] <= 10 5'}], 'elixir_template': 'defmodule Solution do\\n  @spec check_possibility(nums :: [integer]) :: boolean\\n  def check_possibility(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec check_possibility(Nums :: [integer()]) -> boolean().\\ncheck_possibility(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def checkPossibility(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!455\n",
            "strange-printer 664\n",
            "{'id': 664, 'name': 'strange-printer', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/strange-printer/', 'task_description': 'There is a strange printer with the following two special properties: The printer can only print a sequence of **the same character** each time. At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters. Given a string `s`, return _the minimum number of turns the printer needed to print it_. **Example 1:** ``` **Input:** s = \"aaabbb\" **Output:** 2 **Explanation:** Print \"aaa\" first and then print \"bbb\". ``` **Example 2:** ``` **Input:** s = \"aba\" **Output:** 2 **Explanation:** Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character \\'a\\'. ``` **Constraints:** `1 <= s.length <= 100` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"aaabbb\"', 'output': '2 Explanation: Print \"aaa\" first and then print \"bbb\".'}, {'label': 'Example 2', 'input': 's = \"aba\"', 'output': '2 Explanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character \\'a\\'.'}], 'elixir_template': 'defmodule Solution do\\n  @spec strange_printer(s :: String.t) :: integer\\n  def strange_printer(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec strange_printer(S :: unicode:unicode_binary()) -> integer().\\nstrange_printer(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def strangePrinter(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!456\n",
            "maximum-width-of-binary-tree 662\n",
            "{'id': 662, 'name': 'maximum-width-of-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-width-of-binary-tree/', 'task_description': 'Given the `root` of a binary tree, return _the **maximum width** of the given tree_. The **maximum width** of a tree is the maximum **width** among all levels. The **width** of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation. It is **guaranteed** that the answer will in the range of a **32-bit** signed integer. **Example 1:** ``` **Input:** root = [1,3,2,5,3,null,9] **Output:** 4 **Explanation:** The maximum width exists in the third level with length 4 (5,3,null,9). ``` **Example 2:** ``` **Input:** root = [1,3,2,5,null,null,9,6,null,7] **Output:** 7 **Explanation:** The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7). ``` **Example 3:** ``` **Input:** root = [1,3,2,5] **Output:** 2 **Explanation:** The maximum width exists in the second level with length 2 (3,2). ``` **Constraints:** The number of nodes in the tree is in the range `[1, 3000]`. `-100 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,3,2,5,3,null,9]', 'output': '4 Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).'}, {'label': 'Example 2', 'input': 'root = [1,3,2,5,null,null,9,6,null,7]', 'output': '7 Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).'}, {'label': 'Example 3', 'input': 'root = [1,3,2,5]', 'output': '2 Explanation: The maximum width exists in the second level with length 2 (3,2). Constraints: The number of nodes in the tree is in the range [1, 3000] . -100 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec width_of_binary_tree(root :: TreeNode.t | nil) :: integer\\n  def width_of_binary_tree(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec width_of_binary_tree(Root :: #tree_node{} | null) -> integer().\\nwidth_of_binary_tree(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def widthOfBinaryTree(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!457\n",
            "image-smoother 661\n",
            "{'id': 661, 'name': 'image-smoother', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/image-smoother/', 'task_description': 'An **image smoother** is a filter of the size `3 x 3` that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother). Given an `m x n` integer matrix `img` representing the grayscale of an image, return _the image after applying the smoother on each cell of it_. **Example 1:** ``` **Input:** img = [[1,1,1],[1,0,1],[1,1,1]] **Output:** [[0,0,0],[0,0,0],[0,0,0]] **Explanation:** For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0 For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0 For the point (1,1): floor(8/9) = floor(0.88888889) = 0 ``` **Example 2:** ``` **Input:** img = [[100,200,100],[200,50,200],[100,200,100]] **Output:** [[137,141,137],[141,138,141],[137,141,137]] **Explanation:** For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137 For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141 For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138 ``` **Constraints:** `m == img.length` `n == img[i].length` `1 <= m, n <= 200` `0 <= img[i][j] <= 255`', 'test_case': [{'label': 'Example 1', 'input': 'img = [[1,1,1],[1,0,1],[1,1,1]]', 'output': '[[0,0,0],[0,0,0],[0,0,0]] Explanation: For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0'}, {'label': 'Example 2', 'input': 'img = [[100,200,100],[200,50,200],[100,200,100]]', 'output': '[[137,141,137],[141,138,141],[137,141,137]] Explanation: For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138 Constraints: m == img.length n == img[i].length 1 <= m, n <= 200 0 <= img[i][j] <= 255'}], 'elixir_template': 'defmodule Solution do\\n  @spec image_smoother(img :: [[integer]]) :: [[integer]]\\n  def image_smoother(img) do\\n    \\n  end\\nend', 'erlang_template': '-spec image_smoother(Img :: [[integer()]]) -> [[integer()]].\\nimage_smoother(Img) ->\\n  .', 'scala_template': 'object Solution {\\n    def imageSmoother(img: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!458\n",
            "split-array-into-consecutive-subsequences 659\n",
            "{'id': 659, 'name': 'split-array-into-consecutive-subsequences', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/split-array-into-consecutive-subsequences/', 'task_description': 'You are given an integer array `nums` that is **sorted in non-decreasing order**. Determine if it is possible to split `nums` into **one or more subsequences** such that **both** of the following conditions are true: Each subsequence is a **consecutive increasing sequence** (i.e. each integer is **exactly one** more than the previous integer). All subsequences have a length of `3`** or more**. Return `true`_ if you can split _`nums`_ according to the above conditions, or _`false`_ otherwise_. A **subsequence** of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., `[1,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,3,2]` is not). **Example 1:** ``` **Input:** nums = [1,2,3,3,4,5] **Output:** true **Explanation:** nums can be split into the following subsequences: [**1**,**2**,**3**,3,4,5] --> 1, 2, 3 [1,2,3,**3**,**4**,**5**] --> 3, 4, 5 ``` **Example 2:** ``` **Input:** nums = [1,2,3,3,4,4,5,5] **Output:** true **Explanation:** nums can be split into the following subsequences: [**1**,**2**,**3**,3,**4**,4,**5**,5] --> 1, 2, 3, 4, 5 [1,2,3,**3**,4,**4**,5,**5**] --> 3, 4, 5 ``` **Example 3:** ``` **Input:** nums = [1,2,3,4,4,5] **Output:** false **Explanation:** It is impossible to split nums into consecutive increasing subsequences of length 3 or more. ``` **Constraints:** `1 <= nums.length <= 104` `-1000 <= nums[i] <= 1000` `nums` is sorted in **non-decreasing** order.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,3,4,5]', 'output': 'true Explanation: nums can be split into the following subsequences:\\n[ 1 , 2 , 3 ,3,4,5] --> 1, 2, 3\\n[1,2,3, 3 , 4 , 5 ] --> 3, 4, 5'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,3,4,4,5,5]', 'output': 'true Explanation: nums can be split into the following subsequences:\\n[ 1 , 2 , 3 ,3, 4 ,4, 5 ,5] --> 1, 2, 3, 4, 5\\n[1,2,3, 3 ,4, 4 ,5, 5 ] --> 3, 4, 5'}, {'label': 'Example 3', 'input': 'nums = [1,2,3,4,4,5]', 'output': 'false Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_possible(nums :: [integer]) :: boolean\\n  def is_possible(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_possible(Nums :: [integer()]) -> boolean().\\nis_possible(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def isPossible(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!459\n",
            "find-k-closest-elements 658\n",
            "{'id': 658, 'name': 'find-k-closest-elements', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-k-closest-elements/', 'task_description': 'Given a **sorted** integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order. An integer `a` is closer to `x` than an integer `b` if: `|a - x| < |b - x|`, or `|a - x| == |b - x|` and `a < b` **Example 1:** **Input:** arr = [1,2,3,4,5], k = 4, x = 3 **Output:** [1,2,3,4] **Example 2:** **Input:** arr = [1,1,2,3,4,5], k = 4, x = -1 **Output:** [1,1,2,3] **Constraints:** `1 <= k <= arr.length` `1 <= arr.length <= 104` `arr` is sorted in **ascending** order. `-104 <= arr[i], x <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'arr = [1,2,3,4,5], k = 4, x = 3', 'output': '[1,2,3,4]'}, {'label': 'Example 2', 'input': 'arr = [1,1,2,3,4,5], k = 4, x = -1', 'output': '[1,1,2,3]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_closest_elements(arr :: [integer], k :: integer, x :: integer) :: [integer]\\n  def find_closest_elements(arr, k, x) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_closest_elements(Arr :: [integer()], K :: integer(), X :: integer()) -> [integer()].\\nfind_closest_elements(Arr, K, X) ->\\n  .', 'scala_template': 'object Solution {\\n    def findClosestElements(arr: Array[Int], k: Int, x: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!460\n",
            "robot-return-to-origin 657\n",
            "{'id': 657, 'name': 'robot-return-to-origin', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/robot-return-to-origin/', 'task_description': 'There is a robot starting at the position `(0, 0)`, the origin, on a 2D plane. Given a sequence of its moves, judge if this robot **ends up at **`(0, 0)` after it completes its moves. You are given a string `moves` that represents the move sequence of the robot where `moves[i]` represents its `ith` move. Valid moves are `\\'R\\'` (right), `\\'L\\'` (left), `\\'U\\'` (up), and `\\'D\\'` (down). Return `true`_ if the robot returns to the origin after it finishes all of its moves, or _`false`_ otherwise_. **Note**: The way that the robot is \"facing\" is irrelevant. `\\'R\\'` will always make the robot move to the right once, `\\'L\\'` will always make it move left, etc. Also, assume that the magnitude of the robot\\'s movement is the same for each move. **Example 1:** ``` **Input:** moves = \"UD\" **Output:** true **Explanation**: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true. ``` **Example 2:** ``` **Input:** moves = \"LL\" **Output:** false **Explanation**: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves. ``` **Constraints:** `1 <= moves.length <= 2 * 104` `moves` only contains the characters `\\'U\\'`, `\\'D\\'`, `\\'L\\'` and `\\'R\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'moves = \"UD\"', 'output': 'true Explanation : The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.'}, {'label': 'Example 2', 'input': 'moves = \"LL\"', 'output': 'false Explanation : The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.'}], 'elixir_template': 'defmodule Solution do\\n  @spec judge_circle(moves :: String.t) :: boolean\\n  def judge_circle(moves) do\\n    \\n  end\\nend', 'erlang_template': '-spec judge_circle(Moves :: unicode:unicode_binary()) -> boolean().\\njudge_circle(Moves) ->\\n  .', 'scala_template': 'object Solution {\\n    def judgeCircle(moves: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!461\n",
            "print-binary-tree 655\n",
            "{'id': 655, 'name': 'print-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/print-binary-tree/', 'task_description': 'Given the `root` of a binary tree, construct a **0-indexed** `m x n` string matrix `res` that represents a **formatted layout** of the tree. The formatted layout matrix should be constructed using the following rules: The **height** of the tree is `height` and the number of rows `m` should be equal to `height + 1`. The number of columns `n` should be equal to `2height+1 - 1`. Place the **root node** in the **middle** of the **top row** (more formally, at location `res[0][(n-1)/2]`). For each node that has been placed in the matrix at position `res[r][c]`, place its **left child** at `res[r+1][c-2height-r-1]` and its **right child** at `res[r+1][c+2height-r-1]`. Continue this process until all the nodes in the tree have been placed. Any empty cells should contain the empty string `\"\"`. Return _the constructed matrix _`res`. **Example 1:** ``` **Input:** root = [1,2] **Output:** [[\"\",\"1\",\"\"], [\"2\",\"\",\"\"]] ``` **Example 2:** ``` **Input:** root = [1,2,3,null,4] **Output:** [[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"], [\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"], [\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 210]`. `-99 <= Node.val <= 99` The depth of the tree will be in the range `[1, 10]`.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2]', 'output': '[[\"\",\"1\",\"\"],\\n\\xa0[\"2\",\"\",\"\"]]'}, {'label': 'Example 2', 'input': 'root = [1,2,3,null,4]', 'output': '[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\\n\\xa0[\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\\n\\xa0[\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]] Constraints: The number of nodes in the tree is in the range [1, 2 10 ] . -99 <= Node.val <= 99 The depth of the tree will be in the range [1, 10] .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec print_tree(root :: TreeNode.t | nil) :: [[String.t]]\\n  def print_tree(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec print_tree(Root :: #tree_node{} | null) -> [[unicode:unicode_binary()]].\\nprint_tree(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def printTree(root: TreeNode): List[List[String]] = {\\n        \\n    }\\n}'}\n",
            "Done!462\n",
            "maximum-binary-tree 654\n",
            "{'id': 654, 'name': 'maximum-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-binary-tree/', 'task_description': 'You are given an integer array `nums` with no duplicates. A **maximum binary tree** can be built recursively from `nums` using the following algorithm: Create a root node whose value is the maximum value in `nums`. Recursively build the left subtree on the **subarray prefix** to the **left** of the maximum value. Recursively build the right subtree on the **subarray suffix** to the **right** of the maximum value. Return _the **maximum binary tree** built from _`nums`. **Example 1:** ``` **Input:** nums = [3,2,1,6,0,5] **Output:** [6,3,5,null,2,0,null,null,1] **Explanation:** The recursive calls are as follow: - The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5]. - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1]. - Empty array, so no child. - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1]. - Empty array, so no child. - Only one element, so child is a node with value 1. - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is []. - Only one element, so child is a node with value 0. - Empty array, so no child. ``` **Example 2:** ``` **Input:** nums = [3,2,1] **Output:** [3,null,2,null,1] ``` **Constraints:** `1 <= nums.length <= 1000` `0 <= nums[i] <= 1000` All integers in `nums` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,2,1,6,0,5]', 'output': '[6,3,5,null,2,0,null,null,1] Explanation: The recursive calls are as follow:\\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\\n        - Empty array, so no child.\\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\\n            - Empty array, so no child.\\n            - Only one element, so child is a node with value 1.\\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\\n        - Only one element, so child is a node with value 0.\\n        - Empty array, so no child.'}, {'label': 'Example 2', 'input': 'nums = [3,2,1]', 'output': '[3,null,2,null,1]'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec construct_maximum_binary_tree(nums :: [integer]) :: TreeNode.t | nil\\n  def construct_maximum_binary_tree(nums) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec construct_maximum_binary_tree(Nums :: [integer()]) -> #tree_node{} | null.\\nconstruct_maximum_binary_tree(Nums) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def constructMaximumBinaryTree(nums: Array[Int]): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!463\n",
            "two-sum-iv-input-is-a-bst 653\n",
            "{'id': 653, 'name': 'two-sum-iv-input-is-a-bst', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/two-sum-iv-input-is-a-bst/', 'task_description': 'Given the `root` of a binary search tree and an integer `k`, return `true` _if there exist two elements in the BST such that their sum is equal to_ `k`, _or_ `false` _otherwise_. **Example 1:** ``` **Input:** root = [5,3,6,2,4,null,7], k = 9 **Output:** true ``` **Example 2:** ``` **Input:** root = [5,3,6,2,4,null,7], k = 28 **Output:** false ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-104 <= Node.val <= 104` `root` is guaranteed to be a **valid** binary search tree. `-105 <= k <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'root = [5,3,6,2,4,null,7], k = 9', 'output': 'true'}, {'label': 'Example 2', 'input': 'root = [5,3,6,2,4,null,7], k = 28', 'output': 'false Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -10 4 <= Node.val <= 10 4 root is guaranteed to be a valid binary search tree. -10 5 <= k <= 10 5'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_target(root :: TreeNode.t | nil, k :: integer) :: boolean\\n  def find_target(root, k) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_target(Root :: #tree_node{} | null, K :: integer()) -> boolean().\\nfind_target(Root, K) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findTarget(root: TreeNode, k: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!464\n",
            "find-duplicate-subtrees 652\n",
            "{'id': 652, 'name': 'find-duplicate-subtrees', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-duplicate-subtrees/', 'task_description': 'Given the `root` of a binary tree, return all **duplicate subtrees**. For each kind of duplicate subtrees, you only need to return the root node of any one of them. Two trees are **duplicate** if they have the **same structure** with the **same node values**. **Example 1:** ``` **Input:** root = [1,2,3,4,null,2,4,null,null,4] **Output:** [[2,4],[4]] ``` **Example 2:** ``` **Input:** root = [2,1,1] **Output:** [[1]] ``` **Example 3:** ``` **Input:** root = [2,2,2,3,null,3,null] **Output:** [[2,3],[3]] ``` **Constraints:** The number of the nodes in the tree will be in the range `[1, 5000]` `-200 <= Node.val <= 200`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,null,2,4,null,null,4]', 'output': '[[2,4],[4]]'}, {'label': 'Example 2', 'input': 'root = [2,1,1]', 'output': '[[1]]'}, {'label': 'Example 3', 'input': 'root = [2,2,2,3,null,3,null]', 'output': '[[2,3],[3]] Constraints: The number of the nodes in the tree will be in the range [1, 5000] -200 <= Node.val <= 200'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_duplicate_subtrees(root :: TreeNode.t | nil) :: [TreeNode.t | nil]\\n  def find_duplicate_subtrees(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_duplicate_subtrees(Root :: #tree_node{} | null) -> [#tree_node{} | null].\\nfind_duplicate_subtrees(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findDuplicateSubtrees(root: TreeNode): List[TreeNode] = {\\n        \\n    }\\n}'}\n",
            "Done!465\n",
            "2-keys-keyboard 650\n",
            "{'id': 650, 'name': '2-keys-keyboard', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/2-keys-keyboard/', 'task_description': \"There is only one character `'A'` on the screen of a notepad. You can perform one of two operations on this notepad for each step: Copy All: You can copy all the characters present on the screen (a partial copy is not allowed). Paste: You can paste the characters which are copied last time. Given an integer `n`, return _the minimum number of operations to get the character_ `'A'` _exactly_ `n` _times on the screen_. **Example 1:** ``` **Input:** n = 3 **Output:** 3 **Explanation:** Initially, we have one character 'A'. In step 1, we use Copy All operation. In step 2, we use Paste operation to get 'AA'. In step 3, we use Paste operation to get 'AAA'. ``` **Example 2:** ``` **Input:** n = 1 **Output:** 0 ``` **Constraints:** `1 <= n <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': \"3 Explanation: Initially, we have one character 'A'.\\nIn step 1, we use Copy All operation.\\nIn step 2, we use Paste operation to get 'AA'.\\nIn step 3, we use Paste operation to get 'AAA'.\"}, {'label': 'Example 2', 'input': 'n = 1', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_steps(n :: integer) :: integer\\n  def min_steps(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_steps(N :: integer()) -> integer().\\nmin_steps(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def minSteps(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!466\n",
            "dota2-senate 649\n",
            "{'id': 649, 'name': 'dota2-senate', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/dota2-senate/', 'task_description': 'In the world of Dota2, there are two parties: the Radiant and the Dire. The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise **one** of the two rights: **Ban one senator\\'s right:** A senator can make another senator lose all his rights in this and all the following rounds. **Announce the victory:** If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game. Given a string `senate` representing each senator\\'s party belonging. The character `\\'R\\'` and `\\'D\\'` represent the Radiant party and the Dire party. Then if there are `n` senators, the size of the given string will be `n`. The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure. Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be `\"Radiant\"` or `\"Dire\"`. **Example 1:** ``` **Input:** senate = \"RD\" **Output:** \"Radiant\" **Explanation:** The first senator comes from Radiant and he can just ban the next senator\\'s right in round 1. And the second senator can\\'t exercise any rights anymore since his right has been banned. And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote. ``` **Example 2:** ``` **Input:** senate = \"RDD\" **Output:** \"Dire\" **Explanation:** The first senator comes from Radiant and he can just ban the next senator\\'s right in round 1. And the second senator can\\'t exercise any rights anymore since his right has been banned. And the third senator comes from Dire and he can ban the first senator\\'s right in round 1. And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote. ``` **Constraints:** `n == senate.length` `1 <= n <= 104` `senate[i]` is either `\\'R\\'` or `\\'D\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'senate = \"RD\"', 'output': '\"Radiant\" Explanation: The first senator comes from Radiant and he can just ban the next senator\\'s right in round 1. \\nAnd the second senator can\\'t exercise any rights anymore since his right has been banned. \\nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.'}, {'label': 'Example 2', 'input': 'senate = \"RDD\"', 'output': '\"Dire\" Explanation: The first senator comes from Radiant and he can just ban the next senator\\'s right in round 1. \\nAnd the second senator can\\'t exercise any rights anymore since his right has been banned. \\nAnd the third senator comes from Dire and he can ban the first senator\\'s right in round 1. \\nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote. Constraints: n == senate.length 1 <= n <= 10 4 senate[i] is either \\'R\\' or \\'D\\' .'}], 'elixir_template': 'defmodule Solution do\\n  @spec predict_party_victory(senate :: String.t) :: String.t\\n  def predict_party_victory(senate) do\\n    \\n  end\\nend', 'erlang_template': '-spec predict_party_victory(Senate :: unicode:unicode_binary()) -> unicode:unicode_binary().\\npredict_party_victory(Senate) ->\\n  .', 'scala_template': 'object Solution {\\n    def predictPartyVictory(senate: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!467\n",
            "replace-words 648\n",
            "{'id': 648, 'name': 'replace-words', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/replace-words/', 'task_description': 'In English, we have a concept called **root**, which can be followed by some other word to form another longer word - let\\'s call this word **derivative**. For example, when the **root** `\"help\"` is followed by the word `\"ful\"`, we can form a derivative `\"helpful\"`. Given a `dictionary` consisting of many **roots** and a `sentence` consisting of words separated by spaces, replace all the derivatives in the sentence with the **root** forming it. If a derivative can be replaced by more than one **root**, replace it with the **root** that has **the shortest length**. Return _the `sentence`_ after the replacement. **Example 1:** ``` **Input:** dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\" **Output:** \"the cat was rat by the bat\" ``` **Example 2:** ``` **Input:** dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\" **Output:** \"a a b c\" ``` **Constraints:** `1 <= dictionary.length <= 1000` `1 <= dictionary[i].length <= 100` `dictionary[i]` consists of only lower-case letters. `1 <= sentence.length <= 106` `sentence` consists of only lower-case letters and spaces. The number of words in `sentence` is in the range `[1, 1000]` The length of each word in `sentence` is in the range `[1, 1000]` Every two consecutive words in `sentence` will be separated by exactly one space. `sentence` does not have leading or trailing spaces.', 'test_case': [{'label': 'Example 1', 'input': 'dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"', 'output': '\"the cat was rat by the bat\"'}, {'label': 'Example 2', 'input': 'dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"', 'output': '\"a a b c\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec replace_words(dictionary :: [String.t], sentence :: String.t) :: String.t\\n  def replace_words(dictionary, sentence) do\\n    \\n  end\\nend', 'erlang_template': '-spec replace_words(Dictionary :: [unicode:unicode_binary()], Sentence :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nreplace_words(Dictionary, Sentence) ->\\n  .', 'scala_template': 'object Solution {\\n    def replaceWords(dictionary: List[String], sentence: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!468\n",
            "palindromic-substrings 647\n",
            "{'id': 647, 'name': 'palindromic-substrings', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/palindromic-substrings/', 'task_description': 'Given a string `s`, return _the number of **palindromic substrings** in it_. A string is a **palindrome** when it reads the same backward as forward. A **substring** is a contiguous sequence of characters within the string. **Example 1:** ``` **Input:** s = \"abc\" **Output:** 3 **Explanation:** Three palindromic strings: \"a\", \"b\", \"c\". ``` **Example 2:** ``` **Input:** s = \"aaa\" **Output:** 6 **Explanation:** Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\". ``` **Constraints:** `1 <= s.length <= 1000` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abc\"', 'output': '3 Explanation: Three palindromic strings: \"a\", \"b\", \"c\".'}, {'label': 'Example 2', 'input': 's = \"aaa\"', 'output': '6 Explanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_substrings(s :: String.t) :: integer\\n  def count_substrings(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_substrings(S :: unicode:unicode_binary()) -> integer().\\ncount_substrings(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def countSubstrings(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!469\n",
            "maximum-length-of-pair-chain 646\n",
            "{'id': 646, 'name': 'maximum-length-of-pair-chain', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-length-of-pair-chain/', 'task_description': 'You are given an array of `n` pairs `pairs` where `pairs[i] = [lefti, righti]` and `lefti < righti`. A pair `p2 = [c, d]` **follows** a pair `p1 = [a, b]` if `b < c`. A **chain** of pairs can be formed in this fashion. Return _the length longest chain which can be formed_. You do not need to use up all the given intervals. You can select pairs in any order. **Example 1:** ``` **Input:** pairs = [[1,2],[2,3],[3,4]] **Output:** 2 **Explanation:** The longest chain is [1,2] -> [3,4]. ``` **Example 2:** ``` **Input:** pairs = [[1,2],[7,8],[4,5]] **Output:** 3 **Explanation:** The longest chain is [1,2] -> [4,5] -> [7,8]. ``` **Constraints:** `n == pairs.length` `1 <= n <= 1000` `-1000 <= lefti < righti <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'pairs = [[1,2],[2,3],[3,4]]', 'output': '2 Explanation: The longest chain is [1,2] -> [3,4].'}, {'label': 'Example 2', 'input': 'pairs = [[1,2],[7,8],[4,5]]', 'output': '3 Explanation: The longest chain is [1,2] -> [4,5] -> [7,8]. Constraints: n == pairs.length 1 <= n <= 1000 -1000 <= left i < right i <= 1000'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_longest_chain(pairs :: [[integer]]) :: integer\\n  def find_longest_chain(pairs) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_longest_chain(Pairs :: [[integer()]]) -> integer().\\nfind_longest_chain(Pairs) ->\\n  .', 'scala_template': 'object Solution {\\n    def findLongestChain(pairs: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!470\n",
            "set-mismatch 645\n",
            "{'id': 645, 'name': 'set-mismatch', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/set-mismatch/', 'task_description': 'You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in **repetition of one** number and **loss of another** number. You are given an integer array `nums` representing the data status of this set after the error. Find the number that occurs twice and the number that is missing and return _them in the form of an array_. **Example 1:** ``` **Input:** nums = [1,2,2,4] **Output:** [2,3] ``` **Example 2:** ``` **Input:** nums = [1,1] **Output:** [1,2] ``` **Constraints:** `2 <= nums.length <= 104` `1 <= nums[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,2,4]', 'output': '[2,3]'}, {'label': 'Example 2', 'input': 'nums = [1,1]', 'output': '[1,2]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_error_nums(nums :: [integer]) :: [integer]\\n  def find_error_nums(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_error_nums(Nums :: [integer()]) -> [integer()].\\nfind_error_nums(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findErrorNums(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!471\n",
            "maximum-average-subarray-i 643\n",
            "{'id': 643, 'name': 'maximum-average-subarray-i', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/maximum-average-subarray-i/', 'task_description': 'You are given an integer array `nums` consisting of `n` elements, and an integer `k`. Find a contiguous subarray whose **length is equal to** `k` that has the maximum average value and return _this value_. Any answer with a calculation error less than `10-5` will be accepted. **Example 1:** ``` **Input:** nums = [1,12,-5,-6,50,3], k = 4 **Output:** 12.75000 **Explanation:** Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75 ``` **Example 2:** ``` **Input:** nums = [5], k = 1 **Output:** 5.00000 ``` **Constraints:** `n == nums.length` `1 <= k <= n <= 105` `-104 <= nums[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,12,-5,-6,50,3], k = 4', 'output': '12.75000 Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75'}, {'label': 'Example 2', 'input': 'nums = [5], k = 1', 'output': '5.00000 Constraints: n == nums.length 1 <= k <= n <= 10 5 -10 4 <= nums[i] <= 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_max_average(nums :: [integer], k :: integer) :: float\\n  def find_max_average(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_max_average(Nums :: [integer()], K :: integer()) -> float().\\nfind_max_average(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\\n        \\n    }\\n}'}\n",
            "Done!472\n",
            "solve-the-equation 640\n",
            "{'id': 640, 'name': 'solve-the-equation', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/solve-the-equation/', 'task_description': 'Solve a given equation and return the value of `\\'x\\'` in the form of a string `\"x=#value\"`. The equation contains only `\\'+\\'`, `\\'-\\'` operation, the variable `\\'x\\'` and its coefficient. You should return `\"No solution\"` if there is no solution for the equation, or `\"Infinite solutions\"` if there are infinite solutions for the equation. If there is exactly one solution for the equation, we ensure that the value of `\\'x\\'` is an integer. **Example 1:** ``` **Input:** equation = \"x+5-3+x=6+x-2\" **Output:** \"x=2\" ``` **Example 2:** ``` **Input:** equation = \"x=x\" **Output:** \"Infinite solutions\" ``` **Example 3:** ``` **Input:** equation = \"2x=x\" **Output:** \"x=0\" ``` **Constraints:** `3 <= equation.length <= 1000` `equation` has exactly one `\\'=\\'`. `equation` consists of integers with an absolute value in the range `[0, 100]` without any leading zeros, and the variable `\\'x\\'`. The input is generated that if there is a single solution, it will be an integer.', 'test_case': [{'label': 'Example 1', 'input': 'equation = \"x+5-3+x=6+x-2\"', 'output': '\"x=2\"'}, {'label': 'Example 2', 'input': 'equation = \"x=x\"', 'output': '\"Infinite solutions\"'}, {'label': 'Example 3', 'input': 'equation = \"2x=x\"', 'output': '\"x=0\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec solve_equation(equation :: String.t) :: String.t\\n  def solve_equation(equation) do\\n    \\n  end\\nend', 'erlang_template': '-spec solve_equation(Equation :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nsolve_equation(Equation) ->\\n  .', 'scala_template': 'object Solution {\\n    def solveEquation(equation: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!473\n",
            "decode-ways-ii 639\n",
            "{'id': 639, 'name': 'decode-ways-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/decode-ways-ii/', 'task_description': 'A message containing letters from `A-Z` can be **encoded** into numbers using the following mapping: ``` \\'A\\' -> \"1\" \\'B\\' -> \"2\" ... \\'Z\\' -> \"26\" ``` To **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into: `\"AAJF\"` with the grouping `(1 1 10 6)` `\"KJF\"` with the grouping `(11 10 6)` Note that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `\\'F\\'` since `\"6\"` is different from `\"06\"`. **In addition** to the mapping above, an encoded message may contain the `\\'*\\'` character, which can represent any digit from `\\'1\\'` to `\\'9\\'` (`\\'0\\'` is excluded). For example, the encoded message `\"1*\"` may represent any of the encoded messages `\"11\"`, `\"12\"`, `\"13\"`, `\"14\"`, `\"15\"`, `\"16\"`, `\"17\"`, `\"18\"`, or `\"19\"`. Decoding `\"1*\"` is equivalent to decoding **any** of the encoded messages it can represent. Given a string `s` consisting of digits and `\\'*\\'` characters, return _the **number** of ways to **decode** it_. Since the answer may be very large, return it **modulo** `109 + 7`. **Example 1:** ``` **Input:** s = \"*\" **Output:** 9 **Explanation:** The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\". Each of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively. Hence, there are a total of 9 ways to decode \"*\". ``` **Example 2:** ``` **Input:** s = \"1*\" **Output:** 18 **Explanation:** The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Each of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\"). Hence, there are a total of 9 * 2 = 18 ways to decode \"1*\". ``` **Example 3:** ``` **Input:** s = \"2*\" **Output:** 15 **Explanation:** The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\". \"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way. Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\". ``` **Constraints:** `1 <= s.length <= 105` `s[i]` is a digit or `\\'*\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"*\"', 'output': '9 Explanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\\nHence, there are a total of 9 ways to decode \"*\".'}, {'label': 'Example 2', 'input': 's = \"1*\"', 'output': '18 Explanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\".'}, {'label': 'Example 3', 'input': 's = \"2*\"', 'output': '15 Explanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_decodings(s :: String.t) :: integer\\n  def num_decodings(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\\nnum_decodings(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def numDecodings(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!474\n",
            "shopping-offers 638\n",
            "{'id': 638, 'name': 'shopping-offers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/shopping-offers/', 'task_description': 'In LeetCode Store, there are `n` items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price. You are given an integer array `price` where `price[i]` is the price of the `ith` item, and an integer array `needs` where `needs[i]` is the number of pieces of the `ith` item you want to buy. You are also given an array `special` where `special[i]` is of size `n + 1` where `special[i][j]` is the number of pieces of the `jth` item in the `ith` offer and `special[i][n]` (i.e., the last integer in the array) is the price of the `ith` offer. Return _the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers_. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want. **Example 1:** ``` **Input:** price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2] **Output:** 14 **Explanation:** There are two kinds of items, A and B. Their prices are $2 and $5 respectively. In special offer 1, you can pay $5 for 3A and 0B In special offer 2, you can pay $10 for 1A and 2B. You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A. ``` **Example 2:** ``` **Input:** price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1] **Output:** 11 **Explanation:** The price of A is $2, and $3 for B, $4 for C. You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. You cannot add more items, though only $9 for 2A ,2B and 1C. ``` **Constraints:** `n == price.length == needs.length` `1 <= n <= 6` `0 <= price[i], needs[i] <= 10` `1 <= special.length <= 100` `special[i].length == n + 1` `0 <= special[i][j] <= 50` The input is generated that at least one of `special[i][j]` is non-zero for `0 <= j <= n - 1`.', 'test_case': [{'label': 'Example 1', 'input': 'price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]', 'output': '14 Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \\nIn special offer 1, you can pay $5 for 3A and 0B\\nIn special offer 2, you can pay $10 for 1A and 2B. \\nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.'}, {'label': 'Example 2', 'input': 'price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]', 'output': '11 Explanation: The price of A is $2, and $3 for B, $4 for C. \\nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \\nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \\nYou cannot add more items, though only $9 for 2A ,2B and 1C. Constraints: n == price.length == needs.length 1 <= n <= 6 0 <= price[i], needs[i] <= 10 1 <= special.length <= 100 special[i].length == n + 1 0 <= special[i][j] <= 50 The input is generated that at least one of special[i][j] is non-zero for 0 <= j <= n - 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec shopping_offers(price :: [integer], special :: [[integer]], needs :: [integer]) :: integer\\n  def shopping_offers(price, special, needs) do\\n    \\n  end\\nend', 'erlang_template': '-spec shopping_offers(Price :: [integer()], Special :: [[integer()]], Needs :: [integer()]) -> integer().\\nshopping_offers(Price, Special, Needs) ->\\n  .', 'scala_template': 'object Solution {\\n    def shoppingOffers(price: List[Int], special: List[List[Int]], needs: List[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!475\n",
            "average-of-levels-in-binary-tree 637\n",
            "{'id': 637, 'name': 'average-of-levels-in-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/average-of-levels-in-binary-tree/', 'task_description': 'Given the `root` of a binary tree, return _the average value of the nodes on each level in the form of an array_. Answers within `10-5` of the actual answer will be accepted. **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** [3.00000,14.50000,11.00000] Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11]. ``` **Example 2:** ``` **Input:** root = [3,9,20,15,7] **Output:** [3.00000,14.50000,11.00000] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-231 <= Node.val <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': '[3.00000,14.50000,11.00000]\\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\\nHence return [3, 14.5, 11].'}, {'label': 'Example 2', 'input': 'root = [3,9,20,15,7]', 'output': '[3.00000,14.50000,11.00000] Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -2 31 <= Node.val <= 2 31 - 1'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec average_of_levels(root :: TreeNode.t | nil) :: [float]\\n  def average_of_levels(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec average_of_levels(Root :: #tree_node{} | null) -> [float()].\\naverage_of_levels(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def averageOfLevels(root: TreeNode): Array[Double] = {\\n        \\n    }\\n}'}\n",
            "Done!476\n",
            "exclusive-time-of-functions 636\n",
            "{'id': 636, 'name': 'exclusive-time-of-functions', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/exclusive-time-of-functions/', 'task_description': 'On a **single-threaded** CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`. Function calls are **stored in a call stack**: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is **the current function being executed**. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp. You are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `\"{function_id}:{\"start\" | \"end\"}:{timestamp}\"`. For example, `\"0:start:3\"` means a function call with function ID `0` **started at the beginning** of timestamp `3`, and `\"1:end:2\"` means a function call with function ID `1` **ended at the end** of timestamp `2`. Note that a function can be called multiple times, possibly recursively. A function\\'s **exclusive time** is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the **exclusive time** is `2 + 1 = 3`. Return _the **exclusive time** of each function in an array, where the value at the _`ith`_ index represents the exclusive time for the function with ID _`i`. **Example 1:** ``` **Input:** n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"] **Output:** [3,4] **Explanation:** Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1. Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5. Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time. So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing. ``` **Example 2:** ``` **Input:** n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"] **Output:** [8] **Explanation:** Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. Function 0 (initial call) resumes execution then immediately calls itself again. Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time. Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time. So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing. ``` **Example 3:** ``` **Input:** n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"] **Output:** [7,1] **Explanation:** Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. Function 0 (initial call) resumes execution then immediately calls function 1. Function 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6. Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time. So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing. ``` **Constraints:** `1 <= n <= 100` `1 <= logs.length <= 500` `0 <= function_id < n` `0 <= timestamp <= 109` No two start events will happen at the same timestamp. No two end events will happen at the same timestamp. Each function has an `\"end\"` log for each `\"start\"` log.', 'test_case': [{'label': 'Example 1', 'input': 'n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]', 'output': '[3,4] Explanation: Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.'}, {'label': 'Example 2', 'input': 'n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]', 'output': '[8] Explanation: Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\\nFunction 0 (initial call) resumes execution then immediately calls itself again.\\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.'}, {'label': 'Example 3', 'input': 'n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]', 'output': '[7,1] Explanation: Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\\nFunction 0 (initial call) resumes execution then immediately calls function 1.\\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.'}], 'elixir_template': 'defmodule Solution do\\n  @spec exclusive_time(n :: integer, logs :: [String.t]) :: [integer]\\n  def exclusive_time(n, logs) do\\n    \\n  end\\nend', 'erlang_template': '-spec exclusive_time(N :: integer(), Logs :: [unicode:unicode_binary()]) -> [integer()].\\nexclusive_time(N, Logs) ->\\n  .', 'scala_template': 'object Solution {\\n    def exclusiveTime(n: Int, logs: List[String]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!477\n",
            "sum-of-square-numbers 633\n",
            "{'id': 633, 'name': 'sum-of-square-numbers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sum-of-square-numbers/', 'task_description': \"Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`. **Example 1:** ``` **Input:** c = 5 **Output:** true **Explanation:** 1 * 1 + 2 * 2 = 5 ``` **Example 2:** ``` **Input:** c = 3 **Output:** false ``` **Constraints:** `0 <= c <= 231 - 1`\", 'test_case': [{'label': 'Example 1', 'input': 'c = 5', 'output': 'true Explanation: 1 * 1 + 2 * 2 = 5'}, {'label': 'Example 2', 'input': 'c = 3', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec judge_square_sum(c :: integer) :: boolean\\n  def judge_square_sum(c) do\\n    \\n  end\\nend', 'erlang_template': '-spec judge_square_sum(C :: integer()) -> boolean().\\njudge_square_sum(C) ->\\n  .', 'scala_template': 'object Solution {\\n    def judgeSquareSum(c: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!478\n",
            "smallest-range-covering-elements-from-k-lists 632\n",
            "{'id': 632, 'name': 'smallest-range-covering-elements-from-k-lists', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/', 'task_description': 'You have `k` lists of sorted integers in **non-decreasing order**. Find the smallest range that includes at least one number from each of the `k` lists. We define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` **or** `a < c` if `b - a == d - c`. **Example 1:** ``` **Input:** nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]] **Output:** [20,24] **Explanation: ** List 1: [4, 10, 15, 24,26], 24 is in range [20,24]. List 2: [0, 9, 12, 20], 20 is in range [20,24]. List 3: [5, 18, 22, 30], 22 is in range [20,24]. ``` **Example 2:** ``` **Input:** nums = [[1,2,3],[1,2,3],[1,2,3]] **Output:** [1,1] ``` **Constraints:** `nums.length == k` `1 <= k <= 3500` `1 <= nums[i].length <= 50` `-105 <= nums[i][j] <= 105` `nums[i]` is sorted in **non-decreasing** order.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]', 'output': '[20,24] Explanation: List 1: [4, 10, 15, 24,26], 24 is in range [20,24].\\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\\nList 3: [5, 18, 22, 30], 22 is in range [20,24].'}, {'label': 'Example 2', 'input': 'nums = [[1,2,3],[1,2,3],[1,2,3]]', 'output': '[1,1] Constraints: nums.length == k 1 <= k <= 3500 1 <= nums[i].length <= 50 -10 5 <= nums[i][j] <= 10 5 nums[i] is sorted in non-decreasing order.'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_range(nums :: [[integer]]) :: [integer]\\n  def smallest_range(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_range(Nums :: [[integer()]]) -> [integer()].\\nsmallest_range(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestRange(nums: List[List[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!479\n",
            "course-schedule-iii 630\n",
            "{'id': 630, 'name': 'course-schedule-iii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/course-schedule-iii/', 'task_description': 'There are `n` different online courses numbered from `1` to `n`. You are given an array `courses` where `courses[i] = [durationi, lastDayi]` indicate that the `ith` course should be taken continuously for `durationi` days and must be finished before or on `lastDayi`. You will start on the `1st` day and you cannot take two or more courses simultaneously. Return _the maximum number of courses that you can take_. **Example 1:** ``` **Input:** courses = [[100,200],[200,1300],[1000,1250],[2000,3200]] **Output:** 3 Explanation: There are totally 4 courses, but you can take 3 courses at most: First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day. Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date. ``` **Example 2:** ``` **Input:** courses = [[1,2]] **Output:** 1 ``` **Example 3:** ``` **Input:** courses = [[3,2],[4,3]] **Output:** 0 ``` **Constraints:** `1 <= courses.length <= 104` `1 <= durationi, lastDayi <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]', 'output': '3\\nExplanation: \\nThere are totally 4 courses, but you can take 3 courses at most:\\nFirst, take the 1 st course, it costs 100 days so you will finish it on the 100 th day, and ready to take the next course on the 101 st day.\\nSecond, take the 3 rd course, it costs 1000 days so you will finish it on the 1100 th day, and ready to take the next course on the 1101 st day. \\nThird, take the 2 nd course, it costs 200 days so you will finish it on the 1300 th day. \\nThe 4 th course cannot be taken now, since you will finish it on the 3300 th day, which exceeds the closed date.'}, {'label': 'Example 2', 'input': 'courses = [[1,2]]', 'output': '1'}, {'label': 'Example 3', 'input': 'courses = [[3,2],[4,3]]', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec schedule_course(courses :: [[integer]]) :: integer\\n  def schedule_course(courses) do\\n    \\n  end\\nend', 'erlang_template': '-spec schedule_course(Courses :: [[integer()]]) -> integer().\\nschedule_course(Courses) ->\\n  .', 'scala_template': 'object Solution {\\n    def scheduleCourse(courses: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!480\n",
            "k-inverse-pairs-array 629\n",
            "{'id': 629, 'name': 'k-inverse-pairs-array', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/k-inverse-pairs-array/', 'task_description': 'For an integer array `nums`, an **inverse pair** is a pair of integers `[i, j]` where `0 <= i < j < nums.length` and `nums[i] > nums[j]`. Given two integers n and k, return the number of different arrays consisting of numbers from `1` to `n` such that there are exactly `k` **inverse pairs**. Since the answer can be huge, return it **modulo** `109 + 7`. **Example 1:** ``` **Input:** n = 3, k = 0 **Output:** 1 **Explanation:** Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs. ``` **Example 2:** ``` **Input:** n = 3, k = 1 **Output:** 2 **Explanation:** The array [1,3,2] and [2,1,3] have exactly 1 inverse pair. ``` **Constraints:** `1 <= n <= 1000` `0 <= k <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3, k = 0', 'output': '1 Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.'}, {'label': 'Example 2', 'input': 'n = 3, k = 1', 'output': '2 Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.'}], 'elixir_template': 'defmodule Solution do\\n  @spec k_inverse_pairs(n :: integer, k :: integer) :: integer\\n  def k_inverse_pairs(n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec k_inverse_pairs(N :: integer(), K :: integer()) -> integer().\\nk_inverse_pairs(N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def kInversePairs(n: Int, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!481\n",
            "maximum-product-of-three-numbers 628\n",
            "{'id': 628, 'name': 'maximum-product-of-three-numbers', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/maximum-product-of-three-numbers/', 'task_description': 'Given an integer array `nums`, _find three numbers whose product is maximum and return the maximum product_. **Example 1:** ``` **Input:** nums = [1,2,3] **Output:** 6 ``` **Example 2:** ``` **Input:** nums = [1,2,3,4] **Output:** 24 ``` **Example 3:** ``` **Input:** nums = [-1,-2,-3] **Output:** -6 ``` **Constraints:** `3 <= nums.length <= 104` `-1000 <= nums[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3]', 'output': '6'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4]', 'output': '24'}, {'label': 'Example 3', 'input': 'nums = [-1,-2,-3]', 'output': '-6'}], 'elixir_template': 'defmodule Solution do\\n  @spec maximum_product(nums :: [integer]) :: integer\\n  def maximum_product(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec maximum_product(Nums :: [integer()]) -> integer().\\nmaximum_product(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maximumProduct(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!482\n",
            "maximum-distance-in-arrays 624\n",
            "{'id': 624, 'name': 'maximum-distance-in-arrays', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-distance-in-arrays/', 'task_description': 'You are given `m` `arrays`, where each array is sorted in **ascending order**. You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`. Return _the maximum distance_. **Example 1:** ``` **Input:** arrays = [[1,2,3],[4,5],[1,2,3]] **Output:** 4 **Explanation:** One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array. ``` **Example 2:** ``` **Input:** arrays = [[1],[1]] **Output:** 0 ``` **Constraints:** `m == arrays.length` `2 <= m <= 105` `1 <= arrays[i].length <= 500` `-104 <= arrays[i][j] <= 104` `arrays[i]` is sorted in **ascending order**. There will be at most `105` integers in all the arrays.', 'test_case': [{'label': 'Example 1', 'input': 'arrays = [[1,2,3],[4,5],[1,2,3]]', 'output': '4 Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.'}, {'label': 'Example 2', 'input': 'arrays = [[1],[1]]', 'output': '0 Constraints: m == arrays.length 2 <= m <= 10 5 1 <= arrays[i].length <= 500 -10 4 <= arrays[i][j] <= 10 4 arrays[i] is sorted in ascending order . There will be at most 10 5 integers in all the arrays.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_distance(arrays :: [[integer]]) :: integer\\n  def max_distance(arrays) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_distance(Arrays :: [[integer()]]) -> integer().\\nmax_distance(Arrays) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxDistance(arrays: List[List[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!483\n",
            "add-one-row-to-tree 623\n",
            "{'id': 623, 'name': 'add-one-row-to-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/add-one-row-to-tree/', 'task_description': \"Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`. Note that the `root` node is at depth `1`. The adding rule is: Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root. `cur`'s original left subtree should be the left subtree of the new left subtree root. `cur`'s original right subtree should be the right subtree of the new right subtree root. If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree. **Example 1:** ``` **Input:** root = [4,2,6,3,1,5], val = 1, depth = 2 **Output:** [4,1,1,2,null,null,6,3,1,5] ``` **Example 2:** ``` **Input:** root = [4,2,null,3,1], val = 1, depth = 3 **Output:** [4,2,null,1,1,3,null,null,1] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. The depth of the tree is in the range `[1, 104]`. `-100 <= Node.val <= 100` `-105 <= val <= 105` `1 <= depth <= the depth of tree + 1`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [4,2,6,3,1,5], val = 1, depth = 2', 'output': '[4,1,1,2,null,null,6,3,1,5]'}, {'label': 'Example 2', 'input': 'root = [4,2,null,3,1], val = 1, depth = 3', 'output': '[4,2,null,1,1,3,null,null,1] Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . The depth of the tree is in the range [1, 10 4 ] . -100 <= Node.val <= 100 -10 5 <= val <= 10 5 1 <= depth <= the depth of tree + 1'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec add_one_row(root :: TreeNode.t | nil, val :: integer, depth :: integer) :: TreeNode.t | nil\\n  def add_one_row(root, val, depth) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec add_one_row(Root :: #tree_node{} | null, Val :: integer(), Depth :: integer()) -> #tree_node{} | null.\\nadd_one_row(Root, Val, Depth) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def addOneRow(root: TreeNode, `val`: Int, depth: Int): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!484\n",
            "task-scheduler 621\n",
            "{'id': 621, 'name': 'task-scheduler', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/task-scheduler/', 'task_description': 'You are given an array of CPU `tasks`, each labeled with a letter from A to Z, and a number `n`. Each CPU interval can be idle or allow the completion of one task. Tasks can be completed in any order, but there\\'s a constraint: there has to be a gap of **at least** `n` intervals between two tasks with the same label. Return the **minimum** number of CPU intervals required to complete all tasks. **Example 1:** **Input:** tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 **Output:** 8 **Explanation:** A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B. After completing task A, you must wait two intervals before doing A again. The same applies to task B. In the 3rd interval, neither A nor B can be done, so you idle. By the 4th interval, you can do A again as 2 intervals have passed. **Example 2:** **Input:** tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1 **Output:** 6 **Explanation:** A possible sequence is: A -> B -> C -> D -> A -> B. With a cooling interval of 1, you can repeat a task after just one other task. **Example 3:** **Input:** tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3 **Output:** 10 **Explanation:** A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B. There are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks. **Constraints:** `1 <= tasks.length <= 104` `tasks[i]` is an uppercase English letter. `0 <= n <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2', 'output': '8 Explanation: A possible sequence is: A -> B -> idle -> A -> B -> idle -> A -> B. After completing task A, you must wait two intervals before doing A again. The same applies to task B. In the 3 rd interval, neither A nor B can be done, so you idle. By the 4 th interval, you can do A again as 2 intervals have passed.'}, {'label': 'Example 2', 'input': 'tasks = [\"A\",\"C\",\"A\",\"B\",\"D\",\"B\"], n = 1', 'output': '6 Explanation: A possible sequence is: A -> B -> C -> D -> A -> B. With a cooling interval of 1, you can repeat a task after just one other task.'}, {'label': 'Example 3', 'input': 'tasks = [\"A\",\"A\",\"A\", \"B\",\"B\",\"B\"], n = 3', 'output': '10 Explanation: A possible sequence is: A -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B. There are only two types of tasks, A and B, which need to be separated by 3 intervals. This leads to idling twice between repetitions of these tasks.'}], 'elixir_template': 'defmodule Solution do\\n  @spec least_interval(tasks :: [char], n :: integer) :: integer\\n  def least_interval(tasks, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec least_interval(Tasks :: [char()], N :: integer()) -> integer().\\nleast_interval(Tasks, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def leastInterval(tasks: Array[Char], n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!485\n",
            "merge-two-binary-trees 617\n",
            "{'id': 617, 'name': 'merge-two-binary-trees', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/merge-two-binary-trees/', 'task_description': 'You are given two binary trees `root1` and `root2`. Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree. Return _the merged tree_. **Note:** The merging process must start from the root nodes of both trees. **Example 1:** ``` **Input:** root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7] **Output:** [3,4,5,5,4,null,7] ``` **Example 2:** ``` **Input:** root1 = [1], root2 = [1,2] **Output:** [2,2] ``` **Constraints:** The number of nodes in both trees is in the range `[0, 2000]`. `-104 <= Node.val <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]', 'output': '[3,4,5,5,4,null,7]'}, {'label': 'Example 2', 'input': 'root1 = [1], root2 = [1,2]', 'output': '[2,2] Constraints: The number of nodes in both trees is in the range [0, 2000] . -10 4 <= Node.val <= 10 4'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec merge_trees(root1 :: TreeNode.t | nil, root2 :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def merge_trees(root1, root2) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec merge_trees(Root1 :: #tree_node{} | null, Root2 :: #tree_node{} | null) -> #tree_node{} | null.\\nmerge_trees(Root1, Root2) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def mergeTrees(root1: TreeNode, root2: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!486\n",
            "valid-triangle-number 611\n",
            "{'id': 611, 'name': 'valid-triangle-number', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/valid-triangle-number/', 'task_description': 'Given an integer array `nums`, return _the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle_. **Example 1:** ``` **Input:** nums = [2,2,3,4] **Output:** 3 **Explanation:** Valid combinations are: 2,3,4 (using the first 2) 2,3,4 (using the second 2) 2,2,3 ``` **Example 2:** ``` **Input:** nums = [4,2,3,4] **Output:** 4 ``` **Constraints:** `1 <= nums.length <= 1000` `0 <= nums[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,2,3,4]', 'output': '3 Explanation: Valid combinations are: \\n2,3,4 (using the first 2)\\n2,3,4 (using the second 2)\\n2,2,3'}, {'label': 'Example 2', 'input': 'nums = [4,2,3,4]', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec triangle_number(nums :: [integer]) :: integer\\n  def triangle_number(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec triangle_number(Nums :: [integer()]) -> integer().\\ntriangle_number(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def triangleNumber(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!487\n",
            "find-duplicate-file-in-system 609\n",
            "{'id': 609, 'name': 'find-duplicate-file-in-system', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-duplicate-file-in-system/', 'task_description': 'Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return _all the duplicate files in the file system in terms of their paths_. You may return the answer in **any order**. A group of duplicate files consists of at least two files that have the same content. A single directory info string in the input list has the following format: `\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"` It means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory \"`root/d1/d2/.../dm\"`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory. The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format: `\"directory_path/file_name.txt\"` **Example 1:** ``` **Input:** paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"] **Output:** [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]] ``` **Example 2:** ``` **Input:** paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"] **Output:** [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]] ``` **Constraints:** `1 <= paths.length <= 2 * 104` `1 <= paths[i].length <= 3000` `1 <= sum(paths[i].length) <= 5 * 105` `paths[i]` consist of English letters, digits, `\\'/\\'`, `\\'.\\'`, `\\'(\\'`, `\\')\\'`, and `\\' \\'`. You may assume no files or directories share the same name in the same directory. You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info. **Follow up:** Imagine you are given a real file system, how will you search files? DFS or BFS? If the file content is very large (GB level), how will you modify your solution? If you can only read the file by 1kb each time, how will you modify your solution? What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize? How to make sure the duplicated files you find are not false positive?', 'test_case': [{'label': 'Example 1', 'input': 'paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]', 'output': '[[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]'}, {'label': 'Example 2', 'input': 'paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]', 'output': '[[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_duplicate(paths :: [String.t]) :: [[String.t]]\\n  def find_duplicate(paths) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_duplicate(Paths :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\\nfind_duplicate(Paths) ->\\n  .', 'scala_template': 'object Solution {\\n    def findDuplicate(paths: Array[String]): List[List[String]] = {\\n        \\n    }\\n}'}\n",
            "Done!488\n",
            "construct-string-from-binary-tree 606\n",
            "{'id': 606, 'name': 'construct-string-from-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/construct-string-from-binary-tree/', 'task_description': 'Given the `root` node of a binary tree, your task is to create a string representation of the tree following a specific set of formatting rules. The representation should be based on a preorder traversal of the binary tree and must adhere to the following guidelines: **Node Representation**: Each node in the tree should be represented by its integer value. **Parentheses for Children**: If a node has at least one child (either left or right), its children should be represented inside parentheses. Specifically: If a node has a left child, the value of the left child should be enclosed in parentheses immediately following the node\\'s value. If a node has a right child, the value of the right child should also be enclosed in parentheses. The parentheses for the right child should follow those of the left child. **Omitting Empty Parentheses**: Any empty parentheses pairs (i.e., `()`) should be omitted from the final string representation of the tree, with one specific exception: when a node has a right child but no left child. In such cases, you must include an empty pair of parentheses to indicate the absence of the left child. This ensures that the one-to-one mapping between the string representation and the original binary tree structure is maintained. In summary, empty parentheses pairs should be omitted when a node has only a left child or no children. However, when a node has a right child but no left child, an empty pair of parentheses must precede the representation of the right child to reflect the tree\\'s structure accurately. **Example 1:** ``` **Input:** root = [1,2,3,4] **Output:** \"1(2(4))(3)\" **Explanation:** Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the empty parenthesis pairs. And it will be \"1(2(4))(3)\". ``` **Example 2:** ``` **Input:** root = [1,2,3,null,4] **Output:** \"1(2()(4))(3)\" **Explanation:** Almost the same as the first example, except the `()` after `2` is necessary to indicate the absence of a left child for `2` and the presence of a right child. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-1000 <= Node.val <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4]', 'output': '\"1(2(4))(3)\" Explanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the empty parenthesis pairs. And it will be \"1(2(4))(3)\".'}, {'label': 'Example 2', 'input': 'root = [1,2,3,null,4]', 'output': '\"1(2()(4))(3)\" Explanation: Almost the same as the first example, except the () after 2 is necessary to indicate the absence of a left child for 2 and the presence of a right child. Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -1000 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec tree2str(root :: TreeNode.t | nil) :: String.t\\n  def tree2str(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec tree2str(Root :: #tree_node{} | null) -> unicode:unicode_binary().\\ntree2str(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def tree2str(root: TreeNode): String = {\\n        \\n    }\\n}'}\n",
            "Done!489\n",
            "can-place-flowers 605\n",
            "{'id': 605, 'name': 'can-place-flowers', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/can-place-flowers/', 'task_description': \"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in **adjacent** plots. Given an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return `true` _if_ `n` _new flowers can be planted in the_ `flowerbed` _without violating the no-adjacent-flowers rule and_ `false` _otherwise_. **Example 1:** ``` **Input:** flowerbed = [1,0,0,0,1], n = 1 **Output:** true ``` **Example 2:** ``` **Input:** flowerbed = [1,0,0,0,1], n = 2 **Output:** false ``` **Constraints:** `1 <= flowerbed.length <= 2 * 104` `flowerbed[i]` is `0` or `1`. There are no two adjacent flowers in `flowerbed`. `0 <= n <= flowerbed.length`\", 'test_case': [{'label': 'Example 1', 'input': 'flowerbed = [1,0,0,0,1], n = 1', 'output': 'true'}, {'label': 'Example 2', 'input': 'flowerbed = [1,0,0,0,1], n = 2', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_place_flowers(flowerbed :: [integer], n :: integer) :: boolean\\n  def can_place_flowers(flowerbed, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_place_flowers(Flowerbed :: [integer()], N :: integer()) -> boolean().\\ncan_place_flowers(Flowerbed, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def canPlaceFlowers(flowerbed: Array[Int], n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!490\n",
            "non-negative-integers-without-consecutive-ones 600\n",
            "{'id': 600, 'name': 'non-negative-integers-without-consecutive-ones', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/', 'task_description': 'Given a positive integer `n`, return the number of the integers in the range `[0, n]` whose binary representations **do not** contain consecutive ones. **Example 1:** ``` **Input:** n = 5 **Output:** 5 **Explanation:** Here are the non-negative integers <= 5 with their corresponding binary representations: 0 : 0 1 : 1 2 : 10 3 : 11 4 : 100 5 : 101 Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. ``` **Example 2:** ``` **Input:** n = 1 **Output:** 2 ``` **Example 3:** ``` **Input:** n = 2 **Output:** 3 ``` **Constraints:** `1 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 5', 'output': '5 Explanation: Here are the non-negative integers <= 5 with their corresponding binary representations:\\n0 : 0\\n1 : 1\\n2 : 10\\n3 : 11\\n4 : 100\\n5 : 101\\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule.'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '2'}, {'label': 'Example 3', 'input': 'n = 2', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_integers(n :: integer) :: integer\\n  def find_integers(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_integers(N :: integer()) -> integer().\\nfind_integers(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def findIntegers(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!491\n",
            "minimum-index-sum-of-two-lists 599\n",
            "{'id': 599, 'name': 'minimum-index-sum-of-two-lists', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/minimum-index-sum-of-two-lists/', 'task_description': 'Given two arrays of strings `list1` and `list2`, find the **common strings with the least index sum**. A **common string** is a string that appeared in both `list1` and `list2`. A **common string with the least index sum** is a common string such that if it appeared at `list1[i]` and `list2[j]` then `i + j` should be the minimum value among all the other **common strings**. Return _all the **common strings with the least index sum**_. Return the answer in **any order**. **Example 1:** ``` **Input:** list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"] **Output:** [\"Shogun\"] **Explanation:** The only common string is \"Shogun\". ``` **Example 2:** ``` **Input:** list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"] **Output:** [\"Shogun\"] **Explanation:** The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1. ``` **Example 3:** ``` **Input:** list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"] **Output:** [\"sad\",\"happy\"] **Explanation:** There are three common strings: \"happy\" with index sum = (0 + 1) = 1. \"sad\" with index sum = (1 + 0) = 1. \"good\" with index sum = (2 + 2) = 4. The strings with the least index sum are \"sad\" and \"happy\". ``` **Constraints:** `1 <= list1.length, list2.length <= 1000` `1 <= list1[i].length, list2[i].length <= 30` `list1[i]` and `list2[i]` consist of spaces `\\' \\'` and English letters. All the strings of `list1` are **unique**. All the strings of `list2` are **unique**. There is at least a common string between `list1` and `list2`.', 'test_case': [{'label': 'Example 1', 'input': 'list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]', 'output': '[\"Shogun\"] Explanation: The only common string is \"Shogun\".'}, {'label': 'Example 2', 'input': 'list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]', 'output': '[\"Shogun\"] Explanation: The common string with the least index sum is \"Shogun\" with index sum = (0 + 1) = 1.'}, {'label': 'Example 3', 'input': 'list1 = [\"happy\",\"sad\",\"good\"], list2 = [\"sad\",\"happy\",\"good\"]', 'output': '[\"sad\",\"happy\"] Explanation: There are three common strings:\\n\"happy\" with index sum = (0 + 1) = 1.\\n\"sad\" with index sum = (1 + 0) = 1.\\n\"good\" with index sum = (2 + 2) = 4.\\nThe strings with the least index sum are \"sad\" and \"happy\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_restaurant(list1 :: [String.t], list2 :: [String.t]) :: [String.t]\\n  def find_restaurant(list1, list2) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_restaurant(List1 :: [unicode:unicode_binary()], List2 :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nfind_restaurant(List1, List2) ->\\n  .', 'scala_template': 'object Solution {\\n    def findRestaurant(list1: Array[String], list2: Array[String]): Array[String] = {\\n        \\n    }\\n}'}\n",
            "Done!492\n",
            "range-addition-ii 598\n",
            "{'id': 598, 'name': 'range-addition-ii', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/range-addition-ii/', 'task_description': \"You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`. Count and return _the number of maximum integers in the matrix after performing all the operations_. **Example 1:** ``` **Input:** m = 3, n = 3, ops = [[2,2],[3,3]] **Output:** 4 **Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4. ``` **Example 2:** ``` **Input:** m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]] **Output:** 4 ``` **Example 3:** ``` **Input:** m = 3, n = 3, ops = [] **Output:** 9 ``` **Constraints:** `1 <= m, n <= 4 * 104` `0 <= ops.length <= 104` `ops[i].length == 2` `1 <= ai <= m` `1 <= bi <= n`\", 'test_case': [{'label': 'Example 1', 'input': 'm = 3, n = 3, ops = [[2,2],[3,3]]', 'output': '4 Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.'}, {'label': 'Example 2', 'input': 'm = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]', 'output': '4'}, {'label': 'Example 3', 'input': 'm = 3, n = 3, ops = []', 'output': '9'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_count(m :: integer, n :: integer, ops :: [[integer]]) :: integer\\n  def max_count(m, n, ops) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_count(M :: integer(), N :: integer(), Ops :: [[integer()]]) -> integer().\\nmax_count(M, N, Ops) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxCount(m: Int, n: Int, ops: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!493\n",
            "longest-harmonious-subsequence 594\n",
            "{'id': 594, 'name': 'longest-harmonious-subsequence', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/longest-harmonious-subsequence/', 'task_description': 'We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly `1`. Given an integer array `nums`, return the length of its longest harmonious subsequence among all its possible subsequences. **Example 1:** **Input:** nums = [1,3,2,2,5,2,3,7] **Output:** 5 **Explanation:** The longest harmonious subsequence is `[3,2,2,2,3]`. **Example 2:** **Input:** nums = [1,2,3,4] **Output:** 2 **Explanation:** The longest harmonious subsequences are `[1,2]`, `[2,3]`, and `[3,4]`, all of which have a length of 2. **Example 3:** **Input:** nums = [1,1,1,1] **Output:** 0 **Explanation:** No harmonic subsequence exists. **Constraints:** `1 <= nums.length <= 2 * 104` `-109 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,2,2,5,2,3,7]', 'output': '5 Explanation: The longest harmonious subsequence is [3,2,2,2,3] .'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4]', 'output': '2 Explanation: The longest harmonious subsequences are [1,2] , [2,3] , and [3,4] , all of which have a length of 2.'}, {'label': 'Example 3', 'input': 'nums = [1,1,1,1]', 'output': '0 Explanation: No harmonic subsequence exists.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_lhs(nums :: [integer]) :: integer\\n  def find_lhs(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_lhs(Nums :: [integer()]) -> integer().\\nfind_lhs(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findLHS(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!494\n",
            "valid-square 593\n",
            "{'id': 593, 'name': 'valid-square', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/valid-square/', 'task_description': 'Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` _if the four points construct a square_. The coordinate of a point `pi` is represented as `[xi, yi]`. The input is **not** given in any order. A **valid square** has four equal sides with positive length and four equal angles (90-degree angles). **Example 1:** ``` **Input:** p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1] **Output:** true ``` **Example 2:** ``` **Input:** p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12] **Output:** false ``` **Example 3:** ``` **Input:** p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1] **Output:** true ``` **Constraints:** `p1.length == p2.length == p3.length == p4.length == 2` `-104 <= xi, yi <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]', 'output': 'true'}, {'label': 'Example 2', 'input': 'p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]', 'output': 'false'}, {'label': 'Example 3', 'input': 'p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]', 'output': 'true Constraints: p1.length == p2.length == p3.length == p4.length == 2 -10 4 <= x i , y i <= 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec valid_square(p1 :: [integer], p2 :: [integer], p3 :: [integer], p4 :: [integer]) :: boolean\\n  def valid_square(p1, p2, p3, p4) do\\n    \\n  end\\nend', 'erlang_template': '-spec valid_square(P1 :: [integer()], P2 :: [integer()], P3 :: [integer()], P4 :: [integer()]) -> boolean().\\nvalid_square(P1, P2, P3, P4) ->\\n  .', 'scala_template': 'object Solution {\\n    def validSquare(p1: Array[Int], p2: Array[Int], p3: Array[Int], p4: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!495\n",
            "fraction-addition-and-subtraction 592\n",
            "{'id': 592, 'name': 'fraction-addition-and-subtraction', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/fraction-addition-and-subtraction/', 'task_description': 'Given a string `expression` representing an expression of fraction addition and subtraction, return the calculation result in string format. The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator `1`. So in this case, `2` should be converted to `2/1`. **Example 1:** ``` **Input:** expression = \"-1/2+1/2\" **Output:** \"0/1\" ``` **Example 2:** ``` **Input:** expression = \"-1/2+1/2+1/3\" **Output:** \"1/3\" ``` **Example 3:** ``` **Input:** expression = \"1/3-1/2\" **Output:** \"-1/6\" ``` **Constraints:** The input string only contains `\\'0\\'` to `\\'9\\'`, `\\'/\\'`, `\\'+\\'` and `\\'-\\'`. So does the output. Each fraction (input and output) has the format `±numerator/denominator`. If the first input fraction or the output is positive, then `\\'+\\'` will be omitted. The input only contains valid **irreducible fractions**, where the **numerator** and **denominator** of each fraction will always be in the range `[1, 10]`. If the denominator is `1`, it means this fraction is actually an integer in a fraction format defined above. The number of given fractions will be in the range `[1, 10]`. The numerator and denominator of the **final result** are guaranteed to be valid and in the range of **32-bit** int.', 'test_case': [{'label': 'Example 1', 'input': 'expression = \"-1/2+1/2\"', 'output': '\"0/1\"'}, {'label': 'Example 2', 'input': 'expression = \"-1/2+1/2+1/3\"', 'output': '\"1/3\"'}, {'label': 'Example 3', 'input': 'expression = \"1/3-1/2\"', 'output': '\"-1/6\" Constraints: The input string only contains \\'0\\' to \\'9\\' , \\'/\\' , \\'+\\' and \\'-\\' . So does the output. Each fraction (input and output) has the format ±numerator/denominator . If the first input fraction or the output is positive, then \\'+\\' will be omitted. The input only contains valid irreducible fractions , where the numerator and denominator of each fraction will always be in the range [1, 10] . If the denominator is 1 , it means this fraction is actually an integer in a fraction format defined above. The number of given fractions will be in the range [1, 10] . The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.'}], 'elixir_template': 'defmodule Solution do\\n  @spec fraction_addition(expression :: String.t) :: String.t\\n  def fraction_addition(expression) do\\n    \\n  end\\nend', 'erlang_template': '-spec fraction_addition(Expression :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nfraction_addition(Expression) ->\\n  .', 'scala_template': 'object Solution {\\n    def fractionAddition(expression: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!496\n",
            "tag-validator 591\n",
            "{'id': 591, 'name': 'tag-validator', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/tag-validator/', 'task_description': 'Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold: The code must be wrapped in a valid closed tag. Otherwise, the code is invalid. A closed tag (not necessarily valid) has exactly the following format : `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid. A valid `TAG_NAME` only contain upper-case letters, and has length in range [1,9]. Otherwise, the `TAG_NAME` is invalid. A valid `TAG_CONTENT` may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the `TAG_CONTENT` is invalid. A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested. A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as TAG_NAME (not necessarily valid). The cdata has the following format : `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the first subsequent `]]>`. `CDATA_CONTENT` may contain any characters. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters. **Example 1:** ``` **Input:** code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\" **Output:** true **Explanation:** The code is wrapped in a closed tag : <DIV> and </DIV>. The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. Although CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag. So TAG_CONTENT is valid, and then the code is valid. Thus return true. ``` **Example 2:** ``` **Input:** code = \"<DIV>>> ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\" **Output:** true **Explanation:** We first separate the code into : start_tag|tag_content|end_tag. start_tag -> \"<DIV>\" end_tag -> \"</DIV>\" tag_content could also be separated into : text1|cdata|text2. text1 -> \">> ![cdata[]] \" cdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\" text2 -> \"]]>>]\" The reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6. The reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7. ``` **Example 3:** ``` **Input:** code = \"<A> <B> </A> </B>\" **Output:** false **Explanation:** Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa. ``` **Constraints:** `1 <= code.length <= 500` `code` consists of English letters, digits, `\\'<\\'`, `\\'>\\'`, `\\'/\\'`, `\\'!\\'`, `\\'[\\'`, `\\']\\'`, `\\'.\\'`, and `\\' \\'`.', 'test_case': [{'label': 'Example 1', 'input': 'code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"', 'output': 'true Explanation: The code is wrapped in a closed tag : <DIV> and </DIV>. \\nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \\nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.'}, {'label': 'Example 2', 'input': 'code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"', 'output': 'true Explanation: We first separate the code into : start_tag|tag_content|end_tag.\\nstart_tag -> \"<DIV>\" end_tag -> \"</DIV>\" tag_content could also be separated into : text1|cdata|text2.\\ntext1 -> \">>  ![cdata[]] \" cdata -> \"<![CDATA[<div>]>]]>\" , where the CDATA_CONTENT is \"<div>]>\" text2 -> \"]]>>]\" The reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.'}, {'label': 'Example 3', 'input': 'code = \"<A>  <B> </A>   </B>\"', 'output': 'false Explanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_valid(code :: String.t) :: boolean\\n  def is_valid(code) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_valid(Code :: unicode:unicode_binary()) -> boolean().\\nis_valid(Code) ->\\n  .', 'scala_template': 'object Solution {\\n    def isValid(code: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!497\n",
            "erect-the-fence 587\n",
            "{'id': 587, 'name': 'erect-the-fence', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/erect-the-fence/', 'task_description': 'You are given an array `trees` where `trees[i] = [xi, yi]` represents the location of a tree in the garden. Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if **all the trees are enclosed**. Return _the coordinates of trees that are exactly located on the fence perimeter_. You may return the answer in **any order**. **Example 1:** ``` **Input:** trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]] **Output:** [[1,1],[2,0],[4,2],[3,3],[2,4]] **Explanation:** All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence. ``` **Example 2:** ``` **Input:** trees = [[1,2],[2,2],[4,2]] **Output:** [[4,2],[2,2],[1,2]] **Explanation:** The fence forms a line that passes through all the trees. ``` **Constraints:** `1 <= trees.length <= 3000` `trees[i].length == 2` `0 <= xi, yi <= 100` All the given positions are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]', 'output': '[[1,1],[2,0],[4,2],[3,3],[2,4]] Explanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.'}, {'label': 'Example 2', 'input': 'trees = [[1,2],[2,2],[4,2]]', 'output': '[[4,2],[2,2],[1,2]] Explanation: The fence forms a line that passes through all the trees.'}], 'elixir_template': 'defmodule Solution do\\n  @spec outer_trees(trees :: [[integer]]) :: [[integer]]\\n  def outer_trees(trees) do\\n    \\n  end\\nend', 'erlang_template': '-spec outer_trees(Trees :: [[integer()]]) -> [[integer()]].\\nouter_trees(Trees) ->\\n  .', 'scala_template': 'object Solution {\\n    def outerTrees(trees: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!498\n",
            "delete-operation-for-two-strings 583\n",
            "{'id': 583, 'name': 'delete-operation-for-two-strings', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/delete-operation-for-two-strings/', 'task_description': 'Given two strings `word1` and `word2`, return _the minimum number of **steps** required to make_ `word1` _and_ `word2` _the same_. In one **step**, you can delete exactly one character in either string. **Example 1:** ``` **Input:** word1 = \"sea\", word2 = \"eat\" **Output:** 2 **Explanation:** You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\". ``` **Example 2:** ``` **Input:** word1 = \"leetcode\", word2 = \"etco\" **Output:** 4 ``` **Constraints:** `1 <= word1.length, word2.length <= 500` `word1` and `word2` consist of only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'word1 = \"sea\", word2 = \"eat\"', 'output': '2 Explanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".'}, {'label': 'Example 2', 'input': 'word1 = \"leetcode\", word2 = \"etco\"', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_distance(word1 :: String.t, word2 :: String.t) :: integer\\n  def min_distance(word1, word2) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_distance(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\\nmin_distance(Word1, Word2) ->\\n  .', 'scala_template': 'object Solution {\\n    def minDistance(word1: String, word2: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!499\n",
            "shortest-unsorted-continuous-subarray 581\n",
            "{'id': 581, 'name': 'shortest-unsorted-continuous-subarray', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/shortest-unsorted-continuous-subarray/', 'task_description': 'Given an integer array `nums`, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order. Return _the shortest such subarray and output its length_. **Example 1:** ``` **Input:** nums = [2,6,4,8,10,9,15] **Output:** 5 **Explanation:** You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order. ``` **Example 2:** ``` **Input:** nums = [1,2,3,4] **Output:** 0 ``` **Example 3:** ``` **Input:** nums = [1] **Output:** 0 ``` **Constraints:** `1 <= nums.length <= 104` `-105 <= nums[i] <= 105` **Follow up:** Can you solve it in `O(n)` time complexity?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,6,4,8,10,9,15]', 'output': '5 Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4]', 'output': '0'}, {'label': 'Example 3', 'input': 'nums = [1]', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_unsorted_subarray(nums :: [integer]) :: integer\\n  def find_unsorted_subarray(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_unsorted_subarray(Nums :: [integer()]) -> integer().\\nfind_unsorted_subarray(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findUnsortedSubarray(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!500\n",
            "out-of-boundary-paths 576\n",
            "{'id': 576, 'name': 'out-of-boundary-paths', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/out-of-boundary-paths/', 'task_description': 'There is an `m x n` grid with a ball. The ball is initially at the position `[startRow, startColumn]`. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply **at most** `maxMove` moves to the ball. Given the five integers `m`, `n`, `maxMove`, `startRow`, `startColumn`, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it **modulo** `109 + 7`. **Example 1:** ``` **Input:** m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0 **Output:** 6 ``` **Example 2:** ``` **Input:** m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1 **Output:** 12 ``` **Constraints:** `1 <= m, n <= 50` `0 <= maxMove <= 50` `0 <= startRow < m` `0 <= startColumn < n`', 'test_case': [{'label': 'Example 1', 'input': 'm = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0', 'output': '6'}, {'label': 'Example 2', 'input': 'm = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1', 'output': '12'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_paths(m :: integer, n :: integer, max_move :: integer, start_row :: integer, start_column :: integer) :: integer\\n  def find_paths(m, n, max_move, start_row, start_column) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_paths(M :: integer(), N :: integer(), MaxMove :: integer(), StartRow :: integer(), StartColumn :: integer()) -> integer().\\nfind_paths(M, N, MaxMove, StartRow, StartColumn) ->\\n  .', 'scala_template': 'object Solution {\\n    def findPaths(m: Int, n: Int, maxMove: Int, startRow: Int, startColumn: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!501\n",
            "distribute-candies 575\n",
            "{'id': 575, 'name': 'distribute-candies', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/distribute-candies/', 'task_description': \"Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor. The doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. Given the integer array `candyType` of length `n`, return _the **maximum** number of different types of candies she can eat if she only eats _`n / 2`_ of them_. **Example 1:** ``` **Input:** candyType = [1,1,2,2,3,3] **Output:** 3 **Explanation:** Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type. ``` **Example 2:** ``` **Input:** candyType = [1,1,2,3] **Output:** 2 **Explanation:** Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types. ``` **Example 3:** ``` **Input:** candyType = [6,6,6,6] **Output:** 1 **Explanation:** Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type. ``` **Constraints:** `n == candyType.length` `2 <= n <= 104` `n` is even. `-105 <= candyType[i] <= 105`\", 'test_case': [{'label': 'Example 1', 'input': 'candyType = [1,1,2,2,3,3]', 'output': '3 Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.'}, {'label': 'Example 2', 'input': 'candyType = [1,1,2,3]', 'output': '2 Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.'}, {'label': 'Example 3', 'input': 'candyType = [6,6,6,6]', 'output': '1 Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type. Constraints: n == candyType.length 2 <= n <= 10 4 n is even. -10 5 <= candyType[i] <= 10 5'}], 'elixir_template': 'defmodule Solution do\\n  @spec distribute_candies(candy_type :: [integer]) :: integer\\n  def distribute_candies(candy_type) do\\n    \\n  end\\nend', 'erlang_template': '-spec distribute_candies(CandyType :: [integer()]) -> integer().\\ndistribute_candies(CandyType) ->\\n  .', 'scala_template': 'object Solution {\\n    def distributeCandies(candyType: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!502\n",
            "subtree-of-another-tree 572\n",
            "{'id': 572, 'name': 'subtree-of-another-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/subtree-of-another-tree/', 'task_description': \"Given the roots of two binary trees `root` and `subRoot`, return `true` if there is a subtree of `root` with the same structure and node values of` subRoot` and `false` otherwise. A subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself. **Example 1:** ``` **Input:** root = [3,4,5,1,2], subRoot = [4,1,2] **Output:** true ``` **Example 2:** ``` **Input:** root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2] **Output:** false ``` **Constraints:** The number of nodes in the `root` tree is in the range `[1, 2000]`. The number of nodes in the `subRoot` tree is in the range `[1, 1000]`. `-104 <= root.val <= 104` `-104 <= subRoot.val <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [3,4,5,1,2], subRoot = [4,1,2]', 'output': 'true'}, {'label': 'Example 2', 'input': 'root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]', 'output': 'false Constraints: The number of nodes in the root tree is in the range [1, 2000] . The number of nodes in the subRoot tree is in the range [1, 1000] . -10 4 <= root.val <= 10 4 -10 4 <= subRoot.val <= 10 4'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_subtree(root :: TreeNode.t | nil, sub_root :: TreeNode.t | nil) :: boolean\\n  def is_subtree(root, sub_root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_subtree(Root :: #tree_node{} | null, SubRoot :: #tree_node{} | null) -> boolean().\\nis_subtree(Root, SubRoot) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isSubtree(root: TreeNode, subRoot: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!503\n",
            "permutation-in-string 567\n",
            "{'id': 567, 'name': 'permutation-in-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/permutation-in-string/', 'task_description': 'Given two strings `s1` and `s2`, return `true` if `s2` contains a permutation of `s1`, or `false` otherwise. In other words, return `true` if one of `s1`\\'s permutations is the substring of `s2`. **Example 1:** ``` **Input:** s1 = \"ab\", s2 = \"eidbaooo\" **Output:** true **Explanation:** s2 contains one permutation of s1 (\"ba\"). ``` **Example 2:** ``` **Input:** s1 = \"ab\", s2 = \"eidboaoo\" **Output:** false ``` **Constraints:** `1 <= s1.length, s2.length <= 104` `s1` and `s2` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's1 = \"ab\", s2 = \"eidbaooo\"', 'output': 'true Explanation: s2 contains one permutation of s1 (\"ba\").'}, {'label': 'Example 2', 'input': 's1 = \"ab\", s2 = \"eidboaoo\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec check_inclusion(s1 :: String.t, s2 :: String.t) :: boolean\\n  def check_inclusion(s1, s2) do\\n    \\n  end\\nend', 'erlang_template': '-spec check_inclusion(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\\ncheck_inclusion(S1, S2) ->\\n  .', 'scala_template': 'object Solution {\\n    def checkInclusion(s1: String, s2: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!504\n",
            "reshape-the-matrix 566\n",
            "{'id': 566, 'name': 'reshape-the-matrix', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/reshape-the-matrix/', 'task_description': 'In MATLAB, there is a handy function called `reshape` which can reshape an `m x n` matrix into a new one with a different size `r x c` keeping its original data. You are given an `m x n` matrix `mat` and two integers `r` and `c` representing the number of rows and the number of columns of the wanted reshaped matrix. The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were. If the `reshape` operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix. **Example 1:** ``` **Input:** mat = [[1,2],[3,4]], r = 1, c = 4 **Output:** [[1,2,3,4]] ``` **Example 2:** ``` **Input:** mat = [[1,2],[3,4]], r = 2, c = 4 **Output:** [[1,2],[3,4]] ``` **Constraints:** `m == mat.length` `n == mat[i].length` `1 <= m, n <= 100` `-1000 <= mat[i][j] <= 1000` `1 <= r, c <= 300`', 'test_case': [{'label': 'Example 1', 'input': 'mat = [[1,2],[3,4]], r = 1, c = 4', 'output': '[[1,2,3,4]]'}, {'label': 'Example 2', 'input': 'mat = [[1,2],[3,4]], r = 2, c = 4', 'output': '[[1,2],[3,4]] Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 100 -1000 <= mat[i][j] <= 1000 1 <= r, c <= 300'}], 'elixir_template': 'defmodule Solution do\\n  @spec matrix_reshape(mat :: [[integer]], r :: integer, c :: integer) :: [[integer]]\\n  def matrix_reshape(mat, r, c) do\\n    \\n  end\\nend', 'erlang_template': '-spec matrix_reshape(Mat :: [[integer()]], R :: integer(), C :: integer()) -> [[integer()]].\\nmatrix_reshape(Mat, R, C) ->\\n  .', 'scala_template': 'object Solution {\\n    def matrixReshape(mat: Array[Array[Int]], r: Int, c: Int): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!505\n",
            "array-nesting 565\n",
            "{'id': 565, 'name': 'array-nesting', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/array-nesting/', 'task_description': 'You are given an integer array `nums` of length `n` where `nums` is a permutation of the numbers in the range `[0, n - 1]`. You should build a set `s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... }` subjected to the following rule: The first element in `s[k]` starts with the selection of the element `nums[k]` of `index = k`. The next element in `s[k]` should be `nums[nums[k]]`, and then `nums[nums[nums[k]]]`, and so on. We stop adding right before a duplicate element occurs in `s[k]`. Return _the longest length of a set_ `s[k]`. **Example 1:** ``` **Input:** nums = [5,4,0,3,1,6,2] **Output:** 4 **Explanation:** nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2. One of the longest sets s[k]: s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0} ``` **Example 2:** ``` **Input:** nums = [0,1,2] **Output:** 1 ``` **Constraints:** `1 <= nums.length <= 105` `0 <= nums[i] < nums.length` All the values of `nums` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [5,4,0,3,1,6,2]', 'output': '4 Explanation: nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\\nOne of the longest sets s[k]:\\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}'}, {'label': 'Example 2', 'input': 'nums = [0,1,2]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec array_nesting(nums :: [integer]) :: integer\\n  def array_nesting(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec array_nesting(Nums :: [integer()]) -> integer().\\narray_nesting(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def arrayNesting(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!506\n",
            "find-the-closest-palindrome 564\n",
            "{'id': 564, 'name': 'find-the-closest-palindrome', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/find-the-closest-palindrome/', 'task_description': 'Given a string `n` representing an integer, return _the closest integer (not including itself), which is a palindrome_. If there is a tie, return _**the smaller one**_. The closest is defined as the absolute difference minimized between two integers. **Example 1:** ``` **Input:** n = \"123\" **Output:** \"121\" ``` **Example 2:** ``` **Input:** n = \"1\" **Output:** \"0\" **Explanation:** 0 and 2 are the closest palindromes but we return the smallest which is 0. ``` **Constraints:** `1 <= n.length <= 18` `n` consists of only digits. `n` does not have leading zeros. `n` is representing an integer in the range `[1, 1018 - 1]`.', 'test_case': [{'label': 'Example 1', 'input': 'n = \"123\"', 'output': '\"121\"'}, {'label': 'Example 2', 'input': 'n = \"1\"', 'output': '\"0\" Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec nearest_palindromic(n :: String.t) :: String.t\\n  def nearest_palindromic(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec nearest_palindromic(N :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nnearest_palindromic(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def nearestPalindromic(n: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!507\n",
            "binary-tree-tilt 563\n",
            "{'id': 563, 'name': 'binary-tree-tilt', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-tree-tilt/', 'task_description': \"Given the `root` of a binary tree, return _the sum of every tree node's **tilt**._ The **tilt** of a tree node is the **absolute difference** between the sum of all left subtree node **values** and all right subtree node **values**. If a node does not have a left child, then the sum of the left subtree node **values** is treated as `0`. The rule is similar if the node does not have a right child. **Example 1:** ``` **Input:** root = [1,2,3] **Output:** 1 **Explanation:** Tilt of node 2 : |0-0| = 0 (no children) Tilt of node 3 : |0-0| = 0 (no children) Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3) Sum of every tilt : 0 + 0 + 1 = 1 ``` **Example 2:** ``` **Input:** root = [4,2,9,3,5,null,7] **Output:** 15 **Explanation:** Tilt of node 3 : |0-0| = 0 (no children) Tilt of node 5 : |0-0| = 0 (no children) Tilt of node 7 : |0-0| = 0 (no children) Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5) Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7) Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16) Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15 ``` **Example 3:** ``` **Input:** root = [21,7,14,1,1,2,2,3,3] **Output:** 9 ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `-1000 <= Node.val <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3]', 'output': '1 Explanation: Tilt of node 2 : |0-0| = 0 (no children)\\nTilt of node 3 : |0-0| = 0 (no children)\\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\\nSum of every tilt : 0 + 0 + 1 = 1'}, {'label': 'Example 2', 'input': 'root = [4,2,9,3,5,null,7]', 'output': '15 Explanation: Tilt of node 3 : |0-0| = 0 (no children)\\nTilt of node 5 : |0-0| = 0 (no children)\\nTilt of node 7 : |0-0| = 0 (no children)\\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15'}, {'label': 'Example 3', 'input': 'root = [21,7,14,1,1,2,2,3,3]', 'output': '9 Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . -1000 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_tilt(root :: TreeNode.t | nil) :: integer\\n  def find_tilt(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_tilt(Root :: #tree_node{} | null) -> integer().\\nfind_tilt(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findTilt(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!508\n",
            "array-partition 561\n",
            "{'id': 561, 'name': 'array-partition', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/array-partition/', 'task_description': 'Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is **maximized**. Return_ the maximized sum_. **Example 1:** ``` **Input:** nums = [1,4,3,2] **Output:** 4 **Explanation:** All possible pairings (ignoring the ordering of elements) are: 1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3 2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3 3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4 So the maximum possible sum is 4. ``` **Example 2:** ``` **Input:** nums = [6,2,6,5,1,2] **Output:** 9 **Explanation:** The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9. ``` **Constraints:** `1 <= n <= 104` `nums.length == 2 * n` `-104 <= nums[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,4,3,2]', 'output': '4 Explanation: All possible pairings (ignoring the ordering of elements) are:\\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\\nSo the maximum possible sum is 4.'}, {'label': 'Example 2', 'input': 'nums = [6,2,6,5,1,2]', 'output': '9 Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.'}], 'elixir_template': 'defmodule Solution do\\n  @spec array_pair_sum(nums :: [integer]) :: integer\\n  def array_pair_sum(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec array_pair_sum(Nums :: [integer()]) -> integer().\\narray_pair_sum(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def arrayPairSum(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!509\n",
            "subarray-sum-equals-k 560\n",
            "{'id': 560, 'name': 'subarray-sum-equals-k', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/subarray-sum-equals-k/', 'task_description': 'Given an array of integers `nums` and an integer `k`, return _the total number of subarrays whose sum equals to_ `k`. A subarray is a contiguous **non-empty** sequence of elements within an array. **Example 1:** ``` **Input:** nums = [1,1,1], k = 2 **Output:** 2 ``` **Example 2:** ``` **Input:** nums = [1,2,3], k = 3 **Output:** 2 ``` **Constraints:** `1 <= nums.length <= 2 * 104` `-1000 <= nums[i] <= 1000` `-107 <= k <= 107`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,1], k = 2', 'output': '2'}, {'label': 'Example 2', 'input': 'nums = [1,2,3], k = 3', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec subarray_sum(nums :: [integer], k :: integer) :: integer\\n  def subarray_sum(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\\nsubarray_sum(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def subarraySum(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!510\n",
            "reverse-words-in-a-string-iii 557\n",
            "{'id': 557, 'name': 'reverse-words-in-a-string-iii', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/reverse-words-in-a-string-iii/', 'task_description': 'Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order. **Example 1:** ``` **Input:** s = \"Let\\'s take LeetCode contest\" **Output:** \"s\\'teL ekat edoCteeL tsetnoc\" ``` **Example 2:** ``` **Input:** s = \"Mr Ding\" **Output:** \"rM gniD\" ``` **Constraints:** `1 <= s.length <= 5 * 104` `s` contains printable **ASCII** characters. `s` does not contain any leading or trailing spaces. There is **at least one** word in `s`. All the words in `s` are separated by a single space.', 'test_case': [{'label': 'Example 1', 'input': 's = \"Let\\'s take LeetCode contest\"', 'output': '\"s\\'teL ekat edoCteeL tsetnoc\"'}, {'label': 'Example 2', 'input': 's = \"Mr Ding\"', 'output': '\"rM gniD\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec reverse_words(s :: String.t) :: String.t\\n  def reverse_words(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec reverse_words(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nreverse_words(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def reverseWords(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!511\n",
            "next-greater-element-iii 556\n",
            "{'id': 556, 'name': 'next-greater-element-iii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/next-greater-element-iii/', 'task_description': 'Given a positive integer `n`, find _the smallest integer which has exactly the same digits existing in the integer_ `n` _and is greater in value than_ `n`. If no such positive integer exists, return `-1`. **Note** that the returned integer should fit in **32-bit integer**, if there is a valid answer but it does not fit in **32-bit integer**, return `-1`. **Example 1:** ``` **Input:** n = 12 **Output:** 21 ``` **Example 2:** ``` **Input:** n = 21 **Output:** -1 ``` **Constraints:** `1 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 12', 'output': '21'}, {'label': 'Example 2', 'input': 'n = 21', 'output': '-1'}], 'elixir_template': 'defmodule Solution do\\n  @spec next_greater_element(n :: integer) :: integer\\n  def next_greater_element(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec next_greater_element(N :: integer()) -> integer().\\nnext_greater_element(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def nextGreaterElement(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!512\n",
            "brick-wall 554\n",
            "{'id': 554, 'name': 'brick-wall', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/brick-wall/', 'task_description': 'There is a rectangular brick wall in front of you with `n` rows of bricks. The `ith` row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same. Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. Given the 2D array `wall` that contains the information about the wall, return _the minimum number of crossed bricks after drawing such a vertical line_. **Example 1:** ``` **Input:** wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]] **Output:** 2 ``` **Example 2:** ``` **Input:** wall = [[1],[1],[1]] **Output:** 3 ``` **Constraints:** `n == wall.length` `1 <= n <= 104` `1 <= wall[i].length <= 104` `1 <= sum(wall[i].length) <= 2 * 104` `sum(wall[i])` is the same for each row `i`. `1 <= wall[i][j] <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]', 'output': '2'}, {'label': 'Example 2', 'input': 'wall = [[1],[1],[1]]', 'output': '3 Constraints: n == wall.length 1 <= n <= 10 4 1 <= wall[i].length <= 10 4 1 <= sum(wall[i].length) <= 2 * 10 4 sum(wall[i]) is the same for each row i . 1 <= wall[i][j] <= 2 31 - 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec least_bricks(wall :: [[integer]]) :: integer\\n  def least_bricks(wall) do\\n    \\n  end\\nend', 'erlang_template': '-spec least_bricks(Wall :: [[integer()]]) -> integer().\\nleast_bricks(Wall) ->\\n  .', 'scala_template': 'object Solution {\\n    def leastBricks(wall: List[List[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!513\n",
            "optimal-division 553\n",
            "{'id': 553, 'name': 'optimal-division', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/optimal-division/', 'task_description': 'You are given an integer array `nums`. The adjacent integers in `nums` will perform the float division. For example, for `nums = [2,3,4]`, we will evaluate the expression `\"2/3/4\"`. However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum. Return _the corresponding expression that has the maximum value in string format_. **Note:** your expression should not contain redundant parenthesis. **Example 1:** ``` **Input:** nums = [1000,100,10,2] **Output:** \"1000/(100/10/2)\" **Explanation:** 1000/(100/10/2) = 1000/((100/10)/2) = 200 However, the bold parenthesis in \"1000/(**(**100/10**)**/2)\" are redundant since they do not influence the operation priority. So you should return \"1000/(100/10/2)\". Other cases: 1000/(100/10)/2 = 50 1000/(100/(10/2)) = 50 1000/100/10/2 = 0.5 1000/100/(10/2) = 2 ``` **Example 2:** ``` **Input:** nums = [2,3,4] **Output:** \"2/(3/4)\" **Explanation:** (2/(3/4)) = 8/3 = 2.667 It can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667 ``` **Constraints:** `1 <= nums.length <= 10` `2 <= nums[i] <= 1000` There is only one optimal division for the given input.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1000,100,10,2]', 'output': '\"1000/(100/10/2)\" Explanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200\\nHowever, the bold parenthesis in \"1000/( ( 100/10 ) /2)\" are redundant since they do not influence the operation priority.\\nSo you should return \"1000/(100/10/2)\".\\nOther cases:\\n1000/(100/10)/2 = 50\\n1000/(100/(10/2)) = 50\\n1000/100/10/2 = 0.5\\n1000/100/(10/2) = 2'}, {'label': 'Example 2', 'input': 'nums = [2,3,4]', 'output': '\"2/(3/4)\" Explanation: (2/(3/4)) = 8/3 = 2.667\\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667'}], 'elixir_template': 'defmodule Solution do\\n  @spec optimal_division(nums :: [integer]) :: String.t\\n  def optimal_division(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec optimal_division(Nums :: [integer()]) -> unicode:unicode_binary().\\noptimal_division(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def optimalDivision(nums: Array[Int]): String = {\\n        \\n    }\\n}'}\n",
            "Done!514\n",
            "student-attendance-record-ii 552\n",
            "{'id': 552, 'name': 'student-attendance-record-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/student-attendance-record-ii/', 'task_description': 'An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters: `\\'A\\'`: Absent. `\\'L\\'`: Late. `\\'P\\'`: Present. Any student is eligible for an attendance award if they meet **both** of the following criteria: The student was absent (`\\'A\\'`) for **strictly** fewer than 2 days **total**. The student was **never** late (`\\'L\\'`) for 3 or more **consecutive** days. Given an integer `n`, return _the **number** of possible attendance records of length_ `n`_ that make a student eligible for an attendance award. The answer may be very large, so return it **modulo** _`109 + 7`. **Example 1:** ``` **Input:** n = 2 **Output:** 8 **Explanation:** There are 8 records with length 2 that are eligible for an award: \"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\" Only \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2). ``` **Example 2:** ``` **Input:** n = 1 **Output:** 3 ``` **Example 3:** ``` **Input:** n = 10101 **Output:** 183236316 ``` **Constraints:** `1 <= n <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '8 Explanation: There are 8 records with length 2 that are eligible for an award:\\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '3'}, {'label': 'Example 3', 'input': 'n = 10101', 'output': '183236316'}], 'elixir_template': 'defmodule Solution do\\n  @spec check_record(n :: integer) :: integer\\n  def check_record(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec check_record(N :: integer()) -> integer().\\ncheck_record(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def checkRecord(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!515\n",
            "student-attendance-record-i 551\n",
            "{'id': 551, 'name': 'student-attendance-record-i', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/student-attendance-record-i/', 'task_description': 'You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters: `\\'A\\'`: Absent. `\\'L\\'`: Late. `\\'P\\'`: Present. The student is eligible for an attendance award if they meet **both** of the following criteria: The student was absent (`\\'A\\'`) for **strictly** fewer than 2 days **total**. The student was **never** late (`\\'L\\'`) for 3 or more **consecutive** days. Return `true`_ if the student is eligible for an attendance award, or _`false`_ otherwise_. **Example 1:** ``` **Input:** s = \"PPALLP\" **Output:** true **Explanation:** The student has fewer than 2 absences and was never late 3 or more consecutive days. ``` **Example 2:** ``` **Input:** s = \"PPALLL\" **Output:** false **Explanation:** The student was late 3 consecutive days in the last 3 days, so is not eligible for the award. ``` **Constraints:** `1 <= s.length <= 1000` `s[i]` is either `\\'A\\'`, `\\'L\\'`, or `\\'P\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"PPALLP\"', 'output': 'true Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.'}, {'label': 'Example 2', 'input': 's = \"PPALLL\"', 'output': 'false Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.'}], 'elixir_template': 'defmodule Solution do\\n  @spec check_record(s :: String.t) :: boolean\\n  def check_record(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec check_record(S :: unicode:unicode_binary()) -> boolean().\\ncheck_record(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def checkRecord(s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!516\n",
            "number-of-provinces 547\n",
            "{'id': 547, 'name': 'number-of-provinces', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/number-of-provinces/', 'task_description': 'There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`. A **province** is a group of directly or indirectly connected cities and no other cities outside of the group. You are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise. Return _the total number of **provinces**_. **Example 1:** ``` **Input:** isConnected = [[1,1,0],[1,1,0],[0,0,1]] **Output:** 2 ``` **Example 2:** ``` **Input:** isConnected = [[1,0,0],[0,1,0],[0,0,1]] **Output:** 3 ``` **Constraints:** `1 <= n <= 200` `n == isConnected.length` `n == isConnected[i].length` `isConnected[i][j]` is `1` or `0`. `isConnected[i][i] == 1` `isConnected[i][j] == isConnected[j][i]`', 'test_case': [{'label': 'Example 1', 'input': 'isConnected = [[1,1,0],[1,1,0],[0,0,1]]', 'output': '2'}, {'label': 'Example 2', 'input': 'isConnected = [[1,0,0],[0,1,0],[0,0,1]]', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_circle_num(is_connected :: [[integer]]) :: integer\\n  def find_circle_num(is_connected) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_circle_num(IsConnected :: [[integer()]]) -> integer().\\nfind_circle_num(IsConnected) ->\\n  .', 'scala_template': 'object Solution {\\n    def findCircleNum(isConnected: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!517\n",
            "remove-boxes 546\n",
            "{'id': 546, 'name': 'remove-boxes', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/remove-boxes/', 'task_description': 'You are given several `boxes` with different colors represented by different positive numbers. You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points. Return _the maximum points you can get_. **Example 1:** ``` **Input:** boxes = [1,3,2,2,2,3,4,3,1] **Output:** 23 **Explanation:** [1, 3, 2, 2, 2, 3, 4, 3, 1] ----> [1, 3, 3, 4, 3, 1] (3*3=9 points) ----> [1, 3, 3, 3, 1] (1*1=1 points) ----> [1, 1] (3*3=9 points) ----> [] (2*2=4 points) ``` **Example 2:** ``` **Input:** boxes = [1,1,1] **Output:** 9 ``` **Example 3:** ``` **Input:** boxes = [1] **Output:** 1 ``` **Constraints:** `1 <= boxes.length <= 100` `1 <= boxes[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'boxes = [1,3,2,2,2,3,4,3,1]', 'output': '23 Explanation: [1, 3, 2, 2, 2, 3, 4, 3, 1] \\n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \\n----> [1, 3, 3, 3, 1] (1*1=1 points) \\n----> [1, 1] (3*3=9 points) \\n----> [] (2*2=4 points)'}, {'label': 'Example 2', 'input': 'boxes = [1,1,1]', 'output': '9'}, {'label': 'Example 3', 'input': 'boxes = [1]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_boxes(boxes :: [integer]) :: integer\\n  def remove_boxes(boxes) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_boxes(Boxes :: [integer()]) -> integer().\\nremove_boxes(Boxes) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeBoxes(boxes: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!518\n",
            "diameter-of-binary-tree 543\n",
            "{'id': 543, 'name': 'diameter-of-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/diameter-of-binary-tree/', 'task_description': 'Given the `root` of a binary tree, return _the length of the **diameter** of the tree_. The **diameter** of a binary tree is the **length** of the longest path between any two nodes in a tree. This path may or may not pass through the `root`. The **length** of a path between two nodes is represented by the number of edges between them. **Example 1:** ``` **Input:** root = [1,2,3,4,5] **Output:** 3 **Explanation:** 3 is the length of the path [4,2,1,3] or [5,2,1,3]. ``` **Example 2:** ``` **Input:** root = [1,2] **Output:** 1 ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-100 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,5]', 'output': '3 Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].'}, {'label': 'Example 2', 'input': 'root = [1,2]', 'output': '1 Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -100 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec diameter_of_binary_tree(root :: TreeNode.t | nil) :: integer\\n  def diameter_of_binary_tree(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec diameter_of_binary_tree(Root :: #tree_node{} | null) -> integer().\\ndiameter_of_binary_tree(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def diameterOfBinaryTree(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!519\n",
            "01-matrix 542\n",
            "{'id': 542, 'name': '01-matrix', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/01-matrix/', 'task_description': 'Given an `m x n` binary matrix `mat`, return _the distance of the nearest _`0`_ for each cell_. The distance between two adjacent cells is `1`. **Example 1:** ``` **Input:** mat = [[0,0,0],[0,1,0],[0,0,0]] **Output:** [[0,0,0],[0,1,0],[0,0,0]] ``` **Example 2:** ``` **Input:** mat = [[0,0,0],[0,1,0],[1,1,1]] **Output:** [[0,0,0],[0,1,0],[1,2,1]] ``` **Constraints:** `m == mat.length` `n == mat[i].length` `1 <= m, n <= 104` `1 <= m * n <= 104` `mat[i][j]` is either `0` or `1`. There is at least one `0` in `mat`.', 'test_case': [{'label': 'Example 1', 'input': 'mat = [[0,0,0],[0,1,0],[0,0,0]]', 'output': '[[0,0,0],[0,1,0],[0,0,0]]'}, {'label': 'Example 2', 'input': 'mat = [[0,0,0],[0,1,0],[1,1,1]]', 'output': '[[0,0,0],[0,1,0],[1,2,1]] Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 10 4 1 <= m * n <= 10 4 mat[i][j] is either 0 or 1 . There is at least one 0 in mat .'}], 'elixir_template': 'defmodule Solution do\\n  @spec update_matrix(mat :: [[integer]]) :: [[integer]]\\n  def update_matrix(mat) do\\n    \\n  end\\nend', 'erlang_template': '-spec update_matrix(Mat :: [[integer()]]) -> [[integer()]].\\nupdate_matrix(Mat) ->\\n  .', 'scala_template': 'object Solution {\\n    def updateMatrix(mat: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!520\n",
            "reverse-string-ii 541\n",
            "{'id': 541, 'name': 'reverse-string-ii', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/reverse-string-ii/', 'task_description': 'Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string. If there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original. **Example 1:** ``` **Input:** s = \"abcdefg\", k = 2 **Output:** \"bacdfeg\" ``` **Example 2:** ``` **Input:** s = \"abcd\", k = 2 **Output:** \"bacd\" ``` **Constraints:** `1 <= s.length <= 104` `s` consists of only lowercase English letters. `1 <= k <= 104`', 'test_case': [{'label': 'Example 1', 'input': 's = \"abcdefg\", k = 2', 'output': '\"bacdfeg\"'}, {'label': 'Example 2', 'input': 's = \"abcd\", k = 2', 'output': '\"bacd\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec reverse_str(s :: String.t, k :: integer) :: String.t\\n  def reverse_str(s, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec reverse_str(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\\nreverse_str(S, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def reverseStr(s: String, k: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!521\n",
            "single-element-in-a-sorted-array 540\n",
            "{'id': 540, 'name': 'single-element-in-a-sorted-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/single-element-in-a-sorted-array/', 'task_description': 'You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Return _the single element that appears only once_. Your solution must run in `O(log n)` time and `O(1)` space. **Example 1:** ``` **Input:** nums = [1,1,2,3,3,4,4,8,8] **Output:** 2 ``` **Example 2:** ``` **Input:** nums = [3,3,7,7,10,11,11] **Output:** 10 ``` **Constraints:** `1 <= nums.length <= 105` `0 <= nums[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,2,3,3,4,4,8,8]', 'output': '2'}, {'label': 'Example 2', 'input': 'nums = [3,3,7,7,10,11,11]', 'output': '10'}], 'elixir_template': 'defmodule Solution do\\n  @spec single_non_duplicate(nums :: [integer]) :: integer\\n  def single_non_duplicate(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec single_non_duplicate(Nums :: [integer()]) -> integer().\\nsingle_non_duplicate(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def singleNonDuplicate(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!522\n",
            "minimum-time-difference 539\n",
            "{'id': 539, 'name': 'minimum-time-difference', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-time-difference/', 'task_description': 'Given a list of 24-hour clock time points in **\"HH:MM\"** format, return _the minimum minutes difference between any two time-points in the list_. **Example 1:** ``` **Input:** timePoints = [\"23:59\",\"00:00\"] **Output:** 1 ``` **Example 2:** ``` **Input:** timePoints = [\"00:00\",\"23:59\",\"00:00\"] **Output:** 0 ``` **Constraints:** `2 <= timePoints.length <= 2 * 104` `timePoints[i]` is in the format **\"HH:MM\"**.', 'test_case': [{'label': 'Example 1', 'input': 'timePoints = [\"23:59\",\"00:00\"]', 'output': '1'}, {'label': 'Example 2', 'input': 'timePoints = [\"00:00\",\"23:59\",\"00:00\"]', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_min_difference(time_points :: [String.t]) :: integer\\n  def find_min_difference(time_points) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_min_difference(TimePoints :: [unicode:unicode_binary()]) -> integer().\\nfind_min_difference(TimePoints) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMinDifference(timePoints: List[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!523\n",
            "convert-bst-to-greater-tree 538\n",
            "{'id': 538, 'name': 'convert-bst-to-greater-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/convert-bst-to-greater-tree/', 'task_description': \"Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. As a reminder, a _binary search tree_ is a tree that satisfies these constraints: The left subtree of a node contains only nodes with keys **less than** the node's key. The right subtree of a node contains only nodes with keys **greater than** the node's key. Both the left and right subtrees must also be binary search trees. **Example 1:** ``` **Input:** root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] **Output:** [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] ``` **Example 2:** ``` **Input:** root = [0,null,1] **Output:** [1,null,1] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `-104 <= Node.val <= 104` All the values in the tree are **unique**. `root` is guaranteed to be a valid binary search tree. **Note:** This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\", 'test_case': [{'label': 'Example 1', 'input': 'root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]', 'output': '[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]'}, {'label': 'Example 2', 'input': 'root = [0,null,1]', 'output': '[1,null,1] Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . -10 4 <= Node.val <= 10 4 All the values in the tree are unique . root is guaranteed to be a valid binary search tree. Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec convert_bst(root :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def convert_bst(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec convert_bst(Root :: #tree_node{} | null) -> #tree_node{} | null.\\nconvert_bst(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def convertBST(root: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!524\n",
            "complex-number-multiplication 537\n",
            "{'id': 537, 'name': 'complex-number-multiplication', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/complex-number-multiplication/', 'task_description': 'A complex number can be represented as a string on the form `\"**real**+**imaginary**i\"` where: `real` is the real part and is an integer in the range `[-100, 100]`. `imaginary` is the imaginary part and is an integer in the range `[-100, 100]`. `i2 == -1`. Given two complex numbers `num1` and `num2` as strings, return _a string of the complex number that represents their multiplications_. **Example 1:** ``` **Input:** num1 = \"1+1i\", num2 = \"1+1i\" **Output:** \"0+2i\" **Explanation:** (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i. ``` **Example 2:** ``` **Input:** num1 = \"1+-1i\", num2 = \"1+-1i\" **Output:** \"0+-2i\" **Explanation:** (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i. ``` **Constraints:** `num1` and `num2` are valid complex numbers.', 'test_case': [{'label': 'Example 1', 'input': 'num1 = \"1+1i\", num2 = \"1+1i\"', 'output': '\"0+2i\" Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.'}, {'label': 'Example 2', 'input': 'num1 = \"1+-1i\", num2 = \"1+-1i\"', 'output': '\"0+-2i\" Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i. Constraints: num1 and num2 are valid complex numbers.'}], 'elixir_template': 'defmodule Solution do\\n  @spec complex_number_multiply(num1 :: String.t, num2 :: String.t) :: String.t\\n  def complex_number_multiply(num1, num2) do\\n    \\n  end\\nend', 'erlang_template': '-spec complex_number_multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\\ncomplex_number_multiply(Num1, Num2) ->\\n  .', 'scala_template': 'object Solution {\\n    def complexNumberMultiply(num1: String, num2: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!525\n",
            "encode-and-decode-tinyurl 535\n",
            "{'id': 535, 'name': 'encode-and-decode-tinyurl', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/encode-and-decode-tinyurl/', 'task_description': 'Note: This is a companion problem to the System Design problem: Design TinyURL. TinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`. Design a class to encode a URL and decode a tiny URL. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL. Implement the `Solution` class: `Solution()` Initializes the object of the system. `String encode(String longUrl)` Returns a tiny URL for the given `longUrl`. `String decode(String shortUrl)` Returns the original long URL for the given `shortUrl`. It is guaranteed that the given `shortUrl` was encoded by the same object. **Example 1:** ``` **Input:** url = \"https://leetcode.com/problems/design-tinyurl\" **Output:** \"https://leetcode.com/problems/design-tinyurl\" **Explanation:** Solution obj = new Solution(); string tiny = obj.encode(url); // returns the encoded tiny url. string ans = obj.decode(tiny); // returns the original url after decoding it. ``` **Constraints:** `1 <= url.length <= 104` `url` is guranteed to be a valid URL.', 'test_case': [{'label': 'Example 1', 'input': 'url = \"https://leetcode.com/problems/design-tinyurl\"', 'output': '\"https://leetcode.com/problems/design-tinyurl\" Explanation: Solution obj = new Solution();\\nstring tiny = obj.encode(url); // returns the encoded tiny url.\\nstring ans = obj.decode(tiny); // returns the original url after decoding it.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'class Codec {\\n    // Encodes a URL to a shortened URL.\\n    def encode(longURL: String): String = {\\n        \\n    }\\n    \\n    // Decodes a shortened URL to its original URL.\\n    def decode(shortURL: String): String = {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * var obj = new Codec()\\n * val s = obj.encode(longURL)\\n * val ans = obj.decode(s)\\n */'}\n",
            "Done!526\n",
            "k-diff-pairs-in-an-array 532\n",
            "{'id': 532, 'name': 'k-diff-pairs-in-an-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/k-diff-pairs-in-an-array/', 'task_description': 'Given an array of integers `nums` and an integer `k`, return _the number of unique k-diff pairs in the array_. A **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true: `0 <= i, j < nums.length` `i != j` `|nums[i] - nums[j]| == k` **Notice** that `|val|` denotes the absolute value of `val`. **Example 1:** ``` **Input:** nums = [3,1,4,1,5], k = 2 **Output:** 2 **Explanation:** There are two 2-diff pairs in the array, (1, 3) and (3, 5). Although we have two 1s in the input, we should only return the number of **unique** pairs. ``` **Example 2:** ``` **Input:** nums = [1,2,3,4,5], k = 1 **Output:** 4 **Explanation:** There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5). ``` **Example 3:** ``` **Input:** nums = [1,3,1,5,4], k = 0 **Output:** 1 **Explanation:** There is one 0-diff pair in the array, (1, 1). ``` **Constraints:** `1 <= nums.length <= 104` `-107 <= nums[i] <= 107` `0 <= k <= 107`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,1,4,1,5], k = 2', 'output': '2 Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\\nAlthough we have two 1s in the input, we should only return the number of unique pairs.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4,5], k = 1', 'output': '4 Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).'}, {'label': 'Example 3', 'input': 'nums = [1,3,1,5,4], k = 0', 'output': '1 Explanation: There is one 0-diff pair in the array, (1, 1).'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_pairs(nums :: [integer], k :: integer) :: integer\\n  def find_pairs(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_pairs(Nums :: [integer()], K :: integer()) -> integer().\\nfind_pairs(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def findPairs(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!527\n",
            "minimum-absolute-difference-in-bst 530\n",
            "{'id': 530, 'name': 'minimum-absolute-difference-in-bst', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/minimum-absolute-difference-in-bst/', 'task_description': 'Given the `root` of a Binary Search Tree (BST), return _the minimum absolute difference between the values of any two different nodes in the tree_. **Example 1:** ``` **Input:** root = [4,2,6,1,3] **Output:** 1 ``` **Example 2:** ``` **Input:** root = [1,0,48,null,null,12,49] **Output:** 1 ``` **Constraints:** The number of nodes in the tree is in the range `[2, 104]`. `0 <= Node.val <= 105` **Note:** This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/', 'test_case': [{'label': 'Example 1', 'input': 'root = [4,2,6,1,3]', 'output': '1'}, {'label': 'Example 2', 'input': 'root = [1,0,48,null,null,12,49]', 'output': '1 Constraints: The number of nodes in the tree is in the range [2, 10 4 ] . 0 <= Node.val <= 10 5 Note: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec get_minimum_difference(root :: TreeNode.t | nil) :: integer\\n  def get_minimum_difference(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec get_minimum_difference(Root :: #tree_node{} | null) -> integer().\\nget_minimum_difference(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def getMinimumDifference(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!528\n",
            "minesweeper 529\n",
            "{'id': 529, 'name': 'minesweeper', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minesweeper/', 'task_description': 'Let\\'s play the minesweeper game (Wikipedia, online game)! You are given an `m x n` char matrix `board` representing the game board where: `\\'M\\'` represents an unrevealed mine, `\\'E\\'` represents an unrevealed empty square, `\\'B\\'` represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals), digit (`\\'1\\'` to `\\'8\\'`) represents how many mines are adjacent to this revealed square, and `\\'X\\'` represents a revealed mine. You are also given an integer array `click` where `click = [clickr, clickc]` represents the next click position among all the unrevealed squares (`\\'M\\'` or `\\'E\\'`). Return _the board after revealing this position according to the following rules_: If a mine `\\'M\\'` is revealed, then the game is over. You should change it to `\\'X\\'`. If an empty square `\\'E\\'` with no adjacent mines is revealed, then change it to a revealed blank `\\'B\\'` and all of its adjacent unrevealed squares should be revealed recursively. If an empty square `\\'E\\'` with at least one adjacent mine is revealed, then change it to a digit (`\\'1\\'` to `\\'8\\'`) representing the number of adjacent mines. Return the board when no more squares will be revealed. **Example 1:** ``` **Input:** board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0] **Output:** [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]] ``` **Example 2:** ``` **Input:** board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2] **Output:** [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]] ``` **Constraints:** `m == board.length` `n == board[i].length` `1 <= m, n <= 50` `board[i][j]` is either `\\'M\\'`, `\\'E\\'`, `\\'B\\'`, or a digit from `\\'1\\'` to `\\'8\\'`. `click.length == 2` `0 <= clickr < m` `0 <= clickc < n` `board[clickr][clickc]` is either `\\'M\\'` or `\\'E\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]', 'output': '[[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]'}, {'label': 'Example 2', 'input': 'board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]', 'output': '[[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]] Constraints: m == board.length n == board[i].length 1 <= m, n <= 50 board[i][j] is either \\'M\\' , \\'E\\' , \\'B\\' , or a digit from \\'1\\' to \\'8\\' . click.length == 2 0 <= click r < m 0 <= click c < n board[click r ][click c ] is either \\'M\\' or \\'E\\' .'}], 'elixir_template': 'defmodule Solution do\\n  @spec update_board(board :: [[char]], click :: [integer]) :: [[char]]\\n  def update_board(board, click) do\\n    \\n  end\\nend', 'erlang_template': '-spec update_board(Board :: [[char()]], Click :: [integer()]) -> [[char()]].\\nupdate_board(Board, Click) ->\\n  .', 'scala_template': 'object Solution {\\n    def updateBoard(board: Array[Array[Char]], click: Array[Int]): Array[Array[Char]] = {\\n        \\n    }\\n}'}\n",
            "Done!529\n",
            "swapping-nodes-in-a-linked-list 528\n",
            "{'id': 528, 'name': 'swapping-nodes-in-a-linked-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/swapping-nodes-in-a-linked-list/', 'task_description': 'You are given the `head` of a linked list, and an integer `k`. Return _the head of the linked list after **swapping** the values of the _`kth` _node from the beginning and the _`kth` _node from the end (the list is **1-indexed**)._ **Example 1:** ``` **Input:** head = [1,2,3,4,5], k = 2 **Output:** [1,4,3,2,5] ``` **Example 2:** ``` **Input:** head = [7,9,6,6,7,8,3,0,9,5], k = 5 **Output:** [7,9,6,6,8,7,3,0,9,5] ``` **Constraints:** The number of nodes in the list is `n`. `1 <= k <= n <= 105` `0 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5], k = 2', 'output': '[1,4,3,2,5]'}, {'label': 'Example 2', 'input': 'head = [7,9,6,6,7,8,3,0,9,5], k = 5', 'output': '[7,9,6,6,8,7,3,0,9,5] Constraints: The number of nodes in the list is n . 1 <= k <= n <= 10 5 0 <= Node.val <= 100'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec swap_nodes(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\\n  def swap_nodes(head, k) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec swap_nodes(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\\nswap_nodes(Head, K) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def swapNodes(head: ListNode, k: Int): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!530\n",
            "beautiful-arrangement 526\n",
            "{'id': 526, 'name': 'beautiful-arrangement', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/beautiful-arrangement/', 'task_description': 'Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (**1-indexed**) is considered a **beautiful arrangement** if for every `i` (`1 <= i <= n`), **either** of the following is true: `perm[i]` is divisible by `i`. `i` is divisible by `perm[i]`. Given an integer `n`, return _the **number** of the **beautiful arrangements** that you can construct_. **Example 1:** ``` **Input:** n = 2 **Output:** 2 Explanation: The first beautiful arrangement is [1,2]: - perm[1] = 1 is divisible by i = 1 - perm[2] = 2 is divisible by i = 2 The second beautiful arrangement is [2,1]: - perm[1] = 2 is divisible by i = 1 - i = 2 is divisible by perm[2] = 1 ``` **Example 2:** ``` **Input:** n = 1 **Output:** 1 ``` **Constraints:** `1 <= n <= 15`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '2 Explanation: The first beautiful arrangement is [1,2]:\\n    - perm[1] = 1 is divisible by i = 1\\n    - perm[2] = 2 is divisible by i = 2\\nThe second beautiful arrangement is [2,1]:\\n    - perm[1] = 2 is divisible by i = 1\\n    - i = 2 is divisible by perm[2] = 1'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_arrangement(n :: integer) :: integer\\n  def count_arrangement(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_arrangement(N :: integer()) -> integer().\\ncount_arrangement(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def countArrangement(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!531\n",
            "contiguous-array 525\n",
            "{'id': 525, 'name': 'contiguous-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/contiguous-array/', 'task_description': 'Given a binary array `nums`, return _the maximum length of a contiguous subarray with an equal number of _`0`_ and _`1`. **Example 1:** ``` **Input:** nums = [0,1] **Output:** 2 **Explanation:** [0, 1] is the longest contiguous subarray with an equal number of 0 and 1. ``` **Example 2:** ``` **Input:** nums = [0,1,0] **Output:** 2 **Explanation:** [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. ``` **Constraints:** `1 <= nums.length <= 105` `nums[i]` is either `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [0,1]', 'output': '2 Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.'}, {'label': 'Example 2', 'input': 'nums = [0,1,0]', 'output': '2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_max_length(nums :: [integer]) :: integer\\n  def find_max_length(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_max_length(Nums :: [integer()]) -> integer().\\nfind_max_length(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMaxLength(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!532\n",
            "longest-word-in-dictionary-through-deleting 524\n",
            "{'id': 524, 'name': 'longest-word-in-dictionary-through-deleting', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/', 'task_description': 'Given a string `s` and a string array `dictionary`, return _the longest string in the dictionary that can be formed by deleting some of the given string characters_. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string. **Example 1:** ``` **Input:** s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"] **Output:** \"apple\" ``` **Example 2:** ``` **Input:** s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"] **Output:** \"a\" ``` **Constraints:** `1 <= s.length <= 1000` `1 <= dictionary.length <= 1000` `1 <= dictionary[i].length <= 1000` `s` and `dictionary[i]` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]', 'output': '\"apple\"'}, {'label': 'Example 2', 'input': 's = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]', 'output': '\"a\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_longest_word(s :: String.t, dictionary :: [String.t]) :: String.t\\n  def find_longest_word(s, dictionary) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_longest_word(S :: unicode:unicode_binary(), Dictionary :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nfind_longest_word(S, Dictionary) ->\\n  .', 'scala_template': 'object Solution {\\n    def findLongestWord(s: String, dictionary: List[String]): String = {\\n        \\n    }\\n}'}\n",
            "Done!533\n",
            "continuous-subarray-sum 523\n",
            "{'id': 523, 'name': 'continuous-subarray-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/continuous-subarray-sum/', 'task_description': 'Given an integer array nums and an integer k, return `true` _if _`nums`_ has a **good subarray** or _`false`_ otherwise_. A **good subarray** is a subarray where: its length is **at least two**, and the sum of the elements of the subarray is a multiple of `k`. **Note** that: A **subarray** is a contiguous part of the array. An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is **always** a multiple of `k`. **Example 1:** ``` **Input:** nums = [23,2,4,6,7], k = 6 **Output:** true **Explanation:** [2, 4] is a continuous subarray of size 2 whose elements sum up to 6. ``` **Example 2:** ``` **Input:** nums = [23,2,6,4,7], k = 6 **Output:** true **Explanation:** [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42. 42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer. ``` **Example 3:** ``` **Input:** nums = [23,2,6,4,7], k = 13 **Output:** false ``` **Constraints:** `1 <= nums.length <= 105` `0 <= nums[i] <= 109` `0 <= sum(nums[i]) <= 231 - 1` `1 <= k <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [23, 2,4 ,6,7], k = 6', 'output': 'true Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.'}, {'label': 'Example 2', 'input': 'nums = [ 23,2,6,4,7 ], k = 6', 'output': 'true Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.'}, {'label': 'Example 3', 'input': 'nums = [23,2,6,4,7], k = 13', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec check_subarray_sum(nums :: [integer], k :: integer) :: boolean\\n  def check_subarray_sum(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec check_subarray_sum(Nums :: [integer()], K :: integer()) -> boolean().\\ncheck_subarray_sum(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def checkSubarraySum(nums: Array[Int], k: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!534\n",
            "longest-uncommon-subsequence-ii 522\n",
            "{'id': 522, 'name': 'longest-uncommon-subsequence-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-uncommon-subsequence-ii/', 'task_description': 'Given an array of strings `strs`, return _the length of the **longest uncommon subsequence** between them_. If the longest uncommon subsequence does not exist, return `-1`. An **uncommon subsequence** between an array of strings is a string that is a **subsequence of one string but not the others**. A **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`. For example, `\"abc\"` is a subsequence of `\"aebdc\"` because you can delete the underlined characters in `\"aebdc\"` to get `\"abc\"`. Other subsequences of `\"aebdc\"` include `\"aebdc\"`, `\"aeb\"`, and `\"\"` (empty string). **Example 1:** ``` **Input:** strs = [\"aba\",\"cdc\",\"eae\"] **Output:** 3 ``` **Example 2:** ``` **Input:** strs = [\"aaa\",\"aaa\",\"aa\"] **Output:** -1 ``` **Constraints:** `2 <= strs.length <= 50` `1 <= strs[i].length <= 10` `strs[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'strs = [\"aba\",\"cdc\",\"eae\"]', 'output': '3'}, {'label': 'Example 2', 'input': 'strs = [\"aaa\",\"aaa\",\"aa\"]', 'output': '-1'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_lu_slength(strs :: [String.t]) :: integer\\n  def find_lu_slength(strs) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_lu_slength(Strs :: [unicode:unicode_binary()]) -> integer().\\nfind_lu_slength(Strs) ->\\n  .', 'scala_template': 'object Solution {\\n    def findLUSlength(strs: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!535\n",
            "longest-uncommon-subsequence-i 521\n",
            "{'id': 521, 'name': 'longest-uncommon-subsequence-i', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/longest-uncommon-subsequence-i/', 'task_description': 'Given two strings `a` and `b`, return _the length of the **longest uncommon subsequence** between _`a` _and_ `b`. _If no such uncommon subsequence exists, return_ `-1`_._ An **uncommon subsequence** between two strings is a string that is a **subsequence of exactly one of them**. **Example 1:** ``` **Input:** a = \"aba\", b = \"cdc\" **Output:** 3 **Explanation:** One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\". Note that \"cdc\" is also a longest uncommon subsequence. ``` **Example 2:** ``` **Input:** a = \"aaa\", b = \"bbb\" **Output:** 3 **Explanation:** The longest uncommon subsequences are \"aaa\" and \"bbb\". ``` **Example 3:** ``` **Input:** a = \"aaa\", b = \"aaa\" **Output:** -1 **Explanation:** Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a. So the answer would be `-1`. ``` **Constraints:** `1 <= a.length, b.length <= 100` `a` and `b` consist of lower-case English letters.', 'test_case': [{'label': 'Example 1', 'input': 'a = \"aba\", b = \"cdc\"', 'output': '3 Explanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\\nNote that \"cdc\" is also a longest uncommon subsequence.'}, {'label': 'Example 2', 'input': 'a = \"aaa\", b = \"bbb\"', 'output': '3 Explanation: The longest uncommon subsequences are \"aaa\" and \"bbb\".'}, {'label': 'Example 3', 'input': 'a = \"aaa\", b = \"aaa\"', 'output': '-1 Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a. So the answer would be -1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_lu_slength(a :: String.t, b :: String.t) :: integer\\n  def find_lu_slength(a, b) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_lu_slength(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> integer().\\nfind_lu_slength(A, B) ->\\n  .', 'scala_template': 'object Solution {\\n    def findLUSlength(a: String, b: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!536\n",
            "detect-capital 520\n",
            "{'id': 520, 'name': 'detect-capital', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/detect-capital/', 'task_description': 'We define the usage of capitals in a word to be right when one of the following cases holds: All letters in this word are capitals, like `\"USA\"`. All letters in this word are not capitals, like `\"leetcode\"`. Only the first letter in this word is capital, like `\"Google\"`. Given a string `word`, return `true` if the usage of capitals in it is right. **Example 1:** ``` **Input:** word = \"USA\" **Output:** true ``` **Example 2:** ``` **Input:** word = \"FlaG\" **Output:** false ``` **Constraints:** `1 <= word.length <= 100` `word` consists of lowercase and uppercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'word = \"USA\"', 'output': 'true'}, {'label': 'Example 2', 'input': 'word = \"FlaG\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec detect_capital_use(word :: String.t) :: boolean\\n  def detect_capital_use(word) do\\n    \\n  end\\nend', 'erlang_template': '-spec detect_capital_use(Word :: unicode:unicode_binary()) -> boolean().\\ndetect_capital_use(Word) ->\\n  .', 'scala_template': 'object Solution {\\n    def detectCapitalUse(word: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!537\n",
            "coin-change-ii 518\n",
            "{'id': 518, 'name': 'coin-change-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/coin-change-ii/', 'task_description': 'You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return _the number of combinations that make up that amount_. If that amount of money cannot be made up by any combination of the coins, return `0`. You may assume that you have an infinite number of each kind of coin. The answer is **guaranteed** to fit into a signed **32-bit** integer. **Example 1:** ``` **Input:** amount = 5, coins = [1,2,5] **Output:** 4 **Explanation:** there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 ``` **Example 2:** ``` **Input:** amount = 3, coins = [2] **Output:** 0 **Explanation:** the amount of 3 cannot be made up just with coins of 2. ``` **Example 3:** ``` **Input:** amount = 10, coins = [10] **Output:** 1 ``` **Constraints:** `1 <= coins.length <= 300` `1 <= coins[i] <= 5000` All the values of `coins` are **unique**. `0 <= amount <= 5000`', 'test_case': [{'label': 'Example 1', 'input': 'amount = 5, coins = [1,2,5]', 'output': '4 Explanation: there are four ways to make up the amount:\\n5=5\\n5=2+2+1\\n5=2+1+1+1\\n5=1+1+1+1+1'}, {'label': 'Example 2', 'input': 'amount = 3, coins = [2]', 'output': '0 Explanation: the amount of 3 cannot be made up just with coins of 2.'}, {'label': 'Example 3', 'input': 'amount = 10, coins = [10]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec change(amount :: integer, coins :: [integer]) :: integer\\n  def change(amount, coins) do\\n    \\n  end\\nend', 'erlang_template': '-spec change(Amount :: integer(), Coins :: [integer()]) -> integer().\\nchange(Amount, Coins) ->\\n  .', 'scala_template': 'object Solution {\\n    def change(amount: Int, coins: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!538\n",
            "super-washing-machines 517\n",
            "{'id': 517, 'name': 'super-washing-machines', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/super-washing-machines/', 'task_description': \"You have `n` super washing machines on a line. Initially, each washing machine has some dresses or is empty. For each move, you could choose any `m` (`1 <= m <= n`) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time. Given an integer array `machines` representing the number of dresses in each washing machine from left to right on the line, return _the minimum number of moves to make all the washing machines have the same number of dresses_. If it is not possible to do it, return `-1`. **Example 1:** ``` **Input:** machines = [1,0,5] **Output:** 3 **Explanation:** 1st move: 1 0 <-- 5 => 1 1 4 2nd move: 1 <-- 1 <-- 4 => 2 1 3 3rd move: 2 1 <-- 3 => 2 2 2 ``` **Example 2:** ``` **Input:** machines = [0,3,0] **Output:** 2 **Explanation:** 1st move: 0 <-- 3 0 => 1 2 0 2nd move: 1 2 --> 0 => 1 1 1 ``` **Example 3:** ``` **Input:** machines = [0,2,0] **Output:** -1 **Explanation:** It's impossible to make all three washing machines have the same number of dresses. ``` **Constraints:** `n == machines.length` `1 <= n <= 104` `0 <= machines[i] <= 105`\", 'test_case': [{'label': 'Example 1', 'input': 'machines = [1,0,5]', 'output': '3 Explanation: 1st move:    1     0 <-- 5    =>    1     1     4\\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\\n3rd move:    2     1 <-- 3    =>    2     2     2'}, {'label': 'Example 2', 'input': 'machines = [0,3,0]', 'output': '2 Explanation: 1st move:    0 <-- 3     0    =>    1     2     0\\n2nd move:    1     2 --> 0    =>    1     1     1'}, {'label': 'Example 3', 'input': 'machines = [0,2,0]', 'output': \"-1 Explanation: It's impossible to make all three washing machines have the same number of dresses. Constraints: n == machines.length 1 <= n <= 10 4 0 <= machines[i] <= 10 5\"}], 'elixir_template': 'defmodule Solution do\\n  @spec find_min_moves(machines :: [integer]) :: integer\\n  def find_min_moves(machines) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_min_moves(Machines :: [integer()]) -> integer().\\nfind_min_moves(Machines) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMinMoves(machines: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!539\n",
            "longest-palindromic-subsequence 516\n",
            "{'id': 516, 'name': 'longest-palindromic-subsequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-palindromic-subsequence/', 'task_description': 'Given a string `s`, find _the longest palindromic **subsequence**\\'s length in_ `s`. A **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. **Example 1:** ``` **Input:** s = \"bbbab\" **Output:** 4 **Explanation:** One possible longest palindromic subsequence is \"bbbb\". ``` **Example 2:** ``` **Input:** s = \"cbbd\" **Output:** 2 **Explanation:** One possible longest palindromic subsequence is \"bb\". ``` **Constraints:** `1 <= s.length <= 1000` `s` consists only of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"bbbab\"', 'output': '4 Explanation: One possible longest palindromic subsequence is \"bbbb\".'}, {'label': 'Example 2', 'input': 's = \"cbbd\"', 'output': '2 Explanation: One possible longest palindromic subsequence is \"bb\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_palindrome_subseq(s :: String.t) :: integer\\n  def longest_palindrome_subseq(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_palindrome_subseq(S :: unicode:unicode_binary()) -> integer().\\nlongest_palindrome_subseq(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestPalindromeSubseq(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!540\n",
            "find-largest-value-in-each-tree-row 515\n",
            "{'id': 515, 'name': 'find-largest-value-in-each-tree-row', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-largest-value-in-each-tree-row/', 'task_description': 'Given the `root` of a binary tree, return _an array of the largest value in each row_ of the tree **(0-indexed)**. **Example 1:** ``` **Input:** root = [1,3,2,5,3,null,9] **Output:** [1,3,9] ``` **Example 2:** ``` **Input:** root = [1,2,3] **Output:** [1,3] ``` **Constraints:** The number of nodes in the tree will be in the range `[0, 104]`. `-231 <= Node.val <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,3,2,5,3,null,9]', 'output': '[1,3,9]'}, {'label': 'Example 2', 'input': 'root = [1,2,3]', 'output': '[1,3] Constraints: The number of nodes in the tree will be in the range [0, 10 4 ] . -2 31 <= Node.val <= 2 31 - 1'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec largest_values(root :: TreeNode.t | nil) :: [integer]\\n  def largest_values(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec largest_values(Root :: #tree_node{} | null) -> [integer()].\\nlargest_values(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def largestValues(root: TreeNode): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!541\n",
            "freedom-trail 514\n",
            "{'id': 514, 'name': 'freedom-trail', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/freedom-trail/', 'task_description': 'In the video game Fallout 4, the quest **\"Road to Freedom\"** requires players to reach a metal dial called the **\"Freedom Trail Ring\"** and use the dial to spell a specific keyword to open the door. Given a string `ring` that represents the code engraved on the outer ring and another string `key` that represents the keyword that needs to be spelled, return _the minimum number of steps to spell all the characters in the keyword_. Initially, the first character of the ring is aligned at the `\"12:00\"` direction. You should spell all the characters in `key` one by one by rotating `ring` clockwise or anticlockwise to make each character of the string key aligned at the `\"12:00\"` direction and then by pressing the center button. At the stage of rotating the ring to spell the key character `key[i]`: You can rotate the ring clockwise or anticlockwise by one place, which counts as **one step**. The final purpose of the rotation is to align one of `ring`\\'s characters at the `\"12:00\"` direction, where this character must equal `key[i]`. If the character `key[i]` has been aligned at the `\"12:00\"` direction, press the center button to spell, which also counts as **one step**. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling. **Example 1:** ``` **Input:** ring = \"godding\", key = \"gd\" **Output:** 4 **Explanation:** For the first key character \\'g\\', since it is already in place, we just need 1 step to spell this character. For the second key character \\'d\\', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\". Also, we need 1 more step for spelling. So the final output is 4. ``` **Example 2:** ``` **Input:** ring = \"godding\", key = \"godding\" **Output:** 13 ``` **Constraints:** `1 <= ring.length, key.length <= 100` `ring` and `key` consist of only lower case English letters. It is guaranteed that `key` could always be spelled by rotating `ring`.', 'test_case': [{'label': 'Example 1', 'input': 'ring = \"godding\", key = \"gd\"', 'output': '4 Explanation: For the first key character \\'g\\', since it is already in place, we just need 1 step to spell this character. \\nFor the second key character \\'d\\', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\\nAlso, we need 1 more step for spelling.\\nSo the final output is 4.'}, {'label': 'Example 2', 'input': 'ring = \"godding\", key = \"godding\"', 'output': '13'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_rotate_steps(ring :: String.t, key :: String.t) :: integer\\n  def find_rotate_steps(ring, key) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_rotate_steps(Ring :: unicode:unicode_binary(), Key :: unicode:unicode_binary()) -> integer().\\nfind_rotate_steps(Ring, Key) ->\\n  .', 'scala_template': 'object Solution {\\n    def findRotateSteps(ring: String, key: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!542\n",
            "find-bottom-left-tree-value 513\n",
            "{'id': 513, 'name': 'find-bottom-left-tree-value', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-bottom-left-tree-value/', 'task_description': 'Given the `root` of a binary tree, return the leftmost value in the last row of the tree. **Example 1:** ``` **Input:** root = [2,1,3] **Output:** 1 ``` **Example 2:** ``` **Input:** root = [1,2,3,4,null,5,6,null,null,7] **Output:** 7 ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-231 <= Node.val <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'root = [2,1,3]', 'output': '1'}, {'label': 'Example 2', 'input': 'root = [1,2,3,4,null,5,6,null,null,7]', 'output': '7 Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -2 31 <= Node.val <= 2 31 - 1'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_bottom_left_value(root :: TreeNode.t | nil) :: integer\\n  def find_bottom_left_value(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_bottom_left_value(Root :: #tree_node{} | null) -> integer().\\nfind_bottom_left_value(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findBottomLeftValue(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!543\n",
            "most-frequent-subtree-sum 508\n",
            "{'id': 508, 'name': 'most-frequent-subtree-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/most-frequent-subtree-sum/', 'task_description': 'Given the `root` of a binary tree, return the most frequent **subtree sum**. If there is a tie, return all the values with the highest frequency in any order. The **subtree sum** of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). **Example 1:** ``` **Input:** root = [5,2,-3] **Output:** [2,-3,4] ``` **Example 2:** ``` **Input:** root = [5,2,-5] **Output:** [2] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-105 <= Node.val <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'root = [5,2,-3]', 'output': '[2,-3,4]'}, {'label': 'Example 2', 'input': 'root = [5,2,-5]', 'output': '[2] Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -10 5 <= Node.val <= 10 5'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_frequent_tree_sum(root :: TreeNode.t | nil) :: [integer]\\n  def find_frequent_tree_sum(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_frequent_tree_sum(Root :: #tree_node{} | null) -> [integer()].\\nfind_frequent_tree_sum(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findFrequentTreeSum(root: TreeNode): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!544\n",
            "perfect-number 507\n",
            "{'id': 507, 'name': 'perfect-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/perfect-number/', 'task_description': 'A **perfect number** is a **positive integer** that is equal to the sum of its **positive divisors**, excluding the number itself. A **divisor** of an integer `x` is an integer that can divide `x` evenly. Given an integer `n`, return `true`_ if _`n`_ is a perfect number, otherwise return _`false`. **Example 1:** ``` **Input:** num = 28 **Output:** true **Explanation:** 28 = 1 + 2 + 4 + 7 + 14 1, 2, 4, 7, and 14 are all divisors of 28. ``` **Example 2:** ``` **Input:** num = 7 **Output:** false ``` **Constraints:** `1 <= num <= 108`', 'test_case': [{'label': 'Example 1', 'input': 'num = 28', 'output': 'true Explanation: 28 = 1 + 2 + 4 + 7 + 14\\n1, 2, 4, 7, and 14 are all divisors of 28.'}, {'label': 'Example 2', 'input': 'num = 7', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec check_perfect_number(num :: integer) :: boolean\\n  def check_perfect_number(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec check_perfect_number(Num :: integer()) -> boolean().\\ncheck_perfect_number(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def checkPerfectNumber(num: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!545\n",
            "relative-ranks 506\n",
            "{'id': 506, 'name': 'relative-ranks', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/relative-ranks/', 'task_description': 'You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be **unique**. The athletes are **placed** based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank: The `1st` place athlete\\'s rank is `\"Gold Medal\"`. The `2nd` place athlete\\'s rank is `\"Silver Medal\"`. The `3rd` place athlete\\'s rank is `\"Bronze Medal\"`. For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete\\'s rank is `\"x\"`). Return an array `answer` of size `n` where `answer[i]` is the **rank** of the `ith` athlete. **Example 1:** ``` **Input:** score = [5,4,3,2,1] **Output:** [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"] **Explanation:** The placements are [1st, 2nd, 3rd, 4th, 5th]. ``` **Example 2:** ``` **Input:** score = [10,3,8,9,4] **Output:** [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"] **Explanation:** The placements are [1st, 5th, 3rd, 2nd, 4th]. ``` **Constraints:** `n == score.length` `1 <= n <= 104` `0 <= score[i] <= 106` All the values in `score` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'score = [5,4,3,2,1]', 'output': '[\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"] Explanation: The placements are [1 st , 2 nd , 3 rd , 4 th , 5 th ].'}, {'label': 'Example 2', 'input': 'score = [10,3,8,9,4]', 'output': '[\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"] Explanation: The placements are [1 st , 5 th , 3 rd , 2 nd , 4 th ]. Constraints: n == score.length 1 <= n <= 10 4 0 <= score[i] <= 10 6 All the values in score are unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_relative_ranks(score :: [integer]) :: [String.t]\\n  def find_relative_ranks(score) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_relative_ranks(Score :: [integer()]) -> [unicode:unicode_binary()].\\nfind_relative_ranks(Score) ->\\n  .', 'scala_template': 'object Solution {\\n    def findRelativeRanks(score: Array[Int]): Array[String] = {\\n        \\n    }\\n}'}\n",
            "Done!546\n",
            "base-7 504\n",
            "{'id': 504, 'name': 'base-7', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/base-7/', 'task_description': 'Given an integer `num`, return _a string of its **base 7** representation_. **Example 1:** ``` **Input:** num = 100 **Output:** \"202\" ``` **Example 2:** ``` **Input:** num = -7 **Output:** \"-10\" ``` **Constraints:** `-107 <= num <= 107`', 'test_case': [{'label': 'Example 1', 'input': 'num = 100', 'output': '\"202\"'}, {'label': 'Example 2', 'input': 'num = -7', 'output': '\"-10\" Constraints: -10 7 <= num <= 10 7'}], 'elixir_template': 'defmodule Solution do\\n  @spec convert_to_base7(num :: integer) :: String.t\\n  def convert_to_base7(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec convert_to_base7(Num :: integer()) -> unicode:unicode_binary().\\nconvert_to_base7(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def convertToBase7(num: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!547\n",
            "next-greater-element-ii 503\n",
            "{'id': 503, 'name': 'next-greater-element-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/next-greater-element-ii/', 'task_description': \"Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return _the **next greater number** for every element in_ `nums`. The **next greater number** of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number. **Example 1:** ``` **Input:** nums = [1,2,1] **Output:** [2,-1,2] Explanation: The first 1's next greater number is 2; The number 2 can't find next greater number. The second 1's next greater number needs to search circularly, which is also 2. ``` **Example 2:** ``` **Input:** nums = [1,2,3,4,3] **Output:** [2,3,4,-1,4] ``` **Constraints:** `1 <= nums.length <= 104` `-109 <= nums[i] <= 109`\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,1]', 'output': \"[2,-1,2]\\nExplanation: The first 1's next greater number is 2; \\nThe number 2 can't find next greater number. \\nThe second 1's next greater number needs to search circularly, which is also 2.\"}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4,3]', 'output': '[2,3,4,-1,4]'}], 'elixir_template': 'defmodule Solution do\\n  @spec next_greater_elements(nums :: [integer]) :: [integer]\\n  def next_greater_elements(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec next_greater_elements(Nums :: [integer()]) -> [integer()].\\nnext_greater_elements(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def nextGreaterElements(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!548\n",
            "ipo 502\n",
            "{'id': 502, 'name': 'ipo', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/ipo/', 'task_description': 'Suppose LeetCode will start its **IPO** soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the **IPO**. Since it has limited resources, it can only finish at most `k` distinct projects before the **IPO**. Help LeetCode design the best way to maximize its total capital after finishing at most `k` distinct projects. You are given `n` projects where the `ith` project has a pure profit `profits[i]` and a minimum capital of `capital[i]` is needed to start it. Initially, you have `w` capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital. Pick a list of **at most** `k` distinct projects from given projects to **maximize your final capital**, and return _the final maximized capital_. The answer is guaranteed to fit in a 32-bit signed integer. **Example 1:** ``` **Input:** k = 2, w = 0, profits = [1,2,3], capital = [0,1,1] **Output:** 4 **Explanation:** Since your initial capital is 0, you can only start the project indexed 0. After finishing it you will obtain profit 1 and your capital becomes 1. With capital 1, you can either start the project indexed 1 or the project indexed 2. Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital. Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4. ``` **Example 2:** ``` **Input:** k = 3, w = 0, profits = [1,2,3], capital = [0,1,2] **Output:** 6 ``` **Constraints:** `1 <= k <= 105` `0 <= w <= 109` `n == profits.length` `n == capital.length` `1 <= n <= 105` `0 <= profits[i] <= 104` `0 <= capital[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]', 'output': '4 Explanation: Since your initial capital is 0, you can only start the project indexed 0.\\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.'}, {'label': 'Example 2', 'input': 'k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]', 'output': '6'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_maximized_capital(k :: integer, w :: integer, profits :: [integer], capital :: [integer]) :: integer\\n  def find_maximized_capital(k, w, profits, capital) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_maximized_capital(K :: integer(), W :: integer(), Profits :: [integer()], Capital :: [integer()]) -> integer().\\nfind_maximized_capital(K, W, Profits, Capital) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMaximizedCapital(k: Int, w: Int, profits: Array[Int], capital: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!549\n",
            "find-mode-in-binary-search-tree 501\n",
            "{'id': 501, 'name': 'find-mode-in-binary-search-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-mode-in-binary-search-tree/', 'task_description': \"Given the `root` of a binary search tree (BST) with duplicates, return _all the mode(s) (i.e., the most frequently occurred element) in it_. If the tree has more than one mode, return them in **any order**. Assume a BST is defined as follows: The left subtree of a node contains only nodes with keys **less than or equal to** the node's key. The right subtree of a node contains only nodes with keys **greater than or equal to** the node's key. Both the left and right subtrees must also be binary search trees. **Example 1:** ``` **Input:** root = [1,null,2,2] **Output:** [2] ``` **Example 2:** ``` **Input:** root = [0] **Output:** [0] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-105 <= Node.val <= 105` **Follow up:** Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,2,2]', 'output': '[2]'}, {'label': 'Example 2', 'input': 'root = [0]', 'output': '[0] Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -10 5 <= Node.val <= 10 5 Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_mode(root :: TreeNode.t | nil) :: [integer]\\n  def find_mode(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_mode(Root :: #tree_node{} | null) -> [integer()].\\nfind_mode(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findMode(root: TreeNode): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!550\n",
            "keyboard-row 500\n",
            "{'id': 500, 'name': 'keyboard-row', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/keyboard-row/', 'task_description': 'Given an array of strings `words`, return _the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below_. **Note** that the strings are **case-insensitive**, both lowercased and uppercased of the same letter are treated as if they are at the same row. In the **American keyboard**: the first row consists of the characters `\"qwertyuiop\"`, the second row consists of the characters `\"asdfghjkl\"`, and the third row consists of the characters `\"zxcvbnm\"`. **Example 1:** **Input:** words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"] **Output:** [\"Alaska\",\"Dad\"] **Explanation:** Both `\"a\"` and `\"A\"` are in the 2nd row of the American keyboard due to case insensitivity. **Example 2:** **Input:** words = [\"omk\"] **Output:** [] **Example 3:** **Input:** words = [\"adsdf\",\"sfd\"] **Output:** [\"adsdf\",\"sfd\"] **Constraints:** `1 <= words.length <= 20` `1 <= words[i].length <= 100` `words[i]` consists of English letters (both lowercase and uppercase).', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]', 'output': '[\"Alaska\",\"Dad\"] Explanation: Both \"a\" and \"A\" are in the 2nd row of the American keyboard due to case insensitivity.'}, {'label': 'Example 2', 'input': 'words = [\"omk\"]', 'output': '[]'}, {'label': 'Example 3', 'input': 'words = [\"adsdf\",\"sfd\"]', 'output': '[\"adsdf\",\"sfd\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_words(words :: [String.t]) :: [String.t]\\n  def find_words(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_words(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nfind_words(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def findWords(words: Array[String]): Array[String] = {\\n        \\n    }\\n}'}\n",
            "Done!551\n",
            "diagonal-traverse 498\n",
            "{'id': 498, 'name': 'diagonal-traverse', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/diagonal-traverse/', 'task_description': 'Given an `m x n` matrix `mat`, return _an array of all the elements of the array in a diagonal order_. **Example 1:** ``` **Input:** mat = [[1,2,3],[4,5,6],[7,8,9]] **Output:** [1,2,4,7,5,3,6,8,9] ``` **Example 2:** ``` **Input:** mat = [[1,2],[3,4]] **Output:** [1,2,3,4] ``` **Constraints:** `m == mat.length` `n == mat[i].length` `1 <= m, n <= 104` `1 <= m * n <= 104` `-105 <= mat[i][j] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'mat = [[1,2,3],[4,5,6],[7,8,9]]', 'output': '[1,2,4,7,5,3,6,8,9]'}, {'label': 'Example 2', 'input': 'mat = [[1,2],[3,4]]', 'output': '[1,2,3,4] Constraints: m == mat.length n == mat[i].length 1 <= m, n <= 10 4 1 <= m * n <= 10 4 -10 5 <= mat[i][j] <= 10 5'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_diagonal_order(mat :: [[integer]]) :: [integer]\\n  def find_diagonal_order(mat) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_diagonal_order(Mat :: [[integer()]]) -> [integer()].\\nfind_diagonal_order(Mat) ->\\n  .', 'scala_template': 'object Solution {\\n    def findDiagonalOrder(mat: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!552\n",
            "next-greater-element-i 496\n",
            "{'id': 496, 'name': 'next-greater-element-i', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/next-greater-element-i/', 'task_description': 'The **next greater element** of some element `x` in an array is the **first greater** element that is **to the right** of `x` in the same array. You are given two **distinct 0-indexed** integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`. For each `0 <= i < nums1.length`, find the index `j` such that `nums1[i] == nums2[j]` and determine the **next greater element** of `nums2[j]` in `nums2`. If there is no next greater element, then the answer for this query is `-1`. Return _an array _`ans`_ of length _`nums1.length`_ such that _`ans[i]`_ is the **next greater element** as described above._ **Example 1:** ``` **Input:** nums1 = [4,1,2], nums2 = [1,3,4,2] **Output:** [-1,3,-1] **Explanation:** The next greater element for each value of nums1 is as follows: - 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1. - 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3. - 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1. ``` **Example 2:** ``` **Input:** nums1 = [2,4], nums2 = [1,2,3,4] **Output:** [3,-1] **Explanation:** The next greater element for each value of nums1 is as follows: - 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3. - 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1. ``` **Constraints:** `1 <= nums1.length <= nums2.length <= 1000` `0 <= nums1[i], nums2[i] <= 104` All integers in `nums1` and `nums2` are **unique**. All the integers of `nums1` also appear in `nums2`. **Follow up:** Could you find an `O(nums1.length + nums2.length)` solution?', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [4,1,2], nums2 = [1,3,4,2]', 'output': '[-1,3,-1] Explanation: The next greater element for each value of nums1 is as follows:\\n- 4 is underlined in nums2 = [1,3, 4 ,2]. There is no next greater element, so the answer is -1.\\n- 1 is underlined in nums2 = [ 1 ,3,4,2]. The next greater element is 3.\\n- 2 is underlined in nums2 = [1,3,4, 2 ]. There is no next greater element, so the answer is -1.'}, {'label': 'Example 2', 'input': 'nums1 = [2,4], nums2 = [1,2,3,4]', 'output': '[3,-1] Explanation: The next greater element for each value of nums1 is as follows:\\n- 2 is underlined in nums2 = [1, 2 ,3,4]. The next greater element is 3.\\n- 4 is underlined in nums2 = [1,2,3, 4 ]. There is no next greater element, so the answer is -1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec next_greater_element(nums1 :: [integer], nums2 :: [integer]) :: [integer]\\n  def next_greater_element(nums1, nums2) do\\n    \\n  end\\nend', 'erlang_template': '-spec next_greater_element(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\\nnext_greater_element(Nums1, Nums2) ->\\n  .', 'scala_template': 'object Solution {\\n    def nextGreaterElement(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!553\n",
            "teemo-attacking 495\n",
            "{'id': 495, 'name': 'teemo-attacking', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/teemo-attacking/', 'task_description': \"Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly `duration` seconds. More formally, an attack at second `t` will mean Ashe is poisoned during the **inclusive** time interval `[t, t + duration - 1]`. If Teemo attacks again **before** the poison effect ends, the timer for it is **reset**, and the poison effect will end `duration` seconds after the new attack. You are given a **non-decreasing** integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`. Return _the **total** number of seconds that Ashe is poisoned_. **Example 1:** ``` **Input:** timeSeries = [1,4], duration = 2 **Output:** 4 **Explanation:** Teemo's attacks on Ashe go as follows: - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2. - At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5. Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total. ``` **Example 2:** ``` **Input:** timeSeries = [1,2], duration = 2 **Output:** 3 **Explanation:** Teemo's attacks on Ashe go as follows: - At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2. - At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3. Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total. ``` **Constraints:** `1 <= timeSeries.length <= 104` `0 <= timeSeries[i], duration <= 107` `timeSeries` is sorted in **non-decreasing** order.\", 'test_case': [{'label': 'Example 1', 'input': 'timeSeries = [1,4], duration = 2', 'output': \"4 Explanation: Teemo's attacks on Ashe go as follows:\\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\"}, {'label': 'Example 2', 'input': 'timeSeries = [1,2], duration = 2', 'output': \"3 Explanation: Teemo's attacks on Ashe go as follows:\\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec find_poisoned_duration(time_series :: [integer], duration :: integer) :: integer\\n  def find_poisoned_duration(time_series, duration) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_poisoned_duration(TimeSeries :: [integer()], Duration :: integer()) -> integer().\\nfind_poisoned_duration(TimeSeries, Duration) ->\\n  .', 'scala_template': 'object Solution {\\n    def findPoisonedDuration(timeSeries: Array[Int], duration: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!554\n",
            "target-sum 494\n",
            "{'id': 494, 'name': 'target-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/target-sum/', 'task_description': 'You are given an integer array `nums` and an integer `target`. You want to build an **expression** out of nums by adding one of the symbols `\\'+\\'` and `\\'-\\'` before each integer in nums and then concatenate all the integers. For example, if `nums = [2, 1]`, you can add a `\\'+\\'` before `2` and a `\\'-\\'` before `1` and concatenate them to build the expression `\"+2-1\"`. Return the number of different **expressions** that you can build, which evaluates to `target`. **Example 1:** ``` **Input:** nums = [1,1,1,1,1], target = 3 **Output:** 5 **Explanation:** There are 5 ways to assign symbols to make the sum of nums be target 3. -1 + 1 + 1 + 1 + 1 = 3 +1 - 1 + 1 + 1 + 1 = 3 +1 + 1 - 1 + 1 + 1 = 3 +1 + 1 + 1 - 1 + 1 = 3 +1 + 1 + 1 + 1 - 1 = 3 ``` **Example 2:** ``` **Input:** nums = [1], target = 1 **Output:** 1 ``` **Constraints:** `1 <= nums.length <= 20` `0 <= nums[i] <= 1000` `0 <= sum(nums[i]) <= 1000` `-1000 <= target <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,1,1,1], target = 3', 'output': '5 Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\\n-1 + 1 + 1 + 1 + 1 = 3\\n+1 - 1 + 1 + 1 + 1 = 3\\n+1 + 1 - 1 + 1 + 1 = 3\\n+1 + 1 + 1 - 1 + 1 = 3\\n+1 + 1 + 1 + 1 - 1 = 3'}, {'label': 'Example 2', 'input': 'nums = [1], target = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_target_sum_ways(nums :: [integer], target :: integer) :: integer\\n  def find_target_sum_ways(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_target_sum_ways(Nums :: [integer()], Target :: integer()) -> integer().\\nfind_target_sum_ways(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def findTargetSumWays(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!555\n",
            "reverse-pairs 493\n",
            "{'id': 493, 'name': 'reverse-pairs', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/reverse-pairs/', 'task_description': 'Given an integer array `nums`, return _the number of **reverse pairs** in the array_. A **reverse pair** is a pair `(i, j)` where: `0 <= i < j < nums.length` and `nums[i] > 2 * nums[j]`. **Example 1:** ``` **Input:** nums = [1,3,2,3,1] **Output:** 2 **Explanation:** The reverse pairs are: (1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1 (3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1 ``` **Example 2:** ``` **Input:** nums = [2,4,3,5,1] **Output:** 3 **Explanation:** The reverse pairs are: (1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1 (2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1 (3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1 ``` **Constraints:** `1 <= nums.length <= 5 * 104` `-231 <= nums[i] <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,2,3,1]', 'output': '2 Explanation: The reverse pairs are:\\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1'}, {'label': 'Example 2', 'input': 'nums = [2,4,3,5,1]', 'output': '3 Explanation: The reverse pairs are:\\n(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\\n(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\\n(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec reverse_pairs(nums :: [integer]) :: integer\\n  def reverse_pairs(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec reverse_pairs(Nums :: [integer()]) -> integer().\\nreverse_pairs(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def reversePairs(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!556\n",
            "construct-the-rectangle 492\n",
            "{'id': 492, 'name': 'construct-the-rectangle', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/construct-the-rectangle/', 'task_description': \"A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements: The area of the rectangular web page you designed must equal to the given target area. The width `W` should not be larger than the length `L`, which means `L >= W`. The difference between length `L` and width `W` should be as small as possible. Return _an array `[L, W]` where `L` and `W` are the length and width of the web page you designed in sequence._ **Example 1:** ``` **Input:** area = 4 **Output:** [2,2] **Explanation:** The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. But according to requirement 2, [1,4] is illegal; according to requirement 3, [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2. ``` **Example 2:** ``` **Input:** area = 37 **Output:** [37,1] ``` **Example 3:** ``` **Input:** area = 122122 **Output:** [427,286] ``` **Constraints:** `1 <= area <= 107`\", 'test_case': [{'label': 'Example 1', 'input': 'area = 4', 'output': '[2,2] Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \\nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.'}, {'label': 'Example 2', 'input': 'area = 37', 'output': '[37,1]'}, {'label': 'Example 3', 'input': 'area = 122122', 'output': '[427,286]'}], 'elixir_template': 'defmodule Solution do\\n  @spec construct_rectangle(area :: integer) :: [integer]\\n  def construct_rectangle(area) do\\n    \\n  end\\nend', 'erlang_template': '-spec construct_rectangle(Area :: integer()) -> [integer()].\\nconstruct_rectangle(Area) ->\\n  .', 'scala_template': 'object Solution {\\n    def constructRectangle(area: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!557\n",
            "non-decreasing-subsequences 491\n",
            "{'id': 491, 'name': 'non-decreasing-subsequences', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/non-decreasing-subsequences/', 'task_description': 'Given an integer array `nums`, return _all the different possible non-decreasing subsequences of the given array with at least two elements_. You may return the answer in **any order**. **Example 1:** ``` **Input:** nums = [4,6,7,7] **Output:** [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]] ``` **Example 2:** ``` **Input:** nums = [4,4,3,2,1] **Output:** [[4,4]] ``` **Constraints:** `1 <= nums.length <= 15` `-100 <= nums[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,6,7,7]', 'output': '[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]'}, {'label': 'Example 2', 'input': 'nums = [4,4,3,2,1]', 'output': '[[4,4]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_subsequences(nums :: [integer]) :: [[integer]]\\n  def find_subsequences(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_subsequences(Nums :: [integer()]) -> [[integer()]].\\nfind_subsequences(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findSubsequences(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!558\n",
            "kth-smallest-instructions 489\n",
            "{'id': 489, 'name': 'kth-smallest-instructions', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/kth-smallest-instructions/', 'task_description': 'Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. He can only travel **right** and **down**. You are going to help Bob by providing **instructions** for him to reach `destination`. The **instructions** are represented as a string, where each character is either: `\\'H\\'`, meaning move horizontally (go **right**), or `\\'V\\'`, meaning move vertically (go **down**). Multiple **instructions** will lead Bob to `destination`. For example, if `destination` is `(2, 3)`, both `\"HHHVV\"` and `\"HVHVH\"` are valid **instructions**. However, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth` **lexicographically smallest instructions** that will lead him to `destination`. `k` is **1-indexed**. Given an integer array `destination` and an integer `k`, return _the _`kth`_ **lexicographically smallest instructions** that will take Bob to _`destination`. **Example 1:** ``` **Input:** destination = [2,3], k = 1 **Output:** \"HHHVV\" **Explanation:** All the instructions that reach (2, 3) in lexicographic order are as follows: [\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"]. ``` **Example 2:** **** ``` **Input:** destination = [2,3], k = 2 **Output:** \"HHVHV\" ``` **Example 3:** **** ``` **Input:** destination = [2,3], k = 3 **Output:** \"HHVVH\" ``` **Constraints:** `destination.length == 2` `1 <= row, column <= 15` `1 <= k <= nCr(row + column, row)`, where `nCr(a, b)` denotes `a` choose `b`\\u200b\\u200b\\u200b\\u200b\\u200b.', 'test_case': [{'label': 'Example 1', 'input': 'destination = [2,3], k = 1', 'output': '\"HHHVV\" Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:\\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].'}, {'label': 'Example 2', 'input': 'destination = [2,3], k = 2', 'output': '\"HHVHV\"'}, {'label': 'Example 3', 'input': 'destination = [2,3], k = 3', 'output': '\"HHVVH\" Constraints: destination.length == 2 1 <= row, column <= 15 1 <= k <= nCr(row + column, row) , where nCr(a, b) denotes a choose b \\u200b\\u200b\\u200b\\u200b\\u200b.'}], 'elixir_template': 'defmodule Solution do\\n  @spec kth_smallest_path(destination :: [integer], k :: integer) :: String.t\\n  def kth_smallest_path(destination, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec kth_smallest_path(Destination :: [integer()], K :: integer()) -> unicode:unicode_binary().\\nkth_smallest_path(Destination, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def kthSmallestPath(destination: Array[Int], k: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!559\n",
            "zuma-game 488\n",
            "{'id': 488, 'name': 'zuma-game', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/zuma-game/', 'task_description': 'You are playing a variation of the game Zuma. In this variation of Zuma, there is a **single row** of colored balls on a board, where each ball can be colored red `\\'R\\'`, yellow `\\'Y\\'`, blue `\\'B\\'`, green `\\'G\\'`, or white `\\'W\\'`. You also have several colored balls in your hand. Your goal is to **clear all** of the balls from the board. On each turn: Pick **any** ball from your hand and insert it in between two balls in the row or on either end of the row. If there is a group of **three or more consecutive balls** of the **same color**, remove the group of balls from the board. If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left. If there are no more balls on the board, then you win the game. Repeat this process until you either win or do not have any more balls in your hand. Given a string `board`, representing the row of balls on the board, and a string `hand`, representing the balls in your hand, return _the **minimum** number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return _`-1`. **Example 1:** ``` **Input:** board = \"WRRBBW\", hand = \"RB\" **Output:** -1 **Explanation:** It is impossible to clear all the balls. The best you can do is: - Insert \\'R\\' so the board becomes WRRRBBW. WRRRBBW -> WBBW. - Insert \\'B\\' so the board becomes WBBBW. WBBBW -> WW. There are still balls remaining on the board, and you are out of balls to insert. ``` **Example 2:** ``` **Input:** board = \"WWRRBBWW\", hand = \"WRBRW\" **Output:** 2 **Explanation:** To make the board empty: - Insert \\'R\\' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW. - Insert \\'B\\' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty. 2 balls from your hand were needed to clear the board. ``` **Example 3:** ``` **Input:** board = \"G\", hand = \"GGGGG\" **Output:** 2 **Explanation:** To make the board empty: - Insert \\'G\\' so the board becomes GG. - Insert \\'G\\' so the board becomes GGG. GGG -> empty. 2 balls from your hand were needed to clear the board. ``` **Constraints:** `1 <= board.length <= 16` `1 <= hand.length <= 5` `board` and `hand` consist of the characters `\\'R\\'`, `\\'Y\\'`, `\\'B\\'`, `\\'G\\'`, and `\\'W\\'`. The initial row of balls on the board will **not** have any groups of three or more consecutive balls of the same color.', 'test_case': [{'label': 'Example 1', 'input': 'board = \"WRRBBW\", hand = \"RB\"', 'output': \"-1 Explanation: It is impossible to clear all the balls. The best you can do is:\\n- Insert 'R' so the board becomes WRR R BBW. W RRR BBW -> WBBW.\\n- Insert 'B' so the board becomes WBB B W. W BBB W -> WW.\\nThere are still balls remaining on the board, and you are out of balls to insert.\"}, {'label': 'Example 2', 'input': 'board = \"WWRRBBWW\", hand = \"WRBRW\"', 'output': \"2 Explanation: To make the board empty:\\n- Insert 'R' so the board becomes WWRR R BBWW. WW RRR BBWW -> WWBBWW.\\n- Insert 'B' so the board becomes WWBB B WW. WW BBB WW -> WWWW -> empty.\\n2 balls from your hand were needed to clear the board.\"}, {'label': 'Example 3', 'input': 'board = \"G\", hand = \"GGGGG\"', 'output': \"2 Explanation: To make the board empty:\\n- Insert 'G' so the board becomes G G .\\n- Insert 'G' so the board becomes GG G . GGG -> empty.\\n2 balls from your hand were needed to clear the board.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec find_min_step(board :: String.t, hand :: String.t) :: integer\\n  def find_min_step(board, hand) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_min_step(Board :: unicode:unicode_binary(), Hand :: unicode:unicode_binary()) -> integer().\\nfind_min_step(Board, Hand) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMinStep(board: String, hand: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!560\n",
            "predict-the-winner 486\n",
            "{'id': 486, 'name': 'predict-the-winner', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/predict-the-winner/', 'task_description': 'You are given an integer array `nums`. Two players are playing a game with this array: player 1 and player 2. Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of `0`. At each turn, the player takes one of the numbers from either end of the array (i.e., `nums[0]` or `nums[nums.length - 1]`) which reduces the size of the array by `1`. The player adds the chosen number to their score. The game ends when there are no more elements in the array. Return `true` if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return `true`. You may assume that both players are playing optimally. **Example 1:** ``` **Input:** nums = [1,5,2] **Output:** false **Explanation:** Initially, player 1 can choose between 1 and 2. If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. Hence, player 1 will never be the winner and you need to return false. ``` **Example 2:** ``` **Input:** nums = [1,5,233,7] **Output:** true **Explanation:** Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233. Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win. ``` **Constraints:** `1 <= nums.length <= 20` `0 <= nums[i] <= 107`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,5,2]', 'output': 'false Explanation: Initially, player 1 can choose between 1 and 2. \\nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \\nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \\nHence, player 1 will never be the winner and you need to return false.'}, {'label': 'Example 2', 'input': 'nums = [1,5,233,7]', 'output': 'true Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.'}], 'elixir_template': 'defmodule Solution do\\n  @spec predict_the_winner(nums :: [integer]) :: boolean\\n  def predict_the_winner(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec predict_the_winner(Nums :: [integer()]) -> boolean().\\npredict_the_winner(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def predictTheWinner(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!561\n",
            "max-consecutive-ones 485\n",
            "{'id': 485, 'name': 'max-consecutive-ones', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/max-consecutive-ones/', 'task_description': \"Given a binary array `nums`, return _the maximum number of consecutive _`1`_'s in the array_. **Example 1:** ``` **Input:** nums = [1,1,0,1,1,1] **Output:** 3 **Explanation:** The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3. ``` **Example 2:** ``` **Input:** nums = [1,0,1,1,0,1] **Output:** 2 ``` **Constraints:** `1 <= nums.length <= 105` `nums[i]` is either `0` or `1`.\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,0,1,1,1]', 'output': '3 Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.'}, {'label': 'Example 2', 'input': 'nums = [1,0,1,1,0,1]', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_max_consecutive_ones(nums :: [integer]) :: integer\\n  def find_max_consecutive_ones(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_max_consecutive_ones(Nums :: [integer()]) -> integer().\\nfind_max_consecutive_ones(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMaxConsecutiveOnes(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!562\n",
            "smallest-good-base 483\n",
            "{'id': 483, 'name': 'smallest-good-base', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/smallest-good-base/', 'task_description': 'Given an integer `n` represented as a string, return _the smallest **good base** of_ `n`. We call `k >= 2` a **good base** of `n`, if all digits of `n` base `k` are `1`\\'s. **Example 1:** ``` **Input:** n = \"13\" **Output:** \"3\" **Explanation:** 13 base 3 is 111. ``` **Example 2:** ``` **Input:** n = \"4681\" **Output:** \"8\" **Explanation:** 4681 base 8 is 11111. ``` **Example 3:** ``` **Input:** n = \"1000000000000000000\" **Output:** \"999999999999999999\" **Explanation:** 1000000000000000000 base 999999999999999999 is 11. ``` **Constraints:** `n` is an integer in the range `[3, 1018]`. `n` does not contain any leading zeros.', 'test_case': [{'label': 'Example 1', 'input': 'n = \"13\"', 'output': '\"3\" Explanation: 13 base 3 is 111.'}, {'label': 'Example 2', 'input': 'n = \"4681\"', 'output': '\"8\" Explanation: 4681 base 8 is 11111.'}, {'label': 'Example 3', 'input': 'n = \"1000000000000000000\"', 'output': '\"999999999999999999\" Explanation: 1000000000000000000 base 999999999999999999 is 11. Constraints: n is an integer in the range [3, 10 18 ] . n does not contain any leading zeros.'}], 'elixir_template': 'defmodule Solution do\\n  @spec smallest_good_base(n :: String.t) :: String.t\\n  def smallest_good_base(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec smallest_good_base(N :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nsmallest_good_base(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def smallestGoodBase(n: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!563\n",
            "license-key-formatting 482\n",
            "{'id': 482, 'name': 'license-key-formatting', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/license-key-formatting/', 'task_description': 'You are given a license key represented as a string `s` that consists of only alphanumeric characters and dashes. The string is separated into `n + 1` groups by `n` dashes. You are also given an integer `k`. We want to reformat the string `s` such that each group contains exactly `k` characters, except for the first group, which could be shorter than `k` but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase. Return _the reformatted license key_. **Example 1:** ``` **Input:** s = \"5F3Z-2e-9-w\", k = 4 **Output:** \"5F3Z-2E9W\" **Explanation:** The string s has been split into two parts, each part has 4 characters. Note that the two extra dashes are not needed and can be removed. ``` **Example 2:** ``` **Input:** s = \"2-5g-3-J\", k = 2 **Output:** \"2-5G-3J\" **Explanation:** The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above. ``` **Constraints:** `1 <= s.length <= 105` `s` consists of English letters, digits, and dashes `\\'-\\'`. `1 <= k <= 104`', 'test_case': [{'label': 'Example 1', 'input': 's = \"5F3Z-2e-9-w\", k = 4', 'output': '\"5F3Z-2E9W\" Explanation: The string s has been split into two parts, each part has 4 characters.\\nNote that the two extra dashes are not needed and can be removed.'}, {'label': 'Example 2', 'input': 's = \"2-5g-3-J\", k = 2', 'output': '\"2-5G-3J\" Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.'}], 'elixir_template': 'defmodule Solution do\\n  @spec license_key_formatting(s :: String.t, k :: integer) :: String.t\\n  def license_key_formatting(s, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec license_key_formatting(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\\nlicense_key_formatting(S, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def licenseKeyFormatting(s: String, k: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!564\n",
            "magical-string 481\n",
            "{'id': 481, 'name': 'magical-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/magical-string/', 'task_description': 'A magical string `s` consists of only `\\'1\\'` and `\\'2\\'` and obeys the following rules: The string s is magical because concatenating the number of contiguous occurrences of characters `\\'1\\'` and `\\'2\\'` generates the string `s` itself. The first few elements of `s` is `s = \"1221121221221121122……\"`. If we group the consecutive `1`\\'s and `2`\\'s in `s`, it will be `\"1 22 11 2 1 22 1 22 11 2 11 22 ......\"` and the occurrences of `1`\\'s or `2`\\'s in each group are `\"1 2 2 1 1 2 1 2 2 1 2 2 ......\"`. You can see that the occurrence sequence is `s` itself. Given an integer `n`, return the number of `1`\\'s in the first `n` number in the magical string `s`. **Example 1:** ``` **Input:** n = 6 **Output:** 3 **Explanation:** The first 6 elements of magical string s is \"122112\" and it contains three 1\\'s, so return 3. ``` **Example 2:** ``` **Input:** n = 1 **Output:** 1 ``` **Constraints:** `1 <= n <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'n = 6', 'output': '3 Explanation: The first 6 elements of magical string s is \"122112\" and it contains three 1\\'s, so return 3.'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec magical_string(n :: integer) :: integer\\n  def magical_string(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec magical_string(N :: integer()) -> integer().\\nmagical_string(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def magicalString(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!565\n",
            "sliding-window-median 480\n",
            "{'id': 480, 'name': 'sliding-window-median', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/sliding-window-median/', 'task_description': 'The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values. For examples, if `arr = [2,3,4]`, the median is `3`. For examples, if `arr = [1,2,3,4]`, the median is `(2 + 3) / 2 = 2.5`. You are given an integer array `nums` and an integer `k`. There is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return _the median array for each window in the original array_. Answers within `10-5` of the actual value will be accepted. **Example 1:** ``` **Input:** nums = [1,3,-1,-3,5,3,6,7], k = 3 **Output:** [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000] **Explanation:** Window position Median --------------- ----- [**1 3 -1**] -3 5 3 6 7 1 1 [**3 -1 -3**] 5 3 6 7 -1 1 3 [**-1 -3 5**] 3 6 7 -1 1 3 -1 [**-3 5 3**] 6 7 3 1 3 -1 -3 [**5 3 6**] 7 5 1 3 -1 -3 5 [**3 6 7**] 6 ``` **Example 2:** ``` **Input:** nums = [1,2,3,4,2,3,1,4,2], k = 3 **Output:** [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000] ``` **Constraints:** `1 <= k <= nums.length <= 105` `-231 <= nums[i] <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,-1,-3,5,3,6,7], k = 3', 'output': '[1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000] Explanation: Window position                Median\\n---------------                -----\\n[ 1  3  -1 ] -3  5  3  6  7        1\\n 1 [ 3  -1  -3 ] 5  3  6  7       -1\\n 1  3 [ -1  -3  5 ] 3  6  7       -1\\n 1  3  -1 [ -3  5  3 ] 6  7        3\\n 1  3  -1  -3 [ 5  3  6 ] 7        5\\n 1  3  -1  -3  5 [ 3  6  7 ]       6'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4,2,3,1,4,2], k = 3', 'output': '[2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]'}], 'elixir_template': 'defmodule Solution do\\n  @spec median_sliding_window(nums :: [integer], k :: integer) :: [float]\\n  def median_sliding_window(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec median_sliding_window(Nums :: [integer()], K :: integer()) -> [float()].\\nmedian_sliding_window(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def medianSlidingWindow(nums: Array[Int], k: Int): Array[Double] = {\\n        \\n    }\\n}'}\n",
            "Done!566\n",
            "largest-palindrome-product 479\n",
            "{'id': 479, 'name': 'largest-palindrome-product', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/largest-palindrome-product/', 'task_description': 'Given an integer n, return _the **largest palindromic integer** that can be represented as the product of two `n`-digits integers_. Since the answer can be very large, return it **modulo** `1337`. **Example 1:** ``` **Input:** n = 2 **Output:** 987 Explanation: 99 x 91 = 9009, 9009 % 1337 = 987 ``` **Example 2:** ``` **Input:** n = 1 **Output:** 9 ``` **Constraints:** `1 <= n <= 8`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '987\\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '9'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_palindrome(n :: integer) :: integer\\n  def largest_palindrome(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_palindrome(N :: integer()) -> integer().\\nlargest_palindrome(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestPalindrome(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!567\n",
            "total-hamming-distance 477\n",
            "{'id': 477, 'name': 'total-hamming-distance', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/total-hamming-distance/', 'task_description': 'The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given an integer array `nums`, return _the sum of **Hamming distances** between all the pairs of the integers in_ `nums`. **Example 1:** ``` **Input:** nums = [4,14,2] **Output:** 6 **Explanation:** In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just showing the four bits relevant in this case). The answer will be: HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6. ``` **Example 2:** ``` **Input:** nums = [4,14,4] **Output:** 4 ``` **Constraints:** `1 <= nums.length <= 104` `0 <= nums[i] <= 109` The answer for the given input will fit in a **32-bit** integer.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,14,2]', 'output': '6 Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\\nshowing the four bits relevant in this case).\\nThe answer will be:\\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.'}, {'label': 'Example 2', 'input': 'nums = [4,14,4]', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec total_hamming_distance(nums :: [integer]) :: integer\\n  def total_hamming_distance(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec total_hamming_distance(Nums :: [integer()]) -> integer().\\ntotal_hamming_distance(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def totalHammingDistance(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!568\n",
            "number-complement 476\n",
            "{'id': 476, 'name': 'number-complement', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/number-complement/', 'task_description': 'The **complement** of an integer is the integer you get when you flip all the `0`\\'s to `1`\\'s and all the `1`\\'s to `0`\\'s in its binary representation. For example, The integer `5` is `\"101\"` in binary and its **complement** is `\"010\"` which is the integer `2`. Given an integer `num`, return _its complement_. **Example 1:** ``` **Input:** num = 5 **Output:** 2 **Explanation:** The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2. ``` **Example 2:** ``` **Input:** num = 1 **Output:** 0 **Explanation:** The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0. ``` **Constraints:** `1 <= num < 231` **Note:** This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/', 'test_case': [{'label': 'Example 1', 'input': 'num = 5', 'output': '2 Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.'}, {'label': 'Example 2', 'input': 'num = 1', 'output': '0 Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_complement(num :: integer) :: integer\\n  def find_complement(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_complement(Num :: integer()) -> integer().\\nfind_complement(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def findComplement(num: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!569\n",
            "heaters 475\n",
            "{'id': 475, 'name': 'heaters', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/heaters/', 'task_description': \"Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses. Every house can be warmed, as long as the house is within the heater's warm radius range. Given the positions of `houses` and `heaters` on a horizontal line, return _the minimum radius standard of heaters so that those heaters could cover all houses._ **Notice** that all the `heaters` follow your radius standard, and the warm radius will the same. **Example 1:** ``` **Input:** houses = [1,2,3], heaters = [2] **Output:** 1 **Explanation:** The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed. ``` **Example 2:** ``` **Input:** houses = [1,2,3,4], heaters = [1,4] **Output:** 1 **Explanation:** The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed. ``` **Example 3:** ``` **Input:** houses = [1,5], heaters = [2] **Output:** 3 ``` **Constraints:** `1 <= houses.length, heaters.length <= 3 * 104` `1 <= houses[i], heaters[i] <= 109`\", 'test_case': [{'label': 'Example 1', 'input': 'houses = [1,2,3], heaters = [2]', 'output': '1 Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.'}, {'label': 'Example 2', 'input': 'houses = [1,2,3,4], heaters = [1,4]', 'output': '1 Explanation: The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed.'}, {'label': 'Example 3', 'input': 'houses = [1,5], heaters = [2]', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_radius(houses :: [integer], heaters :: [integer]) :: integer\\n  def find_radius(houses, heaters) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_radius(Houses :: [integer()], Heaters :: [integer()]) -> integer().\\nfind_radius(Houses, Heaters) ->\\n  .', 'scala_template': 'object Solution {\\n    def findRadius(houses: Array[Int], heaters: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!570\n",
            "ones-and-zeroes 474\n",
            "{'id': 474, 'name': 'ones-and-zeroes', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/ones-and-zeroes/', 'task_description': 'You are given an array of binary strings `strs` and two integers `m` and `n`. Return _the size of the largest subset of `strs` such that there are **at most** _`m`_ _`0`_\\'s and _`n`_ _`1`_\\'s in the subset_. A set `x` is a **subset** of a set `y` if all elements of `x` are also elements of `y`. **Example 1:** ``` **Input:** strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3 **Output:** 4 **Explanation:** The largest subset with at most 5 0\\'s and 3 1\\'s is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4. Other valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}. {\"111001\"} is an invalid subset because it contains 4 1\\'s, greater than the maximum of 3. ``` **Example 2:** ``` **Input:** strs = [\"10\",\"0\",\"1\"], m = 1, n = 1 **Output:** 2 Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2. ``` **Constraints:** `1 <= strs.length <= 600` `1 <= strs[i].length <= 100` `strs[i]` consists only of digits `\\'0\\'` and `\\'1\\'`. `1 <= m, n <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3', 'output': '4 Explanation: The largest subset with at most 5 0\\'s and 3 1\\'s is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\\n{\"111001\"} is an invalid subset because it contains 4 1\\'s, greater than the maximum of 3.'}, {'label': 'Example 2', 'input': 'strs = [\"10\",\"0\",\"1\"], m = 1, n = 1', 'output': '2 Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_max_form(strs :: [String.t], m :: integer, n :: integer) :: integer\\n  def find_max_form(strs, m, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_max_form(Strs :: [unicode:unicode_binary()], M :: integer(), N :: integer()) -> integer().\\nfind_max_form(Strs, M, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMaxForm(strs: Array[String], m: Int, n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!571\n",
            "matchsticks-to-square 473\n",
            "{'id': 473, 'name': 'matchsticks-to-square', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/matchsticks-to-square/', 'task_description': 'You are given an integer array `matchsticks` where `matchsticks[i]` is the length of the `ith` matchstick. You want to use **all the matchsticks** to make one square. You **should not break** any stick, but you can link them up, and each matchstick must be used **exactly one time**. Return `true` if you can make this square and `false` otherwise. **Example 1:** ``` **Input:** matchsticks = [1,1,2,2,2] **Output:** true **Explanation:** You can form a square with length 2, one side of the square came two sticks with length 1. ``` **Example 2:** ``` **Input:** matchsticks = [3,3,3,3,4] **Output:** false **Explanation:** You cannot find a way to form a square with all the matchsticks. ``` **Constraints:** `1 <= matchsticks.length <= 15` `1 <= matchsticks[i] <= 108`', 'test_case': [{'label': 'Example 1', 'input': 'matchsticks = [1,1,2,2,2]', 'output': 'true Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.'}, {'label': 'Example 2', 'input': 'matchsticks = [3,3,3,3,4]', 'output': 'false Explanation: You cannot find a way to form a square with all the matchsticks.'}], 'elixir_template': 'defmodule Solution do\\n  @spec makesquare(matchsticks :: [integer]) :: boolean\\n  def makesquare(matchsticks) do\\n    \\n  end\\nend', 'erlang_template': '-spec makesquare(Matchsticks :: [integer()]) -> boolean().\\nmakesquare(Matchsticks) ->\\n  .', 'scala_template': 'object Solution {\\n    def makesquare(matchsticks: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!572\n",
            "concatenated-words 472\n",
            "{'id': 472, 'name': 'concatenated-words', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/concatenated-words/', 'task_description': 'Given an array of strings `words` (**without duplicates**), return _all the **concatenated words** in the given list of_ `words`. A **concatenated word** is defined as a string that is comprised entirely of at least two shorter words (not necessarily distinct) in the given array. **Example 1:** ``` **Input:** words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"] **Output:** [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"] **Explanation:** \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\". ``` **Example 2:** ``` **Input:** words = [\"cat\",\"dog\",\"catdog\"] **Output:** [\"catdog\"] ``` **Constraints:** `1 <= words.length <= 104` `1 <= words[i].length <= 30` `words[i]` consists of only lowercase English letters. All the strings of `words` are **unique**. `1 <= sum(words[i].length) <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]', 'output': '[\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"] Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \\n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \\n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".'}, {'label': 'Example 2', 'input': 'words = [\"cat\",\"dog\",\"catdog\"]', 'output': '[\"catdog\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_all_concatenated_words_in_a_dict(words :: [String.t]) :: [String.t]\\n  def find_all_concatenated_words_in_a_dict(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_all_concatenated_words_in_a_dict(Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nfind_all_concatenated_words_in_a_dict(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def findAllConcatenatedWordsInADict(words: Array[String]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!573\n",
            "validate-ip-address 468\n",
            "{'id': 468, 'name': 'validate-ip-address', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/validate-ip-address/', 'task_description': 'Given a string `queryIP`, return `\"IPv4\"` if IP is a valid IPv4 address, `\"IPv6\"` if IP is a valid IPv6 address or `\"Neither\"` if IP is not a correct IP of any type. **A valid IPv4** address is an IP in the form `\"x1.x2.x3.x4\"` where `0 <= xi <= 255` and `xi` **cannot contain** leading zeros. For example, `\"192.168.1.1\"` and `\"192.168.1.0\"` are valid IPv4 addresses while `\"192.168.01.1\"`, `\"192.168.1.00\"`, and `\"192.168@1.1\"` are invalid IPv4 addresses. **A valid IPv6** address is an IP in the form `\"x1:x2:x3:x4:x5:x6:x7:x8\"` where: `1 <= xi.length <= 4` `xi` is a **hexadecimal string** which may contain digits, lowercase English letter (`\\'a\\'` to `\\'f\\'`) and upper-case English letters (`\\'A\\'` to `\\'F\\'`). Leading zeros are allowed in `xi`. For example, \"`2001:0db8:85a3:0000:0000:8a2e:0370:7334\"` and \"`2001:db8:85a3:0:0:8A2E:0370:7334\"` are valid IPv6 addresses, while \"`2001:0db8:85a3::8A2E:037j:7334\"` and \"`02001:0db8:85a3:0000:0000:8a2e:0370:7334\"` are invalid IPv6 addresses. **Example 1:** ``` **Input:** queryIP = \"172.16.254.1\" **Output:** \"IPv4\" **Explanation:** This is a valid IPv4 address, return \"IPv4\". ``` **Example 2:** ``` **Input:** queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\" **Output:** \"IPv6\" **Explanation:** This is a valid IPv6 address, return \"IPv6\". ``` **Example 3:** ``` **Input:** queryIP = \"256.256.256.256\" **Output:** \"Neither\" **Explanation:** This is neither a IPv4 address nor a IPv6 address. ``` **Constraints:** `queryIP` consists only of English letters, digits and the characters `\\'.\\'` and `\\':\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'queryIP = \"172.16.254.1\"', 'output': '\"IPv4\" Explanation: This is a valid IPv4 address, return \"IPv4\".'}, {'label': 'Example 2', 'input': 'queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"', 'output': '\"IPv6\" Explanation: This is a valid IPv6 address, return \"IPv6\".'}, {'label': 'Example 3', 'input': 'queryIP = \"256.256.256.256\"', 'output': '\"Neither\" Explanation: This is neither a IPv4 address nor a IPv6 address. Constraints: queryIP consists only of English letters, digits and the characters \\'.\\' and \\':\\' .'}], 'elixir_template': 'defmodule Solution do\\n  @spec valid_ip_address(query_ip :: String.t) :: String.t\\n  def valid_ip_address(query_ip) do\\n    \\n  end\\nend', 'erlang_template': '-spec valid_ip_address(QueryIP :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nvalid_ip_address(QueryIP) ->\\n  .', 'scala_template': 'object Solution {\\n    def validIPAddress(queryIP: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!574\n",
            "unique-substrings-in-wraparound-string 467\n",
            "{'id': 467, 'name': 'unique-substrings-in-wraparound-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/unique-substrings-in-wraparound-string/', 'task_description': 'We define the string `base` to be the infinite wraparound string of `\"abcdefghijklmnopqrstuvwxyz\"`, so `base` will look like this: `\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\"`. Given a string `s`, return _the number of **unique non-empty substrings** of _`s`_ are present in _`base`. **Example 1:** ``` **Input:** s = \"a\" **Output:** 1 **Explanation:** Only the substring \"a\" of s is in base. ``` **Example 2:** ``` **Input:** s = \"cac\" **Output:** 2 **Explanation:** There are two substrings (\"a\", \"c\") of s in base. ``` **Example 3:** ``` **Input:** s = \"zab\" **Output:** 6 **Explanation:** There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base. ``` **Constraints:** `1 <= s.length <= 105` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"a\"', 'output': '1 Explanation: Only the substring \"a\" of s is in base.'}, {'label': 'Example 2', 'input': 's = \"cac\"', 'output': '2 Explanation: There are two substrings (\"a\", \"c\") of s in base.'}, {'label': 'Example 3', 'input': 's = \"zab\"', 'output': '6 Explanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of s in base.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_substring_in_wrapround_string(s :: String.t) :: integer\\n  def find_substring_in_wrapround_string(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_substring_in_wrapround_string(S :: unicode:unicode_binary()) -> integer().\\nfind_substring_in_wrapround_string(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def findSubstringInWraproundString(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!575\n",
            "count-the-repetitions 466\n",
            "{'id': 466, 'name': 'count-the-repetitions', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/count-the-repetitions/', 'task_description': 'We define `str = [s, n]` as the string `str` which consists of the string `s` concatenated `n` times. For example, `str == [\"abc\", 3] ==\"abcabcabc\"`. We define that string `s1` can be obtained from string `s2` if we can remove some characters from `s2` such that it becomes `s1`. For example, `s1 = \"abc\"` can be obtained from `s2 = \"ab**dbe**c\"` based on our definition by removing the bolded underlined characters. You are given two strings `s1` and `s2` and two integers `n1` and `n2`. You have the two strings `str1 = [s1, n1]` and `str2 = [s2, n2]`. Return _the maximum integer _`m`_ such that _`str = [str2, m]`_ can be obtained from _`str1`. **Example 1:** ``` **Input:** s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2 **Output:** 2 ``` **Example 2:** ``` **Input:** s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1 **Output:** 1 ``` **Constraints:** `1 <= s1.length, s2.length <= 100` `s1` and `s2` consist of lowercase English letters. `1 <= n1, n2 <= 106`', 'test_case': [{'label': 'Example 1', 'input': 's1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2', 'output': '2'}, {'label': 'Example 2', 'input': 's1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec get_max_repetitions(s1 :: String.t, n1 :: integer, s2 :: String.t, n2 :: integer) :: integer\\n  def get_max_repetitions(s1, n1, s2, n2) do\\n    \\n  end\\nend', 'erlang_template': '-spec get_max_repetitions(S1 :: unicode:unicode_binary(), N1 :: integer(), S2 :: unicode:unicode_binary(), N2 :: integer()) -> integer().\\nget_max_repetitions(S1, N1, S2, N2) ->\\n  .', 'scala_template': 'object Solution {\\n    def getMaxRepetitions(s1: String, n1: Int, s2: String, n2: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!576\n",
            "can-i-win 464\n",
            "{'id': 464, 'name': 'can-i-win', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/can-i-win/', 'task_description': 'In the \"100 game\" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to **reach or exceed** 100 wins. What if we change the game so that players **cannot** re-use integers? For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100. Given two integers `maxChoosableInteger` and `desiredTotal`, return `true` if the first player to move can force a win, otherwise, return `false`. Assume both players play **optimally**. **Example 1:** ``` **Input:** maxChoosableInteger = 10, desiredTotal = 11 **Output:** false **Explanation:** No matter which integer the first player choose, the first player will lose. The first player can choose an integer from 1 up to 10. If the first player choose 1, the second player can only choose integers from 2 up to 10. The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal. Same with other integers chosen by the first player, the second player will always win. ``` **Example 2:** ``` **Input:** maxChoosableInteger = 10, desiredTotal = 0 **Output:** true ``` **Example 3:** ``` **Input:** maxChoosableInteger = 10, desiredTotal = 1 **Output:** true ``` **Constraints:** `1 <= maxChoosableInteger <= 20` `0 <= desiredTotal <= 300`', 'test_case': [{'label': 'Example 1', 'input': 'maxChoosableInteger = 10, desiredTotal = 11', 'output': 'false Explanation: No matter which integer the first player choose, the first player will lose.\\nThe first player can choose an integer from 1 up to 10.\\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\\nSame with other integers chosen by the first player, the second player will always win.'}, {'label': 'Example 2', 'input': 'maxChoosableInteger = 10, desiredTotal = 0', 'output': 'true'}, {'label': 'Example 3', 'input': 'maxChoosableInteger = 10, desiredTotal = 1', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_i_win(max_choosable_integer :: integer, desired_total :: integer) :: boolean\\n  def can_i_win(max_choosable_integer, desired_total) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_i_win(MaxChoosableInteger :: integer(), DesiredTotal :: integer()) -> boolean().\\ncan_i_win(MaxChoosableInteger, DesiredTotal) ->\\n  .', 'scala_template': 'object Solution {\\n    def canIWin(maxChoosableInteger: Int, desiredTotal: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!577\n",
            "island-perimeter 463\n",
            "{'id': 463, 'name': 'island-perimeter', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/island-perimeter/', 'task_description': 'You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water. Grid cells are connected **horizontally/vertically** (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn\\'t have \"lakes\", meaning the water inside isn\\'t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don\\'t exceed 100. Determine the perimeter of the island. **Example 1:** ``` **Input:** grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]] **Output:** 16 **Explanation:** The perimeter is the 16 yellow stripes in the image above. ``` **Example 2:** ``` **Input:** grid = [[1]] **Output:** 4 ``` **Example 3:** ``` **Input:** grid = [[1,0]] **Output:** 4 ``` **Constraints:** `row == grid.length` `col == grid[i].length` `1 <= row, col <= 100` `grid[i][j]` is `0` or `1`. There is exactly one island in `grid`.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]', 'output': '16 Explanation: The perimeter is the 16 yellow stripes in the image above.'}, {'label': 'Example 2', 'input': 'grid = [[1]]', 'output': '4'}, {'label': 'Example 3', 'input': 'grid = [[1,0]]', 'output': '4 Constraints: row == grid.length col == grid[i].length 1 <= row, col <= 100 grid[i][j] is 0 or 1 . There is exactly one island in grid .'}], 'elixir_template': 'defmodule Solution do\\n  @spec island_perimeter(grid :: [[integer]]) :: integer\\n  def island_perimeter(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec island_perimeter(Grid :: [[integer()]]) -> integer().\\nisland_perimeter(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def islandPerimeter(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!578\n",
            "minimum-moves-to-equal-array-elements-ii 462\n",
            "{'id': 462, 'name': 'minimum-moves-to-equal-array-elements-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/', 'task_description': 'Given an integer array `nums` of size `n`, return _the minimum number of moves required to make all array elements equal_. In one move, you can increment or decrement an element of the array by `1`. Test cases are designed so that the answer will fit in a **32-bit** integer. **Example 1:** ``` **Input:** nums = [1,2,3] **Output:** 2 **Explanation:** Only two moves are needed (remember each move increments or decrements one element): [1,2,3] => [2,2,3] => [2,2,2] ``` **Example 2:** ``` **Input:** nums = [1,10,2,9] **Output:** 16 ``` **Constraints:** `n == nums.length` `1 <= nums.length <= 105` `-109 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3]', 'output': '2 Explanation: Only two moves are needed (remember each move increments or decrements one element):\\n[ 1 ,2,3]  =>  [2,2, 3 ]  =>  [2,2,2]'}, {'label': 'Example 2', 'input': 'nums = [1,10,2,9]', 'output': '16 Constraints: n == nums.length 1 <= nums.length <= 10 5 -10 9 <= nums[i] <= 10 9'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_moves2(nums :: [integer]) :: integer\\n  def min_moves2(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_moves2(Nums :: [integer()]) -> integer().\\nmin_moves2(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def minMoves2(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!579\n",
            "hamming-distance 461\n",
            "{'id': 461, 'name': 'hamming-distance', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/hamming-distance/', 'task_description': 'The Hamming distance between two integers is the number of positions at which the corresponding bits are different. Given two integers `x` and `y`, return _the **Hamming distance** between them_. **Example 1:** ``` **Input:** x = 1, y = 4 **Output:** 2 **Explanation:** 1 (0 0 0 1) 4 (0 1 0 0) ↑ ↑ The above arrows point to positions where the corresponding bits are different. ``` **Example 2:** ``` **Input:** x = 3, y = 1 **Output:** 1 ``` **Constraints:** `0 <= x, y <= 231 - 1` **Note:** This question is the same as 2220: Minimum Bit Flips to Convert Number.', 'test_case': [{'label': 'Example 1', 'input': 'x = 1, y = 4', 'output': '2 Explanation: 1   (0 0 0 1)\\n4   (0 1 0 0)\\n       ↑   ↑\\nThe above arrows point to positions where the corresponding bits are different.'}, {'label': 'Example 2', 'input': 'x = 3, y = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec hamming_distance(x :: integer, y :: integer) :: integer\\n  def hamming_distance(x, y) do\\n    \\n  end\\nend', 'erlang_template': '-spec hamming_distance(X :: integer(), Y :: integer()) -> integer().\\nhamming_distance(X, Y) ->\\n  .', 'scala_template': 'object Solution {\\n    def hammingDistance(x: Int, y: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!580\n",
            "lfu-cache 460\n",
            "{'id': 460, 'name': 'lfu-cache', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/lfu-cache/', 'task_description': 'Design and implement a data structure for a Least Frequently Used (LFU) cache. Implement the `LFUCache` class: `LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure. `int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`. `void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the **least frequently used** key before inserting a new item. For this problem, when there is a **tie** (i.e., two or more keys with the same frequency), the **least recently used** `key` would be invalidated. To determine the least frequently used key, a **use counter** is maintained for each key in the cache. The key with the smallest **use counter** is the least frequently used key. When a key is first inserted into the cache, its **use counter** is set to `1` (due to the `put` operation). The **use counter** for a key in the cache is incremented either a `get` or `put` operation is called on it. The functions `get` and `put` must each run in `O(1)` average time complexity. **Example 1:** ``` **Input** [\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]] **Output** [null, null, null, 1, null, -1, 3, null, -1, 3, 4] **Explanation** // cnt(x) = the use counter for key x // cache=[] will show the last used order for tiebreakers (leftmost element is most recent) LFUCache lfu = new LFUCache(2); lfu.put(1, 1); // cache=[1,_], cnt(1)=1 lfu.put(2, 2); // cache=[2,1], cnt(2)=1, cnt(1)=1 lfu.get(1); // return 1 // cache=[1,2], cnt(2)=1, cnt(1)=2 lfu.put(3, 3); // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2. // cache=[3,1], cnt(3)=1, cnt(1)=2 lfu.get(2); // return -1 (not found) lfu.get(3); // return 3 // cache=[3,1], cnt(3)=2, cnt(1)=2 lfu.put(4, 4); // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1. // cache=[4,3], cnt(4)=1, cnt(3)=2 lfu.get(1); // return -1 (not found) lfu.get(3); // return 3 // cache=[3,4], cnt(4)=1, cnt(3)=3 lfu.get(4); // return 4 // cache=[4,3], cnt(4)=2, cnt(3)=3 ``` **Constraints:** `1 <= capacity <= 104` `0 <= key <= 105` `0 <= value <= 109` At most `2 * 105` calls will be made to `get` and `put`.', 'test_case': [], 'elixir_template': 'defmodule LFUCache do\\n  @spec init_(capacity :: integer) :: any\\n  def init_(capacity) do\\n    \\n  end\\n\\n  @spec get(key :: integer) :: integer\\n  def get(key) do\\n    \\n  end\\n\\n  @spec put(key :: integer, value :: integer) :: any\\n  def put(key, value) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# LFUCache.init_(capacity)\\n# param_1 = LFUCache.get(key)\\n# LFUCache.put(key, value)\\n\\n# LFUCache.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec lfu_cache_init_(Capacity :: integer()) -> any().\\nlfu_cache_init_(Capacity) ->\\n  .\\n\\n-spec lfu_cache_get(Key :: integer()) -> integer().\\nlfu_cache_get(Key) ->\\n  .\\n\\n-spec lfu_cache_put(Key :: integer(), Value :: integer()) -> any().\\nlfu_cache_put(Key, Value) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% lfu_cache_init_(Capacity),\\n%% Param_1 = lfu_cache_get(Key),\\n%% lfu_cache_put(Key, Value),\\n\\n%% lfu_cache_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class LFUCache(_capacity: Int) {\\n\\n    def get(key: Int): Int = {\\n        \\n    }\\n\\n    def put(key: Int, value: Int): Unit = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LFUCache object will be instantiated and called as such:\\n * val obj = new LFUCache(capacity)\\n * val param_1 = obj.get(key)\\n * obj.put(key,value)\\n */'}\n",
            "Done!581\n",
            "repeated-substring-pattern 459\n",
            "{'id': 459, 'name': 'repeated-substring-pattern', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/repeated-substring-pattern/', 'task_description': 'Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. **Example 1:** ``` **Input:** s = \"abab\" **Output:** true **Explanation:** It is the substring \"ab\" twice. ``` **Example 2:** ``` **Input:** s = \"aba\" **Output:** false ``` **Example 3:** ``` **Input:** s = \"abcabcabcabc\" **Output:** true **Explanation:** It is the substring \"abc\" four times or the substring \"abcabc\" twice. ``` **Constraints:** `1 <= s.length <= 104` `s` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abab\"', 'output': 'true Explanation: It is the substring \"ab\" twice.'}, {'label': 'Example 2', 'input': 's = \"aba\"', 'output': 'false'}, {'label': 'Example 3', 'input': 's = \"abcabcabcabc\"', 'output': 'true Explanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.'}], 'elixir_template': 'defmodule Solution do\\n  @spec repeated_substring_pattern(s :: String.t) :: boolean\\n  def repeated_substring_pattern(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec repeated_substring_pattern(S :: unicode:unicode_binary()) -> boolean().\\nrepeated_substring_pattern(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def repeatedSubstringPattern(s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!582\n",
            "poor-pigs 458\n",
            "{'id': 458, 'name': 'poor-pigs', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/poor-pigs/', 'task_description': 'There are `buckets` buckets of liquid, where **exactly one** of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have `minutesToTest` minutes to determine which bucket is poisonous. You can feed the pigs according to these steps: Choose some live pigs to feed. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs. Wait for `minutesToDie` minutes. You may **not** feed any other pigs during this time. After `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive. Repeat this process until you run out of time. Given `buckets`, `minutesToDie`, and `minutesToTest`, return _the **minimum** number of pigs needed to figure out which bucket is poisonous within the allotted time_. **Example 1:** ``` **Input:** buckets = 4, minutesToDie = 15, minutesToTest = 15 **Output:** 2 **Explanation:** We can determine the poisonous bucket as follows: At time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3. At time 15, there are 4 possible outcomes: - If only the first pig dies, then bucket 1 must be poisonous. - If only the second pig dies, then bucket 3 must be poisonous. - If both pigs die, then bucket 2 must be poisonous. - If neither pig dies, then bucket 4 must be poisonous. ``` **Example 2:** ``` **Input:** buckets = 4, minutesToDie = 15, minutesToTest = 30 **Output:** 2 **Explanation:** We can determine the poisonous bucket as follows: At time 0, feed the first pig bucket 1, and feed the second pig bucket 2. At time 15, there are 2 possible outcomes: - If either pig dies, then the poisonous bucket is the one it was fed. - If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4. At time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed. ``` **Constraints:** `1 <= buckets <= 1000` `1 <= minutesToDie <= minutesToTest <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'buckets = 4, minutesToDie = 15, minutesToTest = 15', 'output': '2 Explanation: We can determine the poisonous bucket as follows:\\nAt time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.\\nAt time 15, there are 4 possible outcomes:\\n- If only the first pig dies, then bucket 1 must be poisonous.\\n- If only the second pig dies, then bucket 3 must be poisonous.\\n- If both pigs die, then bucket 2 must be poisonous.\\n- If neither pig dies, then bucket 4 must be poisonous.'}, {'label': 'Example 2', 'input': 'buckets = 4, minutesToDie = 15, minutesToTest = 30', 'output': '2 Explanation: We can determine the poisonous bucket as follows:\\nAt time 0, feed the first pig bucket 1, and feed the second pig bucket 2.\\nAt time 15, there are 2 possible outcomes:\\n- If either pig dies, then the poisonous bucket is the one it was fed.\\n- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.\\nAt time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.'}], 'elixir_template': 'defmodule Solution do\\n  @spec poor_pigs(buckets :: integer, minutes_to_die :: integer, minutes_to_test :: integer) :: integer\\n  def poor_pigs(buckets, minutes_to_die, minutes_to_test) do\\n    \\n  end\\nend', 'erlang_template': '-spec poor_pigs(Buckets :: integer(), MinutesToDie :: integer(), MinutesToTest :: integer()) -> integer().\\npoor_pigs(Buckets, MinutesToDie, MinutesToTest) ->\\n  .', 'scala_template': 'object Solution {\\n    def poorPigs(buckets: Int, minutesToDie: Int, minutesToTest: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!583\n",
            "circular-array-loop 457\n",
            "{'id': 457, 'name': 'circular-array-loop', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/circular-array-loop/', 'task_description': 'You are playing a game involving a **circular** array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`: If `nums[i]` is positive, move `nums[i]` steps **forward**, and If `nums[i]` is negative, move `nums[i]` steps **backward**. Since the array is **circular**, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element. A **cycle** in the array consists of a sequence of indices `seq` of length `k` where: Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...` Every `nums[seq[j]]` is either **all positive** or **all negative**. `k > 1` Return `true`_ if there is a **cycle** in _`nums`_, or _`false`_ otherwise_. **Example 1:** ``` **Input:** nums = [2,-1,1,2,2] **Output:** true **Explanation:** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. We can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction). ``` **Example 2:** ``` **Input:** nums = [-1,-2,-3,-4,-5,6] **Output:** false **Explanation:** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. The only cycle is of size 1, so we return false. ``` **Example 3:** ``` **Input:** nums = [1,-1,5,1,4] **Output:** true **Explanation:** The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward. We can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so **it is not a cycle**. We can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction). ``` **Constraints:** `1 <= nums.length <= 5000` `-1000 <= nums[i] <= 1000` `nums[i] != 0` **Follow up:** Could you solve it in `O(n)` time complexity and `O(1)` extra space complexity?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,-1,1,2,2]', 'output': 'true Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\\nWe can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction).'}, {'label': 'Example 2', 'input': 'nums = [-1,-2,-3,-4,-5,6]', 'output': 'false Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\\nThe only cycle is of size 1, so we return false.'}, {'label': 'Example 3', 'input': 'nums = [1,-1,5,1,4]', 'output': 'true Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.\\nWe can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle .\\nWe can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction).'}], 'elixir_template': 'defmodule Solution do\\n  @spec circular_array_loop(nums :: [integer]) :: boolean\\n  def circular_array_loop(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec circular_array_loop(Nums :: [integer()]) -> boolean().\\ncircular_array_loop(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def circularArrayLoop(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!584\n",
            "132-pattern 456\n",
            "{'id': 456, 'name': '132-pattern', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/132-pattern/', 'task_description': 'Given an array of `n` integers `nums`, a **132 pattern** is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`. Return `true`_ if there is a **132 pattern** in _`nums`_, otherwise, return _`false`_._ **Example 1:** ``` **Input:** nums = [1,2,3,4] **Output:** false **Explanation:** There is no 132 pattern in the sequence. ``` **Example 2:** ``` **Input:** nums = [3,1,4,2] **Output:** true **Explanation:** There is a 132 pattern in the sequence: [1, 4, 2]. ``` **Example 3:** ``` **Input:** nums = [-1,3,2,0] **Output:** true **Explanation:** There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]. ``` **Constraints:** `n == nums.length` `1 <= n <= 2 * 105` `-109 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,4]', 'output': 'false Explanation: There is no 132 pattern in the sequence.'}, {'label': 'Example 2', 'input': 'nums = [3,1,4,2]', 'output': 'true Explanation: There is a 132 pattern in the sequence: [1, 4, 2].'}, {'label': 'Example 3', 'input': 'nums = [-1,3,2,0]', 'output': 'true Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]. Constraints: n == nums.length 1 <= n <= 2 * 10 5 -10 9 <= nums[i] <= 10 9'}], 'elixir_template': 'defmodule Solution do\\n  @spec find132pattern(nums :: [integer]) :: boolean\\n  def find132pattern(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find132pattern(Nums :: [integer()]) -> boolean().\\nfind132pattern(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def find132pattern(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!585\n",
            "assign-cookies 455\n",
            "{'id': 455, 'name': 'assign-cookies', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/assign-cookies/', 'task_description': 'Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number. **Example 1:** ``` **Input:** g = [1,2,3], s = [1,1] **Output:** 1 **Explanation:** You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. You need to output 1. ``` **Example 2:** ``` **Input:** g = [1,2], s = [1,2,3] **Output:** 2 **Explanation:** You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. You have 3 cookies and their sizes are big enough to gratify all of the children, You need to output 2. ``` **Constraints:** `1 <= g.length <= 3 * 104` `0 <= s.length <= 3 * 104` `1 <= g[i], s[j] <= 231 - 1` **Note:** This question is the same as 2410: Maximum Matching of Players With Trainers.', 'test_case': [{'label': 'Example 1', 'input': 'g = [1,2,3], s = [1,1]', 'output': '1 Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\\nYou need to output 1.'}, {'label': 'Example 2', 'input': 'g = [1,2], s = [1,2,3]', 'output': '2 Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \\nYou need to output 2.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_content_children(g :: [integer], s :: [integer]) :: integer\\n  def find_content_children(g, s) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_content_children(G :: [integer()], S :: [integer()]) -> integer().\\nfind_content_children(G, S) ->\\n  .', 'scala_template': 'object Solution {\\n    def findContentChildren(g: Array[Int], s: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!586\n",
            "4sum-ii 454\n",
            "{'id': 454, 'name': '4sum-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/4sum-ii/', 'task_description': 'Given four integer arrays `nums1`, `nums2`, `nums3`, and `nums4` all of length `n`, return the number of tuples `(i, j, k, l)` such that: `0 <= i, j, k, l < n` `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0` **Example 1:** ``` **Input:** nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2] **Output:** 2 **Explanation:** The two tuples are: 1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0 ``` **Example 2:** ``` **Input:** nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0] **Output:** 1 ``` **Constraints:** `n == nums1.length` `n == nums2.length` `n == nums3.length` `n == nums4.length` `1 <= n <= 200` `-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228`', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]', 'output': '2 Explanation: The two tuples are:\\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0'}, {'label': 'Example 2', 'input': 'nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]', 'output': '1 Constraints: n == nums1.length n == nums2.length n == nums3.length n == nums4.length 1 <= n <= 200 -2 28 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 2 28'}], 'elixir_template': 'defmodule Solution do\\n  @spec four_sum_count(nums1 :: [integer], nums2 :: [integer], nums3 :: [integer], nums4 :: [integer]) :: integer\\n  def four_sum_count(nums1, nums2, nums3, nums4) do\\n    \\n  end\\nend', 'erlang_template': '-spec four_sum_count(Nums1 :: [integer()], Nums2 :: [integer()], Nums3 :: [integer()], Nums4 :: [integer()]) -> integer().\\nfour_sum_count(Nums1, Nums2, Nums3, Nums4) ->\\n  .', 'scala_template': 'object Solution {\\n    def fourSumCount(nums1: Array[Int], nums2: Array[Int], nums3: Array[Int], nums4: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!587\n",
            "minimum-moves-to-equal-array-elements 453\n",
            "{'id': 453, 'name': 'minimum-moves-to-equal-array-elements', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-moves-to-equal-array-elements/', 'task_description': 'Given an integer array `nums` of size `n`, return _the minimum number of moves required to make all array elements equal_. In one move, you can increment `n - 1` elements of the array by `1`. **Example 1:** ``` **Input:** nums = [1,2,3] **Output:** 3 **Explanation:** Only three moves are needed (remember each move increments two elements): [1,2,3] => [2,3,3] => [3,4,3] => [4,4,4] ``` **Example 2:** ``` **Input:** nums = [1,1,1] **Output:** 0 ``` **Constraints:** `n == nums.length` `1 <= nums.length <= 105` `-109 <= nums[i] <= 109` The answer is guaranteed to fit in a **32-bit** integer.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3]', 'output': '3 Explanation: Only three moves are needed (remember each move increments two elements):\\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]'}, {'label': 'Example 2', 'input': 'nums = [1,1,1]', 'output': '0 Constraints: n == nums.length 1 <= nums.length <= 10 5 -10 9 <= nums[i] <= 10 9 The answer is guaranteed to fit in a 32-bit integer.'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_moves(nums :: [integer]) :: integer\\n  def min_moves(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_moves(Nums :: [integer()]) -> integer().\\nmin_moves(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def minMoves(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!588\n",
            "minimum-number-of-arrows-to-burst-balloons 452\n",
            "{'id': 452, 'name': 'minimum-number-of-arrows-to-burst-balloons', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/', 'task_description': 'There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates of the balloons. Arrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path. Given the array `points`, return _the **minimum** number of arrows that must be shot to burst all balloons_. **Example 1:** ``` **Input:** points = [[10,16],[2,8],[1,6],[7,12]] **Output:** 2 **Explanation:** The balloons can be burst by 2 arrows: - Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6]. - Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12]. ``` **Example 2:** ``` **Input:** points = [[1,2],[3,4],[5,6],[7,8]] **Output:** 4 **Explanation:** One arrow needs to be shot for each balloon for a total of 4 arrows. ``` **Example 3:** ``` **Input:** points = [[1,2],[2,3],[3,4],[4,5]] **Output:** 2 **Explanation:** The balloons can be burst by 2 arrows: - Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3]. - Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5]. ``` **Constraints:** `1 <= points.length <= 105` `points[i].length == 2` `-231 <= xstart < xend <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'points = [[10,16],[2,8],[1,6],[7,12]]', 'output': '2 Explanation: The balloons can be burst by 2 arrows:\\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].'}, {'label': 'Example 2', 'input': 'points = [[1,2],[3,4],[5,6],[7,8]]', 'output': '4 Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.'}, {'label': 'Example 3', 'input': 'points = [[1,2],[2,3],[3,4],[4,5]]', 'output': '2 Explanation: The balloons can be burst by 2 arrows:\\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_min_arrow_shots(points :: [[integer]]) :: integer\\n  def find_min_arrow_shots(points) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_min_arrow_shots(Points :: [[integer()]]) -> integer().\\nfind_min_arrow_shots(Points) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMinArrowShots(points: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!589\n",
            "sort-characters-by-frequency 451\n",
            "{'id': 451, 'name': 'sort-characters-by-frequency', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sort-characters-by-frequency/', 'task_description': 'Given a string `s`, sort it in **decreasing order** based on the **frequency** of the characters. The **frequency** of a character is the number of times it appears in the string. Return _the sorted string_. If there are multiple answers, return _any of them_. **Example 1:** ``` **Input:** s = \"tree\" **Output:** \"eert\" **Explanation:** \\'e\\' appears twice while \\'r\\' and \\'t\\' both appear once. So \\'e\\' must appear before both \\'r\\' and \\'t\\'. Therefore \"eetr\" is also a valid answer. ``` **Example 2:** ``` **Input:** s = \"cccaaa\" **Output:** \"aaaccc\" **Explanation:** Both \\'c\\' and \\'a\\' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers. Note that \"cacaca\" is incorrect, as the same characters must be together. ``` **Example 3:** ``` **Input:** s = \"Aabb\" **Output:** \"bbAa\" **Explanation:** \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect. Note that \\'A\\' and \\'a\\' are treated as two different characters. ``` **Constraints:** `1 <= s.length <= 5 * 105` `s` consists of uppercase and lowercase English letters and digits.', 'test_case': [{'label': 'Example 1', 'input': 's = \"tree\"', 'output': '\"eert\" Explanation: \\'e\\' appears twice while \\'r\\' and \\'t\\' both appear once.\\nSo \\'e\\' must appear before both \\'r\\' and \\'t\\'. Therefore \"eetr\" is also a valid answer.'}, {'label': 'Example 2', 'input': 's = \"cccaaa\"', 'output': '\"aaaccc\" Explanation: Both \\'c\\' and \\'a\\' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\\nNote that \"cacaca\" is incorrect, as the same characters must be together.'}, {'label': 'Example 3', 'input': 's = \"Aabb\"', 'output': '\"bbAa\" Explanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\\nNote that \\'A\\' and \\'a\\' are treated as two different characters.'}], 'elixir_template': 'defmodule Solution do\\n  @spec frequency_sort(s :: String.t) :: String.t\\n  def frequency_sort(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec frequency_sort(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nfrequency_sort(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def frequencySort(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!590\n",
            "delete-node-in-a-bst 450\n",
            "{'id': 450, 'name': 'delete-node-in-a-bst', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/delete-node-in-a-bst/', 'task_description': \"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return _the **root node reference** (possibly updated) of the BST_. Basically, the deletion can be divided into two stages: Search for a node to remove. If the node is found, delete the node. **Example 1:** ``` **Input:** root = [5,3,6,2,4,null,7], key = 3 **Output:** [5,4,6,2,null,null,7] **Explanation:** Given key to delete is 3. So we find the node with value 3 and delete it. One valid answer is [5,4,6,2,null,null,7], shown in the above BST. Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted. ``` **Example 2:** ``` **Input:** root = [5,3,6,2,4,null,7], key = 0 **Output:** [5,3,6,2,4,null,7] **Explanation:** The tree does not contain a node with value = 0. ``` **Example 3:** ``` **Input:** root = [], key = 0 **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `-105 <= Node.val <= 105` Each node has a **unique** value. `root` is a valid binary search tree. `-105 <= key <= 105` **Follow up:** Could you solve it with time complexity `O(height of tree)`?\", 'test_case': [{'label': 'Example 1', 'input': 'root = [5,3,6,2,4,null,7], key = 3', 'output': \"[5,4,6,2,null,null,7] Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.\\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\"}, {'label': 'Example 2', 'input': 'root = [5,3,6,2,4,null,7], key = 0', 'output': '[5,3,6,2,4,null,7] Explanation: The tree does not contain a node with value = 0.'}, {'label': 'Example 3', 'input': 'root = [], key = 0', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . -10 5 <= Node.val <= 10 5 Each node has a unique value. root is a valid binary search tree. -10 5 <= key <= 10 5 Follow up: Could you solve it with time complexity O(height of tree) ?'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec delete_node(root :: TreeNode.t | nil, key :: integer) :: TreeNode.t | nil\\n  def delete_node(root, key) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec delete_node(Root :: #tree_node{} | null, Key :: integer()) -> #tree_node{} | null.\\ndelete_node(Root, Key) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def deleteNode(root: TreeNode, key: Int): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!591\n",
            "serialize-and-deserialize-bst 449\n",
            "{'id': 449, 'name': 'serialize-and-deserialize-bst', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/serialize-and-deserialize-bst/', 'task_description': 'Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure. The encoded string should be as compact as possible. **Example 1:** ``` **Input:** root = [2,1,3] **Output:** [2,1,3] ``` **Example 2:** ``` **Input:** root = [] **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `0 <= Node.val <= 104` The input tree is **guaranteed** to be a binary search tree.', 'test_case': [{'label': 'Example 1', 'input': 'root = [2,1,3]', 'output': '[2,1,3]'}, {'label': 'Example 2', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . 0 <= Node.val <= 10 4 The input tree is guaranteed to be a binary search tree.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nclass Codec {\\n    // Encodes a tree to a single string.\\n    def serialize(root: TreeNode): String = {\\n        \\n    }\\n    \\n    // Decodes your encoded data to tree.\\n    def deserialize(data: String): TreeNode = {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * val ser = new Codec()\\n * val deser = new Codec()\\n * val tree: String = ser.serialize(root)\\n * val ans = deser.deserialize(tree)\\n * return ans\\n */'}\n",
            "Done!592\n",
            "find-all-numbers-disappeared-in-an-array 448\n",
            "{'id': 448, 'name': 'find-all-numbers-disappeared-in-an-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/', 'task_description': 'Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return _an array of all the integers in the range_ `[1, n]` _that do not appear in_ `nums`. **Example 1:** ``` **Input:** nums = [4,3,2,7,8,2,3,1] **Output:** [5,6] ``` **Example 2:** ``` **Input:** nums = [1,1] **Output:** [2] ``` **Constraints:** `n == nums.length` `1 <= n <= 105` `1 <= nums[i] <= n` **Follow up:** Could you do it without extra space and in `O(n)` runtime? You may assume the returned list does not count as extra space.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,3,2,7,8,2,3,1]', 'output': '[5,6]'}, {'label': 'Example 2', 'input': 'nums = [1,1]', 'output': '[2] Constraints: n == nums.length 1 <= n <= 10 5 1 <= nums[i] <= n Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_disappeared_numbers(nums :: [integer]) :: [integer]\\n  def find_disappeared_numbers(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_disappeared_numbers(Nums :: [integer()]) -> [integer()].\\nfind_disappeared_numbers(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findDisappearedNumbers(nums: Array[Int]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!593\n",
            "number-of-boomerangs 447\n",
            "{'id': 447, 'name': 'number-of-boomerangs', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/number-of-boomerangs/', 'task_description': 'You are given `n` `points` in the plane that are all **distinct**, where `points[i] = [xi, yi]`. A **boomerang** is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` **(the order of the tuple matters)**. Return _the number of boomerangs_. **Example 1:** ``` **Input:** points = [[0,0],[1,0],[2,0]] **Output:** 2 **Explanation:** The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]. ``` **Example 2:** ``` **Input:** points = [[1,1],[2,2],[3,3]] **Output:** 2 ``` **Example 3:** ``` **Input:** points = [[1,1]] **Output:** 0 ``` **Constraints:** `n == points.length` `1 <= n <= 500` `points[i].length == 2` `-104 <= xi, yi <= 104` All the points are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'points = [[0,0],[1,0],[2,0]]', 'output': '2 Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].'}, {'label': 'Example 2', 'input': 'points = [[1,1],[2,2],[3,3]]', 'output': '2'}, {'label': 'Example 3', 'input': 'points = [[1,1]]', 'output': '0 Constraints: n == points.length 1 <= n <= 500 points[i].length == 2 -10 4 <= x i , y i <= 10 4 All the points are unique .'}], 'elixir_template': 'defmodule Solution do\\n  @spec number_of_boomerangs(points :: [[integer]]) :: integer\\n  def number_of_boomerangs(points) do\\n    \\n  end\\nend', 'erlang_template': '-spec number_of_boomerangs(Points :: [[integer()]]) -> integer().\\nnumber_of_boomerangs(Points) ->\\n  .', 'scala_template': 'object Solution {\\n    def numberOfBoomerangs(points: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!594\n",
            "arithmetic-slices-ii-subsequence 446\n",
            "{'id': 446, 'name': 'arithmetic-slices-ii-subsequence', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/arithmetic-slices-ii-subsequence/', 'task_description': 'Given an integer array `nums`, return _the number of all the **arithmetic subsequences** of_ `nums`. A sequence of numbers is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same. For example, `[1, 3, 5, 7, 9]`, `[7, 7, 7, 7]`, and `[3, -1, -5, -9]` are arithmetic sequences. For example, `[1, 1, 2, 5, 7]` is not an arithmetic sequence. A **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array. For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`. The test cases are generated so that the answer fits in **32-bit** integer. **Example 1:** ``` **Input:** nums = [2,4,6,8,10] **Output:** 7 **Explanation:** All arithmetic subsequence slices are: [2,4,6] [4,6,8] [6,8,10] [2,4,6,8] [4,6,8,10] [2,4,6,8,10] [2,6,10] ``` **Example 2:** ``` **Input:** nums = [7,7,7,7,7] **Output:** 16 **Explanation:** Any subsequence of this array is arithmetic. ``` **Constraints:** `1 <= nums.length <= 1000` `-231 <= nums[i] <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,4,6,8,10]', 'output': '7 Explanation: All arithmetic subsequence slices are:\\n[2,4,6]\\n[4,6,8]\\n[6,8,10]\\n[2,4,6,8]\\n[4,6,8,10]\\n[2,4,6,8,10]\\n[2,6,10]'}, {'label': 'Example 2', 'input': 'nums = [7,7,7,7,7]', 'output': '16 Explanation: Any subsequence of this array is arithmetic.'}], 'elixir_template': 'defmodule Solution do\\n  @spec number_of_arithmetic_slices(nums :: [integer]) :: integer\\n  def number_of_arithmetic_slices(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec number_of_arithmetic_slices(Nums :: [integer()]) -> integer().\\nnumber_of_arithmetic_slices(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def numberOfArithmeticSlices(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!595\n",
            "add-two-numbers-ii 445\n",
            "{'id': 445, 'name': 'add-two-numbers-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/add-two-numbers-ii/', 'task_description': 'You are given two **non-empty** linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. **Example 1:** ``` **Input:** l1 = [7,2,4,3], l2 = [5,6,4] **Output:** [7,8,0,7] ``` **Example 2:** ``` **Input:** l1 = [2,4,3], l2 = [5,6,4] **Output:** [8,0,7] ``` **Example 3:** ``` **Input:** l1 = [0], l2 = [0] **Output:** [0] ``` **Constraints:** The number of nodes in each linked list is in the range `[1, 100]`. `0 <= Node.val <= 9` It is guaranteed that the list represents a number that does not have leading zeros. **Follow up:** Could you solve it without reversing the input lists?', 'test_case': [{'label': 'Example 1', 'input': 'l1 = [7,2,4,3], l2 = [5,6,4]', 'output': '[7,8,0,7]'}, {'label': 'Example 2', 'input': 'l1 = [2,4,3], l2 = [5,6,4]', 'output': '[8,0,7]'}, {'label': 'Example 3', 'input': 'l1 = [0], l2 = [0]', 'output': '[0] Constraints: The number of nodes in each linked list is in the range [1, 100] . 0 <= Node.val <= 9 It is guaranteed that the list represents a number that does not have leading zeros. Follow up: Could you solve it without reversing the input lists?'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\\n  def add_two_numbers(l1, l2) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\\nadd_two_numbers(L1, L2) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!596\n",
            "string-compression 443\n",
            "{'id': 443, 'name': 'string-compression', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/string-compression/', 'task_description': 'Given an array of characters `chars`, compress it using the following algorithm: Begin with an empty string `s`. For each group of **consecutive repeating characters** in `chars`: If the group\\'s length is `1`, append the character to `s`. Otherwise, append the character followed by the group\\'s length. The compressed string `s` **should not be returned separately**, but instead, be stored **in the input character array `chars`**. Note that group lengths that are `10` or longer will be split into multiple characters in `chars`. After you are done **modifying the input array,** return _the new length of the array_. You must write an algorithm that uses only constant extra space. **Example 1:** ``` **Input:** chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"] **Output:** Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] **Explanation:** The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\". ``` **Example 2:** ``` **Input:** chars = [\"a\"] **Output:** Return 1, and the first character of the input array should be: [\"a\"] **Explanation:** The only group is \"a\", which remains uncompressed since it\\'s a single character. ``` **Example 3:** ``` **Input:** chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"] **Output:** Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"]. **Explanation:** The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\". ``` **Constraints:** `1 <= chars.length <= 2000` `chars[i]` is a lowercase English letter, uppercase English letter, digit, or symbol.', 'test_case': [{'label': 'Example 1', 'input': 'chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]', 'output': 'Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"] Explanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".'}, {'label': 'Example 2', 'input': 'chars = [\"a\"]', 'output': 'Return 1, and the first character of the input array should be: [\"a\"] Explanation: The only group is \"a\", which remains uncompressed since it\\'s a single character.'}, {'label': 'Example 3', 'input': 'chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]', 'output': 'Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"]. Explanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def compress(chars: Array[Char]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!597\n",
            "find-all-duplicates-in-an-array 442\n",
            "{'id': 442, 'name': 'find-all-duplicates-in-an-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-all-duplicates-in-an-array/', 'task_description': 'Given an integer array `nums` of length `n` where all the integers of `nums` are in the range `[1, n]` and each integer appears **at most** **twice**, return _an array of all the integers that appears **twice**_. You must write an algorithm that runs in `O(n)` time and uses only _constant_ auxiliary space, excluding the space needed to store the output **Example 1:** ``` **Input:** nums = [4,3,2,7,8,2,3,1] **Output:** [2,3] ``` **Example 2:** ``` **Input:** nums = [1,1,2] **Output:** [1] ``` **Example 3:** ``` **Input:** nums = [1] **Output:** [] ``` **Constraints:** `n == nums.length` `1 <= n <= 105` `1 <= nums[i] <= n` Each element in `nums` appears **once** or **twice**.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,3,2,7,8,2,3,1]', 'output': '[2,3]'}, {'label': 'Example 2', 'input': 'nums = [1,1,2]', 'output': '[1]'}, {'label': 'Example 3', 'input': 'nums = [1]', 'output': '[] Constraints: n == nums.length 1 <= n <= 10 5 1 <= nums[i] <= n Each element in nums appears once or twice .'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_duplicates(nums :: [integer]) :: [integer]\\n  def find_duplicates(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_duplicates(Nums :: [integer()]) -> [integer()].\\nfind_duplicates(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findDuplicates(nums: Array[Int]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!598\n",
            "arranging-coins 441\n",
            "{'id': 441, 'name': 'arranging-coins', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/arranging-coins/', 'task_description': 'You have `n` coins and you want to build a staircase with these coins. The staircase consists of `k` rows where the `ith` row has exactly `i` coins. The last row of the staircase **may be** incomplete. Given the integer `n`, return _the number of **complete rows** of the staircase you will build_. **Example 1:** ``` **Input:** n = 5 **Output:** 2 **Explanation:** Because the 3rd row is incomplete, we return 2. ``` **Example 2:** ``` **Input:** n = 8 **Output:** 3 **Explanation:** Because the 4th row is incomplete, we return 3. ``` **Constraints:** `1 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 5', 'output': '2 Explanation: Because the 3 rd row is incomplete, we return 2.'}, {'label': 'Example 2', 'input': 'n = 8', 'output': '3 Explanation: Because the 4 th row is incomplete, we return 3.'}], 'elixir_template': 'defmodule Solution do\\n  @spec arrange_coins(n :: integer) :: integer\\n  def arrange_coins(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec arrange_coins(N :: integer()) -> integer().\\narrange_coins(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def arrangeCoins(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!599\n",
            "k-th-smallest-in-lexicographical-order 440\n",
            "{'id': 440, 'name': 'k-th-smallest-in-lexicographical-order', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/k-th-smallest-in-lexicographical-order/', 'task_description': 'Given two integers `n` and `k`, return _the_ `kth` _lexicographically smallest integer in the range_ `[1, n]`. **Example 1:** ``` **Input:** n = 13, k = 2 **Output:** 10 **Explanation:** The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10. ``` **Example 2:** ``` **Input:** n = 1, k = 1 **Output:** 1 ``` **Constraints:** `1 <= k <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 13, k = 2', 'output': '10 Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.'}, {'label': 'Example 2', 'input': 'n = 1, k = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_kth_number(n :: integer, k :: integer) :: integer\\n  def find_kth_number(n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_kth_number(N :: integer(), K :: integer()) -> integer().\\nfind_kth_number(N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def findKthNumber(n: Int, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!600\n",
            "find-all-anagrams-in-a-string 438\n",
            "{'id': 438, 'name': 'find-all-anagrams-in-a-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-all-anagrams-in-a-string/', 'task_description': 'Given two strings `s` and `p`, return an array of all the start indices of `p`\\'s anagrams in `s`. You may return the answer in **any order**. **Example 1:** ``` **Input:** s = \"cbaebabacd\", p = \"abc\" **Output:** [0,6] **Explanation:** The substring with start index = 0 is \"cba\", which is an anagram of \"abc\". The substring with start index = 6 is \"bac\", which is an anagram of \"abc\". ``` **Example 2:** ``` **Input:** s = \"abab\", p = \"ab\" **Output:** [0,1,2] **Explanation:** The substring with start index = 0 is \"ab\", which is an anagram of \"ab\". The substring with start index = 1 is \"ba\", which is an anagram of \"ab\". The substring with start index = 2 is \"ab\", which is an anagram of \"ab\". ``` **Constraints:** `1 <= s.length, p.length <= 3 * 104` `s` and `p` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"cbaebabacd\", p = \"abc\"', 'output': '[0,6] Explanation: The substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".'}, {'label': 'Example 2', 'input': 's = \"abab\", p = \"ab\"', 'output': '[0,1,2] Explanation: The substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_anagrams(s :: String.t, p :: String.t) :: [integer]\\n  def find_anagrams(s, p) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_anagrams(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> [integer()].\\nfind_anagrams(S, P) ->\\n  .', 'scala_template': 'object Solution {\\n    def findAnagrams(s: String, p: String): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!601\n",
            "path-sum-iii 437\n",
            "{'id': 437, 'name': 'path-sum-iii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/path-sum-iii/', 'task_description': 'Given the `root` of a binary tree and an integer `targetSum`, return _the number of paths where the sum of the values along the path equals_ `targetSum`. The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes). **Example 1:** ``` **Input:** root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8 **Output:** 3 **Explanation:** The paths that sum to 8 are shown. ``` **Example 2:** ``` **Input:** root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 **Output:** 3 ``` **Constraints:** The number of nodes in the tree is in the range `[0, 1000]`. `-109 <= Node.val <= 109` `-1000 <= targetSum <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8', 'output': '3 Explanation: The paths that sum to 8 are shown.'}, {'label': 'Example 2', 'input': 'root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22', 'output': '3 Constraints: The number of nodes in the tree is in the range [0, 1000] . -10 9 <= Node.val <= 10 9 -1000 <= targetSum <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec path_sum(root :: TreeNode.t | nil, target_sum :: integer) :: integer\\n  def path_sum(root, target_sum) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec path_sum(Root :: #tree_node{} | null, TargetSum :: integer()) -> integer().\\npath_sum(Root, TargetSum) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def pathSum(root: TreeNode, targetSum: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!602\n",
            "find-right-interval 436\n",
            "{'id': 436, 'name': 'find-right-interval', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-right-interval/', 'task_description': 'You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is **unique**. The **right interval** for an interval `i` is an interval `j` such that `startj >= endi` and `startj` is **minimized**. Note that `i` may equal `j`. Return _an array of **right interval** indices for each interval `i`_. If no **right interval** exists for interval `i`, then put `-1` at index `i`. **Example 1:** ``` **Input:** intervals = [[1,2]] **Output:** [-1] **Explanation:** There is only one interval in the collection, so it outputs -1. ``` **Example 2:** ``` **Input:** intervals = [[3,4],[2,3],[1,2]] **Output:** [-1,0,1] **Explanation:** There is no right interval for [3,4]. The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3. The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2. ``` **Example 3:** ``` **Input:** intervals = [[1,4],[2,3],[3,4]] **Output:** [-1,2,-1] **Explanation:** There is no right interval for [1,4] and [3,4]. The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3. ``` **Constraints:** `1 <= intervals.length <= 2 * 104` `intervals[i].length == 2` `-106 <= starti <= endi <= 106` The start point of each interval is **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'intervals = [[1,2]]', 'output': '[-1] Explanation: There is only one interval in the collection, so it outputs -1.'}, {'label': 'Example 2', 'input': 'intervals = [[3,4],[2,3],[1,2]]', 'output': '[-1,0,1] Explanation: There is no right interval for [3,4].\\nThe right interval for [2,3] is [3,4] since start 0 = 3 is the smallest start that is >= end 1 = 3.\\nThe right interval for [1,2] is [2,3] since start 1 = 2 is the smallest start that is >= end 2 = 2.'}, {'label': 'Example 3', 'input': 'intervals = [[1,4],[2,3],[3,4]]', 'output': '[-1,2,-1] Explanation: There is no right interval for [1,4] and [3,4].\\nThe right interval for [2,3] is [3,4] since start 2 = 3 is the smallest start that is >= end 1 = 3.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_right_interval(intervals :: [[integer]]) :: [integer]\\n  def find_right_interval(intervals) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_right_interval(Intervals :: [[integer()]]) -> [integer()].\\nfind_right_interval(Intervals) ->\\n  .', 'scala_template': 'object Solution {\\n    def findRightInterval(intervals: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!603\n",
            "non-overlapping-intervals 435\n",
            "{'id': 435, 'name': 'non-overlapping-intervals', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/non-overlapping-intervals/', 'task_description': \"Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`, return _the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping_. **Note** that intervals which only touch at a point are **non-overlapping**. For example, `[1, 2]` and `[2, 3]` are non-overlapping. **Example 1:** ``` **Input:** intervals = [[1,2],[2,3],[3,4],[1,3]] **Output:** 1 **Explanation:** [1,3] can be removed and the rest of the intervals are non-overlapping. ``` **Example 2:** ``` **Input:** intervals = [[1,2],[1,2],[1,2]] **Output:** 2 **Explanation:** You need to remove two [1,2] to make the rest of the intervals non-overlapping. ``` **Example 3:** ``` **Input:** intervals = [[1,2],[2,3]] **Output:** 0 **Explanation:** You don't need to remove any of the intervals since they're already non-overlapping. ``` **Constraints:** `1 <= intervals.length <= 105` `intervals[i].length == 2` `-5 * 104 <= starti < endi <= 5 * 104`\", 'test_case': [{'label': 'Example 1', 'input': 'intervals = [[1,2],[2,3],[3,4],[1,3]]', 'output': '1 Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.'}, {'label': 'Example 2', 'input': 'intervals = [[1,2],[1,2],[1,2]]', 'output': '2 Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.'}, {'label': 'Example 3', 'input': 'intervals = [[1,2],[2,3]]', 'output': \"0 Explanation: You don't need to remove any of the intervals since they're already non-overlapping.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec erase_overlap_intervals(intervals :: [[integer]]) :: integer\\n  def erase_overlap_intervals(intervals) do\\n    \\n  end\\nend', 'erlang_template': '-spec erase_overlap_intervals(Intervals :: [[integer()]]) -> integer().\\nerase_overlap_intervals(Intervals) ->\\n  .', 'scala_template': 'object Solution {\\n    def eraseOverlapIntervals(intervals: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!604\n",
            "number-of-segments-in-a-string 434\n",
            "{'id': 434, 'name': 'number-of-segments-in-a-string', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/number-of-segments-in-a-string/', 'task_description': 'Given a string `s`, return _the number of segments in the string_. A **segment** is defined to be a contiguous sequence of **non-space characters**. **Example 1:** ``` **Input:** s = \"Hello, my name is John\" **Output:** 5 **Explanation:** The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"] ``` **Example 2:** ``` **Input:** s = \"Hello\" **Output:** 1 ``` **Constraints:** `0 <= s.length <= 300` `s` consists of lowercase and uppercase English letters, digits, or one of the following characters `\"!@#$%^&*()_+-=\\',.:\"`. The only space character in `s` is `\\' \\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"Hello, my name is John\"', 'output': '5 Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]'}, {'label': 'Example 2', 'input': 's = \"Hello\"', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_segments(s :: String.t) :: integer\\n  def count_segments(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_segments(S :: unicode:unicode_binary()) -> integer().\\ncount_segments(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def countSegments(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!605\n",
            "minimum-genetic-mutation 433\n",
            "{'id': 433, 'name': 'minimum-genetic-mutation', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-genetic-mutation/', 'task_description': 'A gene string can be represented by an 8-character long string, with choices from `\\'A\\'`, `\\'C\\'`, `\\'G\\'`, and `\\'T\\'`. Suppose we need to investigate a mutation from a gene string `startGene` to a gene string `endGene` where one mutation is defined as one single character changed in the gene string. For example, `\"AACCGGTT\" --> \"AACCGGTA\"` is one mutation. There is also a gene bank `bank` that records all the valid gene mutations. A gene must be in `bank` to make it a valid gene string. Given the two gene strings `startGene` and `endGene` and the gene bank `bank`, return _the minimum number of mutations needed to mutate from _`startGene`_ to _`endGene`. If there is no such a mutation, return `-1`. Note that the starting point is assumed to be valid, so it might not be included in the bank. **Example 1:** ``` **Input:** startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"] **Output:** 1 ``` **Example 2:** ``` **Input:** startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"] **Output:** 2 ``` **Constraints:** `0 <= bank.length <= 10` `startGene.length == endGene.length == bank[i].length == 8` `startGene`, `endGene`, and `bank[i]` consist of only the characters `[\\'A\\', \\'C\\', \\'G\\', \\'T\\']`.', 'test_case': [{'label': 'Example 1', 'input': 'startGene = \"AACCGGTT\", endGene = \"AACCGGTA\", bank = [\"AACCGGTA\"]', 'output': '1'}, {'label': 'Example 2', 'input': 'startGene = \"AACCGGTT\", endGene = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_mutation(start_gene :: String.t, end_gene :: String.t, bank :: [String.t]) :: integer\\n  def min_mutation(start_gene, end_gene, bank) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_mutation(StartGene :: unicode:unicode_binary(), EndGene :: unicode:unicode_binary(), Bank :: [unicode:unicode_binary()]) -> integer().\\nmin_mutation(StartGene, EndGene, Bank) ->\\n  .', 'scala_template': 'object Solution {\\n    def minMutation(startGene: String, endGene: String, bank: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!606\n",
            "all-oone-data-structure 432\n",
            "{'id': 432, 'name': 'all-oone-data-structure', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/all-oone-data-structure/', 'task_description': 'Design a data structure to store the strings\\' count with the ability to return the strings with minimum and maximum counts. Implement the `AllOne` class: `AllOne()` Initializes the object of the data structure. `inc(String key)` Increments the count of the string `key` by `1`. If `key` does not exist in the data structure, insert it with count `1`. `dec(String key)` Decrements the count of the string `key` by `1`. If the count of `key` is `0` after the decrement, remove it from the data structure. It is guaranteed that `key` exists in the data structure before the decrement. `getMaxKey()` Returns one of the keys with the maximal count. If no element exists, return an empty string `\"\"`. `getMinKey()` Returns one of the keys with the minimum count. If no element exists, return an empty string `\"\"`. **Note** that each function must run in `O(1)` average time complexity. **Example 1:** ``` **Input** [\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"] [[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []] **Output** [null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"] **Explanation** AllOne allOne = new AllOne(); allOne.inc(\"hello\"); allOne.inc(\"hello\"); allOne.getMaxKey(); // return \"hello\" allOne.getMinKey(); // return \"hello\" allOne.inc(\"leet\"); allOne.getMaxKey(); // return \"hello\" allOne.getMinKey(); // return \"leet\" ``` **Constraints:** `1 <= key.length <= 10` `key` consists of lowercase English letters. It is guaranteed that for each call to `dec`, `key` is existing in the data structure. At most `5 * 104` calls will be made to `inc`, `dec`, `getMaxKey`, and `getMinKey`.', 'test_case': [], 'elixir_template': 'defmodule AllOne do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec inc(key :: String.t) :: any\\n  def inc(key) do\\n    \\n  end\\n\\n  @spec dec(key :: String.t) :: any\\n  def dec(key) do\\n    \\n  end\\n\\n  @spec get_max_key() :: String.t\\n  def get_max_key() do\\n    \\n  end\\n\\n  @spec get_min_key() :: String.t\\n  def get_min_key() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# AllOne.init_()\\n# AllOne.inc(key)\\n# AllOne.dec(key)\\n# param_3 = AllOne.get_max_key()\\n# param_4 = AllOne.get_min_key()\\n\\n# AllOne.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec all_one_init_() -> any().\\nall_one_init_() ->\\n  .\\n\\n-spec all_one_inc(Key :: unicode:unicode_binary()) -> any().\\nall_one_inc(Key) ->\\n  .\\n\\n-spec all_one_dec(Key :: unicode:unicode_binary()) -> any().\\nall_one_dec(Key) ->\\n  .\\n\\n-spec all_one_get_max_key() -> unicode:unicode_binary().\\nall_one_get_max_key() ->\\n  .\\n\\n-spec all_one_get_min_key() -> unicode:unicode_binary().\\nall_one_get_min_key() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% all_one_init_(),\\n%% all_one_inc(Key),\\n%% all_one_dec(Key),\\n%% Param_3 = all_one_get_max_key(),\\n%% Param_4 = all_one_get_min_key(),\\n\\n%% all_one_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class AllOne() {\\n\\n    def inc(key: String): Unit = {\\n        \\n    }\\n\\n    def dec(key: String): Unit = {\\n        \\n    }\\n\\n    def getMaxKey(): String = {\\n        \\n    }\\n\\n    def getMinKey(): String = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * val obj = new AllOne()\\n * obj.inc(key)\\n * obj.dec(key)\\n * val param_3 = obj.getMaxKey()\\n * val param_4 = obj.getMinKey()\\n */'}\n",
            "Done!607\n",
            "longest-repeating-character-replacement 424\n",
            "{'id': 424, 'name': 'longest-repeating-character-replacement', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-repeating-character-replacement/', 'task_description': 'You are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times. Return _the length of the longest substring containing the same letter you can get after performing the above operations_. **Example 1:** ``` **Input:** s = \"ABAB\", k = 2 **Output:** 4 **Explanation:** Replace the two \\'A\\'s with two \\'B\\'s or vice versa. ``` **Example 2:** ``` **Input:** s = \"AABABBA\", k = 1 **Output:** 4 **Explanation:** Replace the one \\'A\\' in the middle with \\'B\\' and form \"AABBBBA\". The substring \"BBBB\" has the longest repeating letters, which is 4. There may exists other ways to achieve this answer too. ``` **Constraints:** `1 <= s.length <= 105` `s` consists of only uppercase English letters. `0 <= k <= s.length`', 'test_case': [{'label': 'Example 1', 'input': 's = \"ABAB\", k = 2', 'output': \"4 Explanation: Replace the two 'A's with two 'B's or vice versa.\"}, {'label': 'Example 2', 'input': 's = \"AABABBA\", k = 1', 'output': '4 Explanation: Replace the one \\'A\\' in the middle with \\'B\\' and form \"AABBBBA\".\\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\\nThere may exists other ways to achieve this answer too.'}], 'elixir_template': 'defmodule Solution do\\n  @spec character_replacement(s :: String.t, k :: integer) :: integer\\n  def character_replacement(s, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec character_replacement(S :: unicode:unicode_binary(), K :: integer()) -> integer().\\ncharacter_replacement(S, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def characterReplacement(s: String, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!608\n",
            "reconstruct-original-digits-from-english 423\n",
            "{'id': 423, 'name': 'reconstruct-original-digits-from-english', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reconstruct-original-digits-from-english/', 'task_description': 'Given a string `s` containing an out-of-order English representation of digits `0-9`, return _the digits in **ascending** order_. **Example 1:** ``` **Input:** s = \"owoztneoer\" **Output:** \"012\" ``` **Example 2:** ``` **Input:** s = \"fviefuro\" **Output:** \"45\" ``` **Constraints:** `1 <= s.length <= 105` `s[i]` is one of the characters `[\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"]`. `s` is **guaranteed** to be valid.', 'test_case': [{'label': 'Example 1', 'input': 's = \"owoztneoer\"', 'output': '\"012\"'}, {'label': 'Example 2', 'input': 's = \"fviefuro\"', 'output': '\"45\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec original_digits(s :: String.t) :: String.t\\n  def original_digits(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec original_digits(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\noriginal_digits(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def originalDigits(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!609\n",
            "maximum-xor-of-two-numbers-in-an-array 421\n",
            "{'id': 421, 'name': 'maximum-xor-of-two-numbers-in-an-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/', 'task_description': 'Given an integer array `nums`, return _the maximum result of _`nums[i] XOR nums[j]`, where `0 <= i <= j < n`. **Example 1:** ``` **Input:** nums = [3,10,5,25,2,8] **Output:** 28 **Explanation:** The maximum result is 5 XOR 25 = 28. ``` **Example 2:** ``` **Input:** nums = [14,70,53,83,49,91,36,80,92,51,66,70] **Output:** 127 ``` **Constraints:** `1 <= nums.length <= 2 * 105` `0 <= nums[i] <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,10,5,25,2,8]', 'output': '28 Explanation: The maximum result is 5 XOR 25 = 28.'}, {'label': 'Example 2', 'input': 'nums = [14,70,53,83,49,91,36,80,92,51,66,70]', 'output': '127'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_maximum_xor(nums :: [integer]) :: integer\\n  def find_maximum_xor(nums) do\\n\\n  end\\nend', 'erlang_template': '-spec find_maximum_xor(Nums :: [integer()]) -> integer().\\nfind_maximum_xor(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMaximumXOR(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!610\n",
            "strong-password-checker 420\n",
            "{'id': 420, 'name': 'strong-password-checker', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/strong-password-checker/', 'task_description': 'A password is considered strong if the below conditions are all met: It has at least `6` characters and at most `20` characters. It contains at least **one lowercase** letter, at least **one uppercase** letter, and at least **one digit**. It does not contain three repeating characters in a row (i.e., `\"B**aaa**bb0\"` is weak, but `\"B**aa**b**a**0\"` is strong). Given a string `password`, return _the minimum number of steps required to make `password` strong. if `password` is already strong, return `0`._ In one step, you can: Insert one character to `password`, Delete one character from `password`, or Replace one character of `password` with another character. **Example 1:** ``` **Input:** password = \"a\" **Output:** 5 ``` **Example 2:** ``` **Input:** password = \"aA1\" **Output:** 3 ``` **Example 3:** ``` **Input:** password = \"1337C0d3\" **Output:** 0 ``` **Constraints:** `1 <= password.length <= 50` `password` consists of letters, digits, dot `\\'.\\'` or exclamation mark `\\'!\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'password = \"a\"', 'output': '5'}, {'label': 'Example 2', 'input': 'password = \"aA1\"', 'output': '3'}, {'label': 'Example 3', 'input': 'password = \"1337C0d3\"', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec strong_password_checker(password :: String.t) :: integer\\n  def strong_password_checker(password) do\\n    \\n  end\\nend', 'erlang_template': '-spec strong_password_checker(Password :: unicode:unicode_binary()) -> integer().\\nstrong_password_checker(Password) ->\\n  .', 'scala_template': 'object Solution {\\n    def strongPasswordChecker(password: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!611\n",
            "battleships-in-a-board 419\n",
            "{'id': 419, 'name': 'battleships-in-a-board', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/battleships-in-a-board/', 'task_description': 'Given an `m x n` matrix `board` where each cell is a battleship `\\'X\\'` or empty `\\'.\\'`, return _the number of the **battleships** on_ `board`. **Battleships** can only be placed horizontally or vertically on `board`. In other words, they can only be made of the shape `1 x k` (`1` row, `k` columns) or `k x 1` (`k` rows, `1` column), where `k` can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships). **Example 1:** ``` **Input:** board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]] **Output:** 2 ``` **Example 2:** ``` **Input:** board = [[\".\"]] **Output:** 0 ``` **Constraints:** `m == board.length` `n == board[i].length` `1 <= m, n <= 200` `board[i][j]` is either `\\'.\\'` or `\\'X\\'`. **Follow up:** Could you do it in one-pass, using only `O(1)` extra memory and without modifying the values `board`?', 'test_case': [{'label': 'Example 1', 'input': 'board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]', 'output': '2'}, {'label': 'Example 2', 'input': 'board = [[\".\"]]', 'output': \"0 Constraints: m == board.length n == board[i].length 1 <= m, n <= 200 board[i][j] is either '.' or 'X' . Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board ?\"}], 'elixir_template': 'defmodule Solution do\\n  @spec count_battleships(board :: [[char]]) :: integer\\n  def count_battleships(board) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_battleships(Board :: [[char()]]) -> integer().\\ncount_battleships(Board) ->\\n  .', 'scala_template': 'object Solution {\\n    def countBattleships(board: Array[Array[Char]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!612\n",
            "pacific-atlantic-water-flow 417\n",
            "{'id': 417, 'name': 'pacific-atlantic-water-flow', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/pacific-atlantic-water-flow/', 'task_description': \"There is an `m x n` rectangular island that borders both the **Pacific Ocean** and **Atlantic Ocean**. The **Pacific Ocean** touches the island's left and top edges, and the **Atlantic Ocean** touches the island's right and bottom edges. The island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the **height above sea level** of the cell at coordinate `(r, c)`. The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is **less than or equal to** the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean. Return _a **2D list** of grid coordinates _`result`_ where _`result[i] = [ri, ci]`_ denotes that rain water can flow from cell _`(ri, ci)`_ to **both** the Pacific and Atlantic oceans_. **Example 1:** ``` **Input:** heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]] **Output:** [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] **Explanation:** The following cells can flow to the Pacific and Atlantic oceans, as shown below: [0,4]: [0,4] -> Pacific Ocean [0,4] -> Atlantic Ocean [1,3]: [1,3] -> [0,3] -> Pacific Ocean [1,3] -> [1,4] -> Atlantic Ocean [1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean [1,4] -> Atlantic Ocean [2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean [3,0]: [3,0] -> Pacific Ocean [3,0] -> [4,0] -> Atlantic Ocean [3,1]: [3,1] -> [3,0] -> Pacific Ocean [3,1] -> [4,1] -> Atlantic Ocean [4,0]: [4,0] -> Pacific Ocean [4,0] -> Atlantic Ocean Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans. ``` **Example 2:** ``` **Input:** heights = [[1]] **Output:** [[0,0]] **Explanation:** The water can flow from the only cell to the Pacific and Atlantic oceans. ``` **Constraints:** `m == heights.length` `n == heights[r].length` `1 <= m, n <= 200` `0 <= heights[r][c] <= 105`\", 'test_case': [{'label': 'Example 1', 'input': 'heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]', 'output': '[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:\\n[0,4]: [0,4] -> Pacific Ocean \\n\\xa0      [0,4] -> Atlantic Ocean\\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean \\n\\xa0      [1,3] -> [1,4] -> Atlantic Ocean\\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \\n\\xa0      [1,4] -> Atlantic Ocean\\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \\n\\xa0      [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\\n[3,0]: [3,0] -> Pacific Ocean \\n\\xa0      [3,0] -> [4,0] -> Atlantic Ocean\\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean \\n\\xa0      [3,1] -> [4,1] -> Atlantic Ocean\\n[4,0]: [4,0] -> Pacific Ocean \\n       [4,0] -> Atlantic Ocean\\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.'}, {'label': 'Example 2', 'input': 'heights = [[1]]', 'output': '[[0,0]] Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans. Constraints: m == heights.length n == heights[r].length 1 <= m, n <= 200 0 <= heights[r][c] <= 10 5'}], 'elixir_template': 'defmodule Solution do\\n  @spec pacific_atlantic(heights :: [[integer]]) :: [[integer]]\\n  def pacific_atlantic(heights) do\\n    \\n  end\\nend', 'erlang_template': '-spec pacific_atlantic(Heights :: [[integer()]]) -> [[integer()]].\\npacific_atlantic(Heights) ->\\n  .', 'scala_template': 'object Solution {\\n    def pacificAtlantic(heights: Array[Array[Int]]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!613\n",
            "partition-equal-subset-sum 416\n",
            "{'id': 416, 'name': 'partition-equal-subset-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/partition-equal-subset-sum/', 'task_description': 'Given an integer array `nums`, return `true` _if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or _`false`_ otherwise_. **Example 1:** ``` **Input:** nums = [1,5,11,5] **Output:** true **Explanation:** The array can be partitioned as [1, 5, 5] and [11]. ``` **Example 2:** ``` **Input:** nums = [1,2,3,5] **Output:** false **Explanation:** The array cannot be partitioned into equal sum subsets. ``` **Constraints:** `1 <= nums.length <= 200` `1 <= nums[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,5,11,5]', 'output': 'true Explanation: The array can be partitioned as [1, 5, 5] and [11].'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,5]', 'output': 'false Explanation: The array cannot be partitioned into equal sum subsets.'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_partition(nums :: [integer]) :: boolean\\n  def can_partition(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_partition(Nums :: [integer()]) -> boolean().\\ncan_partition(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def canPartition(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!614\n",
            "add-strings 415\n",
            "{'id': 415, 'name': 'add-strings', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/add-strings/', 'task_description': 'Given two non-negative integers, `num1` and `num2` represented as string, return _the sum of_ `num1` _and_ `num2` _as a string_. You must solve the problem without using any built-in library for handling large integers (such as `BigInteger`). You must also not convert the inputs to integers directly. **Example 1:** ``` **Input:** num1 = \"11\", num2 = \"123\" **Output:** \"134\" ``` **Example 2:** ``` **Input:** num1 = \"456\", num2 = \"77\" **Output:** \"533\" ``` **Example 3:** ``` **Input:** num1 = \"0\", num2 = \"0\" **Output:** \"0\" ``` **Constraints:** `1 <= num1.length, num2.length <= 104` `num1` and `num2` consist of only digits. `num1` and `num2` don\\'t have any leading zeros except for the zero itself.', 'test_case': [{'label': 'Example 1', 'input': 'num1 = \"11\", num2 = \"123\"', 'output': '\"134\"'}, {'label': 'Example 2', 'input': 'num1 = \"456\", num2 = \"77\"', 'output': '\"533\"'}, {'label': 'Example 3', 'input': 'num1 = \"0\", num2 = \"0\"', 'output': '\"0\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec add_strings(num1 :: String.t, num2 :: String.t) :: String.t\\n  def add_strings(num1, num2) do\\n    \\n  end\\nend', 'erlang_template': '-spec add_strings(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nadd_strings(Num1, Num2) ->\\n  .', 'scala_template': 'object Solution {\\n    def addStrings(num1: String, num2: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!615\n",
            "third-maximum-number 414\n",
            "{'id': 414, 'name': 'third-maximum-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/third-maximum-number/', 'task_description': \"Given an integer array `nums`, return _the **third distinct maximum** number in this array. If the third maximum does not exist, return the **maximum** number_. **Example 1:** ``` **Input:** nums = [3,2,1] **Output:** 1 **Explanation:** The first distinct maximum is 3. The second distinct maximum is 2. The third distinct maximum is 1. ``` **Example 2:** ``` **Input:** nums = [1,2] **Output:** 2 **Explanation:** The first distinct maximum is 2. The second distinct maximum is 1. The third distinct maximum does not exist, so the maximum (2) is returned instead. ``` **Example 3:** ``` **Input:** nums = [2,2,3,1] **Output:** 1 **Explanation:** The first distinct maximum is 3. The second distinct maximum is 2 (both 2's are counted together since they have the same value). The third distinct maximum is 1. ``` **Constraints:** `1 <= nums.length <= 104` `-231 <= nums[i] <= 231 - 1` **Follow up:** Can you find an `O(n)` solution?\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,2,1]', 'output': '1 Explanation: The first distinct maximum is 3.\\nThe second distinct maximum is 2.\\nThe third distinct maximum is 1.'}, {'label': 'Example 2', 'input': 'nums = [1,2]', 'output': '2 Explanation: The first distinct maximum is 2.\\nThe second distinct maximum is 1.\\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.'}, {'label': 'Example 3', 'input': 'nums = [2,2,3,1]', 'output': \"1 Explanation: The first distinct maximum is 3.\\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\\nThe third distinct maximum is 1.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec third_max(nums :: [integer]) :: integer\\n  def third_max(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec third_max(Nums :: [integer()]) -> integer().\\nthird_max(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def thirdMax(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!616\n",
            "arithmetic-slices 413\n",
            "{'id': 413, 'name': 'arithmetic-slices', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/arithmetic-slices/', 'task_description': 'An integer array is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same. For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences. Given an integer array `nums`, return _the number of arithmetic **subarrays** of_ `nums`. A **subarray** is a contiguous subsequence of the array. **Example 1:** ``` **Input:** nums = [1,2,3,4] **Output:** 3 **Explanation:** We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself. ``` **Example 2:** ``` **Input:** nums = [1] **Output:** 0 ``` **Constraints:** `1 <= nums.length <= 5000` `-1000 <= nums[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,4]', 'output': '3 Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.'}, {'label': 'Example 2', 'input': 'nums = [1]', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec number_of_arithmetic_slices(nums :: [integer]) :: integer\\n  def number_of_arithmetic_slices(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec number_of_arithmetic_slices(Nums :: [integer()]) -> integer().\\nnumber_of_arithmetic_slices(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def numberOfArithmeticSlices(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!617\n",
            "fizz-buzz 412\n",
            "{'id': 412, 'name': 'fizz-buzz', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/fizz-buzz/', 'task_description': 'Given an integer `n`, return _a string array _`answer`_ (**1-indexed**) where_: `answer[i] == \"FizzBuzz\"` if `i` is divisible by `3` and `5`. `answer[i] == \"Fizz\"` if `i` is divisible by `3`. `answer[i] == \"Buzz\"` if `i` is divisible by `5`. `answer[i] == i` (as a string) if none of the above conditions are true. **Example 1:** ``` **Input:** n = 3 **Output:** [\"1\",\"2\",\"Fizz\"] ``` **Example 2:** ``` **Input:** n = 5 **Output:** [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"] ``` **Example 3:** ``` **Input:** n = 15 **Output:** [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"] ``` **Constraints:** `1 <= n <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '[\"1\",\"2\",\"Fizz\"]'}, {'label': 'Example 2', 'input': 'n = 5', 'output': '[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]'}, {'label': 'Example 3', 'input': 'n = 15', 'output': '[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec fizz_buzz(n :: integer) :: [String.t]\\n  def fizz_buzz(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec fizz_buzz(N :: integer()) -> [unicode:unicode_binary()].\\nfizz_buzz(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def fizzBuzz(n: Int): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!618\n",
            "split-array-largest-sum 410\n",
            "{'id': 410, 'name': 'split-array-largest-sum', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/split-array-largest-sum/', 'task_description': 'Given an integer array `nums` and an integer `k`, split `nums` into `k` non-empty subarrays such that the largest sum of any subarray is **minimized**. Return _the minimized largest sum of the split_. A **subarray** is a contiguous part of the array. **Example 1:** ``` **Input:** nums = [7,2,5,10,8], k = 2 **Output:** 18 **Explanation:** There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. ``` **Example 2:** ``` **Input:** nums = [1,2,3,4,5], k = 2 **Output:** 9 **Explanation:** There are four ways to split nums into two subarrays. The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9. ``` **Constraints:** `1 <= nums.length <= 1000` `0 <= nums[i] <= 106` `1 <= k <= min(50, nums.length)`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [7,2,5,10,8], k = 2', 'output': '18 Explanation: There are four ways to split nums into two subarrays.\\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4,5], k = 2', 'output': '9 Explanation: There are four ways to split nums into two subarrays.\\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.'}], 'elixir_template': 'defmodule Solution do\\n  @spec split_array(nums :: [integer], k :: integer) :: integer\\n  def split_array(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec split_array(Nums :: [integer()], K :: integer()) -> integer().\\nsplit_array(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def splitArray(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!619\n",
            "longest-palindrome 409\n",
            "{'id': 409, 'name': 'longest-palindrome', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/longest-palindrome/', 'task_description': 'Given a string `s` which consists of lowercase or uppercase letters, return the length of the **longest palindrome** that can be built with those letters. Letters are **case sensitive**, for example, `\"Aa\"` is not considered a palindrome. **Example 1:** ``` **Input:** s = \"abccccdd\" **Output:** 7 **Explanation:** One longest palindrome that can be built is \"dccaccd\", whose length is 7. ``` **Example 2:** ``` **Input:** s = \"a\" **Output:** 1 **Explanation:** The longest palindrome that can be built is \"a\", whose length is 1. ``` **Constraints:** `1 <= s.length <= 2000` `s` consists of lowercase **and/or** uppercase English letters only.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abccccdd\"', 'output': '7 Explanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.'}, {'label': 'Example 2', 'input': 's = \"a\"', 'output': '1 Explanation: The longest palindrome that can be built is \"a\", whose length is 1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_palindrome(s :: String.t) :: integer\\n  def longest_palindrome(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_palindrome(S :: unicode:unicode_binary()) -> integer().\\nlongest_palindrome(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestPalindrome(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!620\n",
            "trapping-rain-water-ii 407\n",
            "{'id': 407, 'name': 'trapping-rain-water-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/trapping-rain-water-ii/', 'task_description': 'Given an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, return _the volume of water it can trap after raining_. **Example 1:** ``` **Input:** heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] **Output:** 4 **Explanation:** After the rain, water is trapped between the blocks. We have two small ponds 1 and 3 units trapped. The total volume of water trapped is 4. ``` **Example 2:** ``` **Input:** heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]] **Output:** 10 ``` **Constraints:** `m == heightMap.length` `n == heightMap[i].length` `1 <= m, n <= 200` `0 <= heightMap[i][j] <= 2 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]', 'output': '4 Explanation: After the rain, water is trapped between the blocks.\\nWe have two small ponds 1 and 3 units trapped.\\nThe total volume of water trapped is 4.'}, {'label': 'Example 2', 'input': 'heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]', 'output': '10 Constraints: m == heightMap.length n == heightMap[i].length 1 <= m, n <= 200 0 <= heightMap[i][j] <= 2 * 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec trap_rain_water(height_map :: [[integer]]) :: integer\\n  def trap_rain_water(height_map) do\\n    \\n  end\\nend', 'erlang_template': '-spec trap_rain_water(HeightMap :: [[integer()]]) -> integer().\\ntrap_rain_water(HeightMap) ->\\n  .', 'scala_template': 'object Solution {\\n    def trapRainWater(heightMap: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!621\n",
            "queue-reconstruction-by-height 406\n",
            "{'id': 406, 'name': 'queue-reconstruction-by-height', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/queue-reconstruction-by-height/', 'task_description': 'You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with **exactly** `ki` other people in front who have a height greater than or equal to `hi`. Reconstruct and return _the queue that is represented by the input array _`people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue). **Example 1:** ``` **Input:** people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]] **Output:** [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] **Explanation:** Person 0 has height 5 with no other people taller or the same height in front. Person 1 has height 7 with no other people taller or the same height in front. Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1. Person 3 has height 6 with one person taller or the same height in front, which is person 1. Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3. Person 5 has height 7 with one person taller or the same height in front, which is person 1. Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue. ``` **Example 2:** ``` **Input:** people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]] **Output:** [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]] ``` **Constraints:** `1 <= people.length <= 2000` `0 <= hi <= 106` `0 <= ki < people.length` It is guaranteed that the queue can be reconstructed.', 'test_case': [{'label': 'Example 1', 'input': 'people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]', 'output': '[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] Explanation: Person 0 has height 5 with no other people taller or the same height in front.\\nPerson 1 has height 7 with no other people taller or the same height in front.\\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.'}, {'label': 'Example 2', 'input': 'people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]', 'output': '[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec reconstruct_queue(people :: [[integer]]) :: [[integer]]\\n  def reconstruct_queue(people) do\\n    \\n  end\\nend', 'erlang_template': '-spec reconstruct_queue(People :: [[integer()]]) -> [[integer()]].\\nreconstruct_queue(People) ->\\n  .', 'scala_template': 'object Solution {\\n    def reconstructQueue(people: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!622\n",
            "convert-a-number-to-hexadecimal 405\n",
            "{'id': 405, 'name': 'convert-a-number-to-hexadecimal', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/convert-a-number-to-hexadecimal/', 'task_description': 'Given a 32-bit integer `num`, return _a string representing its hexadecimal representation_. For negative integers, two’s complement method is used. All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself. **Note: **You are not allowed to use any built-in library method to directly solve this problem. **Example 1:** ``` **Input:** num = 26 **Output:** \"1a\" ``` **Example 2:** ``` **Input:** num = -1 **Output:** \"ffffffff\" ``` **Constraints:** `-231 <= num <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'num = 26', 'output': '\"1a\"'}, {'label': 'Example 2', 'input': 'num = -1', 'output': '\"ffffffff\" Constraints: -2 31 <= num <= 2 31 - 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec to_hex(num :: integer) :: String.t\\n  def to_hex(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec to_hex(Num :: integer()) -> unicode:unicode_binary().\\nto_hex(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def toHex(num: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!623\n",
            "sum-of-left-leaves 404\n",
            "{'id': 404, 'name': 'sum-of-left-leaves', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/sum-of-left-leaves/', 'task_description': 'Given the `root` of a binary tree, return _the sum of all left leaves._ A **leaf** is a node with no children. A **left leaf** is a leaf that is the left child of another node. **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** 24 **Explanation:** There are two left leaves in the binary tree, with values 9 and 15 respectively. ``` **Example 2:** ``` **Input:** root = [1] **Output:** 0 ``` **Constraints:** The number of nodes in the tree is in the range `[1, 1000]`. `-1000 <= Node.val <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': '24 Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.'}, {'label': 'Example 2', 'input': 'root = [1]', 'output': '0 Constraints: The number of nodes in the tree is in the range [1, 1000] . -1000 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sum_of_left_leaves(root :: TreeNode.t | nil) :: integer\\n  def sum_of_left_leaves(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec sum_of_left_leaves(Root :: #tree_node{} | null) -> integer().\\nsum_of_left_leaves(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def sumOfLeftLeaves(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!624\n",
            "frog-jump 403\n",
            "{'id': 403, 'name': 'frog-jump', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/frog-jump/', 'task_description': \"A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water. Given a list of `stones` positions (in units) in sorted **ascending order**, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be `1` unit. If the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. The frog can only jump in the forward direction. **Example 1:** ``` **Input:** stones = [0,1,3,5,6,8,12,17] **Output:** true **Explanation:** The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone. ``` **Example 2:** ``` **Input:** stones = [0,1,2,3,4,8,9,11] **Output:** false **Explanation:** There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large. ``` **Constraints:** `2 <= stones.length <= 2000` `0 <= stones[i] <= 231 - 1` `stones[0] == 0` `stones` is sorted in a strictly increasing order.\", 'test_case': [{'label': 'Example 1', 'input': 'stones = [0,1,3,5,6,8,12,17]', 'output': 'true Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.'}, {'label': 'Example 2', 'input': 'stones = [0,1,2,3,4,8,9,11]', 'output': 'false Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_cross(stones :: [integer]) :: boolean\\n  def can_cross(stones) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_cross(Stones :: [integer()]) -> boolean().\\ncan_cross(Stones) ->\\n  .', 'scala_template': 'object Solution {\\n    def canCross(stones: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!625\n",
            "remove-k-digits 402\n",
            "{'id': 402, 'name': 'remove-k-digits', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/remove-k-digits/', 'task_description': 'Given string num representing a non-negative integer `num`, and an integer `k`, return _the smallest possible integer after removing_ `k` _digits from_ `num`. **Example 1:** ``` **Input:** num = \"1432219\", k = 3 **Output:** \"1219\" **Explanation:** Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest. ``` **Example 2:** ``` **Input:** num = \"10200\", k = 1 **Output:** \"200\" **Explanation:** Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes. ``` **Example 3:** ``` **Input:** num = \"10\", k = 2 **Output:** \"0\" **Explanation:** Remove all the digits from the number and it is left with nothing which is 0. ``` **Constraints:** `1 <= k <= num.length <= 105` `num` consists of only digits. `num` does not have any leading zeros except for the zero itself.', 'test_case': [{'label': 'Example 1', 'input': 'num = \"1432219\", k = 3', 'output': '\"1219\" Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.'}, {'label': 'Example 2', 'input': 'num = \"10200\", k = 1', 'output': '\"200\" Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.'}, {'label': 'Example 3', 'input': 'num = \"10\", k = 2', 'output': '\"0\" Explanation: Remove all the digits from the number and it is left with nothing which is 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_kdigits(num :: String.t, k :: integer) :: String.t\\n  def remove_kdigits(num, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_kdigits(Num :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\\nremove_kdigits(Num, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeKdigits(num: String, k: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!626\n",
            "binary-watch 401\n",
            "{'id': 401, 'name': 'binary-watch', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-watch/', 'task_description': 'A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right. For example, the below binary watch reads `\"4:51\"`. Given an integer `turnedOn` which represents the number of LEDs that are currently on (ignoring the PM), return _all possible times the watch could represent_. You may return the answer in **any order**. The hour must not contain a leading zero. For example, `\"01:00\"` is not valid. It should be `\"1:00\"`. The minute must consist of two digits and may contain a leading zero. For example, `\"10:2\"` is not valid. It should be `\"10:02\"`. **Example 1:** ``` **Input:** turnedOn = 1 **Output:** [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"] ``` **Example 2:** ``` **Input:** turnedOn = 9 **Output:** [] ``` **Constraints:** `0 <= turnedOn <= 10`', 'test_case': [{'label': 'Example 1', 'input': 'turnedOn = 1', 'output': '[\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]'}, {'label': 'Example 2', 'input': 'turnedOn = 9', 'output': '[]'}], 'elixir_template': 'defmodule Solution do\\n  @spec read_binary_watch(turned_on :: integer) :: [String.t]\\n  def read_binary_watch(turned_on) do\\n    \\n  end\\nend', 'erlang_template': '-spec read_binary_watch(TurnedOn :: integer()) -> [unicode:unicode_binary()].\\nread_binary_watch(TurnedOn) ->\\n  .', 'scala_template': 'object Solution {\\n    def readBinaryWatch(turnedOn: Int): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!627\n",
            "nth-digit 400\n",
            "{'id': 400, 'name': 'nth-digit', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/nth-digit/', 'task_description': 'Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`. **Example 1:** ``` **Input:** n = 3 **Output:** 3 ``` **Example 2:** ``` **Input:** n = 11 **Output:** 0 **Explanation:** The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10. ``` **Constraints:** `1 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '3'}, {'label': 'Example 2', 'input': 'n = 11', 'output': '0 Explanation: The 11 th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_nth_digit(n :: integer) :: integer\\n  def find_nth_digit(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_nth_digit(N :: integer()) -> integer().\\nfind_nth_digit(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def findNthDigit(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!628\n",
            "evaluate-division 399\n",
            "{'id': 399, 'name': 'evaluate-division', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/evaluate-division/', 'task_description': 'You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable. You are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`. Return _the answers to all queries_. If a single answer cannot be determined, return `-1.0`. **Note:** The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction. **Note: **The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them. **Example 1:** ``` **Input:** equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]] **Output:** [6.00000,0.50000,-1.00000,1.00000,-1.00000] **Explanation:** Given: _a / b = 2.0_, _b / c = 3.0_ queries are: _a / c = ?_, _b / a = ?_, _a / e = ?_, _a / a = ?_, _x / x = ? _ return: [6.0, 0.5, -1.0, 1.0, -1.0 ] note: x is undefined => -1.0 ``` **Example 2:** ``` **Input:** equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]] **Output:** [3.75000,0.40000,5.00000,0.20000] ``` **Example 3:** ``` **Input:** equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]] **Output:** [0.50000,2.00000,-1.00000,-1.00000] ``` **Constraints:** `1 <= equations.length <= 20` `equations[i].length == 2` `1 <= Ai.length, Bi.length <= 5` `values.length == equations.length` `0.0 < values[i] <= 20.0` `1 <= queries.length <= 20` `queries[i].length == 2` `1 <= Cj.length, Dj.length <= 5` `Ai, Bi, Cj, Dj` consist of lower case English letters and digits.', 'test_case': [{'label': 'Example 1', 'input': 'equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]', 'output': '[6.00000,0.50000,-1.00000,1.00000,-1.00000] Explanation: Given: a / b = 2.0 , b / c = 3.0 queries are: a / c = ? , b / a = ? , a / e = ? , a / a = ? , x / x = ? return: [6.0, 0.5, -1.0, 1.0, -1.0 ]\\nnote: x is undefined => -1.0'}, {'label': 'Example 2', 'input': 'equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]', 'output': '[3.75000,0.40000,5.00000,0.20000]'}, {'label': 'Example 3', 'input': 'equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]', 'output': '[0.50000,2.00000,-1.00000,-1.00000]'}], 'elixir_template': 'defmodule Solution do\\n  @spec calc_equation(equations :: [[String.t]], values :: [float], queries :: [[String.t]]) :: [float]\\n  def calc_equation(equations, values, queries) do\\n    \\n  end\\nend', 'erlang_template': '-spec calc_equation(Equations :: [[unicode:unicode_binary()]], Values :: [float()], Queries :: [[unicode:unicode_binary()]]) -> [float()].\\ncalc_equation(Equations, Values, Queries) ->\\n  .', 'scala_template': 'object Solution {\\n    def calcEquation(equations: List[List[String]], values: Array[Double], queries: List[List[String]]): Array[Double] = {\\n        \\n    }\\n}'}\n",
            "Done!629\n",
            "random-pick-index 398\n",
            "{'id': 398, 'name': 'random-pick-index', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/random-pick-index/', 'task_description': 'Given an integer array `nums` with possible **duplicates**, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array. Implement the `Solution` class: `Solution(int[] nums)` Initializes the object with the array `nums`. `int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i\\'s, then each index should have an equal probability of returning. **Example 1:** ``` **Input** [\"Solution\", \"pick\", \"pick\", \"pick\"] [[[1, 2, 3, 3, 3]], [3], [1], [3]] **Output** [null, 4, 0, 2] **Explanation** Solution solution = new Solution([1, 2, 3, 3, 3]); solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning. solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1. solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning. ``` **Constraints:** `1 <= nums.length <= 2 * 104` `-231 <= nums[i] <= 231 - 1` `target` is an integer from `nums`. At most `104` calls will be made to `pick`.', 'test_case': [], 'elixir_template': 'defmodule Solution do\\n  @spec init_(nums :: [integer]) :: any\\n  def init_(nums) do\\n    \\n  end\\n\\n  @spec pick(target :: integer) :: integer\\n  def pick(target) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Solution.init_(nums)\\n# param_1 = Solution.pick(target)\\n\\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec solution_init_(Nums :: [integer()]) -> any().\\nsolution_init_(Nums) ->\\n  .\\n\\n-spec solution_pick(Target :: integer()) -> integer().\\nsolution_pick(Target) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% solution_init_(Nums),\\n%% Param_1 = solution_pick(Target),\\n\\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Solution(_nums: Array[Int]) {\\n\\n    def pick(target: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * val obj = new Solution(nums)\\n * val param_1 = obj.pick(target)\\n */'}\n",
            "Done!630\n",
            "integer-replacement 397\n",
            "{'id': 397, 'name': 'integer-replacement', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/integer-replacement/', 'task_description': 'Given a positive integer `n`, you can apply one of the following operations: If `n` is even, replace `n` with `n / 2`. If `n` is odd, replace `n` with either `n + 1` or `n - 1`. Return _the minimum number of operations needed for_ `n` _to become_ `1`. **Example 1:** ``` **Input:** n = 8 **Output:** 3 **Explanation:** 8 -> 4 -> 2 -> 1 ``` **Example 2:** ``` **Input:** n = 7 **Output:** 4 **Explanation: **7 -> 8 -> 4 -> 2 -> 1 or 7 -> 6 -> 3 -> 2 -> 1 ``` **Example 3:** ``` **Input:** n = 4 **Output:** 2 ``` **Constraints:** `1 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 8', 'output': '3 Explanation: 8 -> 4 -> 2 -> 1'}, {'label': 'Example 2', 'input': 'n = 7', 'output': '4 Explanation: 7 -> 8 -> 4 -> 2 -> 1\\nor 7 -> 6 -> 3 -> 2 -> 1'}, {'label': 'Example 3', 'input': 'n = 4', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec integer_replacement(n :: integer) :: integer\\n  def integer_replacement(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec integer_replacement(N :: integer()) -> integer().\\ninteger_replacement(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def integerReplacement(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!631\n",
            "rotate-function 396\n",
            "{'id': 396, 'name': 'rotate-function', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rotate-function/', 'task_description': 'You are given an integer array `nums` of length `n`. Assume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the **rotation function** `F` on `nums` as follow: `F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].` Return _the maximum value of_ `F(0), F(1), ..., F(n-1)`. The test cases are generated so that the answer fits in a **32-bit** integer. **Example 1:** ``` **Input:** nums = [4,3,2,6] **Output:** 26 **Explanation:** F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25 F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16 F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23 F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26 So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26. ``` **Example 2:** ``` **Input:** nums = [100] **Output:** 0 ``` **Constraints:** `n == nums.length` `1 <= n <= 105` `-100 <= nums[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,3,2,6]', 'output': '26 Explanation: F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.'}, {'label': 'Example 2', 'input': 'nums = [100]', 'output': '0 Constraints: n == nums.length 1 <= n <= 10 5 -100 <= nums[i] <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_rotate_function(nums :: [integer]) :: integer\\n  def max_rotate_function(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_rotate_function(Nums :: [integer()]) -> integer().\\nmax_rotate_function(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxRotateFunction(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!632\n",
            "longest-substring-with-at-least-k-repeating-characters 395\n",
            "{'id': 395, 'name': 'longest-substring-with-at-least-k-repeating-characters', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/', 'task_description': 'Given a string `s` and an integer `k`, return _the length of the longest substring of_ `s` _such that the frequency of each character in this substring is greater than or equal to_ `k`. if no such substring exists, return 0. **Example 1:** ``` **Input:** s = \"aaabb\", k = 3 **Output:** 3 **Explanation:** The longest substring is \"aaa\", as \\'a\\' is repeated 3 times. ``` **Example 2:** ``` **Input:** s = \"ababbc\", k = 2 **Output:** 5 **Explanation:** The longest substring is \"ababb\", as \\'a\\' is repeated 2 times and \\'b\\' is repeated 3 times. ``` **Constraints:** `1 <= s.length <= 104` `s` consists of only lowercase English letters. `1 <= k <= 105`', 'test_case': [{'label': 'Example 1', 'input': 's = \"aaabb\", k = 3', 'output': '3 Explanation: The longest substring is \"aaa\", as \\'a\\' is repeated 3 times.'}, {'label': 'Example 2', 'input': 's = \"ababbc\", k = 2', 'output': '5 Explanation: The longest substring is \"ababb\", as \\'a\\' is repeated 2 times and \\'b\\' is repeated 3 times.'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_substring(s :: String.t, k :: integer) :: integer\\n  def longest_substring(s, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_substring(S :: unicode:unicode_binary(), K :: integer()) -> integer().\\nlongest_substring(S, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestSubstring(s: String, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!633\n",
            "decode-string 394\n",
            "{'id': 394, 'name': 'decode-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/decode-string/', 'task_description': 'Given an encoded string, return its decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer. You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there will not be input like `3a` or `2[4]`. The test cases are generated so that the length of the output will never exceed `105`. **Example 1:** ``` **Input:** s = \"3[a]2[bc]\" **Output:** \"aaabcbc\" ``` **Example 2:** ``` **Input:** s = \"3[a2[c]]\" **Output:** \"accaccacc\" ``` **Example 3:** ``` **Input:** s = \"2[abc]3[cd]ef\" **Output:** \"abcabccdcdcdef\" ``` **Constraints:** `1 <= s.length <= 30` `s` consists of lowercase English letters, digits, and square brackets `\\'[]\\'`. `s` is guaranteed to be **a valid** input. All the integers in `s` are in the range `[1, 300]`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"3[a]2[bc]\"', 'output': '\"aaabcbc\"'}, {'label': 'Example 2', 'input': 's = \"3[a2[c]]\"', 'output': '\"accaccacc\"'}, {'label': 'Example 3', 'input': 's = \"2[abc]3[cd]ef\"', 'output': '\"abcabccdcdcdef\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec decode_string(s :: String.t) :: String.t\\n  def decode_string(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec decode_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\ndecode_string(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def decodeString(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!634\n",
            "utf-8-validation 393\n",
            "{'id': 393, 'name': 'utf-8-validation', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/utf-8-validation/', 'task_description': \"Given an integer array `data` representing the data, return whether it is a valid **UTF-8** encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters). A character in **UTF8** can be from **1 to 4 bytes** long, subjected to the following rules: For a **1-byte** character, the first bit is a `0`, followed by its Unicode code. For an **n-bytes** character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`. This is how the UTF-8 encoding would work: ``` Number of Bytes | UTF-8 Octet Sequence | (binary) --------------------+----------------------------------------- 1 | 0xxxxxxx 2 | 110xxxxx 10xxxxxx 3 | 1110xxxx 10xxxxxx 10xxxxxx 4 | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx ``` `x` denotes a bit in the binary form of a byte that may be either `0` or `1`. **Note: **The input is an array of integers. Only the **least significant 8 bits** of each integer is used to store the data. This means each integer represents only 1 byte of data. **Example 1:** ``` **Input:** data = [197,130,1] **Output:** true **Explanation:** data represents the octet sequence: 11000101 10000010 00000001. It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character. ``` **Example 2:** ``` **Input:** data = [235,140,4] **Output:** false **Explanation:** data represented the octet sequence: 11101011 10001100 00000100. The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character. The next byte is a continuation byte which starts with 10 and that's correct. But the second continuation byte does not start with 10, so it is invalid. ``` **Constraints:** `1 <= data.length <= 2 * 104` `0 <= data[i] <= 255`\", 'test_case': [{'label': 'Example 1', 'input': 'data = [197,130,1]', 'output': 'true Explanation: data represents the octet sequence: 11000101 10000010 00000001.\\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.'}, {'label': 'Example 2', 'input': 'data = [235,140,4]', 'output': \"false Explanation: data represented the octet sequence: 11101011 10001100 00000100.\\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\\nThe next byte is a continuation byte which starts with 10 and that's correct.\\nBut the second continuation byte does not start with 10, so it is invalid.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec valid_utf8(data :: [integer]) :: boolean\\n  def valid_utf8(data) do\\n    \\n  end\\nend', 'erlang_template': '-spec valid_utf8(Data :: [integer()]) -> boolean().\\nvalid_utf8(Data) ->\\n  .', 'scala_template': 'object Solution {\\n    def validUtf8(data: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!635\n",
            "is-subsequence 392\n",
            "{'id': 392, 'name': 'is-subsequence', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/is-subsequence/', 'task_description': 'Given two strings `s` and `t`, return `true`_ if _`s`_ is a **subsequence** of _`t`_, or _`false`_ otherwise_. A **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not). **Example 1:** ``` **Input:** s = \"abc\", t = \"ahbgdc\" **Output:** true ``` **Example 2:** ``` **Input:** s = \"axc\", t = \"ahbgdc\" **Output:** false ``` **Constraints:** `0 <= s.length <= 100` `0 <= t.length <= 104` `s` and `t` consist only of lowercase English letters. **Follow up:** Suppose there are lots of incoming `s`, say `s1, s2, ..., sk` where `k >= 109`, and you want to check one by one to see if `t` has its subsequence. In this scenario, how would you change your code?', 'test_case': [{'label': 'Example 1', 'input': 's = \"abc\", t = \"ahbgdc\"', 'output': 'true'}, {'label': 'Example 2', 'input': 's = \"axc\", t = \"ahbgdc\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_subsequence(s :: String.t, t :: String.t) :: boolean\\n  def is_subsequence(s, t) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_subsequence(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\\nis_subsequence(S, T) ->\\n  .', 'scala_template': 'object Solution {\\n    def isSubsequence(s: String, t: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!636\n",
            "perfect-rectangle 391\n",
            "{'id': 391, 'name': 'perfect-rectangle', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/perfect-rectangle/', 'task_description': 'Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`. Return `true` _if all the rectangles together form an exact cover of a rectangular region_. **Example 1:** ``` **Input:** rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]] **Output:** true **Explanation:** All 5 rectangles together form an exact cover of a rectangular region. ``` **Example 2:** ``` **Input:** rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]] **Output:** false **Explanation:** Because there is a gap between the two rectangular regions. ``` **Example 3:** ``` **Input:** rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]] **Output:** false **Explanation:** Because two of the rectangles overlap with each other. ``` **Constraints:** `1 <= rectangles.length <= 2 * 104` `rectangles[i].length == 4` `-105 <= xi < ai <= 105` `-105 <= yi < bi <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]', 'output': 'true Explanation: All 5 rectangles together form an exact cover of a rectangular region.'}, {'label': 'Example 2', 'input': 'rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]', 'output': 'false Explanation: Because there is a gap between the two rectangular regions.'}, {'label': 'Example 3', 'input': 'rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]', 'output': 'false Explanation: Because two of the rectangles overlap with each other.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_rectangle_cover(rectangles :: [[integer]]) :: boolean\\n  def is_rectangle_cover(rectangles) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_rectangle_cover(Rectangles :: [[integer()]]) -> boolean().\\nis_rectangle_cover(Rectangles) ->\\n  .', 'scala_template': 'object Solution {\\n    def isRectangleCover(rectangles: Array[Array[Int]]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!637\n",
            "elimination-game 390\n",
            "{'id': 390, 'name': 'elimination-game', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/elimination-game/', 'task_description': 'You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`: Starting from left to right, remove the first number and every other number afterward until you reach the end of the list. Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers. Keep repeating the steps again, alternating left to right and right to left, until a single number remains. Given the integer `n`, return _the last number that remains in_ `arr`. **Example 1:** ``` **Input:** n = 9 **Output:** 6 **Explanation:** arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] arr = [2, 4, 6, 8] arr = [2, 6] arr = [6] ``` **Example 2:** ``` **Input:** n = 1 **Output:** 1 ``` **Constraints:** `1 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 9', 'output': '6 Explanation: arr = [ 1 , 2, 3 , 4, 5 , 6, 7 , 8, 9 ]\\narr = [2, 4 , 6, 8 ]\\narr = [ 2 , 6]\\narr = [6]'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec last_remaining(n :: integer) :: integer\\n  def last_remaining(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec last_remaining(N :: integer()) -> integer().\\nlast_remaining(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def lastRemaining(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!638\n",
            "find-the-difference 389\n",
            "{'id': 389, 'name': 'find-the-difference', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-the-difference/', 'task_description': 'You are given two strings `s` and `t`. String `t` is generated by random shuffling string `s` and then add one more letter at a random position. Return the letter that was added to `t`. **Example 1:** ``` **Input:** s = \"abcd\", t = \"abcde\" **Output:** \"e\" **Explanation:** \\'e\\' is the letter that was added. ``` **Example 2:** ``` **Input:** s = \"\", t = \"y\" **Output:** \"y\" ``` **Constraints:** `0 <= s.length <= 1000` `t.length == s.length + 1` `s` and `t` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abcd\", t = \"abcde\"', 'output': '\"e\" Explanation: \\'e\\' is the letter that was added.'}, {'label': 'Example 2', 'input': 's = \"\", t = \"y\"', 'output': '\"y\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_the_difference(s :: String.t, t :: String.t) :: char\\n  def find_the_difference(s, t) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_the_difference(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> char().\\nfind_the_difference(S, T) ->\\n  .', 'scala_template': 'object Solution {\\n    def findTheDifference(s: String, t: String): Char = {\\n        \\n    }\\n}'}\n",
            "Done!639\n",
            "longest-absolute-file-path 388\n",
            "{'id': 388, 'name': 'longest-absolute-file-path', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-absolute-file-path/', 'task_description': 'Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture: Here, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`. In text form, it looks like this (with ⟶ representing the tab character): ``` dir ⟶ subdir1 ⟶ ⟶ file1.ext ⟶ ⟶ subsubdir1 ⟶ subdir2 ⟶ ⟶ subsubdir2 ⟶ ⟶ ⟶ file2.ext ``` If we were to write this representation in code, it will look like this: `\"dir\\\\n\\\\tsubdir1\\\\n\\\\t\\\\tfile1.ext\\\\n\\\\t\\\\tsubsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tsubsubdir2\\\\n\\\\t\\\\t\\\\tfile2.ext\"`. Note that the `\\'\\\\n\\'` and `\\'\\\\t\\'` are the new-line and tab characters. Every file and directory has a unique **absolute path** in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `\\'/\\'s`. Using the above example, the **absolute path** to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext\"`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces. Given a string `input` representing the file system in the explained format, return _the length of the **longest absolute path** to a **file** in the abstracted file system_. If there is no file in the system, return `0`. **Note** that the testcases are generated such that the file system is valid and no file or directory name has length 0. **Example 1:** ``` **Input:** input = \"dir\\\\n\\\\tsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tfile.ext\" **Output:** 20 **Explanation:** We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20. ``` **Example 2:** ``` **Input:** input = \"dir\\\\n\\\\tsubdir1\\\\n\\\\t\\\\tfile1.ext\\\\n\\\\t\\\\tsubsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tsubsubdir2\\\\n\\\\t\\\\t\\\\tfile2.ext\" **Output:** 32 **Explanation:** We have two files: \"dir/subdir1/file1.ext\" of length 21 \"dir/subdir2/subsubdir2/file2.ext\" of length 32. We return 32 since it is the longest absolute path to a file. ``` **Example 3:** ``` **Input:** input = \"a\" **Output:** 0 **Explanation:** We do not have any files, just a single directory named \"a\". ``` **Constraints:** `1 <= input.length <= 104` `input` may contain lowercase or uppercase English letters, a new line character `\\'\\\\n\\'`, a tab character `\\'\\\\t\\'`, a dot `\\'.\\'`, a space `\\' \\'`, and digits. All file and directory names have **positive** length.', 'test_case': [{'label': 'Example 1', 'input': 'input = \"dir\\\\n\\\\tsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tfile.ext\"', 'output': '20 Explanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.'}, {'label': 'Example 2', 'input': 'input = \"dir\\\\n\\\\tsubdir1\\\\n\\\\t\\\\tfile1.ext\\\\n\\\\t\\\\tsubsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tsubsubdir2\\\\n\\\\t\\\\t\\\\tfile2.ext\"', 'output': '32 Explanation: We have two files:\\n\"dir/subdir1/file1.ext\" of length 21\\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\\nWe return 32 since it is the longest absolute path to a file.'}, {'label': 'Example 3', 'input': 'input = \"a\"', 'output': '0 Explanation: We do not have any files, just a single directory named \"a\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec length_longest_path(input :: String.t) :: integer\\n  def length_longest_path(input) do\\n    \\n  end\\nend', 'erlang_template': '-spec length_longest_path(Input :: unicode:unicode_binary()) -> integer().\\nlength_longest_path(Input) ->\\n  .', 'scala_template': 'object Solution {\\n    def lengthLongestPath(input: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!640\n",
            "first-unique-character-in-a-string 387\n",
            "{'id': 387, 'name': 'first-unique-character-in-a-string', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/first-unique-character-in-a-string/', 'task_description': 'Given a string `s`, find the **first** non-repeating character in it and return its index. If it **does not** exist, return `-1`. **Example 1:** **Input:** s = \"leetcode\" **Output:** 0 **Explanation:** The character `\\'l\\'` at index 0 is the first character that does not occur at any other index. **Example 2:** **Input:** s = \"loveleetcode\" **Output:** 2 **Example 3:** **Input:** s = \"aabb\" **Output:** -1 **Constraints:** `1 <= s.length <= 105` `s` consists of only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"leetcode\"', 'output': \"0 Explanation: The character 'l' at index 0 is the first character that does not occur at any other index.\"}, {'label': 'Example 2', 'input': 's = \"loveleetcode\"', 'output': '2'}, {'label': 'Example 3', 'input': 's = \"aabb\"', 'output': '-1'}], 'elixir_template': 'defmodule Solution do\\n  @spec first_uniq_char(s :: String.t) :: integer\\n  def first_uniq_char(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec first_uniq_char(S :: unicode:unicode_binary()) -> integer().\\nfirst_uniq_char(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def firstUniqChar(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!641\n",
            "lexicographical-numbers 386\n",
            "{'id': 386, 'name': 'lexicographical-numbers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/lexicographical-numbers/', 'task_description': 'Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order. You must write an algorithm that runs in `O(n)` time and uses `O(1)` extra space. **Example 1:** ``` **Input:** n = 13 **Output:** [1,10,11,12,13,2,3,4,5,6,7,8,9] ``` **Example 2:** ``` **Input:** n = 2 **Output:** [1,2] ``` **Constraints:** `1 <= n <= 5 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'n = 13', 'output': '[1,10,11,12,13,2,3,4,5,6,7,8,9]'}, {'label': 'Example 2', 'input': 'n = 2', 'output': '[1,2]'}], 'elixir_template': 'defmodule Solution do\\n  @spec lexical_order(n :: integer) :: [integer]\\n  def lexical_order(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec lexical_order(N :: integer()) -> [integer()].\\nlexical_order(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def lexicalOrder(n: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!642\n",
            "mini-parser 385\n",
            "{'id': 385, 'name': 'mini-parser', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/mini-parser/', 'task_description': 'Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return _the deserialized_ `NestedInteger`. Each element is either an integer or a list whose elements may also be integers or other lists. **Example 1:** ``` **Input:** s = \"324\" **Output:** 324 **Explanation:** You should return a NestedInteger object which contains a single integer 324. ``` **Example 2:** ``` **Input:** s = \"[123,[456,[789]]]\" **Output:** [123,[456,[789]]] **Explanation:** Return a NestedInteger object containing a nested list with 2 elements: 1. An integer containing value 123. 2. A nested list containing two elements: i. An integer containing value 456. ii. A nested list with one element: a. An integer containing value 789 ``` **Constraints:** `1 <= s.length <= 5 * 104` `s` consists of digits, square brackets `\"[]\"`, negative sign `\\'-\\'`, and commas `\\',\\'`. `s` is the serialization of valid `NestedInteger`. All the values in the input are in the range `[-106, 106]`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"324\"', 'output': '324 Explanation: You should return a NestedInteger object which contains a single integer 324.'}, {'label': 'Example 2', 'input': 's = \"[123,[456,[789]]]\"', 'output': '[123,[456,[789]]] Explanation: Return a NestedInteger object containing a nested list with 2 elements:\\n1. An integer containing value 123.\\n2. A nested list containing two elements:\\n    i.  An integer containing value 456.\\n    ii. A nested list with one element:\\n         a. An integer containing value 789'}], 'elixir_template': '# # This is the interface that allows for creating nested lists.\\n# # You should not implement it, or speculate about its implementation\\n#\\n# # Create an empty nested list.\\n# :nested_integer.new() :: :nested_integer.nested_integer\\n#\\n# # Create a single integer.\\n# :nested_integer.new(val :: integer) :: :nested_integer.nested_integer\\n#\\n# # Return true if argument nested_integer holds a single integer, rather than a nested list.\\n# :nested_integer.is_integer(nested_integer :: :nested_integer.nested_integer) :: boolean\\n#\\n# # Return the single integer that nested_integer holds, if it holds a single integer\\n# # The result is undefined if it holds a nested list.\\n# :nested_integer.get_integer(nested_integer :: :nested_integer.nested_integer) :: integer\\n#\\n# # Return a copy of argument nested_integer with it set to hold a single integer val.\\n# :nested_integer.set_integer(nested_integer :: :nested_integer.nested_integer, val :: integer) :: :nested_integer.nested_integer\\n#\\n# # Return a copy of argument nested_integer with it set to hold a nested list and adds a nested_integer elem to it.\\n# :nested_integer.add(nested_integer :: :nested_integer.nested_integer, elem :: :nested_integer.nested_integer) :: :nested_integer.nested_integer\\n#\\n# # Return the nested list that nested_integer holds, if it holds a nested list.\\n# # The result is undefined if it holds a single integer.\\n# :nested_integer.get_list(nested_integer :: :nested_integer.nested_integer) :: :array.array(:nested_integer.nested_integer)\\n\\ndefmodule Solution do\\n  @spec deserialize(s :: String.t) :: :nested_integer.nested_integer\\n  def deserialize(s) do\\n    \\n  end\\nend', 'erlang_template': '%% % This is the interface that allows for creating nested lists.\\n%% % You should not implement it, or speculate about its implementation\\n%%\\n%% % Create an empty nested list.\\n%% nested_integer:new() -> nested_integer().\\n%%\\n%% % Create a single integer.\\n%% nested_integer:new(Val :: integer()) -> nested_integer().\\n%%\\n%% % Return true if argument NestedInteger holds a single integer, rather than a nested list.\\n%% nested_integer:is_integer(NestedInteger :: nested_integer()) -> boolean().\\n%%\\n%% % Return the single integer that NestedInteger holds, if it holds a single integer.\\n%% % The result is undefined if it holds a nested list.\\n%% nested_integer:get_integer(NestedInteger :: nested_integer()) -> integer().\\n%%\\n%% % Return a copy of argument NestedInteger with it set to hold a single integer Val.\\n%% nested_integer:set_integer(NestedInteger :: nested_integer(), Val :: integer()) -> nested_integer().\\n%%\\n%% % Return a copy of argument NestedInteger with it set to hold a nested list and adds a nested_integer Elem to it.\\n%% nested_integer:add(NestedInteger :: nested_integer(), Elem :: nested_integer()) -> nested_integer().\\n%%\\n%% % Return the nested list that NestedInteger holds, if it holds a nested list.\\n%% % The result is undefined if it holds a single integer.\\n%% nested_integer:get_list(NestedInteger :: nested_integer()) -> array:array(nested_integer()).\\n\\n-spec deserialize(S :: unicode:unicode_binary()) -> nested_integer:nested_integer().\\ndeserialize(S) ->\\n  .', 'scala_template': '/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * trait NestedInteger {\\n *\\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *   def isInteger: Boolean\\n *\\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer.\\n *   def getInteger: Int\\n *\\n *   // Set this NestedInteger to hold a single integer.\\n *   def setInteger(i: Int): Unit\\n *\\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list.\\n *   def getList: Array[NestedInteger]\\n *\\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *   def add(ni: NestedInteger): Unit\\n * }\\n */\\nobject Solution {\\n    def deserialize(s: String): NestedInteger = {\\n        \\n    }\\n}'}\n",
            "Done!643\n",
            "shuffle-an-array 384\n",
            "{'id': 384, 'name': 'shuffle-an-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/shuffle-an-array/', 'task_description': 'Given an integer array `nums`, design an algorithm to randomly shuffle the array. All permutations of the array should be **equally likely** as a result of the shuffling. Implement the `Solution` class: `Solution(int[] nums)` Initializes the object with the integer array `nums`. `int[] reset()` Resets the array to its original configuration and returns it. `int[] shuffle()` Returns a random shuffling of the array. **Example 1:** ``` **Input** [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"] [[[1, 2, 3]], [], [], []] **Output** [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]] **Explanation** Solution solution = new Solution([1, 2, 3]); solution.shuffle(); // Shuffle the array [1,2,3] and return its result. // Any permutation of [1,2,3] must be equally likely to be returned. // Example: return [3, 1, 2] solution.reset(); // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3] solution.shuffle(); // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2] ``` **Constraints:** `1 <= nums.length <= 50` `-106 <= nums[i] <= 106` All the elements of `nums` are **unique**. At most `104` calls **in total** will be made to `reset` and `shuffle`.', 'test_case': [], 'elixir_template': 'defmodule Solution do\\n  @spec init_(nums :: [integer]) :: any\\n  def init_(nums) do\\n    \\n  end\\n\\n  @spec reset() :: [integer]\\n  def reset() do\\n    \\n  end\\n\\n  @spec shuffle() :: [integer]\\n  def shuffle() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Solution.init_(nums)\\n# param_1 = Solution.reset()\\n# param_2 = Solution.shuffle()\\n\\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec solution_init_(Nums :: [integer()]) -> any().\\nsolution_init_(Nums) ->\\n  .\\n\\n-spec solution_reset() -> [integer()].\\nsolution_reset() ->\\n  .\\n\\n-spec solution_shuffle() -> [integer()].\\nsolution_shuffle() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% solution_init_(Nums),\\n%% Param_1 = solution_reset(),\\n%% Param_2 = solution_shuffle(),\\n\\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Solution(_nums: Array[Int]) {\\n\\n    def reset(): Array[Int] = {\\n        \\n    }\\n\\n    def shuffle(): Array[Int] = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * val obj = new Solution(nums)\\n * val param_1 = obj.reset()\\n * val param_2 = obj.shuffle()\\n */'}\n",
            "Done!644\n",
            "ransom-note 383\n",
            "{'id': 383, 'name': 'ransom-note', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/ransom-note/', 'task_description': 'Given two strings `ransomNote` and `magazine`, return `true`_ if _`ransomNote`_ can be constructed by using the letters from _`magazine`_ and _`false`_ otherwise_. Each letter in `magazine` can only be used once in `ransomNote`. **Example 1:** ``` **Input:** ransomNote = \"a\", magazine = \"b\" **Output:** false ``` **Example 2:** ``` **Input:** ransomNote = \"aa\", magazine = \"ab\" **Output:** false ``` **Example 3:** ``` **Input:** ransomNote = \"aa\", magazine = \"aab\" **Output:** true ``` **Constraints:** `1 <= ransomNote.length, magazine.length <= 105` `ransomNote` and `magazine` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'ransomNote = \"a\", magazine = \"b\"', 'output': 'false'}, {'label': 'Example 2', 'input': 'ransomNote = \"aa\", magazine = \"ab\"', 'output': 'false'}, {'label': 'Example 3', 'input': 'ransomNote = \"aa\", magazine = \"aab\"', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_construct(ransom_note :: String.t, magazine :: String.t) :: boolean\\n  def can_construct(ransom_note, magazine) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_construct(RansomNote :: unicode:unicode_binary(), Magazine :: unicode:unicode_binary()) -> boolean().\\ncan_construct(RansomNote, Magazine) ->\\n  .', 'scala_template': 'object Solution {\\n    def canConstruct(ransomNote: String, magazine: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!645\n",
            "linked-list-random-node 382\n",
            "{'id': 382, 'name': 'linked-list-random-node', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/linked-list-random-node/', 'task_description': 'Given a singly linked list, return a random node\\'s value from the linked list. Each node must have the **same probability** of being chosen. Implement the `Solution` class: `Solution(ListNode head)` Initializes the object with the head of the singly-linked list `head`. `int getRandom()` Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen. **Example 1:** ``` **Input** [\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"] [[[1, 2, 3]], [], [], [], [], []] **Output** [null, 1, 3, 2, 2, 3] **Explanation** Solution solution = new Solution([1, 2, 3]); solution.getRandom(); // return 1 solution.getRandom(); // return 3 solution.getRandom(); // return 2 solution.getRandom(); // return 2 solution.getRandom(); // return 3 // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning. ``` **Constraints:** The number of nodes in the linked list will be in the range `[1, 104]`. `-104 <= Node.val <= 104` At most `104` calls will be made to `getRandom`. **Follow up:** What if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?', 'test_case': [], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec init_(head :: ListNode.t | nil) :: any\\n  def init_(head) do\\n    \\n  end\\n\\n  @spec get_random() :: integer\\n  def get_random() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Solution.init_(head)\\n# param_1 = Solution.get_random()\\n\\n# Solution.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec solution_init_(Head :: #list_node{} | null) -> any().\\nsolution_init_(Head) ->\\n  .\\n\\n-spec solution_get_random() -> integer().\\nsolution_get_random() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% solution_init_(Head),\\n%% Param_1 = solution_get_random(),\\n\\n%% solution_init_ will be called before every test case, in which you can do some necessary initializations.\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nclass Solution(_head: ListNode) {\\n\\n    def getRandom(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * val obj = new Solution(head)\\n * val param_1 = obj.getRandom()\\n */'}\n",
            "Done!646\n",
            "insert-delete-getrandom-o1-duplicates-allowed 381\n",
            "{'id': 381, 'name': 'insert-delete-getrandom-o1-duplicates-allowed', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed/', 'task_description': '`RandomizedCollection` is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element. Implement the `RandomizedCollection` class: `RandomizedCollection()` Initializes the empty `RandomizedCollection` object. `bool insert(int val)` Inserts an item `val` into the multiset, even if the item is already present. Returns `true` if the item is not present, `false` otherwise. `bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item is present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them. `int getRandom()` Returns a random element from the current multiset of elements. The probability of each element being returned is **linearly related** to the number of the same values the multiset contains. You must implement the functions of the class such that each function works on **average** `O(1)` time complexity. **Note:** The test cases are generated such that `getRandom` will only be called if there is **at least one** item in the `RandomizedCollection`. **Example 1:** ``` **Input** [\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"] [[], [1], [1], [2], [], [1], []] **Output** [null, true, false, true, 2, true, 1] **Explanation** RandomizedCollection randomizedCollection = new RandomizedCollection(); randomizedCollection.insert(1); // return true since the collection does not contain 1. // Inserts 1 into the collection. randomizedCollection.insert(1); // return false since the collection contains 1. // Inserts another 1 into the collection. Collection now contains [1,1]. randomizedCollection.insert(2); // return true since the collection does not contain 2. // Inserts 2 into the collection. Collection now contains [1,1,2]. randomizedCollection.getRandom(); // getRandom should: // - return 1 with probability 2/3, or // - return 2 with probability 1/3. randomizedCollection.remove(1); // return true since the collection contains 1. // Removes 1 from the collection. Collection now contains [1,2]. randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely. ``` **Constraints:** `-231 <= val <= 231 - 1` At most `2 * 105` calls **in total** will be made to `insert`, `remove`, and `getRandom`. There will be **at least one** element in the data structure when `getRandom` is called.', 'test_case': [], 'elixir_template': 'defmodule RandomizedCollection do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec insert(val :: integer) :: boolean\\n  def insert(val) do\\n    \\n  end\\n\\n  @spec remove(val :: integer) :: boolean\\n  def remove(val) do\\n    \\n  end\\n\\n  @spec get_random() :: integer\\n  def get_random() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# RandomizedCollection.init_()\\n# param_1 = RandomizedCollection.insert(val)\\n# param_2 = RandomizedCollection.remove(val)\\n# param_3 = RandomizedCollection.get_random()\\n\\n# RandomizedCollection.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec randomized_collection_init_() -> any().\\nrandomized_collection_init_() ->\\n  .\\n\\n-spec randomized_collection_insert(Val :: integer()) -> boolean().\\nrandomized_collection_insert(Val) ->\\n  .\\n\\n-spec randomized_collection_remove(Val :: integer()) -> boolean().\\nrandomized_collection_remove(Val) ->\\n  .\\n\\n-spec randomized_collection_get_random() -> integer().\\nrandomized_collection_get_random() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% randomized_collection_init_(),\\n%% Param_1 = randomized_collection_insert(Val),\\n%% Param_2 = randomized_collection_remove(Val),\\n%% Param_3 = randomized_collection_get_random(),\\n\\n%% randomized_collection_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class RandomizedCollection() {\\n\\n    def insert(`val`: Int): Boolean = {\\n        \\n    }\\n\\n    def remove(`val`: Int): Boolean = {\\n        \\n    }\\n\\n    def getRandom(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your RandomizedCollection object will be instantiated and called as such:\\n * val obj = new RandomizedCollection()\\n * val param_1 = obj.insert(`val`)\\n * val param_2 = obj.remove(`val`)\\n * val param_3 = obj.getRandom()\\n */'}\n",
            "Done!647\n",
            "insert-delete-getrandom-o1 380\n",
            "{'id': 380, 'name': 'insert-delete-getrandom-o1', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/insert-delete-getrandom-o1/', 'task_description': 'Implement the `RandomizedSet` class: `RandomizedSet()` Initializes the `RandomizedSet` object. `bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise. `bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise. `int getRandom()` Returns a random element from the current set of elements (it\\'s guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned. You must implement the functions of the class such that each function works in **average** `O(1)` time complexity. **Example 1:** ``` **Input** [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"] [[], [1], [2], [2], [], [1], [2], []] **Output** [null, true, false, true, 2, true, false, 2] **Explanation** RandomizedSet randomizedSet = new RandomizedSet(); randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully. randomizedSet.remove(2); // Returns false as 2 does not exist in the set. randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2]. randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly. randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2]. randomizedSet.insert(2); // 2 was already in the set, so return false. randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2. ``` **Constraints:** `-231 <= val <= 231 - 1` At most `2 * ``105` calls will be made to `insert`, `remove`, and `getRandom`. There will be **at least one** element in the data structure when `getRandom` is called.', 'test_case': [], 'elixir_template': 'defmodule RandomizedSet do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec insert(val :: integer) :: boolean\\n  def insert(val) do\\n    \\n  end\\n\\n  @spec remove(val :: integer) :: boolean\\n  def remove(val) do\\n    \\n  end\\n\\n  @spec get_random() :: integer\\n  def get_random() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# RandomizedSet.init_()\\n# param_1 = RandomizedSet.insert(val)\\n# param_2 = RandomizedSet.remove(val)\\n# param_3 = RandomizedSet.get_random()\\n\\n# RandomizedSet.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec randomized_set_init_() -> any().\\nrandomized_set_init_() ->\\n  .\\n\\n-spec randomized_set_insert(Val :: integer()) -> boolean().\\nrandomized_set_insert(Val) ->\\n  .\\n\\n-spec randomized_set_remove(Val :: integer()) -> boolean().\\nrandomized_set_remove(Val) ->\\n  .\\n\\n-spec randomized_set_get_random() -> integer().\\nrandomized_set_get_random() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% randomized_set_init_(),\\n%% Param_1 = randomized_set_insert(Val),\\n%% Param_2 = randomized_set_remove(Val),\\n%% Param_3 = randomized_set_get_random(),\\n\\n%% randomized_set_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class RandomizedSet() {\\n\\n    def insert(`val`: Int): Boolean = {\\n        \\n    }\\n\\n    def remove(`val`: Int): Boolean = {\\n        \\n    }\\n\\n    def getRandom(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * val obj = new RandomizedSet()\\n * val param_1 = obj.insert(`val`)\\n * val param_2 = obj.remove(`val`)\\n * val param_3 = obj.getRandom()\\n */'}\n",
            "Done!648\n",
            "kth-smallest-element-in-a-sorted-matrix 378\n",
            "{'id': 378, 'name': 'kth-smallest-element-in-a-sorted-matrix', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/', 'task_description': 'Given an `n x n` `matrix` where each of the rows and columns is sorted in ascending order, return _the_ `kth` _smallest element in the matrix_. Note that it is the `kth` smallest element **in the sorted order**, not the `kth` **distinct** element. You must find a solution with a memory complexity better than `O(n2)`. **Example 1:** ``` **Input:** matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8 **Output:** 13 **Explanation:** The elements in the matrix are [1,5,9,10,11,12,13,**13**,15], and the 8th smallest number is 13 ``` **Example 2:** ``` **Input:** matrix = [[-5]], k = 1 **Output:** -5 ``` **Constraints:** `n == matrix.length == matrix[i].length` `1 <= n <= 300` `-109 <= matrix[i][j] <= 109` All the rows and columns of `matrix` are **guaranteed** to be sorted in **non-decreasing order**. `1 <= k <= n2` **Follow up:** Could you solve the problem with a constant memory (i.e., `O(1)` memory complexity)? Could you solve the problem in `O(n)` time complexity? The solution may be too advanced for an interview but you may find reading this paper fun.', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8', 'output': '13 Explanation: The elements in the matrix are [1,5,9,10,11,12,13, 13 ,15], and the 8 th smallest number is 13'}, {'label': 'Example 2', 'input': 'matrix = [[-5]], k = 1', 'output': '-5 Constraints: n == matrix.length == matrix[i].length 1 <= n <= 300 -10 9 <= matrix[i][j] <= 10 9 All the rows and columns of matrix are guaranteed to be sorted in non-decreasing order . 1 <= k <= n 2 Follow up: Could you solve the problem with a constant memory (i.e., O(1) memory complexity)? Could you solve the problem in O(n) time complexity? The solution may be too advanced for an interview but you may find reading this paper fun.'}], 'elixir_template': 'defmodule Solution do\\n  @spec kth_smallest(matrix :: [[integer]], k :: integer) :: integer\\n  def kth_smallest(matrix, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec kth_smallest(Matrix :: [[integer()]], K :: integer()) -> integer().\\nkth_smallest(Matrix, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def kthSmallest(matrix: Array[Array[Int]], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!649\n",
            "combination-sum-iv 377\n",
            "{'id': 377, 'name': 'combination-sum-iv', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/combination-sum-iv/', 'task_description': 'Given an array of **distinct** integers `nums` and a target integer `target`, return _the number of possible combinations that add up to_ `target`. The test cases are generated so that the answer can fit in a **32-bit** integer. **Example 1:** ``` **Input:** nums = [1,2,3], target = 4 **Output:** 7 **Explanation:** The possible combination ways are: (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) Note that different sequences are counted as different combinations. ``` **Example 2:** ``` **Input:** nums = [9], target = 3 **Output:** 0 ``` **Constraints:** `1 <= nums.length <= 200` `1 <= nums[i] <= 1000` All the elements of `nums` are **unique**. `1 <= target <= 1000` **Follow up:** What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3], target = 4', 'output': '7 Explanation: The possible combination ways are:\\n(1, 1, 1, 1)\\n(1, 1, 2)\\n(1, 2, 1)\\n(1, 3)\\n(2, 1, 1)\\n(2, 2)\\n(3, 1)\\nNote that different sequences are counted as different combinations.'}, {'label': 'Example 2', 'input': 'nums = [9], target = 3', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec combination_sum4(nums :: [integer], target :: integer) :: integer\\n  def combination_sum4(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec combination_sum4(Nums :: [integer()], Target :: integer()) -> integer().\\ncombination_sum4(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def combinationSum4(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!650\n",
            "wiggle-subsequence 376\n",
            "{'id': 376, 'name': 'wiggle-subsequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/wiggle-subsequence/', 'task_description': 'A **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences. For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative. In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero. A **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order. Given an integer array `nums`, return _the length of the longest **wiggle subsequence** of _`nums`. **Example 1:** ``` **Input:** nums = [1,7,4,9,2,5] **Output:** 6 **Explanation:** The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3). ``` **Example 2:** ``` **Input:** nums = [1,17,5,10,13,15,10,5,16,8] **Output:** 7 **Explanation:** There are several subsequences that achieve this length. One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8). ``` **Example 3:** ``` **Input:** nums = [1,2,3,4,5,6,7,8,9] **Output:** 2 ``` **Constraints:** `1 <= nums.length <= 1000` `0 <= nums[i] <= 1000` **Follow up:** Could you solve this in `O(n)` time?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,7,4,9,2,5]', 'output': '6 Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).'}, {'label': 'Example 2', 'input': 'nums = [1,17,5,10,13,15,10,5,16,8]', 'output': '7 Explanation: There are several subsequences that achieve this length.\\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).'}, {'label': 'Example 3', 'input': 'nums = [1,2,3,4,5,6,7,8,9]', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec wiggle_max_length(nums :: [integer]) :: integer\\n  def wiggle_max_length(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec wiggle_max_length(Nums :: [integer()]) -> integer().\\nwiggle_max_length(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def wiggleMaxLength(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!651\n",
            "guess-number-higher-or-lower-ii 375\n",
            "{'id': 375, 'name': 'guess-number-higher-or-lower-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/guess-number-higher-or-lower-ii/', 'task_description': 'We are playing the Guessing Game. The game will work as follows: I pick a number between `1` and `n`. You guess a number. If you guess the right number, **you win the game**. If you guess the wrong number, then I will tell you whether the number I picked is **higher or lower**, and you will continue guessing. Every time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, **you lose the game**. Given a particular `n`, return _the minimum amount of money you need to **guarantee a win regardless of what number I pick**_. **Example 1:** ``` **Input:** n = 10 **Output:** 16 **Explanation:** The winning strategy is as follows: - The range is [1,10]. Guess 7. - If this is my number, your total is $0. Otherwise, you pay $7. - If my number is higher, the range is [8,10]. Guess 9. - If this is my number, your total is $7. Otherwise, you pay $9. - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16. - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16. - If my number is lower, the range is [1,6]. Guess 3. - If this is my number, your total is $7. Otherwise, you pay $3. - If my number is higher, the range is [4,6]. Guess 5. - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5. - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15. - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15. - If my number is lower, the range is [1,2]. Guess 1. - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1. - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11. The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win. ``` **Example 2:** ``` **Input:** n = 1 **Output:** 0 **Explanation:** There is only one possible number, so you can guess 1 and not have to pay anything. ``` **Example 3:** ``` **Input:** n = 2 **Output:** 1 **Explanation:** There are two possible numbers, 1 and 2. - Guess 1. - If this is my number, your total is $0. Otherwise, you pay $1. - If my number is higher, it must be 2. Guess 2. Your total is $1. The worst case is that you pay $1. ``` **Constraints:** `1 <= n <= 200`', 'test_case': [{'label': 'Example 1', 'input': 'n = 10', 'output': '16 Explanation: The winning strategy is as follows:\\n- The range is [1,10]. Guess 7.\\n\\xa0   - If this is my number, your total is $0. Otherwise, you pay $7.\\n\\xa0   - If my number is higher, the range is [8,10]. Guess 9.\\n\\xa0       - If this is my number, your total is $7. Otherwise, you pay $9.\\n\\xa0       - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\\n\\xa0       - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\\n\\xa0   - If my number is lower, the range is [1,6]. Guess 3.\\n\\xa0       - If this is my number, your total is $7. Otherwise, you pay $3.\\n\\xa0       - If my number is higher, the range is [4,6]. Guess 5.\\n\\xa0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\\n\\xa0           - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\\n\\xa0           - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\\n\\xa0       - If my number is lower, the range is [1,2]. Guess 1.\\n\\xa0           - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\\n\\xa0           - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '0 Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.'}, {'label': 'Example 3', 'input': 'n = 2', 'output': '1 Explanation: There are two possible numbers, 1 and 2.\\n- Guess 1.\\n\\xa0   - If this is my number, your total is $0. Otherwise, you pay $1.\\n\\xa0   - If my number is higher, it must be 2. Guess 2. Your total is $1.\\nThe worst case is that you pay $1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec get_money_amount(n :: integer) :: integer\\n  def get_money_amount(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec get_money_amount(N :: integer()) -> integer().\\nget_money_amount(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def getMoneyAmount(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!652\n",
            "guess-number-higher-or-lower 374\n",
            "{'id': 374, 'name': 'guess-number-higher-or-lower', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/guess-number-higher-or-lower/', 'task_description': 'We are playing the Guess Game. The game is as follows: I pick a number from `1` to `n`. You have to guess which number I picked. Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess. You call a pre-defined API `int guess(int num)`, which returns three possible results: `-1`: Your guess is higher than the number I picked (i.e. `num > pick`). `1`: Your guess is lower than the number I picked (i.e. `num < pick`). `0`: your guess is equal to the number I picked (i.e. `num == pick`). Return _the number that I picked_. **Example 1:** ``` **Input:** n = 10, pick = 6 **Output:** 6 ``` **Example 2:** ``` **Input:** n = 1, pick = 1 **Output:** 1 ``` **Example 3:** ``` **Input:** n = 2, pick = 1 **Output:** 1 ``` **Constraints:** `1 <= n <= 231 - 1` `1 <= pick <= n`', 'test_case': [{'label': 'Example 1', 'input': 'n = 10, pick = 6', 'output': '6'}, {'label': 'Example 2', 'input': 'n = 1, pick = 1', 'output': '1'}, {'label': 'Example 3', 'input': 'n = 2, pick = 1', 'output': '1'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/** \\n * The API guess is defined in the parent class.\\n * @param  num   your guess\\n * @return \\t     -1 if num is higher than the picked number\\n *\\t\\t\\t      1 if num is lower than the picked number\\n *               otherwise return 0\\n * def guess(num: Int): Int = {}\\n */\\n\\nclass Solution extends GuessGame {\\n    def guessNumber(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!653\n",
            "find-k-pairs-with-smallest-sums 373\n",
            "{'id': 373, 'name': 'find-k-pairs-with-smallest-sums', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-k-pairs-with-smallest-sums/', 'task_description': 'You are given two integer arrays `nums1` and `nums2` sorted in **non-decreasing order** and an integer `k`. Define a pair `(u, v)` which consists of one element from the first array and one element from the second array. Return _the_ `k` _pairs_ `(u1, v1), (u2, v2), ..., (uk, vk)` _with the smallest sums_. **Example 1:** ``` **Input:** nums1 = [1,7,11], nums2 = [2,4,6], k = 3 **Output:** [[1,2],[1,4],[1,6]] **Explanation:** The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6] ``` **Example 2:** ``` **Input:** nums1 = [1,1,2], nums2 = [1,2,3], k = 2 **Output:** [[1,1],[1,1]] **Explanation:** The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3] ``` **Constraints:** `1 <= nums1.length, nums2.length <= 105` `-109 <= nums1[i], nums2[i] <= 109` `nums1` and `nums2` both are sorted in **non-decreasing order**. `1 <= k <= 104` `k <= nums1.length * nums2.length`', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,7,11], nums2 = [2,4,6], k = 3', 'output': '[[1,2],[1,4],[1,6]] Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]'}, {'label': 'Example 2', 'input': 'nums1 = [1,1,2], nums2 = [1,2,3], k = 2', 'output': '[[1,1],[1,1]] Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]'}], 'elixir_template': 'defmodule Solution do\\n  @spec k_smallest_pairs(nums1 :: [integer], nums2 :: [integer], k :: integer) :: [[integer]]\\n  def k_smallest_pairs(nums1, nums2, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec k_smallest_pairs(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> [[integer()]].\\nk_smallest_pairs(Nums1, Nums2, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def kSmallestPairs(nums1: Array[Int], nums2: Array[Int], k: Int): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!654\n",
            "super-pow 372\n",
            "{'id': 372, 'name': 'super-pow', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/super-pow/', 'task_description': 'Your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array. **Example 1:** ``` **Input:** a = 2, b = [3] **Output:** 8 ``` **Example 2:** ``` **Input:** a = 2, b = [1,0] **Output:** 1024 ``` **Example 3:** ``` **Input:** a = 1, b = [4,3,3,8,5,2] **Output:** 1 ``` **Constraints:** `1 <= a <= 231 - 1` `1 <= b.length <= 2000` `0 <= b[i] <= 9` `b` does not contain leading zeros.', 'test_case': [{'label': 'Example 1', 'input': 'a = 2, b = [3]', 'output': '8'}, {'label': 'Example 2', 'input': 'a = 2, b = [1,0]', 'output': '1024'}, {'label': 'Example 3', 'input': 'a = 1, b = [4,3,3,8,5,2]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec super_pow(a :: integer, b :: [integer]) :: integer\\n  def super_pow(a, b) do\\n    \\n  end\\nend', 'erlang_template': '-spec super_pow(A :: integer(), B :: [integer()]) -> integer().\\nsuper_pow(A, B) ->\\n  .', 'scala_template': 'object Solution {\\n    def superPow(a: Int, b: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!655\n",
            "sum-of-two-integers 371\n",
            "{'id': 371, 'name': 'sum-of-two-integers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sum-of-two-integers/', 'task_description': 'Given two integers `a` and `b`, return _the sum of the two integers without using the operators_ `+` _and_ `-`. **Example 1:** ``` **Input:** a = 1, b = 2 **Output:** 3 ``` **Example 2:** ``` **Input:** a = 2, b = 3 **Output:** 5 ``` **Constraints:** `-1000 <= a, b <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'a = 1, b = 2', 'output': '3'}, {'label': 'Example 2', 'input': 'a = 2, b = 3', 'output': '5 Constraints: -1000 <= a, b <= 1000'}], 'elixir_template': 'defmodule Solution do\\n  @spec get_sum(a :: integer, b :: integer) :: integer\\n  def get_sum(a, b) do\\n    \\n  end\\nend', 'erlang_template': '-spec get_sum(A :: integer(), B :: integer()) -> integer().\\nget_sum(A, B) ->\\n  .', 'scala_template': 'object Solution {\\n    def getSum(a: Int, b: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!656\n",
            "largest-divisible-subset 368\n",
            "{'id': 368, 'name': 'largest-divisible-subset', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/largest-divisible-subset/', 'task_description': 'Given a set of **distinct** positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies: `answer[i] % answer[j] == 0`, or `answer[j] % answer[i] == 0` If there are multiple solutions, return any of them. **Example 1:** ``` **Input:** nums = [1,2,3] **Output:** [1,2] **Explanation:** [1,3] is also accepted. ``` **Example 2:** ``` **Input:** nums = [1,2,4,8] **Output:** [1,2,4,8] ``` **Constraints:** `1 <= nums.length <= 1000` `1 <= nums[i] <= 2 * 109` All the integers in `nums` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3]', 'output': '[1,2] Explanation: [1,3] is also accepted.'}, {'label': 'Example 2', 'input': 'nums = [1,2,4,8]', 'output': '[1,2,4,8]'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_divisible_subset(nums :: [integer]) :: [integer]\\n  def largest_divisible_subset(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_divisible_subset(Nums :: [integer()]) -> [integer()].\\nlargest_divisible_subset(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestDivisibleSubset(nums: Array[Int]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!657\n",
            "valid-perfect-square 367\n",
            "{'id': 367, 'name': 'valid-perfect-square', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/valid-perfect-square/', 'task_description': 'Given a positive integer num, return `true` _if_ `num` _is a perfect square or_ `false` _otherwise_. A **perfect square** is an integer that is the square of an integer. In other words, it is the product of some integer with itself. You must not use any built-in library function, such as `sqrt`. **Example 1:** ``` **Input:** num = 16 **Output:** true **Explanation:** We return true because 4 * 4 = 16 and 4 is an integer. ``` **Example 2:** ``` **Input:** num = 14 **Output:** false **Explanation:** We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer. ``` **Constraints:** `1 <= num <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'num = 16', 'output': 'true Explanation: We return true because 4 * 4 = 16 and 4 is an integer.'}, {'label': 'Example 2', 'input': 'num = 14', 'output': 'false Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_perfect_square(num :: integer) :: boolean\\n  def is_perfect_square(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_perfect_square(Num :: integer()) -> boolean().\\nis_perfect_square(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def isPerfectSquare(num: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!658\n",
            "water-and-jug-problem 365\n",
            "{'id': 365, 'name': 'water-and-jug-problem', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/water-and-jug-problem/', 'task_description': 'You are given two jugs with capacities `x` liters and `y` liters. You have an infinite water supply. Return whether the total amount of water in both jugs may reach `target` using the following operations: Fill either jug completely with water. Completely empty either jug. Pour water from one jug into another until the receiving jug is full, or the transferring jug is empty. **Example 1: ** **Input: ** x = 3, y = 5, target = 4 **Output: ** true **Explanation:** Follow these steps to reach a total of 4 liters: Fill the 5-liter jug (0, 5). Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3, 2). Empty the 3-liter jug (0, 2). Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2, 0). Fill the 5-liter jug again (2, 5). Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. This leaves 4 liters in the 5-liter jug (3, 4). Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter jug (0, 4). Reference: The Die Hard example. **Example 2: ** **Input: ** x = 2, y = 6, target = 5 **Output: ** false **Example 3: ** **Input: ** x = 1, y = 2, target = 3 **Output: ** true **Explanation:** Fill both jugs. The total amount of water in both jugs is equal to 3 now. **Constraints:** `1 <= x, y, target <= 103`', 'test_case': [{'label': 'Example 1', 'input': 'x = 3, y = 5, target = 4', 'output': 'true Explanation: Follow these steps to reach a total of 4 liters: Fill the 5-liter jug (0, 5). Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3, 2). Empty the 3-liter jug (0, 2). Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2, 0). Fill the 5-liter jug again (2, 5). Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. This leaves 4 liters in the 5-liter jug (3, 4). Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter jug (0, 4). Reference: The Die Hard example.'}, {'label': 'Example 2', 'input': 'x = 2, y = 6, target = 5', 'output': 'false'}, {'label': 'Example 3', 'input': 'x = 1, y = 2, target = 3', 'output': 'true Explanation: Fill both jugs. The total amount of water in both jugs is equal to 3 now.'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_measure_water(x :: integer, y :: integer, target :: integer) :: boolean\\n  def can_measure_water(x, y, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_measure_water(X :: integer(), Y :: integer(), Target :: integer()) -> boolean().\\ncan_measure_water(X, Y, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def canMeasureWater(x: Int, y: Int, target: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!659\n",
            "max-sum-of-rectangle-no-larger-than-k 363\n",
            "{'id': 363, 'name': 'max-sum-of-rectangle-no-larger-than-k', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/', 'task_description': 'Given an `m x n` matrix `matrix` and an integer `k`, return _the max sum of a rectangle in the matrix such that its sum is no larger than_ `k`. It is **guaranteed** that there will be a rectangle with a sum no larger than `k`. **Example 1:** ``` **Input:** matrix = [[1,0,1],[0,-2,3]], k = 2 **Output:** 2 **Explanation:** Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2). ``` **Example 2:** ``` **Input:** matrix = [[2,2,-1]], k = 3 **Output:** 3 ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 100` `-100 <= matrix[i][j] <= 100` `-105 <= k <= 105` **Follow up:** What if the number of rows is much larger than the number of columns?', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,0,1],[0,-2,3]], k = 2', 'output': '2 Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).'}, {'label': 'Example 2', 'input': 'matrix = [[2,2,-1]], k = 3', 'output': '3 Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 100 -100 <= matrix[i][j] <= 100 -10 5 <= k <= 10 5 Follow up: What if the number of rows is much larger than the number of columns?'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_sum_submatrix(matrix :: [[integer]], k :: integer) :: integer\\n  def max_sum_submatrix(matrix, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_sum_submatrix(Matrix :: [[integer()]], K :: integer()) -> integer().\\nmax_sum_submatrix(Matrix, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxSumSubmatrix(matrix: Array[Array[Int]], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!660\n",
            "count-numbers-with-unique-digits 357\n",
            "{'id': 357, 'name': 'count-numbers-with-unique-digits', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/count-numbers-with-unique-digits/', 'task_description': 'Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`. **Example 1:** ``` **Input:** n = 2 **Output:** 91 **Explanation:** The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99 ``` **Example 2:** ``` **Input:** n = 0 **Output:** 1 ``` **Constraints:** `0 <= n <= 8`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '91 Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99'}, {'label': 'Example 2', 'input': 'n = 0', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_numbers_with_unique_digits(n :: integer) :: integer\\n  def count_numbers_with_unique_digits(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_numbers_with_unique_digits(N :: integer()) -> integer().\\ncount_numbers_with_unique_digits(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def countNumbersWithUniqueDigits(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!661\n",
            "design-twitter 355\n",
            "{'id': 355, 'name': 'design-twitter', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/design-twitter/', 'task_description': 'Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user\\'s news feed. Implement the `Twitter` class: `Twitter()` Initializes your twitter object. `void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`. `List<Integer> getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user\\'s news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be **ordered from most recent to least recent**. `void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`. `void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`. **Example 1:** ``` **Input** [\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"] [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]] **Output** [null, null, [5], null, null, [6, 5], null, [5]] **Explanation** Twitter twitter = new Twitter(); twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5). twitter.getNewsFeed(1); // User 1\\'s news feed should return a list with 1 tweet id -> [5]. return [5] twitter.follow(1, 2); // User 1 follows user 2. twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6). twitter.getNewsFeed(1); // User 1\\'s news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5. twitter.unfollow(1, 2); // User 1 unfollows user 2. twitter.getNewsFeed(1); // User 1\\'s news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2. ``` **Constraints:** `1 <= userId, followerId, followeeId <= 500` `0 <= tweetId <= 104` All the tweets have **unique** IDs. At most `3 * 104` calls will be made to `postTweet`, `getNewsFeed`, `follow`, and `unfollow`. A user cannot follow himself.', 'test_case': [], 'elixir_template': 'defmodule Twitter do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec post_tweet(user_id :: integer, tweet_id :: integer) :: any\\n  def post_tweet(user_id, tweet_id) do\\n    \\n  end\\n\\n  @spec get_news_feed(user_id :: integer) :: [integer]\\n  def get_news_feed(user_id) do\\n    \\n  end\\n\\n  @spec follow(follower_id :: integer, followee_id :: integer) :: any\\n  def follow(follower_id, followee_id) do\\n    \\n  end\\n\\n  @spec unfollow(follower_id :: integer, followee_id :: integer) :: any\\n  def unfollow(follower_id, followee_id) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Twitter.init_()\\n# Twitter.post_tweet(user_id, tweet_id)\\n# param_2 = Twitter.get_news_feed(user_id)\\n# Twitter.follow(follower_id, followee_id)\\n# Twitter.unfollow(follower_id, followee_id)\\n\\n# Twitter.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec twitter_init_() -> any().\\ntwitter_init_() ->\\n  .\\n\\n-spec twitter_post_tweet(UserId :: integer(), TweetId :: integer()) -> any().\\ntwitter_post_tweet(UserId, TweetId) ->\\n  .\\n\\n-spec twitter_get_news_feed(UserId :: integer()) -> [integer()].\\ntwitter_get_news_feed(UserId) ->\\n  .\\n\\n-spec twitter_follow(FollowerId :: integer(), FolloweeId :: integer()) -> any().\\ntwitter_follow(FollowerId, FolloweeId) ->\\n  .\\n\\n-spec twitter_unfollow(FollowerId :: integer(), FolloweeId :: integer()) -> any().\\ntwitter_unfollow(FollowerId, FolloweeId) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% twitter_init_(),\\n%% twitter_post_tweet(UserId, TweetId),\\n%% Param_2 = twitter_get_news_feed(UserId),\\n%% twitter_follow(FollowerId, FolloweeId),\\n%% twitter_unfollow(FollowerId, FolloweeId),\\n\\n%% twitter_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Twitter() {\\n\\n    def postTweet(userId: Int, tweetId: Int): Unit = {\\n        \\n    }\\n\\n    def getNewsFeed(userId: Int): List[Int] = {\\n        \\n    }\\n\\n    def follow(followerId: Int, followeeId: Int): Unit = {\\n        \\n    }\\n\\n    def unfollow(followerId: Int, followeeId: Int): Unit = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Twitter object will be instantiated and called as such:\\n * val obj = new Twitter()\\n * obj.postTweet(userId,tweetId)\\n * val param_2 = obj.getNewsFeed(userId)\\n * obj.follow(followerId,followeeId)\\n * obj.unfollow(followerId,followeeId)\\n */'}\n",
            "Done!662\n",
            "russian-doll-envelopes 354\n",
            "{'id': 354, 'name': 'russian-doll-envelopes', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/russian-doll-envelopes/', 'task_description': \"You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope. One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height. Return _the maximum number of envelopes you can Russian doll (i.e., put one inside the other)_. **Note:** You cannot rotate an envelope. **Example 1:** ``` **Input:** envelopes = [[5,4],[6,4],[6,7],[2,3]] **Output:** 3 **Explanation:** The maximum number of envelopes you can Russian doll is `3` ([2,3] => [5,4] => [6,7]). ``` **Example 2:** ``` **Input:** envelopes = [[1,1],[1,1],[1,1]] **Output:** 1 ``` **Constraints:** `1 <= envelopes.length <= 105` `envelopes[i].length == 2` `1 <= wi, hi <= 105`\", 'test_case': [{'label': 'Example 1', 'input': 'envelopes = [[5,4],[6,4],[6,7],[2,3]]', 'output': '3 Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).'}, {'label': 'Example 2', 'input': 'envelopes = [[1,1],[1,1],[1,1]]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_envelopes(envelopes :: [[integer]]) :: integer\\n  def max_envelopes(envelopes) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_envelopes(Envelopes :: [[integer()]]) -> integer().\\nmax_envelopes(Envelopes) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxEnvelopes(envelopes: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!663\n",
            "data-stream-as-disjoint-intervals 352\n",
            "{'id': 352, 'name': 'data-stream-as-disjoint-intervals', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/data-stream-as-disjoint-intervals/', 'task_description': 'Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals. Implement the `SummaryRanges` class: `SummaryRanges()` Initializes the object with an empty stream. `void addNum(int value)` Adds the integer `value` to the stream. `int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`. The answer should be sorted by `starti`. **Example 1:** ``` **Input** [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"] [[], [1], [], [3], [], [7], [], [2], [], [6], []] **Output** [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]] **Explanation** SummaryRanges summaryRanges = new SummaryRanges(); summaryRanges.addNum(1); // arr = [1] summaryRanges.getIntervals(); // return [[1, 1]] summaryRanges.addNum(3); // arr = [1, 3] summaryRanges.getIntervals(); // return [[1, 1], [3, 3]] summaryRanges.addNum(7); // arr = [1, 3, 7] summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]] summaryRanges.addNum(2); // arr = [1, 2, 3, 7] summaryRanges.getIntervals(); // return [[1, 3], [7, 7]] summaryRanges.addNum(6); // arr = [1, 2, 3, 6, 7] summaryRanges.getIntervals(); // return [[1, 3], [6, 7]] ``` **Constraints:** `0 <= value <= 104` At most `3 * 104` calls will be made to `addNum` and `getIntervals`. At most `102` calls will be made to `getIntervals`. **Follow up:** What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?', 'test_case': [], 'elixir_template': 'defmodule SummaryRanges do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec add_num(value :: integer) :: any\\n  def add_num(value) do\\n    \\n  end\\n\\n  @spec get_intervals() :: [[integer]]\\n  def get_intervals() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# SummaryRanges.init_()\\n# SummaryRanges.add_num(value)\\n# param_2 = SummaryRanges.get_intervals()\\n\\n# SummaryRanges.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec summary_ranges_init_() -> any().\\nsummary_ranges_init_() ->\\n  .\\n\\n-spec summary_ranges_add_num(Value :: integer()) -> any().\\nsummary_ranges_add_num(Value) ->\\n  .\\n\\n-spec summary_ranges_get_intervals() -> [[integer()]].\\nsummary_ranges_get_intervals() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% summary_ranges_init_(),\\n%% summary_ranges_add_num(Value),\\n%% Param_2 = summary_ranges_get_intervals(),\\n\\n%% summary_ranges_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class SummaryRanges() {\\n\\n    def addNum(value: Int): Unit = {\\n        \\n    }\\n\\n    def getIntervals(): Array[Array[Int]] = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your SummaryRanges object will be instantiated and called as such:\\n * val obj = new SummaryRanges()\\n * obj.addNum(value)\\n * val param_2 = obj.getIntervals()\\n */'}\n",
            "Done!664\n",
            "intersection-of-two-arrays-ii 350\n",
            "{'id': 350, 'name': 'intersection-of-two-arrays-ii', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/intersection-of-two-arrays-ii/', 'task_description': \"Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must appear as many times as it shows in both arrays and you may return the result in **any order**. **Example 1:** ``` **Input:** nums1 = [1,2,2,1], nums2 = [2,2] **Output:** [2,2] ``` **Example 2:** ``` **Input:** nums1 = [4,9,5], nums2 = [9,4,9,8,4] **Output:** [4,9] **Explanation:** [9,4] is also accepted. ``` **Constraints:** `1 <= nums1.length, nums2.length <= 1000` `0 <= nums1[i], nums2[i] <= 1000` **Follow up:** What if the given array is already sorted? How would you optimize your algorithm? What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better? What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\", 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,2,2,1], nums2 = [2,2]', 'output': '[2,2]'}, {'label': 'Example 2', 'input': 'nums1 = [4,9,5], nums2 = [9,4,9,8,4]', 'output': '[4,9] Explanation: [9,4] is also accepted.'}], 'elixir_template': 'defmodule Solution do\\n  @spec intersect(nums1 :: [integer], nums2 :: [integer]) :: [integer]\\n  def intersect(nums1, nums2) do\\n    \\n  end\\nend', 'erlang_template': '-spec intersect(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\\nintersect(Nums1, Nums2) ->\\n  .', 'scala_template': 'object Solution {\\n    def intersect(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!665\n",
            "intersection-of-two-arrays 349\n",
            "{'id': 349, 'name': 'intersection-of-two-arrays', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/intersection-of-two-arrays/', 'task_description': 'Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must be **unique** and you may return the result in **any order**. **Example 1:** ``` **Input:** nums1 = [1,2,2,1], nums2 = [2,2] **Output:** [2] ``` **Example 2:** ``` **Input:** nums1 = [4,9,5], nums2 = [9,4,9,8,4] **Output:** [9,4] **Explanation:** [4,9] is also accepted. ``` **Constraints:** `1 <= nums1.length, nums2.length <= 1000` `0 <= nums1[i], nums2[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,2,2,1], nums2 = [2,2]', 'output': '[2]'}, {'label': 'Example 2', 'input': 'nums1 = [4,9,5], nums2 = [9,4,9,8,4]', 'output': '[9,4] Explanation: [4,9] is also accepted.'}], 'elixir_template': 'defmodule Solution do\\n  @spec intersection(nums1 :: [integer], nums2 :: [integer]) :: [integer]\\n  def intersection(nums1, nums2) do\\n    \\n  end\\nend', 'erlang_template': '-spec intersection(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\\nintersection(Nums1, Nums2) ->\\n  .', 'scala_template': 'object Solution {\\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!666\n",
            "top-k-frequent-elements 347\n",
            "{'id': 347, 'name': 'top-k-frequent-elements', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/top-k-frequent-elements/', 'task_description': \"Given an integer array `nums` and an integer `k`, return _the_ `k` _most frequent elements_. You may return the answer in **any order**. **Example 1:** ``` **Input:** nums = [1,1,1,2,2,3], k = 2 **Output:** [1,2] ``` **Example 2:** ``` **Input:** nums = [1], k = 1 **Output:** [1] ``` **Constraints:** `1 <= nums.length <= 105` `-104 <= nums[i] <= 104` `k` is in the range `[1, the number of unique elements in the array]`. It is **guaranteed** that the answer is **unique**. **Follow up:** Your algorithm's time complexity must be better than `O(n log n)`, where n is the array's size.\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,1,2,2,3], k = 2', 'output': '[1,2]'}, {'label': 'Example 2', 'input': 'nums = [1], k = 1', 'output': '[1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec top_k_frequent(nums :: [integer], k :: integer) :: [integer]\\n  def top_k_frequent(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec top_k_frequent(Nums :: [integer()], K :: integer()) -> [integer()].\\ntop_k_frequent(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def topKFrequent(nums: Array[Int], k: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!667\n",
            "reverse-vowels-of-a-string 345\n",
            "{'id': 345, 'name': 'reverse-vowels-of-a-string', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/reverse-vowels-of-a-string/', 'task_description': 'Given a string `s`, reverse only all the vowels in the string and return it. The vowels are `\\'a\\'`, `\\'e\\'`, `\\'i\\'`, `\\'o\\'`, and `\\'u\\'`, and they can appear in both lower and upper cases, more than once. **Example 1:** **Input:** s = \"IceCreAm\" **Output:** \"AceCreIm\" **Explanation:** The vowels in `s` are `[\\'I\\', \\'e\\', \\'e\\', \\'A\\']`. On reversing the vowels, s becomes `\"AceCreIm\"`. **Example 2:** **Input:** s = \"leetcode\" **Output:** \"leotcede\" **Constraints:** `1 <= s.length <= 3 * 105` `s` consist of **printable ASCII** characters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"IceCreAm\"', 'output': '\"AceCreIm\" Explanation: The vowels in s are [\\'I\\', \\'e\\', \\'e\\', \\'A\\'] . On reversing the vowels, s becomes \"AceCreIm\" .'}, {'label': 'Example 2', 'input': 's = \"leetcode\"', 'output': '\"leotcede\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec reverse_vowels(s :: String.t) :: String.t\\n  def reverse_vowels(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec reverse_vowels(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nreverse_vowels(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def reverseVowels(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!668\n",
            "reverse-string 344\n",
            "{'id': 344, 'name': 'reverse-string', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/reverse-string/', 'task_description': 'Write a function that reverses a string. The input string is given as an array of characters `s`. You must do this by modifying the input array in-place with `O(1)` extra memory. **Example 1:** ``` **Input:** s = [\"h\",\"e\",\"l\",\"l\",\"o\"] **Output:** [\"o\",\"l\",\"l\",\"e\",\"h\"] ``` **Example 2:** ``` **Input:** s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] **Output:** [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"] ``` **Constraints:** `1 <= s.length <= 105` `s[i]` is a printable ascii character.', 'test_case': [{'label': 'Example 1', 'input': 's = [\"h\",\"e\",\"l\",\"l\",\"o\"]', 'output': '[\"o\",\"l\",\"l\",\"e\",\"h\"]'}, {'label': 'Example 2', 'input': 's = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]', 'output': '[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def reverseString(s: Array[Char]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!669\n",
            "integer-break 343\n",
            "{'id': 343, 'name': 'integer-break', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/integer-break/', 'task_description': 'Given an integer `n`, break it into the sum of `k` **positive integers**, where `k >= 2`, and maximize the product of those integers. Return _the maximum product you can get_. **Example 1:** ``` **Input:** n = 2 **Output:** 1 **Explanation:** 2 = 1 + 1, 1 × 1 = 1. ``` **Example 2:** ``` **Input:** n = 10 **Output:** 36 **Explanation:** 10 = 3 + 3 + 4, 3 × 3 × 4 = 36. ``` **Constraints:** `2 <= n <= 58`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '1 Explanation: 2 = 1 + 1, 1 × 1 = 1.'}, {'label': 'Example 2', 'input': 'n = 10', 'output': '36 Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.'}], 'elixir_template': 'defmodule Solution do\\n  @spec integer_break(n :: integer) :: integer\\n  def integer_break(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec integer_break(N :: integer()) -> integer().\\ninteger_break(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def integerBreak(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!670\n",
            "power-of-four 342\n",
            "{'id': 342, 'name': 'power-of-four', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/power-of-four/', 'task_description': 'Given an integer `n`, return _`true` if it is a power of four. Otherwise, return `false`_. An integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`. **Example 1:** ``` **Input:** n = 16 **Output:** true ``` **Example 2:** ``` **Input:** n = 5 **Output:** false ``` **Example 3:** ``` **Input:** n = 1 **Output:** true ``` **Constraints:** `-231 <= n <= 231 - 1` **Follow up:** Could you solve it without loops/recursion?', 'test_case': [{'label': 'Example 1', 'input': 'n = 16', 'output': 'true'}, {'label': 'Example 2', 'input': 'n = 5', 'output': 'false'}, {'label': 'Example 3', 'input': 'n = 1', 'output': 'true Constraints: -2 31 <= n <= 2 31 - 1 Follow up: Could you solve it without loops/recursion?'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_power_of_four(n :: integer) :: boolean\\n  def is_power_of_four(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_power_of_four(N :: integer()) -> boolean().\\nis_power_of_four(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def isPowerOfFour(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!671\n",
            "flatten-nested-list-iterator 341\n",
            "{'id': 341, 'name': 'flatten-nested-list-iterator', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/flatten-nested-list-iterator/', 'task_description': 'You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it. Implement the `NestedIterator` class: `NestedIterator(List<NestedInteger> nestedList)` Initializes the iterator with the nested list `nestedList`. `int next()` Returns the next integer in the nested list. `boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise. Your code will be tested with the following pseudocode: ``` initialize iterator with nestedList res = [] while iterator.hasNext() append iterator.next() to the end of res return res ``` If `res` matches the expected flattened list, then your code will be judged as correct. **Example 1:** ``` **Input:** nestedList = [[1,1],2,[1,1]] **Output:** [1,1,2,1,1] **Explanation:** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1]. ``` **Example 2:** ``` **Input:** nestedList = [1,[4,[6]]] **Output:** [1,4,6] **Explanation:** By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]. ``` **Constraints:** `1 <= nestedList.length <= 500` The values of the integers in the nested list is in the range `[-106, 106]`.', 'test_case': [{'label': 'Example 1', 'input': 'nestedList = [[1,1],2,[1,1]]', 'output': '[1,1,2,1,1] Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].'}, {'label': 'Example 2', 'input': 'nestedList = [1,[4,[6]]]', 'output': '[1,4,6] Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * trait NestedInteger {\\n *\\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *   def isInteger: Boolean\\n *\\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer.\\n *   def getInteger: Int\\n *\\n *   // Set this NestedInteger to hold a single integer.\\n *   def setInteger(i: Int): Unit\\n *\\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list.\\n *   def getList: Array[NestedInteger]\\n *\\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *   def add(ni: NestedInteger): Unit\\n * }\\n */\\n\\nclass NestedIterator(_nestedList: List[NestedInteger]) {\\n    def next(): Int = {\\n        \\n    }\\n    \\n    def hasNext(): Boolean = {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * var obj = new NestedIterator(nestedList)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */'}\n",
            "Done!672\n",
            "counting-bits 338\n",
            "{'id': 338, 'name': 'counting-bits', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/counting-bits/', 'task_description': \"Given an integer `n`, return _an array _`ans`_ of length _`n + 1`_ such that for each _`i`_ _(`0 <= i <= n`)_, _`ans[i]`_ is the **number of **_`1`_**'s** in the binary representation of _`i`. **Example 1:** ``` **Input:** n = 2 **Output:** [0,1,1] **Explanation:** 0 --> 0 1 --> 1 2 --> 10 ``` **Example 2:** ``` **Input:** n = 5 **Output:** [0,1,1,2,1,2] **Explanation:** 0 --> 0 1 --> 1 2 --> 10 3 --> 11 4 --> 100 5 --> 101 ``` **Constraints:** `0 <= n <= 105` **Follow up:** It is very easy to come up with a solution with a runtime of `O(n log n)`. Can you do it in linear time `O(n)` and possibly in a single pass? Can you do it without using any built-in function (i.e., like `__builtin_popcount` in C++)?\", 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '[0,1,1] Explanation: 0 --> 0\\n1 --> 1\\n2 --> 10'}, {'label': 'Example 2', 'input': 'n = 5', 'output': '[0,1,1,2,1,2] Explanation: 0 --> 0\\n1 --> 1\\n2 --> 10\\n3 --> 11\\n4 --> 100\\n5 --> 101'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_bits(n :: integer) :: [integer]\\n  def count_bits(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_bits(N :: integer()) -> [integer()].\\ncount_bits(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def countBits(n: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!673\n",
            "house-robber-iii 337\n",
            "{'id': 337, 'name': 'house-robber-iii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/house-robber-iii/', 'task_description': 'The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`. Besides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if **two directly-linked houses were broken into on the same night**. Given the `root` of the binary tree, return _the maximum amount of money the thief can rob **without alerting the police**_. **Example 1:** ``` **Input:** root = [3,2,3,null,3,null,1] **Output:** 7 **Explanation:** Maximum amount of money the thief can rob = 3 + 3 + 1 = 7. ``` **Example 2:** ``` **Input:** root = [3,4,5,1,3,null,1] **Output:** 9 **Explanation:** Maximum amount of money the thief can rob = 4 + 5 = 9. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `0 <= Node.val <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,2,3,null,3,null,1]', 'output': '7 Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.'}, {'label': 'Example 2', 'input': 'root = [3,4,5,1,3,null,1]', 'output': '9 Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9. Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . 0 <= Node.val <= 10 4'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec rob(root :: TreeNode.t | nil) :: integer\\n  def rob(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec rob(Root :: #tree_node{} | null) -> integer().\\nrob(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def rob(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!674\n",
            "palindrome-pairs 336\n",
            "{'id': 336, 'name': 'palindrome-pairs', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/palindrome-pairs/', 'task_description': 'You are given a **0-indexed** array of **unique** strings `words`. A **palindrome pair** is a pair of integers `(i, j)` such that: `0 <= i, j < words.length`, `i != j`, and `words[i] + words[j]` (the concatenation of the two strings) is a palindrome. Return _an array of all the **palindrome pairs** of _`words`. You must write an algorithm with `O(sum of words[i].length)` runtime complexity. **Example 1:** ``` **Input:** words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"] **Output:** [[0,1],[1,0],[3,2],[2,4]] **Explanation:** The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"] ``` **Example 2:** ``` **Input:** words = [\"bat\",\"tab\",\"cat\"] **Output:** [[0,1],[1,0]] **Explanation:** The palindromes are [\"battab\",\"tabbat\"] ``` **Example 3:** ``` **Input:** words = [\"a\",\"\"] **Output:** [[0,1],[1,0]] **Explanation:** The palindromes are [\"a\",\"a\"] ``` **Constraints:** `1 <= words.length <= 5000` `0 <= words[i].length <= 300` `words[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]', 'output': '[[0,1],[1,0],[3,2],[2,4]] Explanation: The palindromes are [\"abcddcba\",\"dcbaabcd\",\"slls\",\"llssssll\"]'}, {'label': 'Example 2', 'input': 'words = [\"bat\",\"tab\",\"cat\"]', 'output': '[[0,1],[1,0]] Explanation: The palindromes are [\"battab\",\"tabbat\"]'}, {'label': 'Example 3', 'input': 'words = [\"a\",\"\"]', 'output': '[[0,1],[1,0]] Explanation: The palindromes are [\"a\",\"a\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec palindrome_pairs(words :: [String.t]) :: [[integer]]\\n  def palindrome_pairs(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec palindrome_pairs(Words :: [unicode:unicode_binary()]) -> [[integer()]].\\npalindrome_pairs(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def palindromePairs(words: Array[String]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!675\n",
            "self-crossing 335\n",
            "{'id': 335, 'name': 'self-crossing', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/self-crossing/', 'task_description': 'You are given an array of integers `distance`. You start at the point `(0, 0)` on an **X-Y plane,** and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise. Return `true` _if your path crosses itself or _`false`_ if it does not_. **Example 1:** ``` **Input:** distance = [2,1,1,2] **Output:** true **Explanation:** The path crosses itself at the point (0, 1). ``` **Example 2:** ``` **Input:** distance = [1,2,3,4] **Output:** false **Explanation:** The path does not cross itself at any point. ``` **Example 3:** ``` **Input:** distance = [1,1,1,2,1] **Output:** true **Explanation:** The path crosses itself at the point (0, 0). ``` **Constraints:** `1 <= distance.length <= 105` `1 <= distance[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'distance = [2,1,1,2]', 'output': 'true Explanation: The path crosses itself at the point (0, 1).'}, {'label': 'Example 2', 'input': 'distance = [1,2,3,4]', 'output': 'false Explanation: The path does not cross itself at any point.'}, {'label': 'Example 3', 'input': 'distance = [1,1,1,2,1]', 'output': 'true Explanation: The path crosses itself at the point (0, 0).'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_self_crossing(distance :: [integer]) :: boolean\\n  def is_self_crossing(distance) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_self_crossing(Distance :: [integer()]) -> boolean().\\nis_self_crossing(Distance) ->\\n  .', 'scala_template': 'object Solution {\\n    def isSelfCrossing(distance: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!676\n",
            "increasing-triplet-subsequence 334\n",
            "{'id': 334, 'name': 'increasing-triplet-subsequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/increasing-triplet-subsequence/', 'task_description': 'Given an integer array `nums`, return `true`_ if there exists a triple of indices _`(i, j, k)`_ such that _`i < j < k`_ and _`nums[i] < nums[j] < nums[k]`. If no such indices exists, return `false`. **Example 1:** ``` **Input:** nums = [1,2,3,4,5] **Output:** true **Explanation:** Any triplet where i < j < k is valid. ``` **Example 2:** ``` **Input:** nums = [5,4,3,2,1] **Output:** false **Explanation:** No triplet exists. ``` **Example 3:** ``` **Input:** nums = [2,1,5,0,4,6] **Output:** true **Explanation:** The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6. ``` **Constraints:** `1 <= nums.length <= 5 * 105` `-231 <= nums[i] <= 231 - 1` **Follow up:** Could you implement a solution that runs in `O(n)` time complexity and `O(1)` space complexity?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,4,5]', 'output': 'true Explanation: Any triplet where i < j < k is valid.'}, {'label': 'Example 2', 'input': 'nums = [5,4,3,2,1]', 'output': 'false Explanation: No triplet exists.'}, {'label': 'Example 3', 'input': 'nums = [2,1,5,0,4,6]', 'output': 'true Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.'}], 'elixir_template': 'defmodule Solution do\\n  @spec increasing_triplet(nums :: [integer]) :: boolean\\n  def increasing_triplet(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec increasing_triplet(Nums :: [integer()]) -> boolean().\\nincreasing_triplet(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def increasingTriplet(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!677\n",
            "reconstruct-itinerary 332\n",
            "{'id': 332, 'name': 'reconstruct-itinerary', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/reconstruct-itinerary/', 'task_description': 'You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it. All of the tickets belong to a man who departs from `\"JFK\"`, thus, the itinerary must begin with `\"JFK\"`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary `[\"JFK\", \"LGA\"]` has a smaller lexical order than `[\"JFK\", \"LGB\"]`. You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once. **Example 1:** ``` **Input:** tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]] **Output:** [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"] ``` **Example 2:** ``` **Input:** tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]] **Output:** [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"] **Explanation:** Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order. ``` **Constraints:** `1 <= tickets.length <= 300` `tickets[i].length == 2` `fromi.length == 3` `toi.length == 3` `fromi` and `toi` consist of uppercase English letters. `fromi != toi`', 'test_case': [{'label': 'Example 1', 'input': 'tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]', 'output': '[\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]'}, {'label': 'Example 2', 'input': 'tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]', 'output': '[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"] Explanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_itinerary(tickets :: [[String.t]]) :: [String.t]\\n  def find_itinerary(tickets) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_itinerary(Tickets :: [[unicode:unicode_binary()]]) -> [unicode:unicode_binary()].\\nfind_itinerary(Tickets) ->\\n  .', 'scala_template': 'object Solution {\\n    def findItinerary(tickets: List[List[String]]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!678\n",
            "verify-preorder-serialization-of-a-binary-tree 331\n",
            "{'id': 331, 'name': 'verify-preorder-serialization-of-a-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/', 'task_description': 'One way to serialize a binary tree is to use **preorder traversal**. When we encounter a non-null node, we record the node\\'s value. If it is a null node, we record using a sentinel value such as `\\'#\\'`. For example, the above binary tree can be serialized to the string `\"9,3,4,#,#,1,#,#,2,#,6,#,#\"`, where `\\'#\\'` represents a null node. Given a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree. It is **guaranteed** that each comma-separated value in the string must be either an integer or a character `\\'#\\'` representing null pointer. You may assume that the input format is always valid. For example, it could never contain two consecutive commas, such as `\"1,,3\"`. **Note: **You are not allowed to reconstruct the tree. **Example 1:** ``` **Input:** preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\" **Output:** true ``` **Example 2:** ``` **Input:** preorder = \"1,#\" **Output:** false ``` **Example 3:** ``` **Input:** preorder = \"9,#,#,1\" **Output:** false ``` **Constraints:** `1 <= preorder.length <= 104` `preorder` consist of integers in the range `[0, 100]` and `\\'#\\'` separated by commas `\\',\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"', 'output': 'true'}, {'label': 'Example 2', 'input': 'preorder = \"1,#\"', 'output': 'false'}, {'label': 'Example 3', 'input': 'preorder = \"9,#,#,1\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_valid_serialization(preorder :: String.t) :: boolean\\n  def is_valid_serialization(preorder) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_valid_serialization(Preorder :: unicode:unicode_binary()) -> boolean().\\nis_valid_serialization(Preorder) ->\\n  .', 'scala_template': 'object Solution {\\n    def isValidSerialization(preorder: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!679\n",
            "patching-array 330\n",
            "{'id': 330, 'name': 'patching-array', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/patching-array/', 'task_description': 'Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array. Return _the minimum number of patches required_. **Example 1:** ``` **Input:** nums = [1,3], n = 6 **Output:** 1 Explanation: Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4. Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3]. Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6]. So we only need 1 patch. ``` **Example 2:** ``` **Input:** nums = [1,5,10], n = 20 **Output:** 2 Explanation: The two patches can be [2, 4]. ``` **Example 3:** ``` **Input:** nums = [1,2,2], n = 5 **Output:** 0 ``` **Constraints:** `1 <= nums.length <= 1000` `1 <= nums[i] <= 104` `nums` is sorted in **ascending order**. `1 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3], n = 6', 'output': '1\\nExplanation:\\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\\nSo we only need 1 patch.'}, {'label': 'Example 2', 'input': 'nums = [1,5,10], n = 20', 'output': '2\\nExplanation: The two patches can be [2, 4].'}, {'label': 'Example 3', 'input': 'nums = [1,2,2], n = 5', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_patches(nums :: [integer], n :: integer) :: integer\\n  def min_patches(nums, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_patches(Nums :: [integer()], N :: integer()) -> integer().\\nmin_patches(Nums, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def minPatches(nums: Array[Int], n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!680\n",
            "longest-increasing-path-in-a-matrix 329\n",
            "{'id': 329, 'name': 'longest-increasing-path-in-a-matrix', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/longest-increasing-path-in-a-matrix/', 'task_description': 'Given an `m x n` integers `matrix`, return _the length of the longest increasing path in _`matrix`. From each cell, you can either move in four directions: left, right, up, or down. You **may not** move **diagonally** or move **outside the boundary** (i.e., wrap-around is not allowed). **Example 1:** ``` **Input:** matrix = [[9,9,4],[6,6,8],[2,1,1]] **Output:** 4 **Explanation:** The longest increasing path is `[1, 2, 6, 9]`. ``` **Example 2:** ``` **Input:** matrix = [[3,4,5],[3,2,6],[2,2,1]] **Output:** 4 **Explanation: **The longest increasing path is `[3, 4, 5, 6]`. Moving diagonally is not allowed. ``` **Example 3:** ``` **Input:** matrix = [[1]] **Output:** 1 ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 200` `0 <= matrix[i][j] <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[9,9,4],[6,6,8],[2,1,1]]', 'output': '4 Explanation: The longest increasing path is [1, 2, 6, 9] .'}, {'label': 'Example 2', 'input': 'matrix = [[3,4,5],[3,2,6],[2,2,1]]', 'output': '4 Explanation: The longest increasing path is [3, 4, 5, 6] . Moving diagonally is not allowed.'}, {'label': 'Example 3', 'input': 'matrix = [[1]]', 'output': '1 Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 200 0 <= matrix[i][j] <= 2 31 - 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_increasing_path(matrix :: [[integer]]) :: integer\\n  def longest_increasing_path(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_increasing_path(Matrix :: [[integer()]]) -> integer().\\nlongest_increasing_path(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!681\n",
            "odd-even-linked-list 328\n",
            "{'id': 328, 'name': 'odd-even-linked-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/odd-even-linked-list/', 'task_description': 'Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return _the reordered list_. The **first** node is considered **odd**, and the **second** node is **even**, and so on. Note that the relative order inside both the even and odd groups should remain as it was in the input. You must solve the problem in `O(1)` extra space complexity and `O(n)` time complexity. **Example 1:** ``` **Input:** head = [1,2,3,4,5] **Output:** [1,3,5,2,4] ``` **Example 2:** ``` **Input:** head = [2,1,3,5,6,4,7] **Output:** [2,3,6,7,1,5,4] ``` **Constraints:** The number of nodes in the linked list is in the range `[0, 104]`. `-106 <= Node.val <= 106`', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5]', 'output': '[1,3,5,2,4]'}, {'label': 'Example 2', 'input': 'head = [2,1,3,5,6,4,7]', 'output': '[2,3,6,7,1,5,4] Constraints: The number of nodes in the linked list is in the range [0, 10 4 ] . -10 6 <= Node.val <= 10 6'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec odd_even_list(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def odd_even_list(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec odd_even_list(Head :: #list_node{} | null) -> #list_node{} | null.\\nodd_even_list(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def oddEvenList(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!682\n",
            "count-of-range-sum 327\n",
            "{'id': 327, 'name': 'count-of-range-sum', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/count-of-range-sum/', 'task_description': 'Given an integer array `nums` and two integers `lower` and `upper`, return _the number of range sums that lie in_ `[lower, upper]` _inclusive_. Range sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`. **Example 1:** ``` **Input:** nums = [-2,5,-1], lower = -2, upper = 2 **Output:** 3 **Explanation:** The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2. ``` **Example 2:** ``` **Input:** nums = [0], lower = 0, upper = 0 **Output:** 1 ``` **Constraints:** `1 <= nums.length <= 105` `-231 <= nums[i] <= 231 - 1` `-105 <= lower <= upper <= 105` The answer is **guaranteed** to fit in a **32-bit** integer.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [-2,5,-1], lower = -2, upper = 2', 'output': '3 Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.'}, {'label': 'Example 2', 'input': 'nums = [0], lower = 0, upper = 0', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_range_sum(nums :: [integer], lower :: integer, upper :: integer) :: integer\\n  def count_range_sum(nums, lower, upper) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_range_sum(Nums :: [integer()], Lower :: integer(), Upper :: integer()) -> integer().\\ncount_range_sum(Nums, Lower, Upper) ->\\n  .', 'scala_template': 'object Solution {\\n    def countRangeSum(nums: Array[Int], lower: Int, upper: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!683\n",
            "power-of-three 326\n",
            "{'id': 326, 'name': 'power-of-three', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/power-of-three/', 'task_description': 'Given an integer `n`, return _`true` if it is a power of three. Otherwise, return `false`_. An integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`. **Example 1:** ``` **Input:** n = 27 **Output:** true **Explanation:** 27 = 33 ``` **Example 2:** ``` **Input:** n = 0 **Output:** false **Explanation:** There is no x where 3x = 0. ``` **Example 3:** ``` **Input:** n = -1 **Output:** false **Explanation:** There is no x where 3x = (-1). ``` **Constraints:** `-231 <= n <= 231 - 1` **Follow up:** Could you solve it without loops/recursion?', 'test_case': [{'label': 'Example 1', 'input': 'n = 27', 'output': 'true Explanation: 27 = 3 3'}, {'label': 'Example 2', 'input': 'n = 0', 'output': 'false Explanation: There is no x where 3 x = 0.'}, {'label': 'Example 3', 'input': 'n = -1', 'output': 'false Explanation: There is no x where 3 x = (-1). Constraints: -2 31 <= n <= 2 31 - 1 Follow up: Could you solve it without loops/recursion?'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_power_of_three(n :: integer) :: boolean\\n  def is_power_of_three(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_power_of_three(N :: integer()) -> boolean().\\nis_power_of_three(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def isPowerOfThree(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!684\n",
            "wiggle-sort-ii 324\n",
            "{'id': 324, 'name': 'wiggle-sort-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/wiggle-sort-ii/', 'task_description': 'Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`. You may assume the input array always has a valid answer. **Example 1:** ``` **Input:** nums = [1,5,1,1,6,4] **Output:** [1,6,1,5,1,4] **Explanation:** [1,4,1,5,1,6] is also accepted. ``` **Example 2:** ``` **Input:** nums = [1,3,2,2,3,1] **Output:** [2,3,1,3,1,2] ``` **Constraints:** `1 <= nums.length <= 5 * 104` `0 <= nums[i] <= 5000` It is guaranteed that there will be an answer for the given input `nums`. **Follow Up:** Can you do it in `O(n)` time and/or **in-place** with `O(1)` extra space?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,5,1,1,6,4]', 'output': '[1,6,1,5,1,4] Explanation: [1,4,1,5,1,6] is also accepted.'}, {'label': 'Example 2', 'input': 'nums = [1,3,2,2,3,1]', 'output': '[2,3,1,3,1,2]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def wiggleSort(nums: Array[Int]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!685\n",
            "coin-change 322\n",
            "{'id': 322, 'name': 'coin-change', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/coin-change/', 'task_description': 'You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. Return _the fewest number of coins that you need to make up that amount_. If that amount of money cannot be made up by any combination of the coins, return `-1`. You may assume that you have an infinite number of each kind of coin. **Example 1:** ``` **Input:** coins = [1,2,5], amount = 11 **Output:** 3 **Explanation:** 11 = 5 + 5 + 1 ``` **Example 2:** ``` **Input:** coins = [2], amount = 3 **Output:** -1 ``` **Example 3:** ``` **Input:** coins = [1], amount = 0 **Output:** 0 ``` **Constraints:** `1 <= coins.length <= 12` `1 <= coins[i] <= 231 - 1` `0 <= amount <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'coins = [1,2,5], amount = 11', 'output': '3 Explanation: 11 = 5 + 5 + 1'}, {'label': 'Example 2', 'input': 'coins = [2], amount = 3', 'output': '-1'}, {'label': 'Example 3', 'input': 'coins = [1], amount = 0', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec coin_change(coins :: [integer], amount :: integer) :: integer\\n  def coin_change(coins, amount) do\\n    \\n  end\\nend', 'erlang_template': '-spec coin_change(Coins :: [integer()], Amount :: integer()) -> integer().\\ncoin_change(Coins, Amount) ->\\n  .', 'scala_template': 'object Solution {\\n    def coinChange(coins: Array[Int], amount: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!686\n",
            "create-maximum-number 321\n",
            "{'id': 321, 'name': 'create-maximum-number', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/create-maximum-number/', 'task_description': 'You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`. Create the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved. Return an array of the `k` digits representing the answer. **Example 1:** ``` **Input:** nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5 **Output:** [9,8,6,5,3] ``` **Example 2:** ``` **Input:** nums1 = [6,7], nums2 = [6,0,4], k = 5 **Output:** [6,7,6,0,4] ``` **Example 3:** ``` **Input:** nums1 = [3,9], nums2 = [8,9], k = 3 **Output:** [9,8,9] ``` **Constraints:** `m == nums1.length` `n == nums2.length` `1 <= m, n <= 500` `0 <= nums1[i], nums2[i] <= 9` `1 <= k <= m + n` `nums1` and `nums2` do not have leading zeros.', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5', 'output': '[9,8,6,5,3]'}, {'label': 'Example 2', 'input': 'nums1 = [6,7], nums2 = [6,0,4], k = 5', 'output': '[6,7,6,0,4]'}, {'label': 'Example 3', 'input': 'nums1 = [3,9], nums2 = [8,9], k = 3', 'output': '[9,8,9] Constraints: m == nums1.length n == nums2.length 1 <= m, n <= 500 0 <= nums1[i], nums2[i] <= 9 1 <= k <= m + n nums1 and nums2 do not have leading zeros.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_number(nums1 :: [integer], nums2 :: [integer], k :: integer) :: [integer]\\n  def max_number(nums1, nums2, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_number(Nums1 :: [integer()], Nums2 :: [integer()], K :: integer()) -> [integer()].\\nmax_number(Nums1, Nums2, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxNumber(nums1: Array[Int], nums2: Array[Int], k: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!687\n",
            "bulb-switcher 319\n",
            "{'id': 319, 'name': 'bulb-switcher', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/bulb-switcher/', 'task_description': \"There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb. Return _the number of bulbs that are on after `n` rounds_. **Example 1:** ``` **Input:** n = 3 **Output:** 1 **Explanation:** At first, the three bulbs are [off, off, off]. After the first round, the three bulbs are [on, on, on]. After the second round, the three bulbs are [on, off, on]. After the third round, the three bulbs are [on, off, off]. So you should return 1 because there is only one bulb is on. ``` **Example 2:** ``` **Input:** n = 0 **Output:** 0 ``` **Example 3:** ``` **Input:** n = 1 **Output:** 1 ``` **Constraints:** `0 <= n <= 109`\", 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '1 Explanation: At first, the three bulbs are [off, off, off].\\nAfter the first round, the three bulbs are [on, on, on].\\nAfter the second round, the three bulbs are [on, off, on].\\nAfter the third round, the three bulbs are [on, off, off]. \\nSo you should return 1 because there is only one bulb is on.'}, {'label': 'Example 2', 'input': 'n = 0', 'output': '0'}, {'label': 'Example 3', 'input': 'n = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec bulb_switch(n :: integer) :: integer\\n  def bulb_switch(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec bulb_switch(N :: integer()) -> integer().\\nbulb_switch(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def bulbSwitch(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!688\n",
            "maximum-product-of-word-lengths 318\n",
            "{'id': 318, 'name': 'maximum-product-of-word-lengths', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-product-of-word-lengths/', 'task_description': 'Given a string array `words`, return _the maximum value of_ `length(word[i]) * length(word[j])` _where the two words do not share common letters_. If no such two words exist, return `0`. **Example 1:** ``` **Input:** words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"] **Output:** 16 **Explanation:** The two words can be \"abcw\", \"xtfn\". ``` **Example 2:** ``` **Input:** words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"] **Output:** 4 **Explanation:** The two words can be \"ab\", \"cd\". ``` **Example 3:** ``` **Input:** words = [\"a\",\"aa\",\"aaa\",\"aaaa\"] **Output:** 0 **Explanation:** No such pair of words. ``` **Constraints:** `2 <= words.length <= 1000` `1 <= words[i].length <= 1000` `words[i]` consists only of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]', 'output': '16 Explanation: The two words can be \"abcw\", \"xtfn\".'}, {'label': 'Example 2', 'input': 'words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]', 'output': '4 Explanation: The two words can be \"ab\", \"cd\".'}, {'label': 'Example 3', 'input': 'words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]', 'output': '0 Explanation: No such pair of words.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_product(words :: [String.t]) :: integer\\n  def max_product(words) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_product(Words :: [unicode:unicode_binary()]) -> integer().\\nmax_product(Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProduct(words: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!689\n",
            "remove-duplicate-letters 316\n",
            "{'id': 316, 'name': 'remove-duplicate-letters', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/remove-duplicate-letters/', 'task_description': 'Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is **the smallest in lexicographical order** among all possible results. **Example 1:** ``` **Input:** s = \"bcabc\" **Output:** \"abc\" ``` **Example 2:** ``` **Input:** s = \"cbacdcbc\" **Output:** \"acdb\" ``` **Constraints:** `1 <= s.length <= 104` `s` consists of lowercase English letters. **Note:** This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/', 'test_case': [{'label': 'Example 1', 'input': 's = \"bcabc\"', 'output': '\"abc\"'}, {'label': 'Example 2', 'input': 's = \"cbacdcbc\"', 'output': '\"acdb\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_duplicate_letters(s :: String.t) :: String.t\\n  def remove_duplicate_letters(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_duplicate_letters(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nremove_duplicate_letters(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeDuplicateLetters(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!690\n",
            "count-of-smaller-numbers-after-self 315\n",
            "{'id': 315, 'name': 'count-of-smaller-numbers-after-self', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/count-of-smaller-numbers-after-self/', 'task_description': 'Given an integer array `nums`, return_ an integer array _`counts`_ where _`counts[i]`_ is the number of smaller elements to the right of _`nums[i]`. **Example 1:** ``` **Input:** nums = [5,2,6,1] **Output:** [2,1,1,0] **Explanation:** To the right of 5 there are 2 smaller elements (2 and 1). To the right of 2 there is only 1 smaller element (1). To the right of 6 there is 1 smaller element (1). To the right of 1 there is 0 smaller element. ``` **Example 2:** ``` **Input:** nums = [-1] **Output:** [0] ``` **Example 3:** ``` **Input:** nums = [-1,-1] **Output:** [0,0] ``` **Constraints:** `1 <= nums.length <= 105` `-104 <= nums[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [5,2,6,1]', 'output': '[2,1,1,0] Explanation: To the right of 5 there are 2 smaller elements (2 and 1).\\nTo the right of 2 there is only 1 smaller element (1).\\nTo the right of 6 there is 1 smaller element (1).\\nTo the right of 1 there is 0 smaller element.'}, {'label': 'Example 2', 'input': 'nums = [-1]', 'output': '[0]'}, {'label': 'Example 3', 'input': 'nums = [-1,-1]', 'output': '[0,0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_smaller(nums :: [integer]) :: [integer]\\n  def count_smaller(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_smaller(Nums :: [integer()]) -> [integer()].\\ncount_smaller(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def countSmaller(nums: Array[Int]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!691\n",
            "super-ugly-number 313\n",
            "{'id': 313, 'name': 'super-ugly-number', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/super-ugly-number/', 'task_description': 'A **super ugly number** is a positive integer whose prime factors are in the array `primes`. Given an integer `n` and an array of integers `primes`, return _the_ `nth` _**super ugly number**_. The `nth` **super ugly number** is **guaranteed** to fit in a **32-bit** signed integer. **Example 1:** ``` **Input:** n = 12, primes = [2,7,13,19] **Output:** 32 **Explanation:** [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19]. ``` **Example 2:** ``` **Input:** n = 1, primes = [2,3,5] **Output:** 1 **Explanation:** 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5]. ``` **Constraints:** `1 <= n <= 105` `1 <= primes.length <= 100` `2 <= primes[i] <= 1000` `primes[i]` is **guaranteed** to be a prime number. All the values of `primes` are **unique** and sorted in **ascending order**.', 'test_case': [{'label': 'Example 1', 'input': 'n = 12, primes = [2,7,13,19]', 'output': '32 Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].'}, {'label': 'Example 2', 'input': 'n = 1, primes = [2,3,5]', 'output': '1 Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].'}], 'elixir_template': 'defmodule Solution do\\n  @spec nth_super_ugly_number(n :: integer, primes :: [integer]) :: integer\\n  def nth_super_ugly_number(n, primes) do\\n    \\n  end\\nend', 'erlang_template': '-spec nth_super_ugly_number(N :: integer(), Primes :: [integer()]) -> integer().\\nnth_super_ugly_number(N, Primes) ->\\n  .', 'scala_template': 'object Solution {\\n    def nthSuperUglyNumber(n: Int, primes: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!692\n",
            "burst-balloons 312\n",
            "{'id': 312, 'name': 'burst-balloons', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/burst-balloons/', 'task_description': 'You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons. If you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it. Return _the maximum coins you can collect by bursting the balloons wisely_. **Example 1:** ``` **Input:** nums = [3,1,5,8] **Output:** 167 **Explanation:** nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> [] coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167 ``` **Example 2:** ``` **Input:** nums = [1,5] **Output:** 10 ``` **Constraints:** `n == nums.length` `1 <= n <= 300` `0 <= nums[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,1,5,8]', 'output': '167 Explanation: nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167'}, {'label': 'Example 2', 'input': 'nums = [1,5]', 'output': '10 Constraints: n == nums.length 1 <= n <= 300 0 <= nums[i] <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_coins(nums :: [integer]) :: integer\\n  def max_coins(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_coins(Nums :: [integer()]) -> integer().\\nmax_coins(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxCoins(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!693\n",
            "minimum-height-trees 310\n",
            "{'id': 310, 'name': 'minimum-height-trees', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-height-trees/', 'task_description': \"A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree. Given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`) are called **minimum height trees** (MHTs). Return _a list of all **MHTs'** root labels_. You can return the answer in **any order**. The **height** of a rooted tree is the number of edges on the longest downward path between the root and a leaf. **Example 1:** ``` **Input:** n = 4, edges = [[1,0],[1,2],[1,3]] **Output:** [1] **Explanation:** As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT. ``` **Example 2:** ``` **Input:** n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]] **Output:** [3,4] ``` **Constraints:** `1 <= n <= 2 * 104` `edges.length == n - 1` `0 <= ai, bi < n` `ai != bi` All the pairs `(ai, bi)` are distinct. The given input is **guaranteed** to be a tree and there will be **no repeated** edges.\", 'test_case': [{'label': 'Example 1', 'input': 'n = 4, edges = [[1,0],[1,2],[1,3]]', 'output': '[1] Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.'}, {'label': 'Example 2', 'input': 'n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]', 'output': '[3,4]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_min_height_trees(n :: integer, edges :: [[integer]]) :: [integer]\\n  def find_min_height_trees(n, edges) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_min_height_trees(N :: integer(), Edges :: [[integer()]]) -> [integer()].\\nfind_min_height_trees(N, Edges) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMinHeightTrees(n: Int, edges: Array[Array[Int]]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!694\n",
            "best-time-to-buy-and-sell-stock-with-cooldown 309\n",
            "{'id': 309, 'name': 'best-time-to-buy-and-sell-stock-with-cooldown', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/', 'task_description': 'You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). **Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). **Example 1:** ``` **Input:** prices = [1,2,3,0,2] **Output:** 3 **Explanation:** transactions = [buy, sell, cooldown, buy, sell] ``` **Example 2:** ``` **Input:** prices = [1] **Output:** 0 ``` **Constraints:** `1 <= prices.length <= 5000` `0 <= prices[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'prices = [1,2,3,0,2]', 'output': '3 Explanation: transactions = [buy, sell, cooldown, buy, sell]'}, {'label': 'Example 2', 'input': 'prices = [1]', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_profit(prices :: [integer]) :: integer\\n  def max_profit(prices) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_profit(Prices :: [integer()]) -> integer().\\nmax_profit(Prices) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProfit(prices: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!695\n",
            "range-sum-query-mutable 307\n",
            "{'id': 307, 'name': 'range-sum-query-mutable', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/range-sum-query-mutable/', 'task_description': 'Given an integer array `nums`, handle multiple queries of the following types: **Update** the value of an element in `nums`. Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`. Implement the `NumArray` class: `NumArray(int[] nums)` Initializes the object with the integer array `nums`. `void update(int index, int val)` **Updates** the value of `nums[index]` to be `val`. `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`). **Example 1:** ``` **Input** [\"NumArray\", \"sumRange\", \"update\", \"sumRange\"] [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]] **Output** [null, 9, null, 8] **Explanation** NumArray numArray = new NumArray([1, 3, 5]); numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9 numArray.update(1, 2); // nums = [1, 2, 5] numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8 ``` **Constraints:** `1 <= nums.length <= 3 * 104` `-100 <= nums[i] <= 100` `0 <= index < nums.length` `-100 <= val <= 100` `0 <= left <= right < nums.length` At most `3 * 104` calls will be made to `update` and `sumRange`.', 'test_case': [], 'elixir_template': 'defmodule NumArray do\\n  @spec init_(nums :: [integer]) :: any\\n  def init_(nums) do\\n    \\n  end\\n\\n  @spec update(index :: integer, val :: integer) :: any\\n  def update(index, val) do\\n    \\n  end\\n\\n  @spec sum_range(left :: integer, right :: integer) :: integer\\n  def sum_range(left, right) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# NumArray.init_(nums)\\n# NumArray.update(index, val)\\n# param_2 = NumArray.sum_range(left, right)\\n\\n# NumArray.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec num_array_init_(Nums :: [integer()]) -> any().\\nnum_array_init_(Nums) ->\\n  .\\n\\n-spec num_array_update(Index :: integer(), Val :: integer()) -> any().\\nnum_array_update(Index, Val) ->\\n  .\\n\\n-spec num_array_sum_range(Left :: integer(), Right :: integer()) -> integer().\\nnum_array_sum_range(Left, Right) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% num_array_init_(Nums),\\n%% num_array_update(Index, Val),\\n%% Param_2 = num_array_sum_range(Left, Right),\\n\\n%% num_array_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class NumArray(_nums: Array[Int]) {\\n\\n    def update(index: Int, `val`: Int): Unit = {\\n        \\n    }\\n\\n    def sumRange(left: Int, right: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your NumArray object will be instantiated and called as such:\\n * val obj = new NumArray(nums)\\n * obj.update(index,`val`)\\n * val param_2 = obj.sumRange(left,right)\\n */'}\n",
            "Done!696\n",
            "additive-number 306\n",
            "{'id': 306, 'name': 'additive-number', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/additive-number/', 'task_description': 'An **additive number** is a string whose digits can form an **additive sequence**. A valid **additive sequence** should contain **at least** three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two. Given a string containing only digits, return `true` if it is an **additive number** or `false` otherwise. **Note:** Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid. **Example 1:** ``` **Input:** \"112358\" **Output:** true **Explanation:** The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8 ``` **Example 2:** ``` **Input:** \"199100199\" **Output:** true **Explanation:** The additive sequence is: 1, 99, 100, 199. 1 + 99 = 100, 99 + 100 = 199 ``` **Constraints:** `1 <= num.length <= 35` `num` consists only of digits. **Follow up:** How would you handle overflow for very large input integers?', 'test_case': [{'label': 'Example 1', 'input': '\"112358\"', 'output': 'true Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \\n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8'}, {'label': 'Example 2', 'input': '\"199100199\"', 'output': 'true Explanation: The additive sequence is: 1, 99, 100, 199.\\xa0\\n1 + 99 = 100, 99 + 100 = 199'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_additive_number(num :: String.t) :: boolean\\n  def is_additive_number(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_additive_number(Num :: unicode:unicode_binary()) -> boolean().\\nis_additive_number(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def isAdditiveNumber(num: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!697\n",
            "range-sum-query-2d-immutable 304\n",
            "{'id': 304, 'name': 'range-sum-query-2d-immutable', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/range-sum-query-2d-immutable/', 'task_description': 'Given a 2D matrix `matrix`, handle multiple queries of the following type: Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`. Implement the `NumMatrix` class: `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`. `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`. You must design an algorithm where `sumRegion` works on `O(1)` time complexity. **Example 1:** ``` **Input** [\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"] [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]] **Output** [null, 8, 11, 12] **Explanation** NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle) numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle) numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle) ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 200` `-104 <= matrix[i][j] <= 104` `0 <= row1 <= row2 < m` `0 <= col1 <= col2 < n` At most `104` calls will be made to `sumRegion`.', 'test_case': [], 'elixir_template': 'defmodule NumMatrix do\\n  @spec init_(matrix :: [[integer]]) :: any\\n  def init_(matrix) do\\n    \\n  end\\n\\n  @spec sum_region(row1 :: integer, col1 :: integer, row2 :: integer, col2 :: integer) :: integer\\n  def sum_region(row1, col1, row2, col2) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# NumMatrix.init_(matrix)\\n# param_1 = NumMatrix.sum_region(row1, col1, row2, col2)\\n\\n# NumMatrix.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec num_matrix_init_(Matrix :: [[integer()]]) -> any().\\nnum_matrix_init_(Matrix) ->\\n  .\\n\\n-spec num_matrix_sum_region(Row1 :: integer(), Col1 :: integer(), Row2 :: integer(), Col2 :: integer()) -> integer().\\nnum_matrix_sum_region(Row1, Col1, Row2, Col2) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% num_matrix_init_(Matrix),\\n%% Param_1 = num_matrix_sum_region(Row1, Col1, Row2, Col2),\\n\\n%% num_matrix_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class NumMatrix(_matrix: Array[Array[Int]]) {\\n\\n    def sumRegion(row1: Int, col1: Int, row2: Int, col2: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * val obj = new NumMatrix(matrix)\\n * val param_1 = obj.sumRegion(row1,col1,row2,col2)\\n */'}\n",
            "Done!698\n",
            "range-sum-query-immutable 303\n",
            "{'id': 303, 'name': 'range-sum-query-immutable', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/range-sum-query-immutable/', 'task_description': 'Given an integer array `nums`, handle multiple queries of the following type: Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`. Implement the `NumArray` class: `NumArray(int[] nums)` Initializes the object with the integer array `nums`. `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`). **Example 1:** ``` **Input** [\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"] [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]] **Output** [null, 1, -1, -3] **Explanation** NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]); numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1 numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1 numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3 ``` **Constraints:** `1 <= nums.length <= 104` `-105 <= nums[i] <= 105` `0 <= left <= right < nums.length` At most `104` calls will be made to `sumRange`.', 'test_case': [], 'elixir_template': 'defmodule NumArray do\\n  @spec init_(nums :: [integer]) :: any\\n  def init_(nums) do\\n    \\n  end\\n\\n  @spec sum_range(left :: integer, right :: integer) :: integer\\n  def sum_range(left, right) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# NumArray.init_(nums)\\n# param_1 = NumArray.sum_range(left, right)\\n\\n# NumArray.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec num_array_init_(Nums :: [integer()]) -> any().\\nnum_array_init_(Nums) ->\\n  .\\n\\n-spec num_array_sum_range(Left :: integer(), Right :: integer()) -> integer().\\nnum_array_sum_range(Left, Right) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% num_array_init_(Nums),\\n%% Param_1 = num_array_sum_range(Left, Right),\\n\\n%% num_array_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class NumArray(_nums: Array[Int]) {\\n\\n    def sumRange(left: Int, right: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your NumArray object will be instantiated and called as such:\\n * val obj = new NumArray(nums)\\n * val param_1 = obj.sumRange(left,right)\\n */'}\n",
            "Done!699\n",
            "remove-invalid-parentheses 301\n",
            "{'id': 301, 'name': 'remove-invalid-parentheses', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/remove-invalid-parentheses/', 'task_description': 'Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid. Return _a list of **unique strings** that are valid with the minimum number of removals_. You may return the answer in **any order**. **Example 1:** ``` **Input:** s = \"()())()\" **Output:** [\"(())()\",\"()()()\"] ``` **Example 2:** ``` **Input:** s = \"(a)())()\" **Output:** [\"(a())()\",\"(a)()()\"] ``` **Example 3:** ``` **Input:** s = \")(\" **Output:** [\"\"] ``` **Constraints:** `1 <= s.length <= 25` `s` consists of lowercase English letters and parentheses `\\'(\\'` and `\\')\\'`. There will be at most `20` parentheses in `s`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"()())()\"', 'output': '[\"(())()\",\"()()()\"]'}, {'label': 'Example 2', 'input': 's = \"(a)())()\"', 'output': '[\"(a())()\",\"(a)()()\"]'}, {'label': 'Example 3', 'input': 's = \")(\"', 'output': '[\"\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec remove_invalid_parentheses(s :: String.t) :: [String.t]\\n  def remove_invalid_parentheses(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec remove_invalid_parentheses(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nremove_invalid_parentheses(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def removeInvalidParentheses(s: String): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!700\n",
            "longest-increasing-subsequence 300\n",
            "{'id': 300, 'name': 'longest-increasing-subsequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-increasing-subsequence/', 'task_description': 'Given an integer array `nums`, return _the length of the longest **strictly increasing **__**subsequence**_. **Example 1:** ``` **Input:** nums = [10,9,2,5,3,7,101,18] **Output:** 4 **Explanation:** The longest increasing subsequence is [2,3,7,101], therefore the length is 4. ``` **Example 2:** ``` **Input:** nums = [0,1,0,3,2,3] **Output:** 4 ``` **Example 3:** ``` **Input:** nums = [7,7,7,7,7,7,7] **Output:** 1 ``` **Constraints:** `1 <= nums.length <= 2500` `-104 <= nums[i] <= 104` Follow up: Can you come up with an algorithm that runs in `O(n log(n))` time complexity?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [10,9,2,5,3,7,101,18]', 'output': '4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.'}, {'label': 'Example 2', 'input': 'nums = [0,1,0,3,2,3]', 'output': '4'}, {'label': 'Example 3', 'input': 'nums = [7,7,7,7,7,7,7]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec length_of_lis(nums :: [integer]) :: integer\\n  def length_of_lis(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec length_of_lis(Nums :: [integer()]) -> integer().\\nlength_of_lis(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def lengthOfLIS(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!701\n",
            "bulls-and-cows 299\n",
            "{'id': 299, 'name': 'bulls-and-cows', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/bulls-and-cows/', 'task_description': 'You are playing the **Bulls and Cows** game with your friend. You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info: The number of \"bulls\", which are digits in the guess that are in the correct position. The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls. Given the secret number `secret` and your friend\\'s guess `guess`, return _the hint for your friend\\'s guess_. The hint should be formatted as `\"xAyB\"`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits. **Example 1:** ``` **Input:** secret = \"1807\", guess = \"7810\" **Output:** \"1A3B\" **Explanation:** Bulls are connected with a \\'|\\' and cows are underlined: \"1807\" | \"7810\" ``` **Example 2:** ``` **Input:** secret = \"1123\", guess = \"0111\" **Output:** \"1A1B\" **Explanation:** Bulls are connected with a \\'|\\' and cows are underlined: \"1123\" \"1123\" | or | \"0111\" \"0111\" Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull. ``` **Constraints:** `1 <= secret.length, guess.length <= 1000` `secret.length == guess.length` `secret` and `guess` consist of digits only.', 'test_case': [{'label': 'Example 1', 'input': 'secret = \"1807\", guess = \"7810\"', 'output': '\"1A3B\" Explanation: Bulls are connected with a \\'|\\' and cows are underlined:\\n\"1807\"\\n  |\\n\" 7 8 10 \"'}, {'label': 'Example 2', 'input': 'secret = \"1123\", guess = \"0111\"', 'output': '\"1A1B\" Explanation: Bulls are connected with a \\'|\\' and cows are underlined:\\n\"1123\"        \"1123\"\\n  |      or     |\\n\"01 1 1\"        \"011 1 \"\\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.'}], 'elixir_template': 'defmodule Solution do\\n  @spec get_hint(secret :: String.t, guess :: String.t) :: String.t\\n  def get_hint(secret, guess) do\\n    \\n  end\\nend', 'erlang_template': '-spec get_hint(Secret :: unicode:unicode_binary(), Guess :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nget_hint(Secret, Guess) ->\\n  .', 'scala_template': 'object Solution {\\n    def getHint(secret: String, guess: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!702\n",
            "serialize-and-deserialize-binary-tree 297\n",
            "{'id': 297, 'name': 'serialize-and-deserialize-binary-tree', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/serialize-and-deserialize-binary-tree/', 'task_description': 'Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. **Clarification:** The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself. **Example 1:** ``` **Input:** root = [1,2,3,null,null,4,5] **Output:** [1,2,3,null,null,4,5] ``` **Example 2:** ``` **Input:** root = [] **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `-1000 <= Node.val <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,null,null,4,5]', 'output': '[1,2,3,null,null,4,5]'}, {'label': 'Example 2', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . -1000 <= Node.val <= 1000'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nclass Codec {\\n    // Encodes a list of strings to a single string.\\n    def serialize(root: TreeNode): String = {\\n        \\n    }\\n    \\n    // Decodes a single string to a list of strings.\\n    def deserialize(data: String): TreeNode = {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * var ser = new Codec()\\n * var deser = new Codec()\\n * val s = ser.serialize(root)\\n * val ans = deser.deserialize(s)\\n */'}\n",
            "Done!703\n",
            "find-median-from-data-stream 295\n",
            "{'id': 295, 'name': 'find-median-from-data-stream', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/find-median-from-data-stream/', 'task_description': 'The **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values. For example, for `arr = [2,3,4]`, the median is `3`. For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`. Implement the MedianFinder class: `MedianFinder()` initializes the `MedianFinder` object. `void addNum(int num)` adds the integer `num` from the data stream to the data structure. `double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted. **Example 1:** ``` **Input** [\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"] [[], [1], [2], [], [3], []] **Output** [null, null, null, 1.5, null, 2.0] **Explanation** MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1); // arr = [1] medianFinder.addNum(2); // arr = [1, 2] medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2) medianFinder.addNum(3); // arr[1, 2, 3] medianFinder.findMedian(); // return 2.0 ``` **Constraints:** `-105 <= num <= 105` There will be at least one element in the data structure before calling `findMedian`. At most `5 * 104` calls will be made to `addNum` and `findMedian`. **Follow up:** If all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution? If `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?', 'test_case': [], 'elixir_template': 'defmodule MedianFinder do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec add_num(num :: integer) :: any\\n  def add_num(num) do\\n    \\n  end\\n\\n  @spec find_median() :: float\\n  def find_median() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MedianFinder.init_()\\n# MedianFinder.add_num(num)\\n# param_2 = MedianFinder.find_median()\\n\\n# MedianFinder.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec median_finder_init_() -> any().\\nmedian_finder_init_() ->\\n  .\\n\\n-spec median_finder_add_num(Num :: integer()) -> any().\\nmedian_finder_add_num(Num) ->\\n  .\\n\\n-spec median_finder_find_median() -> float().\\nmedian_finder_find_median() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% median_finder_init_(),\\n%% median_finder_add_num(Num),\\n%% Param_2 = median_finder_find_median(),\\n\\n%% median_finder_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MedianFinder() {\\n\\n    def addNum(num: Int): Unit = {\\n        \\n    }\\n\\n    def findMedian(): Double = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * val obj = new MedianFinder()\\n * obj.addNum(num)\\n * val param_2 = obj.findMedian()\\n */'}\n",
            "Done!704\n",
            "nim-game 292\n",
            "{'id': 292, 'name': 'nim-game', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/nim-game/', 'task_description': 'You are playing the following Nim Game with your friend: Initially, there is a heap of stones on the table. You and your friend will alternate taking turns, and **you go first**. On each turn, the person whose turn it is will remove 1 to 3 stones from the heap. The one who removes the last stone is the winner. Given `n`, the number of stones in the heap, return `true`_ if you can win the game assuming both you and your friend play optimally, otherwise return _`false`. **Example 1:** ``` **Input:** n = 4 **Output:** false **Explanation:** These are the possible outcomes: 1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins. 2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins. 3. You remove 3 stones. Your friend removes the last stone. Your friend wins. In all outcomes, your friend wins. ``` **Example 2:** ``` **Input:** n = 1 **Output:** true ``` **Example 3:** ``` **Input:** n = 2 **Output:** true ``` **Constraints:** `1 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 4', 'output': 'false Explanation: These are the possible outcomes:\\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\\nIn all outcomes, your friend wins.'}, {'label': 'Example 2', 'input': 'n = 1', 'output': 'true'}, {'label': 'Example 3', 'input': 'n = 2', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_win_nim(n :: integer) :: boolean\\n  def can_win_nim(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_win_nim(N :: integer()) -> boolean().\\ncan_win_nim(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def canWinNim(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!705\n",
            "word-pattern 290\n",
            "{'id': 290, 'name': 'word-pattern', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/word-pattern/', 'task_description': 'Given a `pattern` and a string `s`, find if `s` follows the same pattern. Here follow means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `s`. Specifically: Each letter in `pattern` maps to **exactly** one unique word in `s`. Each unique word in `s` maps to **exactly** one letter in `pattern`. No two letters map to the same word, and no two words map to the same letter. **Example 1:** **Input:** pattern = \"abba\", s = \"dog cat cat dog\" **Output:** true **Explanation:** The bijection can be established as: `\\'a\\'` maps to `\"dog\"`. `\\'b\\'` maps to `\"cat\"`. **Example 2:** **Input:** pattern = \"abba\", s = \"dog cat cat fish\" **Output:** false **Example 3:** **Input:** pattern = \"aaaa\", s = \"dog cat cat dog\" **Output:** false **Constraints:** `1 <= pattern.length <= 300` `pattern` contains only lower-case English letters. `1 <= s.length <= 3000` `s` contains only lowercase English letters and spaces `\\' \\'`. `s` **does not contain** any leading or trailing spaces. All the words in `s` are separated by a **single space**.', 'test_case': [{'label': 'Example 1', 'input': 'pattern = \"abba\", s = \"dog cat cat dog\"', 'output': 'true Explanation: The bijection can be established as: \\'a\\' maps to \"dog\" . \\'b\\' maps to \"cat\" .'}, {'label': 'Example 2', 'input': 'pattern = \"abba\", s = \"dog cat cat fish\"', 'output': 'false'}, {'label': 'Example 3', 'input': 'pattern = \"aaaa\", s = \"dog cat cat dog\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec word_pattern(pattern :: String.t, s :: String.t) :: boolean\\n  def word_pattern(pattern, s) do\\n    \\n  end\\nend', 'erlang_template': '-spec word_pattern(Pattern :: unicode:unicode_binary(), S :: unicode:unicode_binary()) -> boolean().\\nword_pattern(Pattern, S) ->\\n  .', 'scala_template': 'object Solution {\\n    def wordPattern(pattern: String, s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!706\n",
            "game-of-life 289\n",
            "{'id': 289, 'name': 'game-of-life', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/game-of-life/', 'task_description': 'According to Wikipedia\\'s article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\" The board is made up of an `m x n` grid of cells, where each cell has an initial state: live (represented by a `1`) or dead (represented by a `0`). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article): Any live cell with fewer than two live neighbors dies as if caused by under-population. Any live cell with two or three live neighbors lives on to the next generation. Any live cell with more than three live neighbors dies, as if by over-population. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. The next state of the board is determined by applying the above rules simultaneously to every cell in the current state of the `m x n` grid `board`. In this process, births and deaths occur **simultaneously**. Given the current state of the `board`, **update** the `board` to reflect its next state. **Note** that you do not need to return anything. **Example 1:** ``` **Input:** board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]] **Output:** [[0,0,0],[1,0,1],[0,1,1],[0,1,0]] ``` **Example 2:** ``` **Input:** board = [[1,1],[1,0]] **Output:** [[1,1],[1,1]] ``` **Constraints:** `m == board.length` `n == board[i].length` `1 <= m, n <= 25` `board[i][j]` is `0` or `1`. **Follow up:** Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells. In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?', 'test_case': [{'label': 'Example 1', 'input': 'board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]', 'output': '[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]'}, {'label': 'Example 2', 'input': 'board = [[1,1],[1,0]]', 'output': '[[1,1],[1,1]] Constraints: m == board.length n == board[i].length 1 <= m, n <= 25 board[i][j] is 0 or 1 . Follow up: Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells. In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def gameOfLife(board: Array[Array[Int]]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!707\n",
            "find-the-duplicate-number 287\n",
            "{'id': 287, 'name': 'find-the-duplicate-number', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-the-duplicate-number/', 'task_description': 'Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. There is only **one repeated number** in `nums`, return _this repeated number_. You must solve the problem **without** modifying the array `nums` and using only constant extra space. **Example 1:** ``` **Input:** nums = [1,3,4,2,2] **Output:** 2 ``` **Example 2:** ``` **Input:** nums = [3,1,3,4,2] **Output:** 3 ``` **Example 3:** ``` **Input:** nums = [3,3,3,3,3] **Output:** 3 ``` **Constraints:** `1 <= n <= 105` `nums.length == n + 1` `1 <= nums[i] <= n` All the integers in `nums` appear only **once** except for **precisely one integer** which appears **two or more** times. Follow up: How can we prove that at least one duplicate number must exist in `nums`? Can you solve the problem in linear runtime complexity?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,4,2,2]', 'output': '2'}, {'label': 'Example 2', 'input': 'nums = [3,1,3,4,2]', 'output': '3'}, {'label': 'Example 3', 'input': 'nums = [3,3,3,3,3]', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_duplicate(nums :: [integer]) :: integer\\n  def find_duplicate(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_duplicate(Nums :: [integer()]) -> integer().\\nfind_duplicate(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findDuplicate(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!708\n",
            "peeking-iterator 284\n",
            "{'id': 284, 'name': 'peeking-iterator', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/peeking-iterator/', 'task_description': 'Design an iterator that supports the `peek` operation on an existing iterator in addition to the `hasNext` and the `next` operations. Implement the `PeekingIterator` class: `PeekingIterator(Iterator<int> nums)` Initializes the object with the given integer iterator `iterator`. `int next()` Returns the next element in the array and moves the pointer to the next element. `boolean hasNext()` Returns `true` if there are still elements in the array. `int peek()` Returns the next element in the array **without** moving the pointer. **Note:** Each language may have a different implementation of the constructor and `Iterator`, but they all support the `int next()` and `boolean hasNext()` functions. **Example 1:** ``` **Input** [\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"] [[[1, 2, 3]], [], [], [], [], []] **Output** [null, 1, 2, 2, 3, false] **Explanation** PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [**1**,2,3] peekingIterator.next(); // return 1, the pointer moves to the next element [1,**2**,3]. peekingIterator.peek(); // return 2, the pointer does not move [1,**2**,3]. peekingIterator.next(); // return 2, the pointer moves to the next element [1,2,**3**] peekingIterator.next(); // return 3, the pointer moves to the next element [1,2,3] peekingIterator.hasNext(); // return False ``` **Constraints:** `1 <= nums.length <= 1000` `1 <= nums[i] <= 1000` All the calls to `next` and `peek` are valid. At most `1000` calls will be made to `next`, `hasNext`, and `peek`. **Follow up:** How would you extend your design to be generic and work with all types, not just integer?', 'test_case': [], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '// Scala Iterator reference:\\n// https://www.scala-lang.org/api/2.12.2/scala/collection/Iterator.html\\n\\nclass PeekingIterator(_iterator: Iterator[Int]) {\\n    def peek(): Int = {\\n        \\n    }\\n    \\n    def next(): Int = {\\n        \\n    }\\n    \\n    def hasNext(): Boolean = {\\n        \\n    }\\n}\\n\\n/**\\n * Your PeekingIterator object will be instantiated and called as such:\\n * var obj = new PeekingIterator(arr)\\n * var param_1 = obj.next()\\n * var param_2 = obj.peek()\\n * var param_3 = obj.hasNext()\\n */'}\n",
            "Done!709\n",
            "move-zeroes 283\n",
            "{'id': 283, 'name': 'move-zeroes', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/move-zeroes/', 'task_description': \"Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements. **Note** that you must do this in-place without making a copy of the array. **Example 1:** ``` **Input:** nums = [0,1,0,3,12] **Output:** [1,3,12,0,0] ``` **Example 2:** ``` **Input:** nums = [0] **Output:** [0] ``` **Constraints:** `1 <= nums.length <= 104` `-231 <= nums[i] <= 231 - 1` **Follow up:** Could you minimize the total number of operations done?\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [0,1,0,3,12]', 'output': '[1,3,12,0,0]'}, {'label': 'Example 2', 'input': 'nums = [0]', 'output': '[0]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def moveZeroes(nums: Array[Int]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!710\n",
            "expression-add-operators 282\n",
            "{'id': 282, 'name': 'expression-add-operators', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/expression-add-operators/', 'task_description': 'Given a string `num` that contains only digits and an integer `target`, return _**all possibilities** to insert the binary operators _`\\'+\\'`_, _`\\'-\\'`_, and/or _`\\'*\\'`_ between the digits of _`num`_ so that the resultant expression evaluates to the _`target`_ value_. Note that operands in the returned expressions **should not** contain leading zeros. **Example 1:** ``` **Input:** num = \"123\", target = 6 **Output:** [\"1*2*3\",\"1+2+3\"] **Explanation:** Both \"1*2*3\" and \"1+2+3\" evaluate to 6. ``` **Example 2:** ``` **Input:** num = \"232\", target = 8 **Output:** [\"2*3+2\",\"2+3*2\"] **Explanation:** Both \"2*3+2\" and \"2+3*2\" evaluate to 8. ``` **Example 3:** ``` **Input:** num = \"3456237490\", target = 9191 **Output:** [] **Explanation:** There are no expressions that can be created from \"3456237490\" to evaluate to 9191. ``` **Constraints:** `1 <= num.length <= 10` `num` consists of only digits. `-231 <= target <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'num = \"123\", target = 6', 'output': '[\"1*2*3\",\"1+2+3\"] Explanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.'}, {'label': 'Example 2', 'input': 'num = \"232\", target = 8', 'output': '[\"2*3+2\",\"2+3*2\"] Explanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.'}, {'label': 'Example 3', 'input': 'num = \"3456237490\", target = 9191', 'output': '[] Explanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.'}], 'elixir_template': 'defmodule Solution do\\n  @spec add_operators(num :: String.t, target :: integer) :: [String.t]\\n  def add_operators(num, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec add_operators(Num :: unicode:unicode_binary(), Target :: integer()) -> [unicode:unicode_binary()].\\nadd_operators(Num, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def addOperators(num: String, target: Int): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!711\n",
            "perfect-squares 279\n",
            "{'id': 279, 'name': 'perfect-squares', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/perfect-squares/', 'task_description': 'Given an integer `n`, return _the least number of perfect square numbers that sum to_ `n`. A **perfect square** is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not. **Example 1:** ``` **Input:** n = 12 **Output:** 3 **Explanation:** 12 = 4 + 4 + 4. ``` **Example 2:** ``` **Input:** n = 13 **Output:** 2 **Explanation:** 13 = 4 + 9. ``` **Constraints:** `1 <= n <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'n = 12', 'output': '3 Explanation: 12 = 4 + 4 + 4.'}, {'label': 'Example 2', 'input': 'n = 13', 'output': '2 Explanation: 13 = 4 + 9.'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_squares(n :: integer) :: integer\\n  def num_squares(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_squares(N :: integer()) -> integer().\\nnum_squares(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def numSquares(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!712\n",
            "first-bad-version 278\n",
            "{'id': 278, 'name': 'first-bad-version', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/first-bad-version/', 'task_description': 'You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API. **Example 1:** ``` **Input:** n = 5, bad = 4 **Output:** 4 **Explanation:** call isBadVersion(3) -> false call isBadVersion(5) -> true call isBadVersion(4) -> true Then 4 is the first bad version. ``` **Example 2:** ``` **Input:** n = 1, bad = 1 **Output:** 1 ``` **Constraints:** `1 <= bad <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 5, bad = 4', 'output': '4 Explanation: call isBadVersion(3) -> false\\ncall isBadVersion(5)\\xa0-> true\\ncall isBadVersion(4)\\xa0-> true\\nThen 4 is the first bad version.'}, {'label': 'Example 2', 'input': 'n = 1, bad = 1', 'output': '1'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/* The isBadVersion API is defined in the parent class VersionControl.\\n      def isBadVersion(version: Int): Boolean = {} */\\n\\nclass Solution extends VersionControl {\\n    def firstBadVersion(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!713\n",
            "h-index-ii 275\n",
            "{'id': 275, 'name': 'h-index-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/h-index-ii/', 'task_description': \"Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in **ascending order**, return _the researcher's h-index_. According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times. You must write an algorithm that runs in logarithmic time. **Example 1:** ``` **Input:** citations = [0,1,3,5,6] **Output:** 3 **Explanation:** [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. ``` **Example 2:** ``` **Input:** citations = [1,2,100] **Output:** 2 ``` **Constraints:** `n == citations.length` `1 <= n <= 105` `0 <= citations[i] <= 1000` `citations` is sorted in **ascending order**.\", 'test_case': [{'label': 'Example 1', 'input': 'citations = [0,1,3,5,6]', 'output': '3 Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.'}, {'label': 'Example 2', 'input': 'citations = [1,2,100]', 'output': '2 Constraints: n == citations.length 1 <= n <= 10 5 0 <= citations[i] <= 1000 citations is sorted in ascending order .'}], 'elixir_template': 'defmodule Solution do\\n  @spec h_index(citations :: [integer]) :: integer\\n  def h_index(citations) do\\n    \\n  end\\nend', 'erlang_template': '-spec h_index(Citations :: [integer()]) -> integer().\\nh_index(Citations) ->\\n  .', 'scala_template': 'object Solution {\\n    def hIndex(citations: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!714\n",
            "h-index 274\n",
            "{'id': 274, 'name': 'h-index', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/h-index/', 'task_description': \"Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return _the researcher's h-index_. According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times. **Example 1:** ``` **Input:** citations = [3,0,6,1,5] **Output:** 3 **Explanation:** [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. ``` **Example 2:** ``` **Input:** citations = [1,3,1] **Output:** 1 ``` **Constraints:** `n == citations.length` `1 <= n <= 5000` `0 <= citations[i] <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'citations = [3,0,6,1,5]', 'output': '3 Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.'}, {'label': 'Example 2', 'input': 'citations = [1,3,1]', 'output': '1 Constraints: n == citations.length 1 <= n <= 5000 0 <= citations[i] <= 1000'}], 'elixir_template': 'defmodule Solution do\\n  @spec h_index(citations :: [integer]) :: integer\\n  def h_index(citations) do\\n    \\n  end\\nend', 'erlang_template': '-spec h_index(Citations :: [integer()]) -> integer().\\nh_index(Citations) ->\\n  .', 'scala_template': 'object Solution {\\n    def hIndex(citations: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!715\n",
            "integer-to-english-words 273\n",
            "{'id': 273, 'name': 'integer-to-english-words', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/integer-to-english-words/', 'task_description': 'Convert a non-negative integer `num` to its English words representation. **Example 1:** ``` **Input:** num = 123 **Output:** \"One Hundred Twenty Three\" ``` **Example 2:** ``` **Input:** num = 12345 **Output:** \"Twelve Thousand Three Hundred Forty Five\" ``` **Example 3:** ``` **Input:** num = 1234567 **Output:** \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\" ``` **Constraints:** `0 <= num <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'num = 123', 'output': '\"One Hundred Twenty Three\"'}, {'label': 'Example 2', 'input': 'num = 12345', 'output': '\"Twelve Thousand Three Hundred Forty Five\"'}, {'label': 'Example 3', 'input': 'num = 1234567', 'output': '\"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec number_to_words(num :: integer) :: String.t\\n  def number_to_words(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec number_to_words(Num :: integer()) -> unicode:unicode_binary().\\nnumber_to_words(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def numberToWords(num: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!716\n",
            "missing-number 268\n",
            "{'id': 268, 'name': 'missing-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/missing-number/', 'task_description': 'Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return _the only number in the range that is missing from the array._ **Example 1:** ``` **Input:** nums = [3,0,1] **Output:** 2 **Explanation:** n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. ``` **Example 2:** ``` **Input:** nums = [0,1] **Output:** 2 **Explanation:** n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. ``` **Example 3:** ``` **Input:** nums = [9,6,4,2,3,5,7,0,1] **Output:** 8 **Explanation:** n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. ``` **Constraints:** `n == nums.length` `1 <= n <= 104` `0 <= nums[i] <= n` All the numbers of `nums` are **unique**. **Follow up:** Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,0,1]', 'output': '2 Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.'}, {'label': 'Example 2', 'input': 'nums = [0,1]', 'output': '2 Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.'}, {'label': 'Example 3', 'input': 'nums = [9,6,4,2,3,5,7,0,1]', 'output': '8 Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. Constraints: n == nums.length 1 <= n <= 10 4 0 <= nums[i] <= n All the numbers of nums are unique . Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?'}], 'elixir_template': 'defmodule Solution do\\n  @spec missing_number(nums :: [integer]) :: integer\\n  def missing_number(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec missing_number(Nums :: [integer()]) -> integer().\\nmissing_number(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def missingNumber(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!717\n",
            "ugly-number-ii 264\n",
            "{'id': 264, 'name': 'ugly-number-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/ugly-number-ii/', 'task_description': 'An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`. Given an integer `n`, return _the_ `nth` _**ugly number**_. **Example 1:** ``` **Input:** n = 10 **Output:** 12 **Explanation:** [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers. ``` **Example 2:** ``` **Input:** n = 1 **Output:** 1 **Explanation:** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5. ``` **Constraints:** `1 <= n <= 1690`', 'test_case': [{'label': 'Example 1', 'input': 'n = 10', 'output': '12 Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '1 Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.'}], 'elixir_template': 'defmodule Solution do\\n  @spec nth_ugly_number(n :: integer) :: integer\\n  def nth_ugly_number(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec nth_ugly_number(N :: integer()) -> integer().\\nnth_ugly_number(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def nthUglyNumber(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!718\n",
            "ugly-number 263\n",
            "{'id': 263, 'name': 'ugly-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/ugly-number/', 'task_description': 'An **ugly number** is a _positive_ integer which does not have a prime factor other than 2, 3, and 5. Given an integer `n`, return `true` _if_ `n` _is an **ugly number**_. **Example 1:** ``` **Input:** n = 6 **Output:** true **Explanation:** 6 = 2 × 3 ``` **Example 2:** ``` **Input:** n = 1 **Output:** true **Explanation:** 1 has no prime factors. ``` **Example 3:** ``` **Input:** n = 14 **Output:** false **Explanation:** 14 is not ugly since it includes the prime factor 7. ``` **Constraints:** `-231 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 6', 'output': 'true Explanation: 6 = 2 × 3'}, {'label': 'Example 2', 'input': 'n = 1', 'output': 'true Explanation: 1 has no prime factors.'}, {'label': 'Example 3', 'input': 'n = 14', 'output': 'false Explanation: 14 is not ugly since it includes the prime factor 7. Constraints: -2 31 <= n <= 2 31 - 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_ugly(n :: integer) :: boolean\\n  def is_ugly(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_ugly(N :: integer()) -> boolean().\\nis_ugly(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def isUgly(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!719\n",
            "single-number-iii 260\n",
            "{'id': 260, 'name': 'single-number-iii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/single-number-iii/', 'task_description': 'Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in **any order**. You must write an algorithm that runs in linear runtime complexity and uses only constant extra space. **Example 1:** ``` **Input:** nums = [1,2,1,3,2,5] **Output:** [3,5] **Explanation: ** [5, 3] is also a valid answer. ``` **Example 2:** ``` **Input:** nums = [-1,0] **Output:** [-1,0] ``` **Example 3:** ``` **Input:** nums = [0,1] **Output:** [1,0] ``` **Constraints:** `2 <= nums.length <= 3 * 104` `-231 <= nums[i] <= 231 - 1` Each integer in `nums` will appear twice, only two integers will appear once.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,1,3,2,5]', 'output': '[3,5] Explanation: [5, 3] is also a valid answer.'}, {'label': 'Example 2', 'input': 'nums = [-1,0]', 'output': '[-1,0]'}, {'label': 'Example 3', 'input': 'nums = [0,1]', 'output': '[1,0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec single_number(nums :: [integer]) :: [integer]\\n  def single_number(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec single_number(Nums :: [integer()]) -> [integer()].\\nsingle_number(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def singleNumber(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!720\n",
            "add-digits 258\n",
            "{'id': 258, 'name': 'add-digits', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/add-digits/', 'task_description': 'Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it. **Example 1:** ``` **Input:** num = 38 **Output:** 2 **Explanation:** The process is 38 --> 3 + 8 --> 11 11 --> 1 + 1 --> 2 Since 2 has only one digit, return it. ``` **Example 2:** ``` **Input:** num = 0 **Output:** 0 ``` **Constraints:** `0 <= num <= 231 - 1` **Follow up:** Could you do it without any loop/recursion in `O(1)` runtime?', 'test_case': [{'label': 'Example 1', 'input': 'num = 38', 'output': '2 Explanation: The process is\\n38 --> 3 + 8 --> 11\\n11 --> 1 + 1 --> 2 \\nSince 2 has only one digit, return it.'}, {'label': 'Example 2', 'input': 'num = 0', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec add_digits(num :: integer) :: integer\\n  def add_digits(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec add_digits(Num :: integer()) -> integer().\\nadd_digits(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def addDigits(num: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!721\n",
            "binary-tree-paths 257\n",
            "{'id': 257, 'name': 'binary-tree-paths', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-tree-paths/', 'task_description': 'Given the `root` of a binary tree, return _all root-to-leaf paths in **any order**_. A **leaf** is a node with no children. **Example 1:** ``` **Input:** root = [1,2,3,null,5] **Output:** [\"1->2->5\",\"1->3\"] ``` **Example 2:** ``` **Input:** root = [1] **Output:** [\"1\"] ``` **Constraints:** The number of nodes in the tree is in the range `[1, 100]`. `-100 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,null,5]', 'output': '[\"1->2->5\",\"1->3\"]'}, {'label': 'Example 2', 'input': 'root = [1]', 'output': '[\"1\"] Constraints: The number of nodes in the tree is in the range [1, 100] . -100 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec binary_tree_paths(root :: TreeNode.t | nil) :: [String.t]\\n  def binary_tree_paths(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec binary_tree_paths(Root :: #tree_node{} | null) -> [unicode:unicode_binary()].\\nbinary_tree_paths(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def binaryTreePaths(root: TreeNode): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!722\n",
            "valid-anagram 242\n",
            "{'id': 242, 'name': 'valid-anagram', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/valid-anagram/', 'task_description': 'Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise. **Example 1:** **Input:** s = \"anagram\", t = \"nagaram\" **Output:** true **Example 2:** **Input:** s = \"rat\", t = \"car\" **Output:** false **Constraints:** `1 <= s.length, t.length <= 5 * 104` `s` and `t` consist of lowercase English letters. **Follow up:** What if the inputs contain Unicode characters? How would you adapt your solution to such a case?', 'test_case': [{'label': 'Example 1', 'input': 's = \"anagram\", t = \"nagaram\"', 'output': 'true'}, {'label': 'Example 2', 'input': 's = \"rat\", t = \"car\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_anagram(s :: String.t, t :: String.t) :: boolean\\n  def is_anagram(s, t) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_anagram(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\\nis_anagram(S, T) ->\\n  .', 'scala_template': 'object Solution {\\n    def isAnagram(s: String, t: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!723\n",
            "different-ways-to-add-parentheses 241\n",
            "{'id': 241, 'name': 'different-ways-to-add-parentheses', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/different-ways-to-add-parentheses/', 'task_description': 'Given a string `expression` of numbers and operators, return _all possible results from computing all the different possible ways to group numbers and operators_. You may return the answer in **any order**. The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed `104`. **Example 1:** ``` **Input:** expression = \"2-1-1\" **Output:** [0,2] **Explanation:** ((2-1)-1) = 0 (2-(1-1)) = 2 ``` **Example 2:** ``` **Input:** expression = \"2*3-4*5\" **Output:** [-34,-14,-10,-10,10] **Explanation:** (2*(3-(4*5))) = -34 ((2*3)-(4*5)) = -14 ((2*(3-4))*5) = -10 (2*((3-4)*5)) = -10 (((2*3)-4)*5) = 10 ``` **Constraints:** `1 <= expression.length <= 20` `expression` consists of digits and the operator `\\'+\\'`, `\\'-\\'`, and `\\'*\\'`. All the integer values in the input expression are in the range `[0, 99]`. The integer values in the input expression do not have a leading `\\'-\\'` or `\\'+\\'` denoting the sign.', 'test_case': [{'label': 'Example 1', 'input': 'expression = \"2-1-1\"', 'output': '[0,2] Explanation: ((2-1)-1) = 0 \\n(2-(1-1)) = 2'}, {'label': 'Example 2', 'input': 'expression = \"2*3-4*5\"', 'output': '[-34,-14,-10,-10,10] Explanation: (2*(3-(4*5))) = -34 \\n((2*3)-(4*5)) = -14 \\n((2*(3-4))*5) = -10 \\n(2*((3-4)*5)) = -10 \\n(((2*3)-4)*5) = 10'}], 'elixir_template': 'defmodule Solution do\\n  @spec diff_ways_to_compute(expression :: String.t) :: [integer]\\n  def diff_ways_to_compute(expression) do\\n    \\n  end\\nend', 'erlang_template': '-spec diff_ways_to_compute(Expression :: unicode:unicode_binary()) -> [integer()].\\ndiff_ways_to_compute(Expression) ->\\n  .', 'scala_template': 'object Solution {\\n    def diffWaysToCompute(expression: String): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!724\n",
            "search-a-2d-matrix-ii 240\n",
            "{'id': 240, 'name': 'search-a-2d-matrix-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/search-a-2d-matrix-ii/', 'task_description': 'Write an efficient algorithm that searches for a value `target` in an `m x n` integer matrix `matrix`. This matrix has the following properties: Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom. **Example 1:** ``` **Input:** matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5 **Output:** true ``` **Example 2:** ``` **Input:** matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20 **Output:** false ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= n, m <= 300` `-109 <= matrix[i][j] <= 109` All the integers in each row are **sorted** in ascending order. All the integers in each column are **sorted** in ascending order. `-109 <= target <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5', 'output': 'true'}, {'label': 'Example 2', 'input': 'matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20', 'output': 'false Constraints: m == matrix.length n == matrix[i].length 1 <= n, m <= 300 -10 9 <= matrix[i][j] <= 10 9 All the integers in each row are sorted in ascending order. All the integers in each column are sorted in ascending order. -10 9 <= target <= 10 9'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!725\n",
            "sliding-window-maximum 239\n",
            "{'id': 239, 'name': 'sliding-window-maximum', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/sliding-window-maximum/', 'task_description': 'You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return _the max sliding window_. **Example 1:** ``` **Input:** nums = [1,3,-1,-3,5,3,6,7], k = 3 **Output:** [3,3,5,5,6,7] **Explanation:** Window position Max --------------- ----- [1 3 -1] -3 5 3 6 7 **3** 1 [3 -1 -3] 5 3 6 7 **3** 1 3 [-1 -3 5] 3 6 7 ** 5** 1 3 -1 [-3 5 3] 6 7 **5** 1 3 -1 -3 [5 3 6] 7 **6** 1 3 -1 -3 5 [3 6 7] **7** ``` **Example 2:** ``` **Input:** nums = [1], k = 1 **Output:** [1] ``` **Constraints:** `1 <= nums.length <= 105` `-104 <= nums[i] <= 104` `1 <= k <= nums.length`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,-1,-3,5,3,6,7], k = 3', 'output': '[3,3,5,5,6,7] Explanation: Window position                Max\\n---------------               -----\\n[1  3  -1] -3  5  3  6  7 3 1 [3  -1  -3] 5  3  6  7 3 1  3 [-1  -3  5] 3  6  7 5 1  3  -1 [-3  5  3] 6  7 5 1  3  -1  -3 [5  3  6] 7 6 1  3  -1  -3  5 [3  6  7] 7'}, {'label': 'Example 2', 'input': 'nums = [1], k = 1', 'output': '[1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_sliding_window(nums :: [integer], k :: integer) :: [integer]\\n  def max_sliding_window(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_sliding_window(Nums :: [integer()], K :: integer()) -> [integer()].\\nmax_sliding_window(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxSlidingWindow(nums: Array[Int], k: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!726\n",
            "product-of-array-except-self 238\n",
            "{'id': 238, 'name': 'product-of-array-except-self', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/product-of-array-except-self/', 'task_description': 'Given an integer array `nums`, return _an array_ `answer` _such that_ `answer[i]` _is equal to the product of all the elements of_ `nums` _except_ `nums[i]`. The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer. You must write an algorithm that runs in `O(n)` time and without using the division operation. **Example 1:** ``` **Input:** nums = [1,2,3,4] **Output:** [24,12,8,6] ``` **Example 2:** ``` **Input:** nums = [-1,1,0,-3,3] **Output:** [0,0,9,0,0] ``` **Constraints:** `2 <= nums.length <= 105` `-30 <= nums[i] <= 30` The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer. **Follow up:** Can you solve the problem in `O(1)` extra space complexity? (The output array **does not** count as extra space for space complexity analysis.)', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,4]', 'output': '[24,12,8,6]'}, {'label': 'Example 2', 'input': 'nums = [-1,1,0,-3,3]', 'output': '[0,0,9,0,0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec product_except_self(nums :: [integer]) :: [integer]\\n  def product_except_self(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec product_except_self(Nums :: [integer()]) -> [integer()].\\nproduct_except_self(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!727\n",
            "delete-node-in-a-linked-list 237\n",
            "{'id': 237, 'name': 'delete-node-in-a-linked-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/delete-node-in-a-linked-list/', 'task_description': 'There is a singly-linked list `head` and we want to delete a node `node` in it. You are given the node to be deleted `node`. You will **not be given access** to the first node of `head`. All the values of the linked list are **unique**, and it is guaranteed that the given node `node` is not the last node in the linked list. Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean: The value of the given node should not exist in the linked list. The number of nodes in the linked list should decrease by one. All the values before `node` should be in the same order. All the values after `node` should be in the same order. **Custom testing:** For the input, you should provide the entire linked list `head` and the node to be given `node`. `node` should not be the last node of the list and should be an actual node in the list. We will build the linked list and pass the node to your function. The output will be the entire list after calling your function. **Example 1:** ``` **Input:** head = [4,5,1,9], node = 5 **Output:** [4,1,9] **Explanation: **You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function. ``` **Example 2:** ``` **Input:** head = [4,5,1,9], node = 1 **Output:** [4,5,9] **Explanation: **You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function. ``` **Constraints:** The number of the nodes in the given list is in the range `[2, 1000]`. `-1000 <= Node.val <= 1000` The value of each node in the list is **unique**. The `node` to be deleted is **in the list** and is **not a tail** node.', 'test_case': [{'label': 'Example 1', 'input': 'head = [4,5,1,9], node = 5', 'output': '[4,1,9] Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.'}, {'label': 'Example 2', 'input': 'head = [4,5,1,9], node = 1', 'output': '[4,5,9] Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function. Constraints: The number of the nodes in the given list is in the range [2, 1000] . -1000 <= Node.val <= 1000 The value of each node in the list is unique . The node to be deleted is in the list and is not a tail node.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\n\\nobject Solution {\\n    def deleteNode(node: ListNode): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!728\n",
            "lowest-common-ancestor-of-a-binary-tree 236\n",
            "{'id': 236, 'name': 'lowest-common-ancestor-of-a-binary-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/', 'task_description': 'Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).” **Example 1:** ``` **Input:** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 **Output:** 3 **Explanation:** The LCA of nodes 5 and 1 is 3. ``` **Example 2:** ``` **Input:** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 **Output:** 5 **Explanation:** The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition. ``` **Example 3:** ``` **Input:** root = [1,2], p = 1, q = 2 **Output:** 1 ``` **Constraints:** The number of nodes in the tree is in the range `[2, 105]`. `-109 <= Node.val <= 109` All `Node.val` are **unique**. `p != q` `p` and `q` will exist in the tree.', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1', 'output': '3 Explanation: The LCA of nodes 5 and 1 is 3.'}, {'label': 'Example 2', 'input': 'root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4', 'output': '5 Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.'}, {'label': 'Example 3', 'input': 'root = [1,2], p = 1, q = 2', 'output': '1 Constraints: The number of nodes in the tree is in the range [2, 10 5 ] . -10 9 <= Node.val <= 10 9 All Node.val are unique . p != q p and q will exist in the tree.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nobject Solution {\\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!729\n",
            "lowest-common-ancestor-of-a-binary-search-tree 235\n",
            "{'id': 235, 'name': 'lowest-common-ancestor-of-a-binary-search-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/', 'task_description': 'Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).” **Example 1:** ``` **Input:** root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 **Output:** 6 **Explanation:** The LCA of nodes 2 and 8 is 6. ``` **Example 2:** ``` **Input:** root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 **Output:** 2 **Explanation:** The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. ``` **Example 3:** ``` **Input:** root = [2,1], p = 2, q = 1 **Output:** 2 ``` **Constraints:** The number of nodes in the tree is in the range `[2, 105]`. `-109 <= Node.val <= 109` All `Node.val` are **unique**. `p != q` `p` and `q` will exist in the BST.', 'test_case': [{'label': 'Example 1', 'input': 'root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8', 'output': '6 Explanation: The LCA of nodes 2 and 8 is 6.'}, {'label': 'Example 2', 'input': 'root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4', 'output': '2 Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.'}, {'label': 'Example 3', 'input': 'root = [2,1], p = 2, q = 1', 'output': '2 Constraints: The number of nodes in the tree is in the range [2, 10 5 ] . -10 9 <= Node.val <= 10 9 All Node.val are unique . p != q p and q will exist in the BST.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nobject Solution {\\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!730\n",
            "palindrome-linked-list 234\n",
            "{'id': 234, 'name': 'palindrome-linked-list', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/palindrome-linked-list/', 'task_description': 'Given the `head` of a singly linked list, return `true`_ if it is a __palindrome__ or _`false`_ otherwise_. **Example 1:** ``` **Input:** head = [1,2,2,1] **Output:** true ``` **Example 2:** ``` **Input:** head = [1,2] **Output:** false ``` **Constraints:** The number of nodes in the list is in the range `[1, 105]`. `0 <= Node.val <= 9` **Follow up:** Could you do it in `O(n)` time and `O(1)` space?', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,2,1]', 'output': 'true'}, {'label': 'Example 2', 'input': 'head = [1,2]', 'output': 'false Constraints: The number of nodes in the list is in the range [1, 10 5 ] . 0 <= Node.val <= 9 Follow up: Could you do it in O(n) time and O(1) space?'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_palindrome(head :: ListNode.t | nil) :: boolean\\n  def is_palindrome(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec is_palindrome(Head :: #list_node{} | null) -> boolean().\\nis_palindrome(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def isPalindrome(head: ListNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!731\n",
            "number-of-digit-one 233\n",
            "{'id': 233, 'name': 'number-of-digit-one', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/number-of-digit-one/', 'task_description': 'Given an integer `n`, count _the total number of digit _`1`_ appearing in all non-negative integers less than or equal to_ `n`. **Example 1:** ``` **Input:** n = 13 **Output:** 6 ``` **Example 2:** ``` **Input:** n = 0 **Output:** 0 ``` **Constraints:** `0 <= n <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'n = 13', 'output': '6'}, {'label': 'Example 2', 'input': 'n = 0', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_digit_one(n :: integer) :: integer\\n  def count_digit_one(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_digit_one(N :: integer()) -> integer().\\ncount_digit_one(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def countDigitOne(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!732\n",
            "implement-queue-using-stacks 232\n",
            "{'id': 232, 'name': 'implement-queue-using-stacks', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/implement-queue-using-stacks/', 'task_description': 'Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`). Implement the `MyQueue` class: `void push(int x)` Pushes element x to the back of the queue. `int pop()` Removes the element from the front of the queue and returns it. `int peek()` Returns the element at the front of the queue. `boolean empty()` Returns `true` if the queue is empty, `false` otherwise. **Notes:** You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid. Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack\\'s standard operations. **Example 1:** ``` **Input** [\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"] [[], [1], [2], [], [], []] **Output** [null, null, null, 1, 1, false] **Explanation** MyQueue myQueue = new MyQueue(); myQueue.push(1); // queue is: [1] myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue) myQueue.peek(); // return 1 myQueue.pop(); // return 1, queue is [2] myQueue.empty(); // return false ``` **Constraints:** `1 <= x <= 9` At most `100` calls will be made to `push`, `pop`, `peek`, and `empty`. All the calls to `pop` and `peek` are valid. **Follow-up:** Can you implement the queue such that each operation is **amortized** `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer.', 'test_case': [], 'elixir_template': 'defmodule MyQueue do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec push(x :: integer) :: any\\n  def push(x) do\\n    \\n  end\\n\\n  @spec pop() :: integer\\n  def pop() do\\n    \\n  end\\n\\n  @spec peek() :: integer\\n  def peek() do\\n    \\n  end\\n\\n  @spec empty() :: boolean\\n  def empty() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyQueue.init_()\\n# MyQueue.push(x)\\n# param_2 = MyQueue.pop()\\n# param_3 = MyQueue.peek()\\n# param_4 = MyQueue.empty()\\n\\n# MyQueue.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_queue_init_() -> any().\\nmy_queue_init_() ->\\n  .\\n\\n-spec my_queue_push(X :: integer()) -> any().\\nmy_queue_push(X) ->\\n  .\\n\\n-spec my_queue_pop() -> integer().\\nmy_queue_pop() ->\\n  .\\n\\n-spec my_queue_peek() -> integer().\\nmy_queue_peek() ->\\n  .\\n\\n-spec my_queue_empty() -> boolean().\\nmy_queue_empty() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_queue_init_(),\\n%% my_queue_push(X),\\n%% Param_2 = my_queue_pop(),\\n%% Param_3 = my_queue_peek(),\\n%% Param_4 = my_queue_empty(),\\n\\n%% my_queue_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyQueue() {\\n\\n    def push(x: Int): Unit = {\\n        \\n    }\\n\\n    def pop(): Int = {\\n        \\n    }\\n\\n    def peek(): Int = {\\n        \\n    }\\n\\n    def empty(): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyQueue object will be instantiated and called as such:\\n * val obj = new MyQueue()\\n * obj.push(x)\\n * val param_2 = obj.pop()\\n * val param_3 = obj.peek()\\n * val param_4 = obj.empty()\\n */'}\n",
            "Done!733\n",
            "power-of-two 231\n",
            "{'id': 231, 'name': 'power-of-two', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/power-of-two/', 'task_description': 'Given an integer `n`, return _`true` if it is a power of two. Otherwise, return `false`_. An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`. **Example 1:** ``` **Input:** n = 1 **Output:** true **Explanation: **20 = 1 ``` **Example 2:** ``` **Input:** n = 16 **Output:** true **Explanation: **24 = 16 ``` **Example 3:** ``` **Input:** n = 3 **Output:** false ``` **Constraints:** `-231 <= n <= 231 - 1` **Follow up:** Could you solve it without loops/recursion?', 'test_case': [{'label': 'Example 1', 'input': 'n = 1', 'output': 'true Explanation: 2 0 = 1'}, {'label': 'Example 2', 'input': 'n = 16', 'output': 'true Explanation: 2 4 = 16'}, {'label': 'Example 3', 'input': 'n = 3', 'output': 'false Constraints: -2 31 <= n <= 2 31 - 1 Follow up: Could you solve it without loops/recursion?'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_power_of_two(n :: integer) :: boolean\\n  def is_power_of_two(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_power_of_two(N :: integer()) -> boolean().\\nis_power_of_two(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def isPowerOfTwo(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!734\n",
            "kth-smallest-element-in-a-bst 230\n",
            "{'id': 230, 'name': 'kth-smallest-element-in-a-bst', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/kth-smallest-element-in-a-bst/', 'task_description': 'Given the `root` of a binary search tree, and an integer `k`, return _the_ `kth` _smallest value (**1-indexed**) of all the values of the nodes in the tree_. **Example 1:** ``` **Input:** root = [3,1,4,null,2], k = 1 **Output:** 1 ``` **Example 2:** ``` **Input:** root = [5,3,6,2,4,null,null,1], k = 3 **Output:** 3 ``` **Constraints:** The number of nodes in the tree is `n`. `1 <= k <= n <= 104` `0 <= Node.val <= 104` **Follow up:** If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,1,4,null,2], k = 1', 'output': '1'}, {'label': 'Example 2', 'input': 'root = [5,3,6,2,4,null,null,1], k = 3', 'output': '3 Constraints: The number of nodes in the tree is n . 1 <= k <= n <= 10 4 0 <= Node.val <= 10 4 Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec kth_smallest(root :: TreeNode.t | nil, k :: integer) :: integer\\n  def kth_smallest(root, k) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec kth_smallest(Root :: #tree_node{} | null, K :: integer()) -> integer().\\nkth_smallest(Root, K) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def kthSmallest(root: TreeNode, k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!735\n",
            "majority-element-ii 229\n",
            "{'id': 229, 'name': 'majority-element-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/majority-element-ii/', 'task_description': 'Given an integer array of size `n`, find all elements that appear more than `⌊ n/3 ⌋` times. **Example 1:** ``` **Input:** nums = [3,2,3] **Output:** [3] ``` **Example 2:** ``` **Input:** nums = [1] **Output:** [1] ``` **Example 3:** ``` **Input:** nums = [1,2] **Output:** [1,2] ``` **Constraints:** `1 <= nums.length <= 5 * 104` `-109 <= nums[i] <= 109` **Follow up:** Could you solve the problem in linear time and in `O(1)` space?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,2,3]', 'output': '[3]'}, {'label': 'Example 2', 'input': 'nums = [1]', 'output': '[1]'}, {'label': 'Example 3', 'input': 'nums = [1,2]', 'output': '[1,2]'}], 'elixir_template': 'defmodule Solution do\\n  @spec majority_element(nums :: [integer]) :: [integer]\\n  def majority_element(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec majority_element(Nums :: [integer()]) -> [integer()].\\nmajority_element(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def majorityElement(nums: Array[Int]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!736\n",
            "summary-ranges 228\n",
            "{'id': 228, 'name': 'summary-ranges', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/summary-ranges/', 'task_description': 'You are given a **sorted unique** integer array `nums`. A **range** `[a,b]` is the set of all integers from `a` to `b` (inclusive). Return _the **smallest sorted** list of ranges that **cover all the numbers in the array exactly**_. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`. Each range `[a,b]` in the list should be output as: `\"a->b\"` if `a != b` `\"a\"` if `a == b` **Example 1:** ``` **Input:** nums = [0,1,2,4,5,7] **Output:** [\"0->2\",\"4->5\",\"7\"] **Explanation:** The ranges are: [0,2] --> \"0->2\" [4,5] --> \"4->5\" [7,7] --> \"7\" ``` **Example 2:** ``` **Input:** nums = [0,2,3,4,6,8,9] **Output:** [\"0\",\"2->4\",\"6\",\"8->9\"] **Explanation:** The ranges are: [0,0] --> \"0\" [2,4] --> \"2->4\" [6,6] --> \"6\" [8,9] --> \"8->9\" ``` **Constraints:** `0 <= nums.length <= 20` `-231 <= nums[i] <= 231 - 1` All the values of `nums` are **unique**. `nums` is sorted in ascending order.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [0,1,2,4,5,7]', 'output': '[\"0->2\",\"4->5\",\"7\"] Explanation: The ranges are:\\n[0,2] --> \"0->2\"\\n[4,5] --> \"4->5\"\\n[7,7] --> \"7\"'}, {'label': 'Example 2', 'input': 'nums = [0,2,3,4,6,8,9]', 'output': '[\"0\",\"2->4\",\"6\",\"8->9\"] Explanation: The ranges are:\\n[0,0] --> \"0\"\\n[2,4] --> \"2->4\"\\n[6,6] --> \"6\"\\n[8,9] --> \"8->9\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec summary_ranges(nums :: [integer]) :: [String.t]\\n  def summary_ranges(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec summary_ranges(Nums :: [integer()]) -> [unicode:unicode_binary()].\\nsummary_ranges(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def summaryRanges(nums: Array[Int]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!737\n",
            "basic-calculator-ii 227\n",
            "{'id': 227, 'name': 'basic-calculator-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/basic-calculator-ii/', 'task_description': 'Given a string `s` which represents an expression, _evaluate this expression and return its value_. The integer division should truncate toward zero. You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`. **Note:** You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`. **Example 1:** ``` **Input:** s = \"3+2*2\" **Output:** 7 ``` **Example 2:** ``` **Input:** s = \" 3/2 \" **Output:** 1 ``` **Example 3:** ``` **Input:** s = \" 3+5 / 2 \" **Output:** 5 ``` **Constraints:** `1 <= s.length <= 3 * 105` `s` consists of integers and operators `(\\'+\\', \\'-\\', \\'*\\', \\'/\\')` separated by some number of spaces. `s` represents **a valid expression**. All the integers in the expression are non-negative integers in the range `[0, 231 - 1]`. The answer is **guaranteed** to fit in a **32-bit integer**.', 'test_case': [{'label': 'Example 1', 'input': 's = \"3+2*2\"', 'output': '7'}, {'label': 'Example 2', 'input': 's = \" 3/2 \"', 'output': '1'}, {'label': 'Example 3', 'input': 's = \" 3+5 / 2 \"', 'output': '5'}], 'elixir_template': 'defmodule Solution do\\n  @spec calculate(s :: String.t) :: integer\\n  def calculate(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec calculate(S :: unicode:unicode_binary()) -> integer().\\ncalculate(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def calculate(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!738\n",
            "invert-binary-tree 226\n",
            "{'id': 226, 'name': 'invert-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/invert-binary-tree/', 'task_description': 'Given the `root` of a binary tree, invert the tree, and return _its root_. **Example 1:** ``` **Input:** root = [4,2,7,1,3,6,9] **Output:** [4,7,2,9,6,3,1] ``` **Example 2:** ``` **Input:** root = [2,1,3] **Output:** [2,3,1] ``` **Example 3:** ``` **Input:** root = [] **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 100]`. `-100 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [4,2,7,1,3,6,9]', 'output': '[4,7,2,9,6,3,1]'}, {'label': 'Example 2', 'input': 'root = [2,1,3]', 'output': '[2,3,1]'}, {'label': 'Example 3', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 100] . -100 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec invert_tree(root :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def invert_tree(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec invert_tree(Root :: #tree_node{} | null) -> #tree_node{} | null.\\ninvert_tree(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def invertTree(root: TreeNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!739\n",
            "implement-stack-using-queues 225\n",
            "{'id': 225, 'name': 'implement-stack-using-queues', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/implement-stack-using-queues/', 'task_description': 'Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`). Implement the `MyStack` class: `void push(int x)` Pushes element x to the top of the stack. `int pop()` Removes the element on the top of the stack and returns it. `int top()` Returns the element on the top of the stack. `boolean empty()` Returns `true` if the stack is empty, `false` otherwise. Notes: You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid. Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue\\'s standard operations. **Example 1:** ``` **Input** [\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"] [[], [1], [2], [], [], []] **Output** [null, null, null, 2, 2, false] **Explanation** MyStack myStack = new MyStack(); myStack.push(1); myStack.push(2); myStack.top(); // return 2 myStack.pop(); // return 2 myStack.empty(); // return False ``` **Constraints:** `1 <= x <= 9` At most `100` calls will be made to `push`, `pop`, `top`, and `empty`. All the calls to `pop` and `top` are valid. **Follow-up:** Can you implement the stack using only one queue?', 'test_case': [], 'elixir_template': 'defmodule MyStack do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec push(x :: integer) :: any\\n  def push(x) do\\n    \\n  end\\n\\n  @spec pop() :: integer\\n  def pop() do\\n    \\n  end\\n\\n  @spec top() :: integer\\n  def top() do\\n    \\n  end\\n\\n  @spec empty() :: boolean\\n  def empty() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyStack.init_()\\n# MyStack.push(x)\\n# param_2 = MyStack.pop()\\n# param_3 = MyStack.top()\\n# param_4 = MyStack.empty()\\n\\n# MyStack.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec my_stack_init_() -> any().\\nmy_stack_init_() ->\\n  .\\n\\n-spec my_stack_push(X :: integer()) -> any().\\nmy_stack_push(X) ->\\n  .\\n\\n-spec my_stack_pop() -> integer().\\nmy_stack_pop() ->\\n  .\\n\\n-spec my_stack_top() -> integer().\\nmy_stack_top() ->\\n  .\\n\\n-spec my_stack_empty() -> boolean().\\nmy_stack_empty() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_stack_init_(),\\n%% my_stack_push(X),\\n%% Param_2 = my_stack_pop(),\\n%% Param_3 = my_stack_top(),\\n%% Param_4 = my_stack_empty(),\\n\\n%% my_stack_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MyStack() {\\n\\n    def push(x: Int): Unit = {\\n        \\n    }\\n\\n    def pop(): Int = {\\n        \\n    }\\n\\n    def top(): Int = {\\n        \\n    }\\n\\n    def empty(): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyStack object will be instantiated and called as such:\\n * val obj = new MyStack()\\n * obj.push(x)\\n * val param_2 = obj.pop()\\n * val param_3 = obj.top()\\n * val param_4 = obj.empty()\\n */'}\n",
            "Done!740\n",
            "basic-calculator 224\n",
            "{'id': 224, 'name': 'basic-calculator', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/basic-calculator/', 'task_description': 'Given a string `s` representing a valid expression, implement a basic calculator to evaluate it, and return _the result of the evaluation_. **Note:** You are **not** allowed to use any built-in function which evaluates strings as mathematical expressions, such as `eval()`. **Example 1:** ``` **Input:** s = \"1 + 1\" **Output:** 2 ``` **Example 2:** ``` **Input:** s = \" 2-1 + 2 \" **Output:** 3 ``` **Example 3:** ``` **Input:** s = \"(1+(4+5+2)-3)+(6+8)\" **Output:** 23 ``` **Constraints:** `1 <= s.length <= 3 * 105` `s` consists of digits, `\\'+\\'`, `\\'-\\'`, `\\'(\\'`, `\\')\\'`, and `\\' \\'`. `s` represents a valid expression. `\\'+\\'` is **not** used as a unary operation (i.e., `\"+1\"` and `\"+(2 + 3)\"` is invalid). `\\'-\\'` could be used as a unary operation (i.e., `\"-1\"` and `\"-(2 + 3)\"` is valid). There will be no two consecutive operators in the input. Every number and running calculation will fit in a signed 32-bit integer.', 'test_case': [{'label': 'Example 1', 'input': 's = \"1 + 1\"', 'output': '2'}, {'label': 'Example 2', 'input': 's = \" 2-1 + 2 \"', 'output': '3'}, {'label': 'Example 3', 'input': 's = \"(1+(4+5+2)-3)+(6+8)\"', 'output': '23'}], 'elixir_template': 'defmodule Solution do\\n  @spec calculate(s :: String.t) :: integer\\n  def calculate(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec calculate(S :: unicode:unicode_binary()) -> integer().\\ncalculate(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def calculate(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!741\n",
            "rectangle-area 223\n",
            "{'id': 223, 'name': 'rectangle-area', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rectangle-area/', 'task_description': 'Given the coordinates of two **rectilinear** rectangles in a 2D plane, return _the total area covered by the two rectangles_. The first rectangle is defined by its **bottom-left** corner `(ax1, ay1)` and its **top-right** corner `(ax2, ay2)`. The second rectangle is defined by its **bottom-left** corner `(bx1, by1)` and its **top-right** corner `(bx2, by2)`. **Example 1:** ``` **Input:** ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2 **Output:** 45 ``` **Example 2:** ``` **Input:** ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2 **Output:** 16 ``` **Constraints:** `-104 <= ax1 <= ax2 <= 104` `-104 <= ay1 <= ay2 <= 104` `-104 <= bx1 <= bx2 <= 104` `-104 <= by1 <= by2 <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2', 'output': '45'}, {'label': 'Example 2', 'input': 'ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2', 'output': '16 Constraints: -10 4 <= ax1 <= ax2 <= 10 4 -10 4 <= ay1 <= ay2 <= 10 4 -10 4 <= bx1 <= bx2 <= 10 4 -10 4 <= by1 <= by2 <= 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec compute_area(ax1 :: integer, ay1 :: integer, ax2 :: integer, ay2 :: integer, bx1 :: integer, by1 :: integer, bx2 :: integer, by2 :: integer) :: integer\\n  def compute_area(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) do\\n    \\n  end\\nend', 'erlang_template': '-spec compute_area(Ax1 :: integer(), Ay1 :: integer(), Ax2 :: integer(), Ay2 :: integer(), Bx1 :: integer(), By1 :: integer(), Bx2 :: integer(), By2 :: integer()) -> integer().\\ncompute_area(Ax1, Ay1, Ax2, Ay2, Bx1, By1, Bx2, By2) ->\\n  .', 'scala_template': 'object Solution {\\n    def computeArea(ax1: Int, ay1: Int, ax2: Int, ay2: Int, bx1: Int, by1: Int, bx2: Int, by2: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!742\n",
            "count-complete-tree-nodes 222\n",
            "{'id': 222, 'name': 'count-complete-tree-nodes', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/count-complete-tree-nodes/', 'task_description': 'Given the `root` of a **complete** binary tree, return the number of the nodes in the tree. According to **Wikipedia**, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`. Design an algorithm that runs in less than `O(n)` time complexity. **Example 1:** ``` **Input:** root = [1,2,3,4,5,6] **Output:** 6 ``` **Example 2:** ``` **Input:** root = [] **Output:** 0 ``` **Example 3:** ``` **Input:** root = [1] **Output:** 1 ``` **Constraints:** The number of nodes in the tree is in the range `[0, 5 * 104]`. `0 <= Node.val <= 5 * 104` The tree is guaranteed to be **complete**.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,5,6]', 'output': '6'}, {'label': 'Example 2', 'input': 'root = []', 'output': '0'}, {'label': 'Example 3', 'input': 'root = [1]', 'output': '1 Constraints: The number of nodes in the tree is in the range [0, 5 * 10 4 ] . 0 <= Node.val <= 5 * 10 4 The tree is guaranteed to be complete .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec count_nodes(root :: TreeNode.t | nil) :: integer\\n  def count_nodes(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec count_nodes(Root :: #tree_node{} | null) -> integer().\\ncount_nodes(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def countNodes(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!743\n",
            "maximal-square 221\n",
            "{'id': 221, 'name': 'maximal-square', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximal-square/', 'task_description': 'Given an `m x n` binary `matrix` filled with `0`\\'s and `1`\\'s, _find the largest square containing only_ `1`\\'s _and return its area_. **Example 1:** ``` **Input:** matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]] **Output:** 4 ``` **Example 2:** ``` **Input:** matrix = [[\"0\",\"1\"],[\"1\",\"0\"]] **Output:** 1 ``` **Example 3:** ``` **Input:** matrix = [[\"0\"]] **Output:** 0 ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 300` `matrix[i][j]` is `\\'0\\'` or `\\'1\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]', 'output': '4'}, {'label': 'Example 2', 'input': 'matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]', 'output': '1'}, {'label': 'Example 3', 'input': 'matrix = [[\"0\"]]', 'output': \"0 Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 300 matrix[i][j] is '0' or '1' .\"}], 'elixir_template': 'defmodule Solution do\\n  @spec maximal_square(matrix :: [[char]]) :: integer\\n  def maximal_square(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec maximal_square(Matrix :: [[char()]]) -> integer().\\nmaximal_square(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def maximalSquare(matrix: Array[Array[Char]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!744\n",
            "contains-duplicate-iii 220\n",
            "{'id': 220, 'name': 'contains-duplicate-iii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/contains-duplicate-iii/', 'task_description': 'You are given an integer array `nums` and two integers `indexDiff` and `valueDiff`. Find a pair of indices `(i, j)` such that: `i != j`, `abs(i - j) <= indexDiff`. `abs(nums[i] - nums[j]) <= valueDiff`, and Return `true`_ if such pair exists or _`false`_ otherwise_. **Example 1:** ``` **Input:** nums = [1,2,3,1], indexDiff = 3, valueDiff = 0 **Output:** true **Explanation:** We can choose (i, j) = (0, 3). We satisfy the three conditions: i != j --> 0 != 3 abs(i - j) <= indexDiff --> abs(0 - 3) <= 3 abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0 ``` **Example 2:** ``` **Input:** nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3 **Output:** false **Explanation:** After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false. ``` **Constraints:** `2 <= nums.length <= 105` `-109 <= nums[i] <= 109` `1 <= indexDiff <= nums.length` `0 <= valueDiff <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,1], indexDiff = 3, valueDiff = 0', 'output': 'true Explanation: We can choose (i, j) = (0, 3).\\nWe satisfy the three conditions:\\ni != j --> 0 != 3\\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0'}, {'label': 'Example 2', 'input': 'nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3', 'output': 'false Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.'}], 'elixir_template': 'defmodule Solution do\\n  @spec contains_nearby_almost_duplicate(nums :: [integer], index_diff :: integer, value_diff :: integer) :: boolean\\n  def contains_nearby_almost_duplicate(nums, index_diff, value_diff) do\\n    \\n  end\\nend', 'erlang_template': '-spec contains_nearby_almost_duplicate(Nums :: [integer()], IndexDiff :: integer(), ValueDiff :: integer()) -> boolean().\\ncontains_nearby_almost_duplicate(Nums, IndexDiff, ValueDiff) ->\\n  .', 'scala_template': 'object Solution {\\n    def containsNearbyAlmostDuplicate(nums: Array[Int], indexDiff: Int, valueDiff: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!745\n",
            "contains-duplicate-ii 219\n",
            "{'id': 219, 'name': 'contains-duplicate-ii', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/contains-duplicate-ii/', 'task_description': 'Given an integer array `nums` and an integer `k`, return `true` _if there are two **distinct indices** _`i`_ and _`j`_ in the array such that _`nums[i] == nums[j]`_ and _`abs(i - j) <= k`. **Example 1:** ``` **Input:** nums = [1,2,3,1], k = 3 **Output:** true ``` **Example 2:** ``` **Input:** nums = [1,0,1,1], k = 1 **Output:** true ``` **Example 3:** ``` **Input:** nums = [1,2,3,1,2,3], k = 2 **Output:** false ``` **Constraints:** `1 <= nums.length <= 105` `-109 <= nums[i] <= 109` `0 <= k <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,1], k = 3', 'output': 'true'}, {'label': 'Example 2', 'input': 'nums = [1,0,1,1], k = 1', 'output': 'true'}, {'label': 'Example 3', 'input': 'nums = [1,2,3,1,2,3], k = 2', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec contains_nearby_duplicate(nums :: [integer], k :: integer) :: boolean\\n  def contains_nearby_duplicate(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec contains_nearby_duplicate(Nums :: [integer()], K :: integer()) -> boolean().\\ncontains_nearby_duplicate(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def containsNearbyDuplicate(nums: Array[Int], k: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!746\n",
            "the-skyline-problem 218\n",
            "{'id': 218, 'name': 'the-skyline-problem', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/the-skyline-problem/', 'task_description': 'A city\\'s **skyline** is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return _the **skyline** formed by these buildings collectively_. The geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`: `lefti` is the x coordinate of the left edge of the `ith` building. `righti` is the x coordinate of the right edge of the `ith` building. `heighti` is the height of the `ith` building. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`. The **skyline** should be represented as a list of \"key points\" **sorted by their x-coordinate** in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline\\'s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline\\'s contour. Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]` **Example 1:** ``` **Input:** buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]] **Output:** [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]] **Explanation:** Figure A shows the buildings of the input. Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list. ``` **Example 2:** ``` **Input:** buildings = [[0,2,3],[2,5,3]] **Output:** [[0,3],[5,0]] ``` **Constraints:** `1 <= buildings.length <= 104` `0 <= lefti < righti <= 231 - 1` `1 <= heighti <= 231 - 1` `buildings` is sorted by `lefti` in non-decreasing order.', 'test_case': [{'label': 'Example 1', 'input': 'buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]', 'output': '[[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]] Explanation: Figure A shows the buildings of the input.\\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.'}, {'label': 'Example 2', 'input': 'buildings = [[0,2,3],[2,5,3]]', 'output': '[[0,3],[5,0]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec get_skyline(buildings :: [[integer]]) :: [[integer]]\\n  def get_skyline(buildings) do\\n    \\n  end\\nend', 'erlang_template': '-spec get_skyline(Buildings :: [[integer()]]) -> [[integer()]].\\nget_skyline(Buildings) ->\\n  .', 'scala_template': 'object Solution {\\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!747\n",
            "contains-duplicate 217\n",
            "{'id': 217, 'name': 'contains-duplicate', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/contains-duplicate/', 'task_description': 'Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct. **Example 1:** **Input:** nums = [1,2,3,1] **Output:** true **Explanation:** The element 1 occurs at the indices 0 and 3. **Example 2:** **Input:** nums = [1,2,3,4] **Output:** false **Explanation:** All elements are distinct. **Example 3:** **Input:** nums = [1,1,1,3,3,4,3,2,4,2] **Output:** true **Constraints:** `1 <= nums.length <= 105` `-109 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,1]', 'output': 'true Explanation: The element 1 occurs at the indices 0 and 3.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,4]', 'output': 'false Explanation: All elements are distinct.'}, {'label': 'Example 3', 'input': 'nums = [1,1,1,3,3,4,3,2,4,2]', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec contains_duplicate(nums :: [integer]) :: boolean\\n  def contains_duplicate(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec contains_duplicate(Nums :: [integer()]) -> boolean().\\ncontains_duplicate(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def containsDuplicate(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!748\n",
            "combination-sum-iii 216\n",
            "{'id': 216, 'name': 'combination-sum-iii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/combination-sum-iii/', 'task_description': 'Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true: Only numbers `1` through `9` are used. Each number is used **at most once**. Return _a list of all possible valid combinations_. The list must not contain the same combination twice, and the combinations may be returned in any order. **Example 1:** ``` **Input:** k = 3, n = 7 **Output:** [[1,2,4]] **Explanation:** 1 + 2 + 4 = 7 There are no other valid combinations. ``` **Example 2:** ``` **Input:** k = 3, n = 9 **Output:** [[1,2,6],[1,3,5],[2,3,4]] **Explanation:** 1 + 2 + 6 = 9 1 + 3 + 5 = 9 2 + 3 + 4 = 9 There are no other valid combinations. ``` **Example 3:** ``` **Input:** k = 4, n = 1 **Output:** [] **Explanation:** There are no valid combinations. Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination. ``` **Constraints:** `2 <= k <= 9` `1 <= n <= 60`', 'test_case': [{'label': 'Example 1', 'input': 'k = 3, n = 7', 'output': '[[1,2,4]] Explanation: 1 + 2 + 4 = 7\\nThere are no other valid combinations.'}, {'label': 'Example 2', 'input': 'k = 3, n = 9', 'output': '[[1,2,6],[1,3,5],[2,3,4]] Explanation: 1 + 2 + 6 = 9\\n1 + 3 + 5 = 9\\n2 + 3 + 4 = 9\\nThere are no other valid combinations.'}, {'label': 'Example 3', 'input': 'k = 4, n = 1', 'output': '[] Explanation: There are no valid combinations.\\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.'}], 'elixir_template': 'defmodule Solution do\\n  @spec combination_sum3(k :: integer, n :: integer) :: [[integer]]\\n  def combination_sum3(k, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec combination_sum3(K :: integer(), N :: integer()) -> [[integer()]].\\ncombination_sum3(K, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def combinationSum3(k: Int, n: Int): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!749\n",
            "kth-largest-element-in-an-array 215\n",
            "{'id': 215, 'name': 'kth-largest-element-in-an-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/kth-largest-element-in-an-array/', 'task_description': 'Given an integer array `nums` and an integer `k`, return _the_ `kth` _largest element in the array_. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element. Can you solve it without sorting? **Example 1:** ``` **Input:** nums = [3,2,1,5,6,4], k = 2 **Output:** 5 ``` **Example 2:** ``` **Input:** nums = [3,2,3,1,2,4,5,5,6], k = 4 **Output:** 4 ``` **Constraints:** `1 <= k <= nums.length <= 105` `-104 <= nums[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,2,1,5,6,4], k = 2', 'output': '5'}, {'label': 'Example 2', 'input': 'nums = [3,2,3,1,2,4,5,5,6], k = 4', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_kth_largest(nums :: [integer], k :: integer) :: integer\\n  def find_kth_largest(nums, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_kth_largest(Nums :: [integer()], K :: integer()) -> integer().\\nfind_kth_largest(Nums, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!750\n",
            "shortest-palindrome 214\n",
            "{'id': 214, 'name': 'shortest-palindrome', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/shortest-palindrome/', 'task_description': 'You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it. Return _the shortest palindrome you can find by performing this transformation_. **Example 1:** ``` **Input:** s = \"aacecaaa\" **Output:** \"aaacecaaa\" ``` **Example 2:** ``` **Input:** s = \"abcd\" **Output:** \"dcbabcd\" ``` **Constraints:** `0 <= s.length <= 5 * 104` `s` consists of lowercase English letters only.', 'test_case': [{'label': 'Example 1', 'input': 's = \"aacecaaa\"', 'output': '\"aaacecaaa\"'}, {'label': 'Example 2', 'input': 's = \"abcd\"', 'output': '\"dcbabcd\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec shortest_palindrome(s :: String.t) :: String.t\\n  def shortest_palindrome(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec shortest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nshortest_palindrome(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def shortestPalindrome(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!751\n",
            "house-robber-ii 213\n",
            "{'id': 213, 'name': 'house-robber-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/house-robber-ii/', 'task_description': 'You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight **without alerting the police**_. **Example 1:** ``` **Input:** nums = [2,3,2] **Output:** 3 **Explanation:** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. ``` **Example 2:** ``` **Input:** nums = [1,2,3,1] **Output:** 4 **Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. ``` **Example 3:** ``` **Input:** nums = [1,2,3] **Output:** 3 ``` **Constraints:** `1 <= nums.length <= 100` `0 <= nums[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,3,2]', 'output': '3 Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.'}, {'label': 'Example 2', 'input': 'nums = [1,2,3,1]', 'output': '4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\\nTotal amount you can rob = 1 + 3 = 4.'}, {'label': 'Example 3', 'input': 'nums = [1,2,3]', 'output': '3'}], 'elixir_template': 'defmodule Solution do\\n  @spec rob(nums :: [integer]) :: integer\\n  def rob(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec rob(Nums :: [integer()]) -> integer().\\nrob(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def rob(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!752\n",
            "word-search-ii 212\n",
            "{'id': 212, 'name': 'word-search-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/word-search-ii/', 'task_description': 'Given an `m x n` `board` of characters and a list of strings `words`, return _all words on the board_. Each word must be constructed from letters of sequentially adjacent cells, where **adjacent cells** are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. **Example 1:** ``` **Input:** board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"] **Output:** [\"eat\",\"oath\"] ``` **Example 2:** ``` **Input:** board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"] **Output:** [] ``` **Constraints:** `m == board.length` `n == board[i].length` `1 <= m, n <= 12` `board[i][j]` is a lowercase English letter. `1 <= words.length <= 3 * 104` `1 <= words[i].length <= 10` `words[i]` consists of lowercase English letters. All the strings of `words` are unique.', 'test_case': [{'label': 'Example 1', 'input': 'board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]', 'output': '[\"eat\",\"oath\"]'}, {'label': 'Example 2', 'input': 'board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]', 'output': '[] Constraints: m == board.length n == board[i].length 1 <= m, n <= 12 board[i][j] is a lowercase English letter. 1 <= words.length <= 3 * 10 4 1 <= words[i].length <= 10 words[i] consists of lowercase English letters. All the strings of words are unique.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_words(board :: [[char]], words :: [String.t]) :: [String.t]\\n  def find_words(board, words) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_words(Board :: [[char()]], Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nfind_words(Board, Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def findWords(board: Array[Array[Char]], words: Array[String]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!753\n",
            "design-add-and-search-words-data-structure 211\n",
            "{'id': 211, 'name': 'design-add-and-search-words-data-structure', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/design-add-and-search-words-data-structure/', 'task_description': 'Design a data structure that supports adding new words and finding if a string matches any previously added string. Implement the `WordDictionary` class: `WordDictionary()` Initializes the object. `void addWord(word)` Adds `word` to the data structure, it can be matched later. `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `\\'.\\'` where dots can be matched with any letter. **Example:** ``` **Input** [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"] [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]] **Output** [null,null,null,null,false,true,true,true] **Explanation** WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\"bad\"); wordDictionary.addWord(\"dad\"); wordDictionary.addWord(\"mad\"); wordDictionary.search(\"pad\"); // return False wordDictionary.search(\"bad\"); // return True wordDictionary.search(\".ad\"); // return True wordDictionary.search(\"b..\"); // return True ``` **Constraints:** `1 <= word.length <= 25` `word` in `addWord` consists of lowercase English letters. `word` in `search` consist of `\\'.\\'` or lowercase English letters. There will be at most `2` dots in `word` for `search` queries. At most `104` calls will be made to `addWord` and `search`.', 'test_case': [], 'elixir_template': 'defmodule WordDictionary do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec add_word(word :: String.t) :: any\\n  def add_word(word) do\\n    \\n  end\\n\\n  @spec search(word :: String.t) :: boolean\\n  def search(word) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# WordDictionary.init_()\\n# WordDictionary.add_word(word)\\n# param_2 = WordDictionary.search(word)\\n\\n# WordDictionary.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec word_dictionary_init_() -> any().\\nword_dictionary_init_() ->\\n  .\\n\\n-spec word_dictionary_add_word(Word :: unicode:unicode_binary()) -> any().\\nword_dictionary_add_word(Word) ->\\n  .\\n\\n-spec word_dictionary_search(Word :: unicode:unicode_binary()) -> boolean().\\nword_dictionary_search(Word) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% word_dictionary_init_(),\\n%% word_dictionary_add_word(Word),\\n%% Param_2 = word_dictionary_search(Word),\\n\\n%% word_dictionary_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class WordDictionary() {\\n\\n    def addWord(word: String): Unit = {\\n        \\n    }\\n\\n    def search(word: String): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * val obj = new WordDictionary()\\n * obj.addWord(word)\\n * val param_2 = obj.search(word)\\n */'}\n",
            "Done!754\n",
            "course-schedule-ii 210\n",
            "{'id': 210, 'name': 'course-schedule-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/course-schedule-ii/', 'task_description': 'There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`. For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`. Return _the ordering of courses you should take to finish all courses_. If there are many valid answers, return **any** of them. If it is impossible to finish all courses, return **an empty array**. **Example 1:** ``` **Input:** numCourses = 2, prerequisites = [[1,0]] **Output:** [0,1] **Explanation:** There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]. ``` **Example 2:** ``` **Input:** numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] **Output:** [0,2,1,3] **Explanation:** There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3]. ``` **Example 3:** ``` **Input:** numCourses = 1, prerequisites = [] **Output:** [0] ``` **Constraints:** `1 <= numCourses <= 2000` `0 <= prerequisites.length <= numCourses * (numCourses - 1)` `prerequisites[i].length == 2` `0 <= ai, bi < numCourses` `ai != bi` All the pairs `[ai, bi]` are **distinct**.', 'test_case': [{'label': 'Example 1', 'input': 'numCourses = 2, prerequisites = [[1,0]]', 'output': '[0,1] Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].'}, {'label': 'Example 2', 'input': 'numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]', 'output': '[0,2,1,3] Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].'}, {'label': 'Example 3', 'input': 'numCourses = 1, prerequisites = []', 'output': '[0]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_order(num_courses :: integer, prerequisites :: [[integer]]) :: [integer]\\n  def find_order(num_courses, prerequisites) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_order(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> [integer()].\\nfind_order(NumCourses, Prerequisites) ->\\n  .', 'scala_template': 'object Solution {\\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!755\n",
            "minimum-size-subarray-sum 209\n",
            "{'id': 209, 'name': 'minimum-size-subarray-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-size-subarray-sum/', 'task_description': 'Given an array of positive integers `nums` and a positive integer `target`, return _the **minimal length** of a __subarray__ whose sum is greater than or equal to_ `target`. If there is no such subarray, return `0` instead. **Example 1:** ``` **Input:** target = 7, nums = [2,3,1,2,4,3] **Output:** 2 **Explanation:** The subarray [4,3] has the minimal length under the problem constraint. ``` **Example 2:** ``` **Input:** target = 4, nums = [1,4,4] **Output:** 1 ``` **Example 3:** ``` **Input:** target = 11, nums = [1,1,1,1,1,1,1,1] **Output:** 0 ``` **Constraints:** `1 <= target <= 109` `1 <= nums.length <= 105` `1 <= nums[i] <= 104` **Follow up:** If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`.', 'test_case': [{'label': 'Example 1', 'input': 'target = 7, nums = [2,3,1,2,4,3]', 'output': '2 Explanation: The subarray [4,3] has the minimal length under the problem constraint.'}, {'label': 'Example 2', 'input': 'target = 4, nums = [1,4,4]', 'output': '1'}, {'label': 'Example 3', 'input': 'target = 11, nums = [1,1,1,1,1,1,1,1]', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_sub_array_len(target :: integer, nums :: [integer]) :: integer\\n  def min_sub_array_len(target, nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_sub_array_len(Target :: integer(), Nums :: [integer()]) -> integer().\\nmin_sub_array_len(Target, Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def minSubArrayLen(target: Int, nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!756\n",
            "implement-trie-prefix-tree 208\n",
            "{'id': 208, 'name': 'implement-trie-prefix-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/implement-trie-prefix-tree/', 'task_description': 'A **trie** (pronounced as \"try\") or **prefix tree** is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker. Implement the Trie class: `Trie()` Initializes the trie object. `void insert(String word)` Inserts the string `word` into the trie. `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise. `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise. **Example 1:** ``` **Input** [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"] [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]] **Output** [null, null, true, false, true, null, true] **Explanation** Trie trie = new Trie(); trie.insert(\"apple\"); trie.search(\"apple\"); // return True trie.search(\"app\"); // return False trie.startsWith(\"app\"); // return True trie.insert(\"app\"); trie.search(\"app\"); // return True ``` **Constraints:** `1 <= word.length, prefix.length <= 2000` `word` and `prefix` consist only of lowercase English letters. At most `3 * 104` calls **in total** will be made to `insert`, `search`, and `startsWith`.', 'test_case': [], 'elixir_template': 'defmodule Trie do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec insert(word :: String.t) :: any\\n  def insert(word) do\\n    \\n  end\\n\\n  @spec search(word :: String.t) :: boolean\\n  def search(word) do\\n    \\n  end\\n\\n  @spec starts_with(prefix :: String.t) :: boolean\\n  def starts_with(prefix) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Trie.init_()\\n# Trie.insert(word)\\n# param_2 = Trie.search(word)\\n# param_3 = Trie.starts_with(prefix)\\n\\n# Trie.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec trie_init_() -> any().\\ntrie_init_() ->\\n  .\\n\\n-spec trie_insert(Word :: unicode:unicode_binary()) -> any().\\ntrie_insert(Word) ->\\n  .\\n\\n-spec trie_search(Word :: unicode:unicode_binary()) -> boolean().\\ntrie_search(Word) ->\\n  .\\n\\n-spec trie_starts_with(Prefix :: unicode:unicode_binary()) -> boolean().\\ntrie_starts_with(Prefix) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% trie_init_(),\\n%% trie_insert(Word),\\n%% Param_2 = trie_search(Word),\\n%% Param_3 = trie_starts_with(Prefix),\\n\\n%% trie_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class Trie() {\\n\\n    def insert(word: String): Unit = {\\n        \\n    }\\n\\n    def search(word: String): Boolean = {\\n        \\n    }\\n\\n    def startsWith(prefix: String): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * val obj = new Trie()\\n * obj.insert(word)\\n * val param_2 = obj.search(word)\\n * val param_3 = obj.startsWith(prefix)\\n */'}\n",
            "Done!757\n",
            "course-schedule 207\n",
            "{'id': 207, 'name': 'course-schedule', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/course-schedule/', 'task_description': 'There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi` first if you want to take course `ai`. For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`. Return `true` if you can finish all courses. Otherwise, return `false`. **Example 1:** ``` **Input:** numCourses = 2, prerequisites = [[1,0]] **Output:** true **Explanation:** There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. ``` **Example 2:** ``` **Input:** numCourses = 2, prerequisites = [[1,0],[0,1]] **Output:** false **Explanation:** There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. ``` **Constraints:** `1 <= numCourses <= 2000` `0 <= prerequisites.length <= 5000` `prerequisites[i].length == 2` `0 <= ai, bi < numCourses` All the pairs prerequisites[i] are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'numCourses = 2, prerequisites = [[1,0]]', 'output': 'true Explanation: There are a total of 2 courses to take. \\nTo take course 1 you should have finished course 0. So it is possible.'}, {'label': 'Example 2', 'input': 'numCourses = 2, prerequisites = [[1,0],[0,1]]', 'output': 'false Explanation: There are a total of 2 courses to take. \\nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_finish(num_courses :: integer, prerequisites :: [[integer]]) :: boolean\\n  def can_finish(num_courses, prerequisites) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_finish(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> boolean().\\ncan_finish(NumCourses, Prerequisites) ->\\n  .', 'scala_template': 'object Solution {\\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!758\n",
            "reverse-linked-list 206\n",
            "{'id': 206, 'name': 'reverse-linked-list', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/reverse-linked-list/', 'task_description': 'Given the `head` of a singly linked list, reverse the list, and return _the reversed list_. **Example 1:** ``` **Input:** head = [1,2,3,4,5] **Output:** [5,4,3,2,1] ``` **Example 2:** ``` **Input:** head = [1,2] **Output:** [2,1] ``` **Example 3:** ``` **Input:** head = [] **Output:** [] ``` **Constraints:** The number of nodes in the list is the range `[0, 5000]`. `-5000 <= Node.val <= 5000` **Follow up:** A linked list can be reversed either iteratively or recursively. Could you implement both?', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5]', 'output': '[5,4,3,2,1]'}, {'label': 'Example 2', 'input': 'head = [1,2]', 'output': '[2,1]'}, {'label': 'Example 3', 'input': 'head = []', 'output': '[] Constraints: The number of nodes in the list is the range [0, 5000] . -5000 <= Node.val <= 5000 Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec reverse_list(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def reverse_list(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec reverse_list(Head :: #list_node{} | null) -> #list_node{} | null.\\nreverse_list(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def reverseList(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!759\n",
            "isomorphic-strings 205\n",
            "{'id': 205, 'name': 'isomorphic-strings', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/isomorphic-strings/', 'task_description': 'Given two strings `s` and `t`, _determine if they are isomorphic_. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. **Example 1:** **Input:** s = \"egg\", t = \"add\" **Output:** true **Explanation:** The strings `s` and `t` can be made identical by: Mapping `\\'e\\'` to `\\'a\\'`. Mapping `\\'g\\'` to `\\'d\\'`. **Example 2:** **Input:** s = \"foo\", t = \"bar\" **Output:** false **Explanation:** The strings `s` and `t` can not be made identical as `\\'o\\'` needs to be mapped to both `\\'a\\'` and `\\'r\\'`. **Example 3:** **Input:** s = \"paper\", t = \"title\" **Output:** true **Constraints:** `1 <= s.length <= 5 * 104` `t.length == s.length` `s` and `t` consist of any valid ascii character.', 'test_case': [{'label': 'Example 1', 'input': 's = \"egg\", t = \"add\"', 'output': \"true Explanation: The strings s and t can be made identical by: Mapping 'e' to 'a' . Mapping 'g' to 'd' .\"}, {'label': 'Example 2', 'input': 's = \"foo\", t = \"bar\"', 'output': \"false Explanation: The strings s and t can not be made identical as 'o' needs to be mapped to both 'a' and 'r' .\"}, {'label': 'Example 3', 'input': 's = \"paper\", t = \"title\"', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_isomorphic(s :: String.t, t :: String.t) :: boolean\\n  def is_isomorphic(s, t) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_isomorphic(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\\nis_isomorphic(S, T) ->\\n  .', 'scala_template': 'object Solution {\\n    def isIsomorphic(s: String, t: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!760\n",
            "count-primes 204\n",
            "{'id': 204, 'name': 'count-primes', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/count-primes/', 'task_description': 'Given an integer `n`, return _the number of prime numbers that are strictly less than_ `n`. **Example 1:** ``` **Input:** n = 10 **Output:** 4 **Explanation:** There are 4 prime numbers less than 10, they are 2, 3, 5, 7. ``` **Example 2:** ``` **Input:** n = 0 **Output:** 0 ``` **Example 3:** ``` **Input:** n = 1 **Output:** 0 ``` **Constraints:** `0 <= n <= 5 * 106`', 'test_case': [{'label': 'Example 1', 'input': 'n = 10', 'output': '4 Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.'}, {'label': 'Example 2', 'input': 'n = 0', 'output': '0'}, {'label': 'Example 3', 'input': 'n = 1', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_primes(n :: integer) :: integer\\n  def count_primes(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_primes(N :: integer()) -> integer().\\ncount_primes(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def countPrimes(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!761\n",
            "remove-linked-list-elements 203\n",
            "{'id': 203, 'name': 'remove-linked-list-elements', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/remove-linked-list-elements/', 'task_description': 'Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return _the new head_. **Example 1:** ``` **Input:** head = [1,2,6,3,4,5,6], val = 6 **Output:** [1,2,3,4,5] ``` **Example 2:** ``` **Input:** head = [], val = 1 **Output:** [] ``` **Example 3:** ``` **Input:** head = [7,7,7,7], val = 7 **Output:** [] ``` **Constraints:** The number of nodes in the list is in the range `[0, 104]`. `1 <= Node.val <= 50` `0 <= val <= 50`', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,6,3,4,5,6], val = 6', 'output': '[1,2,3,4,5]'}, {'label': 'Example 2', 'input': 'head = [], val = 1', 'output': '[]'}, {'label': 'Example 3', 'input': 'head = [7,7,7,7], val = 7', 'output': '[] Constraints: The number of nodes in the list is in the range [0, 10 4 ] . 1 <= Node.val <= 50 0 <= val <= 50'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec remove_elements(head :: ListNode.t | nil, val :: integer) :: ListNode.t | nil\\n  def remove_elements(head, val) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec remove_elements(Head :: #list_node{} | null, Val :: integer()) -> #list_node{} | null.\\nremove_elements(Head, Val) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def removeElements(head: ListNode, `val`: Int): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!762\n",
            "happy-number 202\n",
            "{'id': 202, 'name': 'happy-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/happy-number/', 'task_description': 'Write an algorithm to determine if a number `n` is happy. A **happy number** is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits. Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1. Those numbers for which this process **ends in 1** are happy. Return `true` _if_ `n` _is a happy number, and_ `false` _if not_. **Example 1:** ``` **Input:** n = 19 **Output:** true **Explanation:** 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 ``` **Example 2:** ``` **Input:** n = 2 **Output:** false ``` **Constraints:** `1 <= n <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'n = 19', 'output': 'true Explanation: 1 2 + 9 2 = 82\\n8 2 + 2 2 = 68\\n6 2 + 8 2 = 100\\n1 2 + 0 2 + 0 2 = 1'}, {'label': 'Example 2', 'input': 'n = 2', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_happy(n :: integer) :: boolean\\n  def is_happy(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_happy(N :: integer()) -> boolean().\\nis_happy(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def isHappy(n: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!763\n",
            "bitwise-and-of-numbers-range 201\n",
            "{'id': 201, 'name': 'bitwise-and-of-numbers-range', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/bitwise-and-of-numbers-range/', 'task_description': 'Given two integers `left` and `right` that represent the range `[left, right]`, return _the bitwise AND of all numbers in this range, inclusive_. **Example 1:** ``` **Input:** left = 5, right = 7 **Output:** 4 ``` **Example 2:** ``` **Input:** left = 0, right = 0 **Output:** 0 ``` **Example 3:** ``` **Input:** left = 1, right = 2147483647 **Output:** 0 ``` **Constraints:** `0 <= left <= right <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'left = 5, right = 7', 'output': '4'}, {'label': 'Example 2', 'input': 'left = 0, right = 0', 'output': '0'}, {'label': 'Example 3', 'input': 'left = 1, right = 2147483647', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec range_bitwise_and(left :: integer, right :: integer) :: integer\\n  def range_bitwise_and(left, right) do\\n    \\n  end\\nend', 'erlang_template': '-spec range_bitwise_and(Left :: integer(), Right :: integer()) -> integer().\\nrange_bitwise_and(Left, Right) ->\\n  .', 'scala_template': 'object Solution {\\n    def rangeBitwiseAnd(left: Int, right: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!764\n",
            "number-of-islands 200\n",
            "{'id': 200, 'name': 'number-of-islands', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/number-of-islands/', 'task_description': 'Given an `m x n` 2D binary grid `grid` which represents a map of `\\'1\\'`s (land) and `\\'0\\'`s (water), return _the number of islands_. An **island** is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. **Example 1:** ``` **Input:** grid = [ [\"1\",\"1\",\"1\",\"1\",\"0\"], [\"1\",\"1\",\"0\",\"1\",\"0\"], [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\"] ] **Output:** 1 ``` **Example 2:** ``` **Input:** grid = [ [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"1\",\"1\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"1\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"1\",\"1\"] ] **Output:** 3 ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 300` `grid[i][j]` is `\\'0\\'` or `\\'1\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'grid = [\\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\\n]', 'output': '1'}, {'label': 'Example 2', 'input': 'grid = [\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\\n]', 'output': \"3 Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 300 grid[i][j] is '0' or '1' .\"}], 'elixir_template': 'defmodule Solution do\\n  @spec num_islands(grid :: [[char]]) :: integer\\n  def num_islands(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_islands(Grid :: [[char()]]) -> integer().\\nnum_islands(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def numIslands(grid: Array[Array[Char]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!765\n",
            "binary-tree-right-side-view 199\n",
            "{'id': 199, 'name': 'binary-tree-right-side-view', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-tree-right-side-view/', 'task_description': 'Given the `root` of a binary tree, imagine yourself standing on the **right side** of it, return _the values of the nodes you can see ordered from top to bottom_. **Example 1:** **Input:** root = [1,2,3,null,5,null,4] **Output:** [1,3,4] **Explanation:** **Example 2:** **Input:** root = [1,2,3,4,null,null,null,5] **Output:** [1,3,4,5] **Explanation:** **Example 3:** **Input:** root = [1,null,3] **Output:** [1,3] **Example 4:** **Input:** root = [] **Output:** [] **Constraints:** The number of nodes in the tree is in the range `[0, 100]`. `-100 <= Node.val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,null,5,null,4]', 'output': '[1,3,4] Explanation:'}, {'label': 'Example 2', 'input': 'root = [1,2,3,4,null,null,null,5]', 'output': '[1,3,4,5] Explanation:'}, {'label': 'Example 3', 'input': 'root = [1,null,3]', 'output': '[1,3]'}, {'label': 'Example 4', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 100] . -100 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec right_side_view(root :: TreeNode.t | nil) :: [integer]\\n  def right_side_view(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec right_side_view(Root :: #tree_node{} | null) -> [integer()].\\nright_side_view(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def rightSideView(root: TreeNode): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!766\n",
            "house-robber 198\n",
            "{'id': 198, 'name': 'house-robber', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/house-robber/', 'task_description': 'You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array `nums` representing the amount of money of each house, return _the maximum amount of money you can rob tonight without alerting the police_. **Example 1:** ``` **Input:** nums = [1,2,3,1] **Output:** 4 **Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. ``` **Example 2:** ``` **Input:** nums = [2,7,9,3,1] **Output:** 12 **Explanation:** Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. ``` **Constraints:** `1 <= nums.length <= 100` `0 <= nums[i] <= 400`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,1]', 'output': '4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\\nTotal amount you can rob = 1 + 3 = 4.'}, {'label': 'Example 2', 'input': 'nums = [2,7,9,3,1]', 'output': '12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\\nTotal amount you can rob = 2 + 9 + 1 = 12.'}], 'elixir_template': 'defmodule Solution do\\n  @spec rob(nums :: [integer]) :: integer\\n  def rob(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec rob(Nums :: [integer()]) -> integer().\\nrob(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def rob(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!767\n",
            "number-of-1-bits 191\n",
            "{'id': 191, 'name': 'number-of-1-bits', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/number-of-1-bits/', 'task_description': 'Given a positive integer `n`, write a function that returns the number of set bits in its binary representation (also known as the Hamming weight). **Example 1:** **Input:** n = 11 **Output:** 3 **Explanation:** The input binary string **1011** has a total of three set bits. **Example 2:** **Input:** n = 128 **Output:** 1 **Explanation:** The input binary string **10000000** has a total of one set bit. **Example 3:** **Input:** n = 2147483645 **Output:** 30 **Explanation:** The input binary string **1111111111111111111111111111101** has a total of thirty set bits. **Constraints:** `1 <= n <= 231 - 1` **Follow up:** If this function is called many times, how would you optimize it?', 'test_case': [{'label': 'Example 1', 'input': 'n = 11', 'output': '3 Explanation: The input binary string 1011 has a total of three set bits.'}, {'label': 'Example 2', 'input': 'n = 128', 'output': '1 Explanation: The input binary string 10000000 has a total of one set bit.'}, {'label': 'Example 3', 'input': 'n = 2147483645', 'output': '30 Explanation: The input binary string 1111111111111111111111111111101 has a total of thirty set bits.'}], 'elixir_template': 'defmodule Solution do\\n  @spec hamming_weight(n :: integer) :: integer\\n  def hamming_weight(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec hamming_weight(N :: integer()) -> integer().\\nhamming_weight(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def hammingWeight(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!768\n",
            "reverse-bits 190\n",
            "{'id': 190, 'name': 'reverse-bits', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/reverse-bits/', 'task_description': \"Reverse bits of a given 32 bits unsigned integer. **Note:** Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in **Example 2** above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`. **Example 1:** ``` **Input:** n = 00000010100101000001111010011100 **Output:** 964176192 (00111001011110000010100101000000) **Explanation: **The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**. ``` **Example 2:** ``` **Input:** n = 11111111111111111111111111111101 **Output:** 3221225471 (10111111111111111111111111111111) **Explanation: **The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**. ``` **Constraints:** The input must be a **binary string** of length `32` **Follow up:** If this function is called many times, how would you optimize it?\", 'test_case': [{'label': 'Example 1', 'input': 'n = 00000010100101000001111010011100', 'output': '964176192 (00111001011110000010100101000000) Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000 .'}, {'label': 'Example 2', 'input': 'n = 11111111111111111111111111111101', 'output': '3221225471 (10111111111111111111111111111111) Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111 . Constraints: The input must be a binary string of length 32 Follow up: If this function is called many times, how would you optimize it?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    // you need treat n as an unsigned value\\n    def reverseBits(x: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!769\n",
            "rotate-array 189\n",
            "{'id': 189, 'name': 'rotate-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rotate-array/', 'task_description': 'Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative. **Example 1:** ``` **Input:** nums = [1,2,3,4,5,6,7], k = 3 **Output:** [5,6,7,1,2,3,4] **Explanation:** rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] ``` **Example 2:** ``` **Input:** nums = [-1,-100,3,99], k = 2 **Output:** [3,99,-1,-100] **Explanation:** rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100] ``` **Constraints:** `1 <= nums.length <= 105` `-231 <= nums[i] <= 231 - 1` `0 <= k <= 105` **Follow up:** Try to come up with as many solutions as you can. There are at least **three** different ways to solve this problem. Could you do it in-place with `O(1)` extra space?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,4,5,6,7], k = 3', 'output': '[5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6]\\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\\nrotate 3 steps to the right: [5,6,7,1,2,3,4]'}, {'label': 'Example 2', 'input': 'nums = [-1,-100,3,99], k = 2', 'output': '[3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3]\\nrotate 2 steps to the right: [3,99,-1,-100]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def rotate(nums: Array[Int], k: Int): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!770\n",
            "best-time-to-buy-and-sell-stock-iv 188\n",
            "{'id': 188, 'name': 'best-time-to-buy-and-sell-stock-iv', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/', 'task_description': 'You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`. Find the maximum profit you can achieve. You may complete at most `k` transactions: i.e. you may buy at most `k` times and sell at most `k` times. **Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). **Example 1:** ``` **Input:** k = 2, prices = [2,4,1] **Output:** 2 **Explanation:** Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2. ``` **Example 2:** ``` **Input:** k = 2, prices = [3,2,6,5,0,3] **Output:** 7 **Explanation:** Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. ``` **Constraints:** `1 <= k <= 100` `1 <= prices.length <= 1000` `0 <= prices[i] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'k = 2, prices = [2,4,1]', 'output': '2 Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.'}, {'label': 'Example 2', 'input': 'k = 2, prices = [3,2,6,5,0,3]', 'output': '7 Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_profit(k :: integer, prices :: [integer]) :: integer\\n  def max_profit(k, prices) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_profit(K :: integer(), Prices :: [integer()]) -> integer().\\nmax_profit(K, Prices) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProfit(k: Int, prices: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!771\n",
            "repeated-dna-sequences 187\n",
            "{'id': 187, 'name': 'repeated-dna-sequences', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/repeated-dna-sequences/', 'task_description': 'The **DNA sequence** is composed of a series of nucleotides abbreviated as `\\'A\\'`, `\\'C\\'`, `\\'G\\'`, and `\\'T\\'`. For example, `\"ACGAATTCCG\"` is a **DNA sequence**. When studying **DNA**, it is useful to identify repeated sequences within the DNA. Given a string `s` that represents a **DNA sequence**, return all the **`10`-letter-long** sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in **any order**. **Example 1:** ``` **Input:** s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\" **Output:** [\"AAAAACCCCC\",\"CCCCCAAAAA\"] ``` **Example 2:** ``` **Input:** s = \"AAAAAAAAAAAAA\" **Output:** [\"AAAAAAAAAA\"] ``` **Constraints:** `1 <= s.length <= 105` `s[i]` is either `\\'A\\'`, `\\'C\\'`, `\\'G\\'`, or `\\'T\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"', 'output': '[\"AAAAACCCCC\",\"CCCCCAAAAA\"]'}, {'label': 'Example 2', 'input': 's = \"AAAAAAAAAAAAA\"', 'output': '[\"AAAAAAAAAA\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_repeated_dna_sequences(s :: String.t) :: [String.t]\\n  def find_repeated_dna_sequences(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_repeated_dna_sequences(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nfind_repeated_dna_sequences(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def findRepeatedDnaSequences(s: String): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!772\n",
            "largest-number 179\n",
            "{'id': 179, 'name': 'largest-number', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/largest-number/', 'task_description': 'Given a list of non-negative integers `nums`, arrange them such that they form the largest number and return it. Since the result may be very large, so you need to return a string instead of an integer. **Example 1:** ``` **Input:** nums = [10,2] **Output:** \"210\" ``` **Example 2:** ``` **Input:** nums = [3,30,34,5,9] **Output:** \"9534330\" ``` **Constraints:** `1 <= nums.length <= 100` `0 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [10,2]', 'output': '\"210\"'}, {'label': 'Example 2', 'input': 'nums = [3,30,34,5,9]', 'output': '\"9534330\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_number(nums :: [integer]) :: String.t\\n  def largest_number(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_number(Nums :: [integer()]) -> unicode:unicode_binary().\\nlargest_number(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestNumber(nums: Array[Int]): String = {\\n        \\n    }\\n}'}\n",
            "Done!773\n",
            "dungeon-game 174\n",
            "{'id': 174, 'name': 'dungeon-game', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/dungeon-game/', 'task_description': \"The demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess. The knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately. Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers). To reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step. Return _the knight's minimum initial health so that he can rescue the princess_. **Note** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned. **Example 1:** ``` **Input:** dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]] **Output:** 7 **Explanation:** The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN. ``` **Example 2:** ``` **Input:** dungeon = [[0]] **Output:** 1 ``` **Constraints:** `m == dungeon.length` `n == dungeon[i].length` `1 <= m, n <= 200` `-1000 <= dungeon[i][j] <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]', 'output': '7 Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.'}, {'label': 'Example 2', 'input': 'dungeon = [[0]]', 'output': '1 Constraints: m == dungeon.length n == dungeon[i].length 1 <= m, n <= 200 -1000 <= dungeon[i][j] <= 1000'}], 'elixir_template': 'defmodule Solution do\\n  @spec calculate_minimum_hp(dungeon :: [[integer]]) :: integer\\n  def calculate_minimum_hp(dungeon) do\\n    \\n  end\\nend', 'erlang_template': '-spec calculate_minimum_hp(Dungeon :: [[integer()]]) -> integer().\\ncalculate_minimum_hp(Dungeon) ->\\n  .', 'scala_template': 'object Solution {\\n    def calculateMinimumHP(dungeon: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!774\n",
            "binary-search-tree-iterator 173\n",
            "{'id': 173, 'name': 'binary-search-tree-iterator', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-search-tree-iterator/', 'task_description': 'Implement the `BSTIterator` class that represents an iterator over the **in-order traversal** of a binary search tree (BST): `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST. `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`. `int next()` Moves the pointer to the right, then returns the number at the pointer. Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST. You may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called. **Example 1:** ``` **Input** [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"] [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []] **Output** [null, 3, 7, true, 9, true, 15, true, 20, false] **Explanation** BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); bSTIterator.next(); // return 3 bSTIterator.next(); // return 7 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 9 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 15 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 20 bSTIterator.hasNext(); // return False ``` **Constraints:** The number of nodes in the tree is in the range `[1, 105]`. `0 <= Node.val <= 106` At most `105` calls will be made to `hasNext`, and `next`. **Follow up:** Could you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?', 'test_case': [], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule BSTIterator do\\n  @spec init_(root :: TreeNode.t | nil) :: any\\n  def init_(root) do\\n    \\n  end\\n\\n  @spec next() :: integer\\n  def next() do\\n    \\n  end\\n\\n  @spec has_next() :: boolean\\n  def has_next() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# BSTIterator.init_(root)\\n# param_1 = BSTIterator.next()\\n# param_2 = BSTIterator.has_next()\\n\\n# BSTIterator.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec bst_iterator_init_(Root :: #tree_node{} | null) -> any().\\nbst_iterator_init_(Root) ->\\n  .\\n\\n-spec bst_iterator_next() -> integer().\\nbst_iterator_next() ->\\n  .\\n\\n-spec bst_iterator_has_next() -> boolean().\\nbst_iterator_has_next() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% bst_iterator_init_(Root),\\n%% Param_1 = bst_iterator_next(),\\n%% Param_2 = bst_iterator_has_next(),\\n\\n%% bst_iterator_init_ will be called before every test case, in which you can do some necessary initializations.\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nclass BSTIterator(_root: TreeNode) {\\n\\n    def next(): Int = {\\n        \\n    }\\n\\n    def hasNext(): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * val obj = new BSTIterator(root)\\n * val param_1 = obj.next()\\n * val param_2 = obj.hasNext()\\n */'}\n",
            "Done!775\n",
            "factorial-trailing-zeroes 172\n",
            "{'id': 172, 'name': 'factorial-trailing-zeroes', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/factorial-trailing-zeroes/', 'task_description': 'Given an integer `n`, return _the number of trailing zeroes in _`n!`. Note that `n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1`. **Example 1:** ``` **Input:** n = 3 **Output:** 0 **Explanation:** 3! = 6, no trailing zero. ``` **Example 2:** ``` **Input:** n = 5 **Output:** 1 **Explanation:** 5! = 120, one trailing zero. ``` **Example 3:** ``` **Input:** n = 0 **Output:** 0 ``` **Constraints:** `0 <= n <= 104` **Follow up:** Could you write a solution that works in logarithmic time complexity?', 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '0 Explanation: 3! = 6, no trailing zero.'}, {'label': 'Example 2', 'input': 'n = 5', 'output': '1 Explanation: 5! = 120, one trailing zero.'}, {'label': 'Example 3', 'input': 'n = 0', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec trailing_zeroes(n :: integer) :: integer\\n  def trailing_zeroes(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec trailing_zeroes(N :: integer()) -> integer().\\ntrailing_zeroes(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def trailingZeroes(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!776\n",
            "excel-sheet-column-number 171\n",
            "{'id': 171, 'name': 'excel-sheet-column-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/excel-sheet-column-number/', 'task_description': 'Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return _its corresponding column number_. For example: ``` A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28 ... ``` **Example 1:** ``` **Input:** columnTitle = \"A\" **Output:** 1 ``` **Example 2:** ``` **Input:** columnTitle = \"AB\" **Output:** 28 ``` **Example 3:** ``` **Input:** columnTitle = \"ZY\" **Output:** 701 ``` **Constraints:** `1 <= columnTitle.length <= 7` `columnTitle` consists only of uppercase English letters. `columnTitle` is in the range `[\"A\", \"FXSHRXW\"]`.', 'test_case': [{'label': 'Example 1', 'input': 'columnTitle = \"A\"', 'output': '1'}, {'label': 'Example 2', 'input': 'columnTitle = \"AB\"', 'output': '28'}, {'label': 'Example 3', 'input': 'columnTitle = \"ZY\"', 'output': '701'}], 'elixir_template': 'defmodule Solution do\\n  @spec title_to_number(column_title :: String.t) :: integer\\n  def title_to_number(column_title) do\\n    \\n  end\\nend', 'erlang_template': '-spec title_to_number(ColumnTitle :: unicode:unicode_binary()) -> integer().\\ntitle_to_number(ColumnTitle) ->\\n  .', 'scala_template': 'object Solution {\\n    def titleToNumber(columnTitle: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!777\n",
            "majority-element 169\n",
            "{'id': 169, 'name': 'majority-element', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/majority-element/', 'task_description': 'Given an array `nums` of size `n`, return _the majority element_. The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array. **Example 1:** ``` **Input:** nums = [3,2,3] **Output:** 3 ``` **Example 2:** ``` **Input:** nums = [2,2,1,1,1,2,2] **Output:** 2 ``` **Constraints:** `n == nums.length` `1 <= n <= 5 * 104` `-109 <= nums[i] <= 109` **Follow-up:** Could you solve the problem in linear time and in `O(1)` space?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,2,3]', 'output': '3'}, {'label': 'Example 2', 'input': 'nums = [2,2,1,1,1,2,2]', 'output': '2 Constraints: n == nums.length 1 <= n <= 5 * 10 4 -10 9 <= nums[i] <= 10 9 Follow-up: Could you solve the problem in linear time and in O(1) space?'}], 'elixir_template': 'defmodule Solution do\\n  @spec majority_element(nums :: [integer]) :: integer\\n  def majority_element(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec majority_element(Nums :: [integer()]) -> integer().\\nmajority_element(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def majorityElement(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!778\n",
            "excel-sheet-column-title 168\n",
            "{'id': 168, 'name': 'excel-sheet-column-title', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/excel-sheet-column-title/', 'task_description': 'Given an integer `columnNumber`, return _its corresponding column title as it appears in an Excel sheet_. For example: ``` A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28 ... ``` **Example 1:** ``` **Input:** columnNumber = 1 **Output:** \"A\" ``` **Example 2:** ``` **Input:** columnNumber = 28 **Output:** \"AB\" ``` **Example 3:** ``` **Input:** columnNumber = 701 **Output:** \"ZY\" ``` **Constraints:** `1 <= columnNumber <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'columnNumber = 1', 'output': '\"A\"'}, {'label': 'Example 2', 'input': 'columnNumber = 28', 'output': '\"AB\"'}, {'label': 'Example 3', 'input': 'columnNumber = 701', 'output': '\"ZY\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec convert_to_title(column_number :: integer) :: String.t\\n  def convert_to_title(column_number) do\\n    \\n  end\\nend', 'erlang_template': '-spec convert_to_title(ColumnNumber :: integer()) -> unicode:unicode_binary().\\nconvert_to_title(ColumnNumber) ->\\n  .', 'scala_template': 'object Solution {\\n    def convertToTitle(columnNumber: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!779\n",
            "two-sum-ii-input-array-is-sorted 167\n",
            "{'id': 167, 'name': 'two-sum-ii-input-array-is-sorted', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/', 'task_description': 'Given a **1-indexed** array of integers `numbers` that is already **_sorted in non-decreasing order_**, find two numbers such that they add up to a specific `target` number. Let these two numbers be `numbers[index1]` and `numbers[index2]` where `1 <= index1 < index2 <= numbers.length`. Return_ the indices of the two numbers, _`index1`_ and _`index2`_, **added by one** as an integer array _`[index1, index2]`_ of length 2._ The tests are generated such that there is **exactly one solution**. You **may not** use the same element twice. Your solution must use only constant extra space. **Example 1:** ``` **Input:** numbers = [2,7,11,15], target = 9 **Output:** [1,2] **Explanation:** The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]. ``` **Example 2:** ``` **Input:** numbers = [2,3,4], target = 6 **Output:** [1,3] **Explanation:** The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3]. ``` **Example 3:** ``` **Input:** numbers = [-1,0], target = -1 **Output:** [1,2] **Explanation:** The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]. ``` **Constraints:** `2 <= numbers.length <= 3 * 104` `-1000 <= numbers[i] <= 1000` `numbers` is sorted in **non-decreasing order**. `-1000 <= target <= 1000` The tests are generated such that there is **exactly one solution**.', 'test_case': [{'label': 'Example 1', 'input': 'numbers = [ 2 , 7 ,11,15], target = 9', 'output': '[1,2] Explanation: The sum of 2 and 7 is 9. Therefore, index 1 = 1, index 2 = 2. We return [1, 2].'}, {'label': 'Example 2', 'input': 'numbers = [ 2 ,3, 4 ], target = 6', 'output': '[1,3] Explanation: The sum of 2 and 4 is 6. Therefore index 1 = 1, index 2 = 3. We return [1, 3].'}, {'label': 'Example 3', 'input': 'numbers = [ -1 , 0 ], target = -1', 'output': '[1,2] Explanation: The sum of -1 and 0 is -1. Therefore index 1 = 1, index 2 = 2. We return [1, 2].'}], 'elixir_template': 'defmodule Solution do\\n  @spec two_sum(numbers :: [integer], target :: integer) :: [integer]\\n  def two_sum(numbers, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec two_sum(Numbers :: [integer()], Target :: integer()) -> [integer()].\\ntwo_sum(Numbers, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def twoSum(numbers: Array[Int], target: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!780\n",
            "fraction-to-recurring-decimal 166\n",
            "{'id': 166, 'name': 'fraction-to-recurring-decimal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/fraction-to-recurring-decimal/', 'task_description': 'Given two integers representing the `numerator` and `denominator` of a fraction, return _the fraction in string format_. If the fractional part is repeating, enclose the repeating part in parentheses. If multiple answers are possible, return **any of them**. It is **guaranteed** that the length of the answer string is less than `104` for all the given inputs. **Example 1:** ``` **Input:** numerator = 1, denominator = 2 **Output:** \"0.5\" ``` **Example 2:** ``` **Input:** numerator = 2, denominator = 1 **Output:** \"2\" ``` **Example 3:** ``` **Input:** numerator = 4, denominator = 333 **Output:** \"0.(012)\" ``` **Constraints:** `-231 <= numerator, denominator <= 231 - 1` `denominator != 0`', 'test_case': [{'label': 'Example 1', 'input': 'numerator = 1, denominator = 2', 'output': '\"0.5\"'}, {'label': 'Example 2', 'input': 'numerator = 2, denominator = 1', 'output': '\"2\"'}, {'label': 'Example 3', 'input': 'numerator = 4, denominator = 333', 'output': '\"0.(012)\" Constraints: -2 31 <=\\xa0numerator, denominator <= 2 31 - 1 denominator != 0'}], 'elixir_template': 'defmodule Solution do\\n  @spec fraction_to_decimal(numerator :: integer, denominator :: integer) :: String.t\\n  def fraction_to_decimal(numerator, denominator) do\\n    \\n  end\\nend', 'erlang_template': '-spec fraction_to_decimal(Numerator :: integer(), Denominator :: integer()) -> unicode:unicode_binary().\\nfraction_to_decimal(Numerator, Denominator) ->\\n  .', 'scala_template': 'object Solution {\\n    def fractionToDecimal(numerator: Int, denominator: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!781\n",
            "compare-version-numbers 165\n",
            "{'id': 165, 'name': 'compare-version-numbers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/compare-version-numbers/', 'task_description': 'Given two **version strings**, `version1` and `version2`, compare them. A version string consists of **revisions** separated by dots `\\'.\\'`. The **value of the revision** is its **integer conversion** ignoring leading zeros. To compare version strings, compare their revision values in **left-to-right order**. If one of the version strings has fewer revisions, treat the missing revision values as `0`. Return the following: If `version1 < version2`, return -1. If `version1 > version2`, return 1. Otherwise, return 0. **Example 1:** **Input:** version1 = \"1.2\", version2 = \"1.10\" **Output:** -1 **Explanation:** version1\\'s second revision is \"2\" and version2\\'s second revision is \"10\": 2 < 10, so version1 < version2. **Example 2:** **Input:** version1 = \"1.01\", version2 = \"1.001\" **Output:** 0 **Explanation:** Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\". **Example 3:** **Input:** version1 = \"1.0\", version2 = \"1.0.0.0\" **Output:** 0 **Explanation:** version1 has less revisions, which means every missing revision are treated as \"0\". **Constraints:** `1 <= version1.length, version2.length <= 500` `version1` and `version2` only contain digits and `\\'.\\'`. `version1` and `version2` **are valid version numbers**. All the given revisions in `version1` and `version2` can be stored in a **32-bit integer**.', 'test_case': [{'label': 'Example 1', 'input': 'version1 = \"1.2\", version2 = \"1.10\"', 'output': '-1 Explanation: version1\\'s second revision is \"2\" and version2\\'s second revision is \"10\": 2 < 10, so version1 < version2.'}, {'label': 'Example 2', 'input': 'version1 = \"1.01\", version2 = \"1.001\"', 'output': '0 Explanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".'}, {'label': 'Example 3', 'input': 'version1 = \"1.0\", version2 = \"1.0.0.0\"', 'output': '0 Explanation: version1 has less revisions, which means every missing revision are treated as \"0\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec compare_version(version1 :: String.t, version2 :: String.t) :: integer\\n  def compare_version(version1, version2) do\\n    \\n  end\\nend', 'erlang_template': '-spec compare_version(Version1 :: unicode:unicode_binary(), Version2 :: unicode:unicode_binary()) -> integer().\\ncompare_version(Version1, Version2) ->\\n  .', 'scala_template': 'object Solution {\\n    def compareVersion(version1: String, version2: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!782\n",
            "maximum-gap 164\n",
            "{'id': 164, 'name': 'maximum-gap', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-gap/', 'task_description': 'Given an integer array `nums`, return _the maximum difference between two successive elements in its sorted form_. If the array contains less than two elements, return `0`. You must write an algorithm that runs in linear time and uses linear extra space. **Example 1:** ``` **Input:** nums = [3,6,9,1] **Output:** 3 **Explanation:** The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3. ``` **Example 2:** ``` **Input:** nums = [10] **Output:** 0 **Explanation:** The array contains less than 2 elements, therefore return 0. ``` **Constraints:** `1 <= nums.length <= 105` `0 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,6,9,1]', 'output': '3 Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.'}, {'label': 'Example 2', 'input': 'nums = [10]', 'output': '0 Explanation: The array contains less than 2 elements, therefore return 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec maximum_gap(nums :: [integer]) :: integer\\n  def maximum_gap(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec maximum_gap(Nums :: [integer()]) -> integer().\\nmaximum_gap(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maximumGap(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!783\n",
            "find-peak-element 162\n",
            "{'id': 162, 'name': 'find-peak-element', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-peak-element/', 'task_description': 'A peak element is an element that is strictly greater than its neighbors. Given a **0-indexed** integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to **any of the peaks**. You may imagine that `nums[-1] = nums[n] = -∞`. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array. You must write an algorithm that runs in `O(log n)` time. **Example 1:** ``` **Input:** nums = [1,2,3,1] **Output:** 2 **Explanation:** 3 is a peak element and your function should return the index number 2. ``` **Example 2:** ``` **Input:** nums = [1,2,1,3,5,6,4] **Output:** 5 **Explanation:** Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6. ``` **Constraints:** `1 <= nums.length <= 1000` `-231 <= nums[i] <= 231 - 1` `nums[i] != nums[i + 1]` for all valid `i`.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3,1]', 'output': '2 Explanation: 3 is a peak element and your function should return the index number 2.'}, {'label': 'Example 2', 'input': 'nums = [1,2,1,3,5,6,4]', 'output': '5 Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_peak_element(nums :: [integer]) :: integer\\n  def find_peak_element(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_peak_element(Nums :: [integer()]) -> integer().\\nfind_peak_element(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findPeakElement(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!784\n",
            "intersection-of-two-linked-lists 160\n",
            "{'id': 160, 'name': 'intersection-of-two-linked-lists', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/intersection-of-two-linked-lists/', 'task_description': \"Given the heads of two singly linked-lists `headA` and `headB`, return _the node at which the two lists intersect_. If the two linked lists have no intersection at all, return `null`. For example, the following two linked lists begin to intersect at node `c1`: The test cases are generated such that there are no cycles anywhere in the entire linked structure. **Note** that the linked lists must **retain their original structure** after the function returns. **Custom Judge:** The inputs to the **judge** are given as follows (your program is **not** given these inputs): `intersectVal` - The value of the node where the intersection occurs. This is `0` if there is no intersected node. `listA` - The first linked list. `listB` - The second linked list. `skipA` - The number of nodes to skip ahead in `listA` (starting from the head) to get to the intersected node. `skipB` - The number of nodes to skip ahead in `listB` (starting from the head) to get to the intersected node. The judge will then create the linked structure based on these inputs and pass the two heads, `headA` and `headB` to your program. If you correctly return the intersected node, then your solution will be **accepted**. **Example 1:** ``` **Input:** intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3 **Output:** Intersected at '8' **Explanation:** The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B. - Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory. ``` **Example 2:** ``` **Input:** intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 **Output:** Intersected at '2' **Explanation:** The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B. ``` **Example 3:** ``` **Input:** intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2 **Output:** No intersection **Explanation:** From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values. Explanation: The two lists do not intersect, so return null. ``` **Constraints:** The number of nodes of `listA` is in the `m`. The number of nodes of `listB` is in the `n`. `1 <= m, n <= 3 * 104` `1 <= Node.val <= 105` `0 <= skipA <= m` `0 <= skipB <= n` `intersectVal` is `0` if `listA` and `listB` do not intersect. `intersectVal == listA[skipA] == listB[skipB]` if `listA` and `listB` intersect. **Follow up:** Could you write a solution that runs in `O(m + n)` time and use only `O(1)` memory?\", 'test_case': [{'label': 'Example 1', 'input': 'intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3', 'output': \"Intersected at '8' Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2 nd node in A and 3 rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3 rd node in A and 4 th node in B) point to the same location in memory.\"}, {'label': 'Example 2', 'input': 'intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1', 'output': \"Intersected at '2' Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\"}, {'label': 'Example 3', 'input': 'intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2', 'output': 'No intersection Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\\nExplanation: The two lists do not intersect, so return null. Constraints: The number of nodes of listA is in the m . The number of nodes of listB is in the n . 1 <= m, n <= 3 * 10 4 1 <= Node.val <= 10 5 0 <= skipA <= m 0 <= skipB <= n intersectVal is 0 if listA and listB do not intersect. intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect. Follow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\n\\nobject Solution {\\n    def getIntersectionNode(headA: ListNode, headB: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!785\n",
            "min-stack 155\n",
            "{'id': 155, 'name': 'min-stack', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/min-stack/', 'task_description': 'Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. Implement the `MinStack` class: `MinStack()` initializes the stack object. `void push(int val)` pushes the element `val` onto the stack. `void pop()` removes the element on the top of the stack. `int top()` gets the top element of the stack. `int getMin()` retrieves the minimum element in the stack. You must implement a solution with `O(1)` time complexity for each function. **Example 1:** ``` **Input** [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]] **Output** [null,null,null,null,-3,null,0,-2] **Explanation** MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); // return -3 minStack.pop(); minStack.top(); // return 0 minStack.getMin(); // return -2 ``` **Constraints:** `-231 <= val <= 231 - 1` Methods `pop`, `top` and `getMin` operations will always be called on **non-empty** stacks. At most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`.', 'test_case': [], 'elixir_template': 'defmodule MinStack do\\n  @spec init_() :: any\\n  def init_() do\\n    \\n  end\\n\\n  @spec push(val :: integer) :: any\\n  def push(val) do\\n    \\n  end\\n\\n  @spec pop() :: any\\n  def pop() do\\n    \\n  end\\n\\n  @spec top() :: integer\\n  def top() do\\n    \\n  end\\n\\n  @spec get_min() :: integer\\n  def get_min() do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MinStack.init_()\\n# MinStack.push(val)\\n# MinStack.pop()\\n# param_3 = MinStack.top()\\n# param_4 = MinStack.get_min()\\n\\n# MinStack.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec min_stack_init_() -> any().\\nmin_stack_init_() ->\\n  .\\n\\n-spec min_stack_push(Val :: integer()) -> any().\\nmin_stack_push(Val) ->\\n  .\\n\\n-spec min_stack_pop() -> any().\\nmin_stack_pop() ->\\n  .\\n\\n-spec min_stack_top() -> integer().\\nmin_stack_top() ->\\n  .\\n\\n-spec min_stack_get_min() -> integer().\\nmin_stack_get_min() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% min_stack_init_(),\\n%% min_stack_push(Val),\\n%% min_stack_pop(),\\n%% Param_3 = min_stack_top(),\\n%% Param_4 = min_stack_get_min(),\\n\\n%% min_stack_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class MinStack() {\\n\\n    def push(`val`: Int): Unit = {\\n        \\n    }\\n\\n    def pop(): Unit = {\\n        \\n    }\\n\\n    def top(): Int = {\\n        \\n    }\\n\\n    def getMin(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MinStack object will be instantiated and called as such:\\n * val obj = new MinStack()\\n * obj.push(`val`)\\n * obj.pop()\\n * val param_3 = obj.top()\\n * val param_4 = obj.getMin()\\n */'}\n",
            "Done!786\n",
            "find-minimum-in-rotated-sorted-array-ii 154\n",
            "{'id': 154, 'name': 'find-minimum-in-rotated-sorted-array-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/', 'task_description': 'Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become: `[4,5,6,7,0,1,4]` if it was rotated `4` times. `[0,1,4,4,5,6,7]` if it was rotated `7` times. Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`. Given the sorted rotated array `nums` that may contain **duplicates**, return _the minimum element of this array_. You must decrease the overall operation steps as much as possible. **Example 1:** ``` **Input:** nums = [1,3,5] **Output:** 1 ``` **Example 2:** ``` **Input:** nums = [2,2,2,0,1] **Output:** 0 ``` **Constraints:** `n == nums.length` `1 <= n <= 5000` `-5000 <= nums[i] <= 5000` `nums` is sorted and rotated between `1` and `n` times. **Follow up:** This problem is similar to Find Minimum in Rotated Sorted Array, but `nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,5]', 'output': '1'}, {'label': 'Example 2', 'input': 'nums = [2,2,2,0,1]', 'output': '0 Constraints: n == nums.length 1 <= n <= 5000 -5000 <= nums[i] <= 5000 nums is sorted and rotated between 1 and n times. Follow up: This problem is similar to Find Minimum in Rotated Sorted Array , but nums may contain duplicates . Would this affect the runtime complexity? How and why?'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_min(nums :: [integer]) :: integer\\n  def find_min(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_min(Nums :: [integer()]) -> integer().\\nfind_min(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMin(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!787\n",
            "find-minimum-in-rotated-sorted-array 153\n",
            "{'id': 153, 'name': 'find-minimum-in-rotated-sorted-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/', 'task_description': 'Suppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become: `[4,5,6,7,0,1,2]` if it was rotated `4` times. `[0,1,2,4,5,6,7]` if it was rotated `7` times. Notice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`. Given the sorted rotated array `nums` of **unique** elements, return _the minimum element of this array_. You must write an algorithm that runs in `O(log n) time`. **Example 1:** ``` **Input:** nums = [3,4,5,1,2] **Output:** 1 **Explanation:** The original array was [1,2,3,4,5] rotated 3 times. ``` **Example 2:** ``` **Input:** nums = [4,5,6,7,0,1,2] **Output:** 0 **Explanation:** The original array was [0,1,2,4,5,6,7] and it was rotated 4 times. ``` **Example 3:** ``` **Input:** nums = [11,13,15,17] **Output:** 11 **Explanation:** The original array was [11,13,15,17] and it was rotated 4 times. ``` **Constraints:** `n == nums.length` `1 <= n <= 5000` `-5000 <= nums[i] <= 5000` All the integers of `nums` are **unique**. `nums` is sorted and rotated between `1` and `n` times.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,4,5,1,2]', 'output': '1 Explanation: The original array was [1,2,3,4,5] rotated 3 times.'}, {'label': 'Example 2', 'input': 'nums = [4,5,6,7,0,1,2]', 'output': '0 Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.'}, {'label': 'Example 3', 'input': 'nums = [11,13,15,17]', 'output': '11 Explanation: The original array was [11,13,15,17] and it was rotated 4 times. Constraints: n == nums.length 1 <= n <= 5000 -5000 <= nums[i] <= 5000 All the integers of nums are unique . nums is sorted and rotated between 1 and n times.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_min(nums :: [integer]) :: integer\\n  def find_min(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_min(Nums :: [integer()]) -> integer().\\nfind_min(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMin(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!788\n",
            "maximum-product-subarray 152\n",
            "{'id': 152, 'name': 'maximum-product-subarray', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-product-subarray/', 'task_description': 'Given an integer array `nums`, find a subarray that has the largest product, and return _the product_. The test cases are generated so that the answer will fit in a **32-bit** integer. **Example 1:** ``` **Input:** nums = [2,3,-2,4] **Output:** 6 **Explanation:** [2,3] has the largest product 6. ``` **Example 2:** ``` **Input:** nums = [-2,0,-1] **Output:** 0 **Explanation:** The result cannot be 2, because [-2,-1] is not a subarray. ``` **Constraints:** `1 <= nums.length <= 2 * 104` `-10 <= nums[i] <= 10` The product of any subarray of `nums` is **guaranteed** to fit in a **32-bit** integer.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,3,-2,4]', 'output': '6 Explanation: [2,3] has the largest product 6.'}, {'label': 'Example 2', 'input': 'nums = [-2,0,-1]', 'output': '0 Explanation: The result cannot be 2, because [-2,-1] is not a subarray.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_product(nums :: [integer]) :: integer\\n  def max_product(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_product(Nums :: [integer()]) -> integer().\\nmax_product(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProduct(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!789\n",
            "reverse-words-in-a-string 151\n",
            "{'id': 151, 'name': 'reverse-words-in-a-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reverse-words-in-a-string/', 'task_description': 'Given an input string `s`, reverse the order of the **words**. A **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by at least one space. Return _a string of the words in reverse order concatenated by a single space._ Note that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces. **Example 1:** ``` **Input:** s = \"the sky is blue\" **Output:** \"blue is sky the\" ``` **Example 2:** ``` **Input:** s = \" hello world \" **Output:** \"world hello\" **Explanation:** Your reversed string should not contain leading or trailing spaces. ``` **Example 3:** ``` **Input:** s = \"a good example\" **Output:** \"example good a\" **Explanation:** You need to reduce multiple spaces between two words to a single space in the reversed string. ``` **Constraints:** `1 <= s.length <= 104` `s` contains English letters (upper-case and lower-case), digits, and spaces `\\' \\'`. There is **at least one** word in `s`. Follow-up: If the string data type is mutable in your language, can you solve it in-place with `O(1)` extra space?', 'test_case': [{'label': 'Example 1', 'input': 's = \"the sky is blue\"', 'output': '\"blue is sky the\"'}, {'label': 'Example 2', 'input': 's = \"  hello world  \"', 'output': '\"world hello\" Explanation: Your reversed string should not contain leading or trailing spaces.'}, {'label': 'Example 3', 'input': 's = \"a good   example\"', 'output': '\"example good a\" Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.'}], 'elixir_template': 'defmodule Solution do\\n  @spec reverse_words(s :: String.t) :: String.t\\n  def reverse_words(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec reverse_words(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nreverse_words(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def reverseWords(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!790\n",
            "evaluate-reverse-polish-notation 150\n",
            "{'id': 150, 'name': 'evaluate-reverse-polish-notation', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/evaluate-reverse-polish-notation/', 'task_description': 'You are given an array of strings `tokens` that represents an arithmetic expression in a Reverse Polish Notation. Evaluate the expression. Return _an integer that represents the value of the expression_. **Note** that: The valid operators are `\\'+\\'`, `\\'-\\'`, `\\'*\\'`, and `\\'/\\'`. Each operand may be an integer or another expression. The division between two integers always **truncates toward zero**. There will not be any division by zero. The input represents a valid arithmetic expression in a reverse polish notation. The answer and all the intermediate calculations can be represented in a **32-bit** integer. **Example 1:** ``` **Input:** tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"] **Output:** 9 **Explanation:** ((2 + 1) * 3) = 9 ``` **Example 2:** ``` **Input:** tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"] **Output:** 6 **Explanation:** (4 + (13 / 5)) = 6 ``` **Example 3:** ``` **Input:** tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"] **Output:** 22 **Explanation:** ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22 ``` **Constraints:** `1 <= tokens.length <= 104` `tokens[i]` is either an operator: `\"+\"`, `\"-\"`, `\"*\"`, or `\"/\"`, or an integer in the range `[-200, 200]`.', 'test_case': [{'label': 'Example 1', 'input': 'tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]', 'output': '9 Explanation: ((2 + 1) * 3) = 9'}, {'label': 'Example 2', 'input': 'tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]', 'output': '6 Explanation: (4 + (13 / 5)) = 6'}, {'label': 'Example 3', 'input': 'tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]', 'output': '22 Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\\n= ((10 * (6 / (12 * -11))) + 17) + 5\\n= ((10 * (6 / -132)) + 17) + 5\\n= ((10 * 0) + 17) + 5\\n= (0 + 17) + 5\\n= 17 + 5\\n= 22'}], 'elixir_template': 'defmodule Solution do\\n  @spec eval_rpn(tokens :: [String.t]) :: integer\\n  def eval_rpn(tokens) do\\n    \\n  end\\nend', 'erlang_template': '-spec eval_rpn(Tokens :: [unicode:unicode_binary()]) -> integer().\\neval_rpn(Tokens) ->\\n  .', 'scala_template': 'object Solution {\\n    def evalRPN(tokens: Array[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!791\n",
            "max-points-on-a-line 149\n",
            "{'id': 149, 'name': 'max-points-on-a-line', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/max-points-on-a-line/', 'task_description': 'Given an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return _the maximum number of points that lie on the same straight line_. **Example 1:** ``` **Input:** points = [[1,1],[2,2],[3,3]] **Output:** 3 ``` **Example 2:** ``` **Input:** points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]] **Output:** 4 ``` **Constraints:** `1 <= points.length <= 300` `points[i].length == 2` `-104 <= xi, yi <= 104` All the `points` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'points = [[1,1],[2,2],[3,3]]', 'output': '3'}, {'label': 'Example 2', 'input': 'points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_points(points :: [[integer]]) :: integer\\n  def max_points(points) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_points(Points :: [[integer()]]) -> integer().\\nmax_points(Points) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxPoints(points: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!792\n",
            "sort-list 148\n",
            "{'id': 148, 'name': 'sort-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sort-list/', 'task_description': 'Given the `head` of a linked list, return _the list after sorting it in **ascending order**_. **Example 1:** ``` **Input:** head = [4,2,1,3] **Output:** [1,2,3,4] ``` **Example 2:** ``` **Input:** head = [-1,5,3,4,0] **Output:** [-1,0,3,4,5] ``` **Example 3:** ``` **Input:** head = [] **Output:** [] ``` **Constraints:** The number of nodes in the list is in the range `[0, 5 * 104]`. `-105 <= Node.val <= 105` **Follow up:** Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?', 'test_case': [{'label': 'Example 1', 'input': 'head = [4,2,1,3]', 'output': '[1,2,3,4]'}, {'label': 'Example 2', 'input': 'head = [-1,5,3,4,0]', 'output': '[-1,0,3,4,5]'}, {'label': 'Example 3', 'input': 'head = []', 'output': '[] Constraints: The number of nodes in the list is in the range [0, 5 * 10 4 ] . -10 5 <= Node.val <= 10 5 Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sort_list(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def sort_list(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec sort_list(Head :: #list_node{} | null) -> #list_node{} | null.\\nsort_list(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def sortList(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!793\n",
            "insertion-sort-list 147\n",
            "{'id': 147, 'name': 'insertion-sort-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/insertion-sort-list/', 'task_description': \"Given the `head` of a singly linked list, sort the list using **insertion sort**, and return _the sorted list's head_. The steps of the **insertion sort** algorithm: Insertion sort iterates, consuming one input element each repetition and growing a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there. It repeats until no input elements remain. The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration. **Example 1:** ``` **Input:** head = [4,2,1,3] **Output:** [1,2,3,4] ``` **Example 2:** ``` **Input:** head = [-1,5,3,4,0] **Output:** [-1,0,3,4,5] ``` **Constraints:** The number of nodes in the list is in the range `[1, 5000]`. `-5000 <= Node.val <= 5000`\", 'test_case': [{'label': 'Example 1', 'input': 'head = [4,2,1,3]', 'output': '[1,2,3,4]'}, {'label': 'Example 2', 'input': 'head = [-1,5,3,4,0]', 'output': '[-1,0,3,4,5] Constraints: The number of nodes in the list is in the range [1, 5000] . -5000 <= Node.val <= 5000'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec insertion_sort_list(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def insertion_sort_list(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec insertion_sort_list(Head :: #list_node{} | null) -> #list_node{} | null.\\ninsertion_sort_list(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def insertionSortList(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!794\n",
            "lru-cache 146\n",
            "{'id': 146, 'name': 'lru-cache', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/lru-cache/', 'task_description': 'Design a data structure that follows the constraints of a **Least Recently Used (LRU) cache**. Implement the `LRUCache` class: `LRUCache(int capacity)` Initialize the LRU cache with **positive** size `capacity`. `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`. `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, **evict** the least recently used key. The functions `get` and `put` must each run in `O(1)` average time complexity. **Example 1:** ``` **Input** [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]] **Output** [null, null, null, 1, null, -1, null, -1, 3, 4] **Explanation** LRUCache lRUCache = new LRUCache(2); lRUCache.put(1, 1); // cache is {1=1} lRUCache.put(2, 2); // cache is {1=1, 2=2} lRUCache.get(1); // return 1 lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3} lRUCache.get(2); // returns -1 (not found) lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3} lRUCache.get(1); // return -1 (not found) lRUCache.get(3); // return 3 lRUCache.get(4); // return 4 ``` **Constraints:** `1 <= capacity <= 3000` `0 <= key <= 104` `0 <= value <= 105` At most `2 * 105` calls will be made to `get` and `put`.', 'test_case': [], 'elixir_template': 'defmodule LRUCache do\\n  @spec init_(capacity :: integer) :: any\\n  def init_(capacity) do\\n    \\n  end\\n\\n  @spec get(key :: integer) :: integer\\n  def get(key) do\\n    \\n  end\\n\\n  @spec put(key :: integer, value :: integer) :: any\\n  def put(key, value) do\\n    \\n  end\\nend\\n\\n# Your functions will be called as such:\\n# LRUCache.init_(capacity)\\n# param_1 = LRUCache.get(key)\\n# LRUCache.put(key, value)\\n\\n# LRUCache.init_ will be called before every test case, in which you can do some necessary initializations.', 'erlang_template': '-spec lru_cache_init_(Capacity :: integer()) -> any().\\nlru_cache_init_(Capacity) ->\\n  .\\n\\n-spec lru_cache_get(Key :: integer()) -> integer().\\nlru_cache_get(Key) ->\\n  .\\n\\n-spec lru_cache_put(Key :: integer(), Value :: integer()) -> any().\\nlru_cache_put(Key, Value) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% lru_cache_init_(Capacity),\\n%% Param_1 = lru_cache_get(Key),\\n%% lru_cache_put(Key, Value),\\n\\n%% lru_cache_init_ will be called before every test case, in which you can do some necessary initializations.', 'scala_template': 'class LRUCache(_capacity: Int) {\\n\\n    def get(key: Int): Int = {\\n        \\n    }\\n\\n    def put(key: Int, value: Int): Unit = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * val obj = new LRUCache(capacity)\\n * val param_1 = obj.get(key)\\n * obj.put(key,value)\\n */'}\n",
            "Done!795\n",
            "binary-tree-postorder-traversal 145\n",
            "{'id': 145, 'name': 'binary-tree-postorder-traversal', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-tree-postorder-traversal/', 'task_description': \"Given the `root` of a binary tree, return _the postorder traversal of its nodes' values_. **Example 1:** **Input:** root = [1,null,2,3] **Output:** [3,2,1] **Explanation:** **Example 2:** **Input:** root = [1,2,3,4,5,null,8,null,null,6,7,9] **Output:** [4,6,7,5,2,9,8,3,1] **Explanation:** **Example 3:** **Input:** root = [] **Output:** [] **Example 4:** **Input:** root = [1] **Output:** [1] **Constraints:** The number of the nodes in the tree is in the range `[0, 100]`. `-100 <= Node.val <= 100` **Follow up:** Recursive solution is trivial, could you do it iteratively?\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,2,3]', 'output': '[3,2,1] Explanation:'}, {'label': 'Example 2', 'input': 'root = [1,2,3,4,5,null,8,null,null,6,7,9]', 'output': '[4,6,7,5,2,9,8,3,1] Explanation:'}, {'label': 'Example 3', 'input': 'root = []', 'output': '[]'}, {'label': 'Example 4', 'input': 'root = [1]', 'output': '[1] Constraints: The number of the nodes in the tree is in the range [0, 100] . -100 <= Node.val <= 100 Follow up: Recursive solution is trivial, could you do it iteratively?'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec postorder_traversal(root :: TreeNode.t | nil) :: [integer]\\n  def postorder_traversal(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec postorder_traversal(Root :: #tree_node{} | null) -> [integer()].\\npostorder_traversal(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def postorderTraversal(root: TreeNode): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!796\n",
            "binary-tree-preorder-traversal 144\n",
            "{'id': 144, 'name': 'binary-tree-preorder-traversal', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-tree-preorder-traversal/', 'task_description': \"Given the `root` of a binary tree, return _the preorder traversal of its nodes' values_. **Example 1:** **Input:** root = [1,null,2,3] **Output:** [1,2,3] **Explanation:** **Example 2:** **Input:** root = [1,2,3,4,5,null,8,null,null,6,7,9] **Output:** [1,2,4,5,6,7,3,8,9] **Explanation:** **Example 3:** **Input:** root = [] **Output:** [] **Example 4:** **Input:** root = [1] **Output:** [1] **Constraints:** The number of nodes in the tree is in the range `[0, 100]`. `-100 <= Node.val <= 100` **Follow up:** Recursive solution is trivial, could you do it iteratively?\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,2,3]', 'output': '[1,2,3] Explanation:'}, {'label': 'Example 2', 'input': 'root = [1,2,3,4,5,null,8,null,null,6,7,9]', 'output': '[1,2,4,5,6,7,3,8,9] Explanation:'}, {'label': 'Example 3', 'input': 'root = []', 'output': '[]'}, {'label': 'Example 4', 'input': 'root = [1]', 'output': '[1] Constraints: The number of nodes in the tree is in the range [0, 100] . -100 <= Node.val <= 100 Follow up: Recursive solution is trivial, could you do it iteratively?'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec preorder_traversal(root :: TreeNode.t | nil) :: [integer]\\n  def preorder_traversal(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec preorder_traversal(Root :: #tree_node{} | null) -> [integer()].\\npreorder_traversal(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def preorderTraversal(root: TreeNode): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!797\n",
            "reorder-list 143\n",
            "{'id': 143, 'name': 'reorder-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reorder-list/', 'task_description': \"You are given the head of a singly linked-list. The list can be represented as: ``` L0 → L1 → … → Ln - 1 → Ln ``` _Reorder the list to be on the following form:_ ``` L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → … ``` You may not modify the values in the list's nodes. Only nodes themselves may be changed. **Example 1:** ``` **Input:** head = [1,2,3,4] **Output:** [1,4,2,3] ``` **Example 2:** ``` **Input:** head = [1,2,3,4,5] **Output:** [1,5,2,4,3] ``` **Constraints:** The number of nodes in the list is in the range `[1, 5 * 104]`. `1 <= Node.val <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4]', 'output': '[1,4,2,3]'}, {'label': 'Example 2', 'input': 'head = [1,2,3,4,5]', 'output': '[1,5,2,4,3] Constraints: The number of nodes in the list is in the range [1, 5 * 10 4 ] . 1 <= Node.val <= 1000'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def reorderList(head: ListNode): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!798\n",
            "linked-list-cycle-ii 142\n",
            "{'id': 142, 'name': 'linked-list-cycle-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/linked-list-cycle-ii/', 'task_description': \"Given the `head` of a linked list, return _the node where the cycle begins. If there is no cycle, return _`null`. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to (**0-indexed**). It is `-1` if there is no cycle. **Note that** `pos` **is not passed as a parameter**. **Do not modify** the linked list. **Example 1:** ``` **Input:** head = [3,2,0,-4], pos = 1 **Output:** tail connects to node index 1 **Explanation:** There is a cycle in the linked list, where tail connects to the second node. ``` **Example 2:** ``` **Input:** head = [1,2], pos = 0 **Output:** tail connects to node index 0 **Explanation:** There is a cycle in the linked list, where tail connects to the first node. ``` **Example 3:** ``` **Input:** head = [1], pos = -1 **Output:** no cycle **Explanation:** There is no cycle in the linked list. ``` **Constraints:** The number of the nodes in the list is in the range `[0, 104]`. `-105 <= Node.val <= 105` `pos` is `-1` or a **valid index** in the linked-list. **Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?\", 'test_case': [{'label': 'Example 1', 'input': 'head = [3,2,0,-4], pos = 1', 'output': 'tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node.'}, {'label': 'Example 2', 'input': 'head = [1,2], pos = 0', 'output': 'tail connects to node index 0 Explanation: There is a cycle in the linked list, where tail connects to the first node.'}, {'label': 'Example 3', 'input': 'head = [1], pos = -1', 'output': 'no cycle Explanation: There is no cycle in the linked list. Constraints: The number of the nodes in the list is in the range [0, 10 4 ] . -10 5 <= Node.val <= 10 5 pos is -1 or a valid index in the linked-list. Follow up: Can you solve it using O(1) (i.e. constant) memory?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\n\\nobject Solution {\\n    def detectCycle(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!799\n",
            "linked-list-cycle 141\n",
            "{'id': 141, 'name': 'linked-list-cycle', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/linked-list-cycle/', 'task_description': \"Given `head`, the head of a linked list, determine if the linked list has a cycle in it. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**. Return `true`_ if there is a cycle in the linked list_. Otherwise, return `false`. **Example 1:** ``` **Input:** head = [3,2,0,-4], pos = 1 **Output:** true **Explanation:** There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). ``` **Example 2:** ``` **Input:** head = [1,2], pos = 0 **Output:** true **Explanation:** There is a cycle in the linked list, where the tail connects to the 0th node. ``` **Example 3:** ``` **Input:** head = [1], pos = -1 **Output:** false **Explanation:** There is no cycle in the linked list. ``` **Constraints:** The number of the nodes in the list is in the range `[0, 104]`. `-105 <= Node.val <= 105` `pos` is `-1` or a **valid index** in the linked-list. **Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?\", 'test_case': [{'label': 'Example 1', 'input': 'head = [3,2,0,-4], pos = 1', 'output': 'true Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).'}, {'label': 'Example 2', 'input': 'head = [1,2], pos = 0', 'output': 'true Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.'}, {'label': 'Example 3', 'input': 'head = [1], pos = -1', 'output': 'false Explanation: There is no cycle in the linked list. Constraints: The number of the nodes in the list is in the range [0, 10 4 ] . -10 5 <= Node.val <= 10 5 pos is -1 or a valid index in the linked-list. Follow up: Can you solve it using O(1) (i.e. constant) memory?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\n\\nobject Solution {\\n    def hasCycle(head: ListNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!800\n",
            "word-break-ii 140\n",
            "{'id': 140, 'name': 'word-break-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/word-break-ii/', 'task_description': 'Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**. **Note** that the same word in the dictionary may be reused multiple times in the segmentation. **Example 1:** ``` **Input:** s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"] **Output:** [\"cats and dog\",\"cat sand dog\"] ``` **Example 2:** ``` **Input:** s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"] **Output:** [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"] **Explanation:** Note that you are allowed to reuse a dictionary word. ``` **Example 3:** ``` **Input:** s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"] **Output:** [] ``` **Constraints:** `1 <= s.length <= 20` `1 <= wordDict.length <= 1000` `1 <= wordDict[i].length <= 10` `s` and `wordDict[i]` consist of only lowercase English letters. All the strings of `wordDict` are **unique**. Input is generated in a way that the length of the answer doesn\\'t exceed 105.', 'test_case': [{'label': 'Example 1', 'input': 's = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]', 'output': '[\"cats and dog\",\"cat sand dog\"]'}, {'label': 'Example 2', 'input': 's = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]', 'output': '[\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"] Explanation: Note that you are allowed to reuse a dictionary word.'}, {'label': 'Example 3', 'input': 's = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]', 'output': '[]'}], 'elixir_template': 'defmodule Solution do\\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: [String.t]\\n  def word_break(s, word_dict) do\\n    \\n  end\\nend', 'erlang_template': '-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nword_break(S, WordDict) ->\\n  .', 'scala_template': 'object Solution {\\n    def wordBreak(s: String, wordDict: List[String]): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!801\n",
            "word-break 139\n",
            "{'id': 139, 'name': 'word-break', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/word-break/', 'task_description': 'Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. **Note** that the same word in the dictionary may be reused multiple times in the segmentation. **Example 1:** ``` **Input:** s = \"leetcode\", wordDict = [\"leet\",\"code\"] **Output:** true **Explanation:** Return true because \"leetcode\" can be segmented as \"leet code\". ``` **Example 2:** ``` **Input:** s = \"applepenapple\", wordDict = [\"apple\",\"pen\"] **Output:** true **Explanation:** Return true because \"applepenapple\" can be segmented as \"apple pen apple\". Note that you are allowed to reuse a dictionary word. ``` **Example 3:** ``` **Input:** s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"] **Output:** false ``` **Constraints:** `1 <= s.length <= 300` `1 <= wordDict.length <= 1000` `1 <= wordDict[i].length <= 20` `s` and `wordDict[i]` consist of only lowercase English letters. All the strings of `wordDict` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 's = \"leetcode\", wordDict = [\"leet\",\"code\"]', 'output': 'true Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".'}, {'label': 'Example 2', 'input': 's = \"applepenapple\", wordDict = [\"apple\",\"pen\"]', 'output': 'true Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\\nNote that you are allowed to reuse a dictionary word.'}, {'label': 'Example 3', 'input': 's = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: boolean\\n  def word_break(s, word_dict) do\\n    \\n  end\\nend', 'erlang_template': '-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> boolean().\\nword_break(S, WordDict) ->\\n  .', 'scala_template': 'object Solution {\\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!802\n",
            "copy-list-with-random-pointer 138\n",
            "{'id': 138, 'name': 'copy-list-with-random-pointer', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/copy-list-with-random-pointer/', 'task_description': 'A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`. Construct a **deep copy** of the list. The deep copy should consist of exactly `n` **brand new** nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. **None of the pointers in the new list should point to nodes in the original list**. For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`. Return _the head of the copied linked list_. The linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where: `val`: an integer representing `Node.val` `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node. Your code will **only** be given the `head` of the original linked list. **Example 1:** ``` **Input:** head = [[7,null],[13,0],[11,4],[10,2],[1,0]] **Output:** [[7,null],[13,0],[11,4],[10,2],[1,0]] ``` **Example 2:** ``` **Input:** head = [[1,1],[2,1]] **Output:** [[1,1],[2,1]] ``` **Example 3:** **** ``` **Input:** head = [[3,null],[3,0],[3,null]] **Output:** [[3,null],[3,0],[3,null]] ``` **Constraints:** `0 <= n <= 1000` `-104 <= Node.val <= 104` `Node.random` is `null` or is pointing to some node in the linked list.', 'test_case': [{'label': 'Example 1', 'input': 'head = [[7,null],[13,0],[11,4],[10,2],[1,0]]', 'output': '[[7,null],[13,0],[11,4],[10,2],[1,0]]'}, {'label': 'Example 2', 'input': 'head = [[1,1],[2,1]]', 'output': '[[1,1],[2,1]]'}, {'label': 'Example 3', 'input': 'head = [[3,null],[3,0],[3,null]]', 'output': '[[3,null],[3,0],[3,null]]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var next: Node = null\\n *   var random: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def copyRandomList(head: Node): Node = {\\n        \\n    }\\n}'}\n",
            "Done!803\n",
            "single-number-ii 137\n",
            "{'id': 137, 'name': 'single-number-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/single-number-ii/', 'task_description': 'Given an integer array `nums` where every element appears **three times** except for one, which appears **exactly once**. _Find the single element and return it_. You must implement a solution with a linear runtime complexity and use only constant extra space. **Example 1:** ``` **Input:** nums = [2,2,3,2] **Output:** 3 ``` **Example 2:** ``` **Input:** nums = [0,1,0,1,0,1,99] **Output:** 99 ``` **Constraints:** `1 <= nums.length <= 3 * 104` `-231 <= nums[i] <= 231 - 1` Each element in `nums` appears exactly **three times** except for one element which appears **once**.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,2,3,2]', 'output': '3'}, {'label': 'Example 2', 'input': 'nums = [0,1,0,1,0,1,99]', 'output': '99'}], 'elixir_template': 'defmodule Solution do\\n  @spec single_number(nums :: [integer]) :: integer\\n  def single_number(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec single_number(Nums :: [integer()]) -> integer().\\nsingle_number(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def singleNumber(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!804\n",
            "single-number 136\n",
            "{'id': 136, 'name': 'single-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/single-number/', 'task_description': 'Given a **non-empty** array of integers `nums`, every element appears _twice_ except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space. **Example 1:** ``` **Input:** nums = [2,2,1] **Output:** 1 ``` **Example 2:** ``` **Input:** nums = [4,1,2,1,2] **Output:** 4 ``` **Example 3:** ``` **Input:** nums = [1] **Output:** 1 ``` **Constraints:** `1 <= nums.length <= 3 * 104` `-3 * 104 <= nums[i] <= 3 * 104` Each element in the array appears twice except for one element which appears only once.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,2,1]', 'output': '1'}, {'label': 'Example 2', 'input': 'nums = [4,1,2,1,2]', 'output': '4'}, {'label': 'Example 3', 'input': 'nums = [1]', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec single_number(nums :: [integer]) :: integer\\n  def single_number(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec single_number(Nums :: [integer()]) -> integer().\\nsingle_number(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def singleNumber(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!805\n",
            "candy 135\n",
            "{'id': 135, 'name': 'candy', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/candy/', 'task_description': 'There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`. You are giving candies to these children subjected to the following requirements: Each child must have at least one candy. Children with a higher rating get more candies than their neighbors. Return _the minimum number of candies you need to have to distribute the candies to the children_. **Example 1:** ``` **Input:** ratings = [1,0,2] **Output:** 5 **Explanation:** You can allocate to the first, second and third child with 2, 1, 2 candies respectively. ``` **Example 2:** ``` **Input:** ratings = [1,2,2] **Output:** 4 **Explanation:** You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions. ``` **Constraints:** `n == ratings.length` `1 <= n <= 2 * 104` `0 <= ratings[i] <= 2 * 104`', 'test_case': [{'label': 'Example 1', 'input': 'ratings = [1,0,2]', 'output': '5 Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.'}, {'label': 'Example 2', 'input': 'ratings = [1,2,2]', 'output': '4 Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\\nThe third child gets 1 candy because it satisfies the above two conditions. Constraints: n == ratings.length 1 <= n <= 2 * 10 4 0 <= ratings[i] <= 2 * 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec candy(ratings :: [integer]) :: integer\\n  def candy(ratings) do\\n    \\n  end\\nend', 'erlang_template': '-spec candy(Ratings :: [integer()]) -> integer().\\ncandy(Ratings) ->\\n  .', 'scala_template': 'object Solution {\\n    def candy(ratings: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!806\n",
            "gas-station 134\n",
            "{'id': 134, 'name': 'gas-station', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/gas-station/', 'task_description': \"There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`. You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays `gas` and `cost`, return _the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return_ `-1`. If there exists a solution, it is **guaranteed** to be **unique**. **Example 1:** ``` **Input:** gas = [1,2,3,4,5], cost = [3,4,5,1,2] **Output:** 3 **Explanation:** Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index. ``` **Example 2:** ``` **Input:** gas = [2,3,4], cost = [3,4,3] **Output:** -1 **Explanation:** You can't start at station 0 or 1, as there is not enough gas to travel to the next station. Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 0. Your tank = 4 - 3 + 2 = 3 Travel to station 1. Your tank = 3 - 3 + 3 = 3 You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3. Therefore, you can't travel around the circuit once no matter where you start. ``` **Constraints:** `n == gas.length == cost.length` `1 <= n <= 105` `0 <= gas[i], cost[i] <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'gas = [1,2,3,4,5], cost = [3,4,5,1,2]', 'output': '3 Explanation: Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\\nTherefore, return 3 as the starting index.'}, {'label': 'Example 2', 'input': 'gas = [2,3,4], cost = [3,4,3]', 'output': \"-1 Explanation: You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\\nTherefore, you can't travel around the circuit once no matter where you start. Constraints: n == gas.length == cost.length 1 <= n <= 10 5 0 <= gas[i], cost[i] <= 10 4\"}], 'elixir_template': 'defmodule Solution do\\n  @spec can_complete_circuit(gas :: [integer], cost :: [integer]) :: integer\\n  def can_complete_circuit(gas, cost) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_complete_circuit(Gas :: [integer()], Cost :: [integer()]) -> integer().\\ncan_complete_circuit(Gas, Cost) ->\\n  .', 'scala_template': 'object Solution {\\n    def canCompleteCircuit(gas: Array[Int], cost: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!807\n",
            "clone-graph 133\n",
            "{'id': 133, 'name': 'clone-graph', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/clone-graph/', 'task_description': \"Given a reference of a node in a **connected** undirected graph. Return a **deep copy** (clone) of the graph. Each node in the graph contains a value (`int`) and a list (`List[Node]`) of its neighbors. ``` class Node { public int val; public List<Node> neighbors; } ``` **Test case format:** For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with `val == 1`, the second node with `val == 2`, and so on. The graph is represented in the test case using an adjacency list. An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph. The given node will always be the first node with `val = 1`. You must return the **copy of the given node** as a reference to the cloned graph. **Example 1:** ``` **Input:** adjList = [[2,4],[1,3],[2,4],[1,3]] **Output:** [[2,4],[1,3],[2,4],[1,3]] **Explanation:** There are 4 nodes in the graph. 1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). 3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). ``` **Example 2:** ``` **Input:** adjList = [[]] **Output:** [[]] **Explanation:** Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors. ``` **Example 3:** ``` **Input:** adjList = [] **Output:** [] **Explanation:** This an empty graph, it does not have any nodes. ``` **Constraints:** The number of nodes in the graph is in the range `[0, 100]`. `1 <= Node.val <= 100` `Node.val` is unique for each node. There are no repeated edges and no self-loops in the graph. The Graph is connected and all nodes can be visited starting from the given node.\", 'test_case': [{'label': 'Example 1', 'input': 'adjList = [[2,4],[1,3],[2,4],[1,3]]', 'output': \"[[2,4],[1,3],[2,4],[1,3]] Explanation: There are 4 nodes in the graph.\\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\"}, {'label': 'Example 2', 'input': 'adjList = [[]]', 'output': '[[]] Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.'}, {'label': 'Example 3', 'input': 'adjList = []', 'output': '[] Explanation: This an empty graph, it does not have any nodes. Constraints: The number of nodes in the graph is in the range [0, 100] . 1 <= Node.val <= 100 Node.val is unique for each node. There are no repeated edges and no self-loops in the graph. The Graph is connected and all nodes can be visited starting from the given node.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var neighbors: List[Node] = List()\\n * }\\n */\\n\\nobject Solution {\\n    def cloneGraph(graph: Node): Node = {\\n        \\n    }\\n}'}\n",
            "Done!808\n",
            "palindrome-partitioning-ii 132\n",
            "{'id': 132, 'name': 'palindrome-partitioning-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/palindrome-partitioning-ii/', 'task_description': 'Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return _the **minimum** cuts needed for a palindrome partitioning of_ `s`. **Example 1:** ``` **Input:** s = \"aab\" **Output:** 1 **Explanation:** The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut. ``` **Example 2:** ``` **Input:** s = \"a\" **Output:** 0 ``` **Example 3:** ``` **Input:** s = \"ab\" **Output:** 1 ``` **Constraints:** `1 <= s.length <= 2000` `s` consists of lowercase English letters only.', 'test_case': [{'label': 'Example 1', 'input': 's = \"aab\"', 'output': '1 Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.'}, {'label': 'Example 2', 'input': 's = \"a\"', 'output': '0'}, {'label': 'Example 3', 'input': 's = \"ab\"', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_cut(s :: String.t) :: integer\\n  def min_cut(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_cut(S :: unicode:unicode_binary()) -> integer().\\nmin_cut(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def minCut(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!809\n",
            "palindrome-partitioning 131\n",
            "{'id': 131, 'name': 'palindrome-partitioning', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/palindrome-partitioning/', 'task_description': 'Given a string `s`, partition `s` such that every substring of the partition is a **palindrome**. Return _all possible palindrome partitioning of _`s`. **Example 1:** ``` **Input:** s = \"aab\" **Output:** [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]] ``` **Example 2:** ``` **Input:** s = \"a\" **Output:** [[\"a\"]] ``` **Constraints:** `1 <= s.length <= 16` `s` contains only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"aab\"', 'output': '[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]'}, {'label': 'Example 2', 'input': 's = \"a\"', 'output': '[[\"a\"]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec partition(s :: String.t) :: [[String.t]]\\n  def partition(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec partition(S :: unicode:unicode_binary()) -> [[unicode:unicode_binary()]].\\npartition(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def partition(s: String): List[List[String]] = {\\n        \\n    }\\n}'}\n",
            "Done!810\n",
            "surrounded-regions 130\n",
            "{'id': 130, 'name': 'surrounded-regions', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/surrounded-regions/', 'task_description': 'You are given an `m x n` matrix `board` containing **letters** `\\'X\\'` and `\\'O\\'`, **capture regions** that are **surrounded**: **Connect**: A cell is connected to adjacent cells horizontally or vertically. **Region**: To form a region **connect every** `\\'O\\'` cell. **Surround**: The region is surrounded with `\\'X\\'` cells if you can **connect the region **with `\\'X\\'` cells and none of the region cells are on the edge of the `board`. A **surrounded region is captured** by replacing all `\\'O\\'`s with `\\'X\\'`s in the input matrix `board`. **Example 1:** **Input:** board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]] **Output:** [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]] **Explanation:** In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded. **Example 2:** **Input:** board = [[\"X\"]] **Output:** [[\"X\"]] **Constraints:** `m == board.length` `n == board[i].length` `1 <= m, n <= 200` `board[i][j]` is `\\'X\\'` or `\\'O\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]', 'output': '[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]] Explanation: In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded.'}, {'label': 'Example 2', 'input': 'board = [[\"X\"]]', 'output': '[[\"X\"]] Constraints: m == board.length n == board[i].length 1 <= m, n <= 200 board[i][j] is \\'X\\' or \\'O\\' .'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def solve(board: Array[Array[Char]]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!811\n",
            "sum-root-to-leaf-numbers 129\n",
            "{'id': 129, 'name': 'sum-root-to-leaf-numbers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sum-root-to-leaf-numbers/', 'task_description': 'You are given the `root` of a binary tree containing digits from `0` to `9` only. Each root-to-leaf path in the tree represents a number. For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`. Return _the total sum of all root-to-leaf numbers_. Test cases are generated so that the answer will fit in a **32-bit** integer. A **leaf** node is a node with no children. **Example 1:** ``` **Input:** root = [1,2,3] **Output:** 25 **Explanation:** The root-to-leaf path `1->2` represents the number `12`. The root-to-leaf path `1->3` represents the number `13`. Therefore, sum = 12 + 13 = `25`. ``` **Example 2:** ``` **Input:** root = [4,9,0,5,1] **Output:** 1026 **Explanation:** The root-to-leaf path `4->9->5` represents the number 495. The root-to-leaf path `4->9->1` represents the number 491. The root-to-leaf path `4->0` represents the number 40. Therefore, sum = 495 + 491 + 40 = `1026`. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 1000]`. `0 <= Node.val <= 9` The depth of the tree will not exceed `10`.', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3]', 'output': '25 Explanation: The root-to-leaf path 1->2 represents the number 12 .\\nThe root-to-leaf path 1->3 represents the number 13 .\\nTherefore, sum = 12 + 13 = 25 .'}, {'label': 'Example 2', 'input': 'root = [4,9,0,5,1]', 'output': '1026 Explanation: The root-to-leaf path 4->9->5 represents the number 495.\\nThe root-to-leaf path 4->9->1 represents the number 491.\\nThe root-to-leaf path 4->0 represents the number 40.\\nTherefore, sum = 495 + 491 + 40 = 1026 . Constraints: The number of nodes in the tree is in the range [1, 1000] . 0 <= Node.val <= 9 The depth of the tree will not exceed 10 .'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sum_numbers(root :: TreeNode.t | nil) :: integer\\n  def sum_numbers(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec sum_numbers(Root :: #tree_node{} | null) -> integer().\\nsum_numbers(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def sumNumbers(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!812\n",
            "longest-consecutive-sequence 128\n",
            "{'id': 128, 'name': 'longest-consecutive-sequence', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-consecutive-sequence/', 'task_description': 'Given an unsorted array of integers `nums`, return _the length of the longest consecutive elements sequence._ You must write an algorithm that runs in `O(n)` time. **Example 1:** ``` **Input:** nums = [100,4,200,1,3,2] **Output:** 4 **Explanation:** The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4. ``` **Example 2:** ``` **Input:** nums = [0,3,7,2,5,8,4,6,0,1] **Output:** 9 ``` **Constraints:** `0 <= nums.length <= 105` `-109 <= nums[i] <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [100,4,200,1,3,2]', 'output': '4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4] . Therefore its length is 4.'}, {'label': 'Example 2', 'input': 'nums = [0,3,7,2,5,8,4,6,0,1]', 'output': '9'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_consecutive(nums :: [integer]) :: integer\\n  def longest_consecutive(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_consecutive(Nums :: [integer()]) -> integer().\\nlongest_consecutive(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestConsecutive(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!813\n",
            "word-ladder 127\n",
            "{'id': 127, 'name': 'word-ladder', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/word-ladder/', 'task_description': 'A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that: Every adjacent pair of words differs by a single letter. Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`. `sk == endWord` Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _the **number of words** in the **shortest transformation sequence** from_ `beginWord` _to_ `endWord`_, or _`0`_ if no such sequence exists._ **Example 1:** ``` **Input:** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"] **Output:** 5 **Explanation:** One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long. ``` **Example 2:** ``` **Input:** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] **Output:** 0 **Explanation:** The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence. ``` **Constraints:** `1 <= beginWord.length <= 10` `endWord.length == beginWord.length` `1 <= wordList.length <= 5000` `wordList[i].length == beginWord.length` `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters. `beginWord != endWord` All the words in `wordList` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]', 'output': '5 Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.'}, {'label': 'Example 2', 'input': 'beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]', 'output': '0 Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.'}], 'elixir_template': 'defmodule Solution do\\n  @spec ladder_length(begin_word :: String.t, end_word :: String.t, word_list :: [String.t]) :: integer\\n  def ladder_length(begin_word, end_word, word_list) do\\n    \\n  end\\nend', 'erlang_template': '-spec ladder_length(BeginWord :: unicode:unicode_binary(), EndWord :: unicode:unicode_binary(), WordList :: [unicode:unicode_binary()]) -> integer().\\nladder_length(BeginWord, EndWord, WordList) ->\\n  .', 'scala_template': 'object Solution {\\n    def ladderLength(beginWord: String, endWord: String, wordList: List[String]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!814\n",
            "word-ladder-ii 126\n",
            "{'id': 126, 'name': 'word-ladder-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/word-ladder-ii/', 'task_description': 'A **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that: Every adjacent pair of words differs by a single letter. Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`. `sk == endWord` Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return _all the **shortest transformation sequences** from_ `beginWord` _to_ `endWord`_, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words _`[beginWord, s1, s2, ..., sk]`. **Example 1:** ``` **Input:** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"] **Output:** [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]] **Explanation:** There are 2 shortest transformation sequences: \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\" \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\" ``` **Example 2:** ``` **Input:** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] **Output:** [] **Explanation:** The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence. ``` **Constraints:** `1 <= beginWord.length <= 5` `endWord.length == beginWord.length` `1 <= wordList.length <= 500` `wordList[i].length == beginWord.length` `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters. `beginWord != endWord` All the words in `wordList` are **unique**. The **sum** of all shortest transformation sequences does not exceed `105`.', 'test_case': [{'label': 'Example 1', 'input': 'beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]', 'output': '[[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]] Explanation: There are 2 shortest transformation sequences:\\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"'}, {'label': 'Example 2', 'input': 'beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]', 'output': '[] Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_ladders(begin_word :: String.t, end_word :: String.t, word_list :: [String.t]) :: [[String.t]]\\n  def find_ladders(begin_word, end_word, word_list) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_ladders(BeginWord :: unicode:unicode_binary(), EndWord :: unicode:unicode_binary(), WordList :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\\nfind_ladders(BeginWord, EndWord, WordList) ->\\n  .', 'scala_template': 'object Solution {\\n    def findLadders(beginWord: String, endWord: String, wordList: List[String]): List[List[String]] = {\\n        \\n    }\\n}'}\n",
            "Done!815\n",
            "valid-palindrome 125\n",
            "{'id': 125, 'name': 'valid-palindrome', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/valid-palindrome/', 'task_description': 'A phrase is a **palindrome** if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers. Given a string `s`, return `true`_ if it is a **palindrome**, or _`false`_ otherwise_. **Example 1:** ``` **Input:** s = \"A man, a plan, a canal: Panama\" **Output:** true **Explanation:** \"amanaplanacanalpanama\" is a palindrome. ``` **Example 2:** ``` **Input:** s = \"race a car\" **Output:** false **Explanation:** \"raceacar\" is not a palindrome. ``` **Example 3:** ``` **Input:** s = \" \" **Output:** true **Explanation:** s is an empty string \"\" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome. ``` **Constraints:** `1 <= s.length <= 2 * 105` `s` consists only of printable ASCII characters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"A man, a plan, a canal: Panama\"', 'output': 'true Explanation: \"amanaplanacanalpanama\" is a palindrome.'}, {'label': 'Example 2', 'input': 's = \"race a car\"', 'output': 'false Explanation: \"raceacar\" is not a palindrome.'}, {'label': 'Example 3', 'input': 's = \" \"', 'output': 'true Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\\nSince an empty string reads the same forward and backward, it is a palindrome.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_palindrome(s :: String.t) :: boolean\\n  def is_palindrome(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\\nis_palindrome(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def isPalindrome(s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!816\n",
            "binary-tree-maximum-path-sum 124\n",
            "{'id': 124, 'name': 'binary-tree-maximum-path-sum', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/binary-tree-maximum-path-sum/', 'task_description': \"A **path** in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. Note that the path does not need to pass through the root. The **path sum** of a path is the sum of the node's values in the path. Given the `root` of a binary tree, return _the maximum **path sum** of any **non-empty** path_. **Example 1:** ``` **Input:** root = [1,2,3] **Output:** 6 **Explanation:** The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6. ``` **Example 2:** ``` **Input:** root = [-10,9,20,null,null,15,7] **Output:** 42 **Explanation:** The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 3 * 104]`. `-1000 <= Node.val <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3]', 'output': '6 Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.'}, {'label': 'Example 2', 'input': 'root = [-10,9,20,null,null,15,7]', 'output': '42 Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42. Constraints: The number of nodes in the tree is in the range [1, 3 * 10 4 ] . -1000 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec max_path_sum(root :: TreeNode.t | nil) :: integer\\n  def max_path_sum(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec max_path_sum(Root :: #tree_node{} | null) -> integer().\\nmax_path_sum(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def maxPathSum(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!817\n",
            "best-time-to-buy-and-sell-stock-iii 123\n",
            "{'id': 123, 'name': 'best-time-to-buy-and-sell-stock-iii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/', 'task_description': 'You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. Find the maximum profit you can achieve. You may complete **at most two transactions**. **Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). **Example 1:** ``` **Input:** prices = [3,3,5,0,0,3,1,4] **Output:** 6 **Explanation:** Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. ``` **Example 2:** ``` **Input:** prices = [1,2,3,4,5] **Output:** 4 **Explanation:** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again. ``` **Example 3:** ``` **Input:** prices = [7,6,4,3,1] **Output:** 0 **Explanation:** In this case, no transaction is done, i.e. max profit = 0. ``` **Constraints:** `1 <= prices.length <= 105` `0 <= prices[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'prices = [3,3,5,0,0,3,1,4]', 'output': '6 Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.'}, {'label': 'Example 2', 'input': 'prices = [1,2,3,4,5]', 'output': '4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.'}, {'label': 'Example 3', 'input': 'prices = [7,6,4,3,1]', 'output': '0 Explanation: In this case, no transaction is done, i.e. max profit = 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_profit(prices :: [integer]) :: integer\\n  def max_profit(prices) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_profit(Prices :: [integer()]) -> integer().\\nmax_profit(Prices) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProfit(prices: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!818\n",
            "best-time-to-buy-and-sell-stock-ii 122\n",
            "{'id': 122, 'name': 'best-time-to-buy-and-sell-stock-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/', 'task_description': 'You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day. On each day, you may decide to buy and/or sell the stock. You can only hold **at most one** share of the stock at any time. However, you can buy it then immediately sell it on the **same day**. Find and return _the **maximum** profit you can achieve_. **Example 1:** ``` **Input:** prices = [7,1,5,3,6,4] **Output:** 7 **Explanation:** Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. ``` **Example 2:** ``` **Input:** prices = [1,2,3,4,5] **Output:** 4 **Explanation:** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. ``` **Example 3:** ``` **Input:** prices = [7,6,4,3,1] **Output:** 0 **Explanation:** There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0. ``` **Constraints:** `1 <= prices.length <= 3 * 104` `0 <= prices[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'prices = [7,1,5,3,6,4]', 'output': '7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\\nTotal profit is 4 + 3 = 7.'}, {'label': 'Example 2', 'input': 'prices = [1,2,3,4,5]', 'output': '4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\\nTotal profit is 4.'}, {'label': 'Example 3', 'input': 'prices = [7,6,4,3,1]', 'output': '0 Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_profit(prices :: [integer]) :: integer\\n  def max_profit(prices) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_profit(Prices :: [integer()]) -> integer().\\nmax_profit(Prices) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProfit(prices: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!819\n",
            "best-time-to-buy-and-sell-stock 121\n",
            "{'id': 121, 'name': 'best-time-to-buy-and-sell-stock', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock/', 'task_description': 'You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. You want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock. Return _the maximum profit you can achieve from this transaction_. If you cannot achieve any profit, return `0`. **Example 1:** ``` **Input:** prices = [7,1,5,3,6,4] **Output:** 5 **Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. ``` **Example 2:** ``` **Input:** prices = [7,6,4,3,1] **Output:** 0 **Explanation:** In this case, no transactions are done and the max profit = 0. ``` **Constraints:** `1 <= prices.length <= 105` `0 <= prices[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'prices = [7,1,5,3,6,4]', 'output': '5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.'}, {'label': 'Example 2', 'input': 'prices = [7,6,4,3,1]', 'output': '0 Explanation: In this case, no transactions are done and the max profit = 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_profit(prices :: [integer]) :: integer\\n  def max_profit(prices) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_profit(Prices :: [integer()]) -> integer().\\nmax_profit(Prices) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxProfit(prices: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!820\n",
            "triangle 120\n",
            "{'id': 120, 'name': 'triangle', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/triangle/', 'task_description': 'Given a `triangle` array, return _the minimum path sum from top to bottom_. For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row. **Example 1:** ``` **Input:** triangle = [[2],[3,4],[6,5,7],[4,1,8,3]] **Output:** 11 **Explanation:** The triangle looks like: 2 3 4 6 5 7 4 1 8 3 The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above). ``` **Example 2:** ``` **Input:** triangle = [[-10]] **Output:** -10 ``` **Constraints:** `1 <= triangle.length <= 200` `triangle[0].length == 1` `triangle[i].length == triangle[i - 1].length + 1` `-104 <= triangle[i][j] <= 104` **Follow up:** Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?', 'test_case': [{'label': 'Example 1', 'input': 'triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]', 'output': '11 Explanation: The triangle looks like: 2 3 4\\n 6 5 7\\n4 1 8 3\\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).'}, {'label': 'Example 2', 'input': 'triangle = [[-10]]', 'output': '-10'}], 'elixir_template': 'defmodule Solution do\\n  @spec minimum_total(triangle :: [[integer]]) :: integer\\n  def minimum_total(triangle) do\\n    \\n  end\\nend', 'erlang_template': '-spec minimum_total(Triangle :: [[integer()]]) -> integer().\\nminimum_total(Triangle) ->\\n  .', 'scala_template': 'object Solution {\\n    def minimumTotal(triangle: List[List[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!821\n",
            "pascals-triangle-ii 119\n",
            "{'id': 119, 'name': 'pascals-triangle-ii', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/pascals-triangle-ii/', 'task_description': \"Given an integer `rowIndex`, return the `rowIndexth` (**0-indexed**) row of the **Pascal's triangle**. In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown: **Example 1:** ``` **Input:** rowIndex = 3 **Output:** [1,3,3,1] ``` **Example 2:** ``` **Input:** rowIndex = 0 **Output:** [1] ``` **Example 3:** ``` **Input:** rowIndex = 1 **Output:** [1,1] ``` **Constraints:** `0 <= rowIndex <= 33` **Follow up:** Could you optimize your algorithm to use only `O(rowIndex)` extra space?\", 'test_case': [{'label': 'Example 1', 'input': 'rowIndex = 3', 'output': '[1,3,3,1]'}, {'label': 'Example 2', 'input': 'rowIndex = 0', 'output': '[1]'}, {'label': 'Example 3', 'input': 'rowIndex = 1', 'output': '[1,1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec get_row(row_index :: integer) :: [integer]\\n  def get_row(row_index) do\\n    \\n  end\\nend', 'erlang_template': '-spec get_row(RowIndex :: integer()) -> [integer()].\\nget_row(RowIndex) ->\\n  .', 'scala_template': 'object Solution {\\n    def getRow(rowIndex: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!822\n",
            "pascals-triangle 118\n",
            "{'id': 118, 'name': 'pascals-triangle', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/pascals-triangle/', 'task_description': \"Given an integer `numRows`, return the first numRows of **Pascal's triangle**. In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown: **Example 1:** ``` **Input:** numRows = 5 **Output:** [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] ``` **Example 2:** ``` **Input:** numRows = 1 **Output:** [[1]] ``` **Constraints:** `1 <= numRows <= 30`\", 'test_case': [{'label': 'Example 1', 'input': 'numRows = 5', 'output': '[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]'}, {'label': 'Example 2', 'input': 'numRows = 1', 'output': '[[1]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec generate(num_rows :: integer) :: [[integer]]\\n  def generate(num_rows) do\\n    \\n  end\\nend', 'erlang_template': '-spec generate(NumRows :: integer()) -> [[integer()]].\\ngenerate(NumRows) ->\\n  .', 'scala_template': 'object Solution {\\n    def generate(numRows: Int): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!823\n",
            "populating-next-right-pointers-in-each-node-ii 117\n",
            "{'id': 117, 'name': 'populating-next-right-pointers-in-each-node-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/', 'task_description': \"Given a binary tree ``` struct Node { int val; Node *left; Node *right; Node *next; } ``` Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`. Initially, all next pointers are set to `NULL`. **Example 1:** ``` **Input:** root = [1,2,3,4,5,null,7] **Output:** [1,#,2,3,#,4,5,7,#] **Explanation: **Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level. ``` **Example 2:** ``` **Input:** root = [] **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 6000]`. `-100 <= Node.val <= 100` **Follow-up:** You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,5,null,7]', 'output': \"[1,#,2,3,#,4,5,7,#] Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\"}, {'label': 'Example 2', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 6000] . -100 <= Node.val <= 100 Follow-up: You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: Node = null\\n *   var right: Node = null\\n *   var next: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def connect(root: Node): Node = {\\n        \\n    }\\n}'}\n",
            "Done!824\n",
            "populating-next-right-pointers-in-each-node 116\n",
            "{'id': 116, 'name': 'populating-next-right-pointers-in-each-node', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/populating-next-right-pointers-in-each-node/', 'task_description': \"You are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition: ``` struct Node { int val; Node *left; Node *right; Node *next; } ``` Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`. Initially, all next pointers are set to `NULL`. **Example 1:** ``` **Input:** root = [1,2,3,4,5,6,7] **Output:** [1,#,2,3,#,4,5,6,7,#] **Explanation: **Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level. ``` **Example 2:** ``` **Input:** root = [] **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 212 - 1]`. `-1000 <= Node.val <= 1000` **Follow-up:** You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,3,4,5,6,7]', 'output': \"[1,#,2,3,#,4,5,6,7,#] Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\"}, {'label': 'Example 2', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 2 12 - 1] . -1000 <= Node.val <= 1000 Follow-up: You may only use constant extra space. The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: Node = null\\n *   var right: Node = null\\n *   var next: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def connect(root: Node): Node = {\\n        \\n    }\\n}'}\n",
            "Done!825\n",
            "distinct-subsequences 115\n",
            "{'id': 115, 'name': 'distinct-subsequences', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/distinct-subsequences/', 'task_description': 'Given two strings s and t, return the number of distinct subsequences of s which equals t. The test cases are generated so that the answer fits on a 32-bit signed integer. **Example 1:** ``` **Input:** s = \"rabbbit\", t = \"rabbit\" **Output:** 3 **Explanation:** As shown below, there are 3 ways you can generate \"rabbit\" from s. `**rabb**b**it**` `**ra**b**bbit**` `**rab**b**bit**` ``` **Example 2:** ``` **Input:** s = \"babgbag\", t = \"bag\" **Output:** 5 **Explanation:** As shown below, there are 5 ways you can generate \"bag\" from s. `**ba**b**g**bag` `**ba**bgba**g**` `**b**abgb**ag**` `ba**b**gb**ag**` `babg**bag**` ``` **Constraints:** `1 <= s.length, t.length <= 1000` `s` and `t` consist of English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"rabbbit\", t = \"rabbit\"', 'output': '3 Explanation: As shown below, there are 3 ways you can generate \"rabbit\" from s. rabb b it ra b bbit rab b bit'}, {'label': 'Example 2', 'input': 's = \"babgbag\", t = \"bag\"', 'output': '5 Explanation: As shown below, there are 5 ways you can generate \"bag\" from s. ba b g bag ba bgba g b abgb ag ba b gb ag babg bag'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_distinct(s :: String.t, t :: String.t) :: integer\\n  def num_distinct(s, t) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_distinct(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> integer().\\nnum_distinct(S, T) ->\\n  .', 'scala_template': 'object Solution {\\n    def numDistinct(s: String, t: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!826\n",
            "flatten-binary-tree-to-linked-list 114\n",
            "{'id': 114, 'name': 'flatten-binary-tree-to-linked-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/flatten-binary-tree-to-linked-list/', 'task_description': 'Given the `root` of a binary tree, flatten the tree into a \"linked list\": The \"linked list\" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`. The \"linked list\" should be in the same order as a **pre-order**** traversal** of the binary tree. **Example 1:** ``` **Input:** root = [1,2,5,3,4,null,6] **Output:** [1,null,2,null,3,null,4,null,5,null,6] ``` **Example 2:** ``` **Input:** root = [] **Output:** [] ``` **Example 3:** ``` **Input:** root = [0] **Output:** [0] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 2000]`. `-100 <= Node.val <= 100` **Follow up:** Can you flatten the tree in-place (with `O(1)` extra space)?', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,5,3,4,null,6]', 'output': '[1,null,2,null,3,null,4,null,5,null,6]'}, {'label': 'Example 2', 'input': 'root = []', 'output': '[]'}, {'label': 'Example 3', 'input': 'root = [0]', 'output': '[0] Constraints: The number of nodes in the tree is in the range [0, 2000] . -100 <= Node.val <= 100 Follow up: Can you flatten the tree in-place (with O(1) extra space)?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def flatten(root: TreeNode): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!827\n",
            "path-sum-ii 113\n",
            "{'id': 113, 'name': 'path-sum-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/path-sum-ii/', 'task_description': 'Given the `root` of a binary tree and an integer `targetSum`, return _all **root-to-leaf** paths where the sum of the node values in the path equals _`targetSum`_. Each path should be returned as a list of the node **values**, not node references_. A **root-to-leaf** path is a path starting from the root and ending at any leaf node. A **leaf** is a node with no children. **Example 1:** ``` **Input:** root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 **Output:** [[5,4,11,2],[5,8,4,5]] **Explanation:** There are two paths whose sum equals targetSum: 5 + 4 + 11 + 2 = 22 5 + 8 + 4 + 5 = 22 ``` **Example 2:** ``` **Input:** root = [1,2,3], targetSum = 5 **Output:** [] ``` **Example 3:** ``` **Input:** root = [1,2], targetSum = 0 **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 5000]`. `-1000 <= Node.val <= 1000` `-1000 <= targetSum <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22', 'output': '[[5,4,11,2],[5,8,4,5]] Explanation: There are two paths whose sum equals targetSum:\\n5 + 4 + 11 + 2 = 22\\n5 + 8 + 4 + 5 = 22'}, {'label': 'Example 2', 'input': 'root = [1,2,3], targetSum = 5', 'output': '[]'}, {'label': 'Example 3', 'input': 'root = [1,2], targetSum = 0', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 5000] . -1000 <= Node.val <= 1000 -1000 <= targetSum <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec path_sum(root :: TreeNode.t | nil, target_sum :: integer) :: [[integer]]\\n  def path_sum(root, target_sum) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec path_sum(Root :: #tree_node{} | null, TargetSum :: integer()) -> [[integer()]].\\npath_sum(Root, TargetSum) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def pathSum(root: TreeNode, targetSum: Int): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!828\n",
            "path-sum 112\n",
            "{'id': 112, 'name': 'path-sum', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/path-sum/', 'task_description': 'Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that adding up all the values along the path equals `targetSum`. A **leaf** is a node with no children. **Example 1:** ``` **Input:** root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 **Output:** true **Explanation:** The root-to-leaf path with the target sum is shown. ``` **Example 2:** ``` **Input:** root = [1,2,3], targetSum = 5 **Output:** false **Explanation:** There are two root-to-leaf paths in the tree: (1 --> 2): The sum is 3. (1 --> 3): The sum is 4. There is no root-to-leaf path with sum = 5. ``` **Example 3:** ``` **Input:** root = [], targetSum = 0 **Output:** false **Explanation:** Since the tree is empty, there are no root-to-leaf paths. ``` **Constraints:** The number of nodes in the tree is in the range `[0, 5000]`. `-1000 <= Node.val <= 1000` `-1000 <= targetSum <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22', 'output': 'true Explanation: The root-to-leaf path with the target sum is shown.'}, {'label': 'Example 2', 'input': 'root = [1,2,3], targetSum = 5', 'output': 'false Explanation: There are two root-to-leaf paths in the tree:\\n(1 --> 2): The sum is 3.\\n(1 --> 3): The sum is 4.\\nThere is no root-to-leaf path with sum = 5.'}, {'label': 'Example 3', 'input': 'root = [], targetSum = 0', 'output': 'false Explanation: Since the tree is empty, there are no root-to-leaf paths. Constraints: The number of nodes in the tree is in the range [0, 5000] . -1000 <= Node.val <= 1000 -1000 <= targetSum <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec has_path_sum(root :: TreeNode.t | nil, target_sum :: integer) :: boolean\\n  def has_path_sum(root, target_sum) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec has_path_sum(Root :: #tree_node{} | null, TargetSum :: integer()) -> boolean().\\nhas_path_sum(Root, TargetSum) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def hasPathSum(root: TreeNode, targetSum: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!829\n",
            "minimum-depth-of-binary-tree 111\n",
            "{'id': 111, 'name': 'minimum-depth-of-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/minimum-depth-of-binary-tree/', 'task_description': 'Given a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. **Note:** A leaf is a node with no children. **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** 2 ``` **Example 2:** ``` **Input:** root = [2,null,3,null,4,null,5,null,6] **Output:** 5 ``` **Constraints:** The number of nodes in the tree is in the range `[0, 105]`. `-1000 <= Node.val <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': '2'}, {'label': 'Example 2', 'input': 'root = [2,null,3,null,4,null,5,null,6]', 'output': '5 Constraints: The number of nodes in the tree is in the range [0, 10 5 ] . -1000 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec min_depth(root :: TreeNode.t | nil) :: integer\\n  def min_depth(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec min_depth(Root :: #tree_node{} | null) -> integer().\\nmin_depth(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def minDepth(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!830\n",
            "balanced-binary-tree 110\n",
            "{'id': 110, 'name': 'balanced-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/balanced-binary-tree/', 'task_description': 'Given a binary tree, determine if it is **height-balanced**. **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** true ``` **Example 2:** ``` **Input:** root = [1,2,2,3,3,null,null,4,4] **Output:** false ``` **Example 3:** ``` **Input:** root = [] **Output:** true ``` **Constraints:** The number of nodes in the tree is in the range `[0, 5000]`. `-104 <= Node.val <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': 'true'}, {'label': 'Example 2', 'input': 'root = [1,2,2,3,3,null,null,4,4]', 'output': 'false'}, {'label': 'Example 3', 'input': 'root = []', 'output': 'true Constraints: The number of nodes in the tree is in the range [0, 5000] . -10 4 <= Node.val <= 10 4'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_balanced(root :: TreeNode.t | nil) :: boolean\\n  def is_balanced(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_balanced(Root :: #tree_node{} | null) -> boolean().\\nis_balanced(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isBalanced(root: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!831\n",
            "convert-sorted-list-to-binary-search-tree 109\n",
            "{'id': 109, 'name': 'convert-sorted-list-to-binary-search-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/', 'task_description': 'Given the `head` of a singly linked list where elements are sorted in **ascending order**, convert _it to a _**_height-balanced_** _binary search tree_. **Example 1:** ``` **Input:** head = [-10,-3,0,5,9] **Output:** [0,-3,9,-10,null,5] **Explanation:** One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST. ``` **Example 2:** ``` **Input:** head = [] **Output:** [] ``` **Constraints:** The number of nodes in `head` is in the range `[0, 2 * 104]`. `-105 <= Node.val <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'head = [-10,-3,0,5,9]', 'output': '[0,-3,9,-10,null,5] Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.'}, {'label': 'Example 2', 'input': 'head = []', 'output': '[] Constraints: The number of nodes in head is in the range [0, 2 * 10 4 ] . -10 5 <= Node.val <= 10 5'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\n# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sorted_list_to_bst(head :: ListNode.t | nil) :: TreeNode.t | nil\\n  def sorted_list_to_bst(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec sorted_list_to_bst(Head :: #list_node{} | null) -> #tree_node{} | null.\\nsorted_list_to_bst(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\n/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def sortedListToBST(head: ListNode): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!832\n",
            "convert-sorted-array-to-binary-search-tree 108\n",
            "{'id': 108, 'name': 'convert-sorted-array-to-binary-search-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/', 'task_description': 'Given an integer array `nums` where the elements are sorted in **ascending order**, convert _it to a _**_height-balanced_** _binary search tree_. **Example 1:** ``` **Input:** nums = [-10,-3,0,5,9] **Output:** [0,-3,9,-10,null,5] **Explanation:** [0,-10,5,null,-3,null,9] is also accepted: ``` **Example 2:** ``` **Input:** nums = [1,3] **Output:** [3,1] **Explanation:** [1,null,3] and [3,1] are both height-balanced BSTs. ``` **Constraints:** `1 <= nums.length <= 104` `-104 <= nums[i] <= 104` `nums` is sorted in a **strictly increasing** order.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [-10,-3,0,5,9]', 'output': '[0,-3,9,-10,null,5] Explanation: [0,-10,5,null,-3,null,9] is also accepted:'}, {'label': 'Example 2', 'input': 'nums = [1,3]', 'output': '[3,1] Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sorted_array_to_bst(nums :: [integer]) :: TreeNode.t | nil\\n  def sorted_array_to_bst(nums) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec sorted_array_to_bst(Nums :: [integer()]) -> #tree_node{} | null.\\nsorted_array_to_bst(Nums) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def sortedArrayToBST(nums: Array[Int]): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!833\n",
            "binary-tree-level-order-traversal-ii 107\n",
            "{'id': 107, 'name': 'binary-tree-level-order-traversal-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-tree-level-order-traversal-ii/', 'task_description': \"Given the `root` of a binary tree, return _the bottom-up level order traversal of its nodes' values_. (i.e., from left to right, level by level from leaf to root). **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** [[15,7],[9,20],[3]] ``` **Example 2:** ``` **Input:** root = [1] **Output:** [[1]] ``` **Example 3:** ``` **Input:** root = [] **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 2000]`. `-1000 <= Node.val <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': '[[15,7],[9,20],[3]]'}, {'label': 'Example 2', 'input': 'root = [1]', 'output': '[[1]]'}, {'label': 'Example 3', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 2000] . -1000 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec level_order_bottom(root :: TreeNode.t | nil) :: [[integer]]\\n  def level_order_bottom(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec level_order_bottom(Root :: #tree_node{} | null) -> [[integer()]].\\nlevel_order_bottom(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def levelOrderBottom(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!834\n",
            "construct-binary-tree-from-inorder-and-postorder-traversal 106\n",
            "{'id': 106, 'name': 'construct-binary-tree-from-inorder-and-postorder-traversal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/', 'task_description': 'Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return _the binary tree_. **Example 1:** ``` **Input:** inorder = [9,3,15,20,7], postorder = [9,15,7,20,3] **Output:** [3,9,20,null,null,15,7] ``` **Example 2:** ``` **Input:** inorder = [-1], postorder = [-1] **Output:** [-1] ``` **Constraints:** `1 <= inorder.length <= 3000` `postorder.length == inorder.length` `-3000 <= inorder[i], postorder[i] <= 3000` `inorder` and `postorder` consist of **unique** values. Each value of `postorder` also appears in `inorder`. `inorder` is **guaranteed** to be the inorder traversal of the tree. `postorder` is **guaranteed** to be the postorder traversal of the tree.', 'test_case': [{'label': 'Example 1', 'input': 'inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]', 'output': '[3,9,20,null,null,15,7]'}, {'label': 'Example 2', 'input': 'inorder = [-1], postorder = [-1]', 'output': '[-1]'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec build_tree(inorder :: [integer], postorder :: [integer]) :: TreeNode.t | nil\\n  def build_tree(inorder, postorder) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec build_tree(Inorder :: [integer()], Postorder :: [integer()]) -> #tree_node{} | null.\\nbuild_tree(Inorder, Postorder) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def buildTree(inorder: Array[Int], postorder: Array[Int]): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!835\n",
            "construct-binary-tree-from-preorder-and-inorder-traversal 105\n",
            "{'id': 105, 'name': 'construct-binary-tree-from-preorder-and-inorder-traversal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/', 'task_description': 'Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return _the binary tree_. **Example 1:** ``` **Input:** preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] **Output:** [3,9,20,null,null,15,7] ``` **Example 2:** ``` **Input:** preorder = [-1], inorder = [-1] **Output:** [-1] ``` **Constraints:** `1 <= preorder.length <= 3000` `inorder.length == preorder.length` `-3000 <= preorder[i], inorder[i] <= 3000` `preorder` and `inorder` consist of **unique** values. Each value of `inorder` also appears in `preorder`. `preorder` is **guaranteed** to be the preorder traversal of the tree. `inorder` is **guaranteed** to be the inorder traversal of the tree.', 'test_case': [{'label': 'Example 1', 'input': 'preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]', 'output': '[3,9,20,null,null,15,7]'}, {'label': 'Example 2', 'input': 'preorder = [-1], inorder = [-1]', 'output': '[-1]'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec build_tree(preorder :: [integer], inorder :: [integer]) :: TreeNode.t | nil\\n  def build_tree(preorder, inorder) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec build_tree(Preorder :: [integer()], Inorder :: [integer()]) -> #tree_node{} | null.\\nbuild_tree(Preorder, Inorder) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def buildTree(preorder: Array[Int], inorder: Array[Int]): TreeNode = {\\n        \\n    }\\n}'}\n",
            "Done!836\n",
            "maximum-depth-of-binary-tree 104\n",
            "{'id': 104, 'name': 'maximum-depth-of-binary-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/maximum-depth-of-binary-tree/', 'task_description': \"Given the `root` of a binary tree, return _its maximum depth_. A binary tree's **maximum depth** is the number of nodes along the longest path from the root node down to the farthest leaf node. **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** 3 ``` **Example 2:** ``` **Input:** root = [1,null,2] **Output:** 2 ``` **Constraints:** The number of nodes in the tree is in the range `[0, 104]`. `-100 <= Node.val <= 100`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': '3'}, {'label': 'Example 2', 'input': 'root = [1,null,2]', 'output': '2 Constraints: The number of nodes in the tree is in the range [0, 10 4 ] . -100 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec max_depth(root :: TreeNode.t | nil) :: integer\\n  def max_depth(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec max_depth(Root :: #tree_node{} | null) -> integer().\\nmax_depth(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def maxDepth(root: TreeNode): Int = {\\n        \\n    }\\n}'}\n",
            "Done!837\n",
            "binary-tree-zigzag-level-order-traversal 103\n",
            "{'id': 103, 'name': 'binary-tree-zigzag-level-order-traversal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/', 'task_description': \"Given the `root` of a binary tree, return _the zigzag level order traversal of its nodes' values_. (i.e., from left to right, then right to left for the next level and alternate between). **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** [[3],[20,9],[15,7]] ``` **Example 2:** ``` **Input:** root = [1] **Output:** [[1]] ``` **Example 3:** ``` **Input:** root = [] **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 2000]`. `-100 <= Node.val <= 100`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': '[[3],[20,9],[15,7]]'}, {'label': 'Example 2', 'input': 'root = [1]', 'output': '[[1]]'}, {'label': 'Example 3', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 2000] . -100 <= Node.val <= 100'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec zigzag_level_order(root :: TreeNode.t | nil) :: [[integer]]\\n  def zigzag_level_order(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec zigzag_level_order(Root :: #tree_node{} | null) -> [[integer()]].\\nzigzag_level_order(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def zigzagLevelOrder(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!838\n",
            "binary-tree-level-order-traversal 102\n",
            "{'id': 102, 'name': 'binary-tree-level-order-traversal', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/binary-tree-level-order-traversal/', 'task_description': \"Given the `root` of a binary tree, return _the level order traversal of its nodes' values_. (i.e., from left to right, level by level). **Example 1:** ``` **Input:** root = [3,9,20,null,null,15,7] **Output:** [[3],[9,20],[15,7]] ``` **Example 2:** ``` **Input:** root = [1] **Output:** [[1]] ``` **Example 3:** ``` **Input:** root = [] **Output:** [] ``` **Constraints:** The number of nodes in the tree is in the range `[0, 2000]`. `-1000 <= Node.val <= 1000`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [3,9,20,null,null,15,7]', 'output': '[[3],[9,20],[15,7]]'}, {'label': 'Example 2', 'input': 'root = [1]', 'output': '[[1]]'}, {'label': 'Example 3', 'input': 'root = []', 'output': '[] Constraints: The number of nodes in the tree is in the range [0, 2000] . -1000 <= Node.val <= 1000'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec level_order(root :: TreeNode.t | nil) :: [[integer]]\\n  def level_order(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec level_order(Root :: #tree_node{} | null) -> [[integer()]].\\nlevel_order(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def levelOrder(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!839\n",
            "symmetric-tree 101\n",
            "{'id': 101, 'name': 'symmetric-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/symmetric-tree/', 'task_description': 'Given the `root` of a binary tree, _check whether it is a mirror of itself_ (i.e., symmetric around its center). **Example 1:** ``` **Input:** root = [1,2,2,3,4,4,3] **Output:** true ``` **Example 2:** ``` **Input:** root = [1,2,2,null,3,null,3] **Output:** false ``` **Constraints:** The number of nodes in the tree is in the range `[1, 1000]`. `-100 <= Node.val <= 100` **Follow up:** Could you solve it both recursively and iteratively?', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,2,2,3,4,4,3]', 'output': 'true'}, {'label': 'Example 2', 'input': 'root = [1,2,2,null,3,null,3]', 'output': 'false Constraints: The number of nodes in the tree is in the range [1, 1000] . -100 <= Node.val <= 100 Follow up: Could you solve it both recursively and iteratively?'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_symmetric(root :: TreeNode.t | nil) :: boolean\\n  def is_symmetric(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_symmetric(Root :: #tree_node{} | null) -> boolean().\\nis_symmetric(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isSymmetric(root: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!840\n",
            "same-tree 100\n",
            "{'id': 100, 'name': 'same-tree', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/same-tree/', 'task_description': 'Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical, and the nodes have the same value. **Example 1:** ``` **Input:** p = [1,2,3], q = [1,2,3] **Output:** true ``` **Example 2:** ``` **Input:** p = [1,2], q = [1,null,2] **Output:** false ``` **Example 3:** ``` **Input:** p = [1,2,1], q = [1,1,2] **Output:** false ``` **Constraints:** The number of nodes in both trees is in the range `[0, 100]`. `-104 <= Node.val <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'p = [1,2,3], q = [1,2,3]', 'output': 'true'}, {'label': 'Example 2', 'input': 'p = [1,2], q = [1,null,2]', 'output': 'false'}, {'label': 'Example 3', 'input': 'p = [1,2,1], q = [1,1,2]', 'output': 'false Constraints: The number of nodes in both trees is in the range [0, 100] . -10 4 <= Node.val <= 10 4'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_same_tree(p :: TreeNode.t | nil, q :: TreeNode.t | nil) :: boolean\\n  def is_same_tree(p, q) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_same_tree(P :: #tree_node{} | null, Q :: #tree_node{} | null) -> boolean().\\nis_same_tree(P, Q) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isSameTree(p: TreeNode, q: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!841\n",
            "recover-binary-search-tree 99\n",
            "{'id': 99, 'name': 'recover-binary-search-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/recover-binary-search-tree/', 'task_description': 'You are given the `root` of a binary search tree (BST), where the values of **exactly** two nodes of the tree were swapped by mistake. _Recover the tree without changing its structure_. **Example 1:** ``` **Input:** root = [1,3,null,null,2] **Output:** [3,1,null,null,2] **Explanation:** 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid. ``` **Example 2:** ``` **Input:** root = [3,1,4,null,null,2] **Output:** [2,1,4,null,null,3] **Explanation:** 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid. ``` **Constraints:** The number of nodes in the tree is in the range `[2, 1000]`. `-231 <= Node.val <= 231 - 1` **Follow up:** A solution using `O(n)` space is pretty straight-forward. Could you devise a constant `O(1)` space solution?', 'test_case': [{'label': 'Example 1', 'input': 'root = [1,3,null,null,2]', 'output': '[3,1,null,null,2] Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.'}, {'label': 'Example 2', 'input': 'root = [3,1,4,null,null,2]', 'output': '[2,1,4,null,null,3] Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid. Constraints: The number of nodes in the tree is in the range [2, 1000] . -2 31 <= Node.val <= 2 31 - 1 Follow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def recoverTree(root: TreeNode): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!842\n",
            "validate-binary-search-tree 98\n",
            "{'id': 98, 'name': 'validate-binary-search-tree', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/validate-binary-search-tree/', 'task_description': \"Given the `root` of a binary tree, _determine if it is a valid binary search tree (BST)_. A **valid BST** is defined as follows: The left subtree of a node contains only nodes with keys **less than** the node's key. The right subtree of a node contains only nodes with keys **greater than** the node's key. Both the left and right subtrees must also be binary search trees. **Example 1:** ``` **Input:** root = [2,1,3] **Output:** true ``` **Example 2:** ``` **Input:** root = [5,1,4,null,null,3,6] **Output:** false **Explanation:** The root node's value is 5 but its right child's value is 4. ``` **Constraints:** The number of nodes in the tree is in the range `[1, 104]`. `-231 <= Node.val <= 231 - 1`\", 'test_case': [{'label': 'Example 1', 'input': 'root = [2,1,3]', 'output': 'true'}, {'label': 'Example 2', 'input': 'root = [5,1,4,null,null,3,6]', 'output': \"false Explanation: The root node's value is 5 but its right child's value is 4. Constraints: The number of nodes in the tree is in the range [1, 10 4 ] . -2 31 <= Node.val <= 2 31 - 1\"}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_valid_bst(root :: TreeNode.t | nil) :: boolean\\n  def is_valid_bst(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_valid_bst(Root :: #tree_node{} | null) -> boolean().\\nis_valid_bst(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isValidBST(root: TreeNode): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!843\n",
            "interleaving-string 97\n",
            "{'id': 97, 'name': 'interleaving-string', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/interleaving-string/', 'task_description': 'Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`. An **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that: `s = s1 + s2 + ... + sn` `t = t1 + t2 + ... + tm` `|n - m| <= 1` The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...` **Note:** `a + b` is the concatenation of strings `a` and `b`. **Example 1:** ``` **Input:** s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\" **Output:** true **Explanation:** One way to obtain s3 is: Split s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\". Interleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\". Since s3 can be obtained by interleaving s1 and s2, we return true. ``` **Example 2:** ``` **Input:** s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\" **Output:** false **Explanation:** Notice how it is impossible to interleave s2 with any other string to obtain s3. ``` **Example 3:** ``` **Input:** s1 = \"\", s2 = \"\", s3 = \"\" **Output:** true ``` **Constraints:** `0 <= s1.length, s2.length <= 100` `0 <= s3.length <= 200` `s1`, `s2`, and `s3` consist of lowercase English letters. **Follow up:** Could you solve it using only `O(s2.length)` additional memory space?', 'test_case': [{'label': 'Example 1', 'input': 's1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"', 'output': 'true Explanation: One way to obtain s3 is:\\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\\nSince s3 can be obtained by interleaving s1 and s2, we return true.'}, {'label': 'Example 2', 'input': 's1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"', 'output': 'false Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.'}, {'label': 'Example 3', 'input': 's1 = \"\", s2 = \"\", s3 = \"\"', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_interleave(s1 :: String.t, s2 :: String.t, s3 :: String.t) :: boolean\\n  def is_interleave(s1, s2, s3) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_interleave(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), S3 :: unicode:unicode_binary()) -> boolean().\\nis_interleave(S1, S2, S3) ->\\n  .', 'scala_template': 'object Solution {\\n    def isInterleave(s1: String, s2: String, s3: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!844\n",
            "unique-binary-search-trees 96\n",
            "{'id': 96, 'name': 'unique-binary-search-trees', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/unique-binary-search-trees/', 'task_description': \"Given an integer `n`, return _the number of structurally unique **BST'**s (binary search trees) which has exactly _`n`_ nodes of unique values from_ `1` _to_ `n`. **Example 1:** ``` **Input:** n = 3 **Output:** 5 ``` **Example 2:** ``` **Input:** n = 1 **Output:** 1 ``` **Constraints:** `1 <= n <= 19`\", 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '5'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_trees(n :: integer) :: integer\\n  def num_trees(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_trees(N :: integer()) -> integer().\\nnum_trees(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def numTrees(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!845\n",
            "unique-binary-search-trees-ii 95\n",
            "{'id': 95, 'name': 'unique-binary-search-trees-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/unique-binary-search-trees-ii/', 'task_description': \"Given an integer `n`, return _all the structurally unique **BST'**s (binary search trees), which has exactly _`n`_ nodes of unique values from_ `1` _to_ `n`. Return the answer in **any order**. **Example 1:** ``` **Input:** n = 3 **Output:** [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]] ``` **Example 2:** ``` **Input:** n = 1 **Output:** [[1]] ``` **Constraints:** `1 <= n <= 8`\", 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '[[1]]'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec generate_trees(n :: integer) :: [TreeNode.t | nil]\\n  def generate_trees(n) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec generate_trees(N :: integer()) -> [#tree_node{} | null].\\ngenerate_trees(N) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def generateTrees(n: Int): List[TreeNode] = {\\n        \\n    }\\n}'}\n",
            "Done!846\n",
            "binary-tree-inorder-traversal 94\n",
            "{'id': 94, 'name': 'binary-tree-inorder-traversal', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/binary-tree-inorder-traversal/', 'task_description': \"Given the `root` of a binary tree, return _the inorder traversal of its nodes' values_. **Example 1:** **Input:** root = [1,null,2,3] **Output:** [1,3,2] **Explanation:** **Example 2:** **Input:** root = [1,2,3,4,5,null,8,null,null,6,7,9] **Output:** [4,2,6,5,7,1,3,9,8] **Explanation:** **Example 3:** **Input:** root = [] **Output:** [] **Example 4:** **Input:** root = [1] **Output:** [1] **Constraints:** The number of nodes in the tree is in the range `[0, 100]`. `-100 <= Node.val <= 100` **Follow up:** Recursive solution is trivial, could you do it iteratively?\", 'test_case': [{'label': 'Example 1', 'input': 'root = [1,null,2,3]', 'output': '[1,3,2] Explanation:'}, {'label': 'Example 2', 'input': 'root = [1,2,3,4,5,null,8,null,null,6,7,9]', 'output': '[4,2,6,5,7,1,3,9,8] Explanation:'}, {'label': 'Example 3', 'input': 'root = []', 'output': '[]'}, {'label': 'Example 4', 'input': 'root = [1]', 'output': '[1] Constraints: The number of nodes in the tree is in the range [0, 100] . -100 <= Node.val <= 100 Follow up: Recursive solution is trivial, could you do it iteratively?'}], 'elixir_template': '# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\\n  def inorder_traversal(root) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\\ninorder_traversal(Root) ->\\n  .\", 'scala_template': '/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def inorderTraversal(root: TreeNode): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!847\n",
            "restore-ip-addresses 93\n",
            "{'id': 93, 'name': 'restore-ip-addresses', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/restore-ip-addresses/', 'task_description': 'A **valid IP address** consists of exactly four integers separated by single dots. Each integer is between `0` and `255` (**inclusive**) and cannot have leading zeros. For example, `\"0.1.2.201\"` and `\"192.168.1.1\"` are **valid** IP addresses, but `\"0.011.255.245\"`, `\"192.168.1.312\"` and `\"192.168@1.1\"` are **invalid** IP addresses. Given a string `s` containing only digits, return _all possible valid IP addresses that can be formed by inserting dots into _`s`. You are **not** allowed to reorder or remove any digits in `s`. You may return the valid IP addresses in **any** order. **Example 1:** ``` **Input:** s = \"25525511135\" **Output:** [\"255.255.11.135\",\"255.255.111.35\"] ``` **Example 2:** ``` **Input:** s = \"0000\" **Output:** [\"0.0.0.0\"] ``` **Example 3:** ``` **Input:** s = \"101023\" **Output:** [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"] ``` **Constraints:** `1 <= s.length <= 20` `s` consists of digits only.', 'test_case': [{'label': 'Example 1', 'input': 's = \"25525511135\"', 'output': '[\"255.255.11.135\",\"255.255.111.35\"]'}, {'label': 'Example 2', 'input': 's = \"0000\"', 'output': '[\"0.0.0.0\"]'}, {'label': 'Example 3', 'input': 's = \"101023\"', 'output': '[\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec restore_ip_addresses(s :: String.t) :: [String.t]\\n  def restore_ip_addresses(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec restore_ip_addresses(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nrestore_ip_addresses(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def restoreIpAddresses(s: String): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!848\n",
            "reverse-linked-list-ii 92\n",
            "{'id': 92, 'name': 'reverse-linked-list-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reverse-linked-list-ii/', 'task_description': 'Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return _the reversed list_. **Example 1:** ``` **Input:** head = [1,2,3,4,5], left = 2, right = 4 **Output:** [1,4,3,2,5] ``` **Example 2:** ``` **Input:** head = [5], left = 1, right = 1 **Output:** [5] ``` **Constraints:** The number of nodes in the list is `n`. `1 <= n <= 500` `-500 <= Node.val <= 500` `1 <= left <= right <= n` **Follow up:** Could you do it in one pass?', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5], left = 2, right = 4', 'output': '[1,4,3,2,5]'}, {'label': 'Example 2', 'input': 'head = [5], left = 1, right = 1', 'output': '[5] Constraints: The number of nodes in the list is n . 1 <= n <= 500 -500 <= Node.val <= 500 1 <= left <= right <= n Follow up: Could you do it in one pass?'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec reverse_between(head :: ListNode.t | nil, left :: integer, right :: integer) :: ListNode.t | nil\\n  def reverse_between(head, left, right) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec reverse_between(Head :: #list_node{} | null, Left :: integer(), Right :: integer()) -> #list_node{} | null.\\nreverse_between(Head, Left, Right) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def reverseBetween(head: ListNode, left: Int, right: Int): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!849\n",
            "decode-ways 91\n",
            "{'id': 91, 'name': 'decode-ways', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/decode-ways/', 'task_description': 'You have intercepted a secret message encoded as a string of numbers. The message is **decoded** via the following mapping: `\"1\" -> \\'A\\' \"2\" -> \\'B\\' ... \"25\" -> \\'Y\\' \"26\" -> \\'Z\\'` However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes (`\"2\"` and `\"5\"` vs `\"25\"`). For example, `\"11106\"` can be decoded into: `\"AAJF\"` with the grouping `(1, 1, 10, 6)` `\"KJF\"` with the grouping `(11, 10, 6)` The grouping `(1, 11, 06)` is invalid because `\"06\"` is not a valid code (only `\"6\"` is valid). Note: there may be strings that are impossible to decode. Given a string s containing only digits, return the **number of ways** to **decode** it. If the entire string cannot be decoded in any valid way, return `0`. The test cases are generated so that the answer fits in a **32-bit** integer. **Example 1:** **Input:** s = \"12\" **Output:** 2 **Explanation:** \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12). **Example 2:** **Input:** s = \"226\" **Output:** 3 **Explanation:** \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6). **Example 3:** **Input:** s = \"06\" **Output:** 0 **Explanation:** \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\"). In this case, the string is not a valid encoding, so return 0. **Constraints:** `1 <= s.length <= 100` `s` contains only digits and may contain leading zero(s).', 'test_case': [{'label': 'Example 1', 'input': 's = \"12\"', 'output': '2 Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).'}, {'label': 'Example 2', 'input': 's = \"226\"', 'output': '3 Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).'}, {'label': 'Example 3', 'input': 's = \"06\"', 'output': '0 Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\"). In this case, the string is not a valid encoding, so return 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec num_decodings(s :: String.t) :: integer\\n  def num_decodings(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\\nnum_decodings(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def numDecodings(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!850\n",
            "subsets-ii 90\n",
            "{'id': 90, 'name': 'subsets-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/subsets-ii/', 'task_description': 'Given an integer array `nums` that may contain duplicates, return _all possible_ _subsets__ (the power set)_. The solution set **must not** contain duplicate subsets. Return the solution in **any order**. **Example 1:** ``` **Input:** nums = [1,2,2] **Output:** [[],[1],[1,2],[1,2,2],[2],[2,2]] ``` **Example 2:** ``` **Input:** nums = [0] **Output:** [[],[0]] ``` **Constraints:** `1 <= nums.length <= 10` `-10 <= nums[i] <= 10`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,2]', 'output': '[[],[1],[1,2],[1,2,2],[2],[2,2]]'}, {'label': 'Example 2', 'input': 'nums = [0]', 'output': '[[],[0]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec subsets_with_dup(nums :: [integer]) :: [[integer]]\\n  def subsets_with_dup(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec subsets_with_dup(Nums :: [integer()]) -> [[integer()]].\\nsubsets_with_dup(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def subsetsWithDup(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!851\n",
            "gray-code 89\n",
            "{'id': 89, 'name': 'gray-code', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/gray-code/', 'task_description': 'An **n-bit gray code sequence** is a sequence of `2n` integers where: Every integer is in the **inclusive** range `[0, 2n - 1]`, The first integer is `0`, An integer appears **no more than once** in the sequence, The binary representation of every pair of **adjacent** integers differs by **exactly one bit**, and The binary representation of the **first** and **last** integers differs by **exactly one bit**. Given an integer `n`, return _any valid **n-bit gray code sequence**_. **Example 1:** ``` **Input:** n = 2 **Output:** [0,1,3,2] **Explanation:** The binary representation of [0,1,3,2] is [00,01,11,10]. - 00 and 01 differ by one bit - 01 and 11 differ by one bit - 11 and 10 differ by one bit - 10 and 00 differ by one bit [0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01]. - 00 and 10 differ by one bit - 10 and 11 differ by one bit - 11 and 01 differ by one bit - 01 and 00 differ by one bit ``` **Example 2:** ``` **Input:** n = 1 **Output:** [0,1] ``` **Constraints:** `1 <= n <= 16`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '[0,1,3,2] Explanation: The binary representation of [0,1,3,2] is [00,01,11,10].\\n- 0 0 and 0 1 differ by one bit\\n- 0 1 and 1 1 differ by one bit\\n- 1 1 and 1 0 differ by one bit\\n- 1 0 and 0 0 differ by one bit\\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\\n- 0 0 and 1 0 differ by one bit\\n- 1 0 and 1 1 differ by one bit\\n- 1 1 and 0 1 differ by one bit\\n- 0 1 and 0 0 differ by one bit'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '[0,1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec gray_code(n :: integer) :: [integer]\\n  def gray_code(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec gray_code(N :: integer()) -> [integer()].\\ngray_code(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def grayCode(n: Int): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!852\n",
            "merge-sorted-array 88\n",
            "{'id': 88, 'name': 'merge-sorted-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/merge-sorted-array/', 'task_description': 'You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively. **Merge** `nums1` and `nums2` into a single array sorted in **non-decreasing order**. The final sorted array should not be returned by the function, but instead be _stored inside the array _`nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`. **Example 1:** ``` **Input:** nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 **Output:** [1,2,2,3,5,6] **Explanation:** The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. ``` **Example 2:** ``` **Input:** nums1 = [1], m = 1, nums2 = [], n = 0 **Output:** [1] **Explanation:** The arrays we are merging are [1] and []. The result of the merge is [1]. ``` **Example 3:** ``` **Input:** nums1 = [0], m = 0, nums2 = [1], n = 1 **Output:** [1] **Explanation:** The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1. ``` **Constraints:** `nums1.length == m + n` `nums2.length == n` `0 <= m, n <= 200` `1 <= m + n <= 200` `-109 <= nums1[i], nums2[j] <= 109` **Follow up: **Can you come up with an algorithm that runs in `O(m + n)` time?', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3', 'output': '[1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\\nThe result of the merge is [ 1 , 2 ,2, 3 ,5,6] with the underlined elements coming from nums1.'}, {'label': 'Example 2', 'input': 'nums1 = [1], m = 1, nums2 = [], n = 0', 'output': '[1] Explanation: The arrays we are merging are [1] and [].\\nThe result of the merge is [1].'}, {'label': 'Example 3', 'input': 'nums1 = [0], m = 0, nums2 = [1], n = 1', 'output': '[1] Explanation: The arrays we are merging are [] and [1].\\nThe result of the merge is [1].\\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1. Constraints: nums1.length == m + n nums2.length == n 0 <= m, n <= 200 1 <= m + n <= 200 -10 9 <= nums1[i], nums2[j] <= 10 9 Follow up: Can you come up with an algorithm that runs in O(m + n) time?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!853\n",
            "scramble-string 87\n",
            "{'id': 87, 'name': 'scramble-string', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/scramble-string/', 'task_description': 'We can scramble a string s to get a string t using the following algorithm: If the length of the string is 1, stop. If the length of the string is > 1, do the following: Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`. **Randomly** decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`. Apply step 1 recursively on each of the two substrings `x` and `y`. Given two strings `s1` and `s2` of **the same length**, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`. **Example 1:** ``` **Input:** s1 = \"great\", s2 = \"rgeat\" **Output:** true **Explanation:** One possible scenario applied on s1 is: \"great\" --> \"gr/eat\" // divide at random index. \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order. \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them. \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order. \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\". \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order. The algorithm stops now, and the result string is \"rgeat\" which is s2. As one possible scenario led s1 to be scrambled to s2, we return true. ``` **Example 2:** ``` **Input:** s1 = \"abcde\", s2 = \"caebd\" **Output:** false ``` **Example 3:** ``` **Input:** s1 = \"a\", s2 = \"a\" **Output:** true ``` **Constraints:** `s1.length == s2.length` `1 <= s1.length <= 30` `s1` and `s2` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's1 = \"great\", s2 = \"rgeat\"', 'output': 'true Explanation: One possible scenario applied on s1 is:\\n\"great\" --> \"gr/eat\" // divide at random index.\\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\\nAs one possible scenario led s1 to be scrambled to s2, we return true.'}, {'label': 'Example 2', 'input': 's1 = \"abcde\", s2 = \"caebd\"', 'output': 'false'}, {'label': 'Example 3', 'input': 's1 = \"a\", s2 = \"a\"', 'output': 'true Constraints: s1.length == s2.length 1 <= s1.length <= 30 s1 and s2 consist of lowercase English letters.'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_scramble(s1 :: String.t, s2 :: String.t) :: boolean\\n  def is_scramble(s1, s2) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_scramble(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\\nis_scramble(S1, S2) ->\\n  .', 'scala_template': 'object Solution {\\n    def isScramble(s1: String, s2: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!854\n",
            "partition-list 86\n",
            "{'id': 86, 'name': 'partition-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/partition-list/', 'task_description': 'Given the `head` of a linked list and a value `x`, partition it such that all nodes **less than** `x` come before nodes **greater than or equal** to `x`. You should **preserve** the original relative order of the nodes in each of the two partitions. **Example 1:** ``` **Input:** head = [1,4,3,2,5,2], x = 3 **Output:** [1,2,2,4,3,5] ``` **Example 2:** ``` **Input:** head = [2,1], x = 2 **Output:** [1,2] ``` **Constraints:** The number of nodes in the list is in the range `[0, 200]`. `-100 <= Node.val <= 100` `-200 <= x <= 200`', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,4,3,2,5,2], x = 3', 'output': '[1,2,2,4,3,5]'}, {'label': 'Example 2', 'input': 'head = [2,1], x = 2', 'output': '[1,2] Constraints: The number of nodes in the list is in the range [0, 200] . -100 <= Node.val <= 100 -200 <= x <= 200'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec partition(head :: ListNode.t | nil, x :: integer) :: ListNode.t | nil\\n  def partition(head, x) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec partition(Head :: #list_node{} | null, X :: integer()) -> #list_node{} | null.\\npartition(Head, X) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def partition(head: ListNode, x: Int): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!855\n",
            "maximal-rectangle 85\n",
            "{'id': 85, 'name': 'maximal-rectangle', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/maximal-rectangle/', 'task_description': 'Given a `rows x cols` binary `matrix` filled with `0`\\'s and `1`\\'s, find the largest rectangle containing only `1`\\'s and return _its area_. **Example 1:** ``` **Input:** matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]] **Output:** 6 **Explanation:** The maximal rectangle is shown in the above picture. ``` **Example 2:** ``` **Input:** matrix = [[\"0\"]] **Output:** 0 ``` **Example 3:** ``` **Input:** matrix = [[\"1\"]] **Output:** 1 ``` **Constraints:** `rows == matrix.length` `cols == matrix[i].length` `1 <= row, cols <= 200` `matrix[i][j]` is `\\'0\\'` or `\\'1\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]', 'output': '6 Explanation: The maximal rectangle is shown in the above picture.'}, {'label': 'Example 2', 'input': 'matrix = [[\"0\"]]', 'output': '0'}, {'label': 'Example 3', 'input': 'matrix = [[\"1\"]]', 'output': \"1 Constraints: rows == matrix.length cols == matrix[i].length 1 <= row, cols <= 200 matrix[i][j] is '0' or '1' .\"}], 'elixir_template': 'defmodule Solution do\\n  @spec maximal_rectangle(matrix :: [[char]]) :: integer\\n  def maximal_rectangle(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec maximal_rectangle(Matrix :: [[char()]]) -> integer().\\nmaximal_rectangle(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def maximalRectangle(matrix: Array[Array[Char]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!856\n",
            "largest-rectangle-in-histogram 84\n",
            "{'id': 84, 'name': 'largest-rectangle-in-histogram', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/largest-rectangle-in-histogram/', 'task_description': \"Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return _the area of the largest rectangle in the histogram_. **Example 1:** ``` **Input:** heights = [2,1,5,6,2,3] **Output:** 10 **Explanation:** The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units. ``` **Example 2:** ``` **Input:** heights = [2,4] **Output:** 4 ``` **Constraints:** `1 <= heights.length <= 105` `0 <= heights[i] <= 104`\", 'test_case': [{'label': 'Example 1', 'input': 'heights = [2,1,5,6,2,3]', 'output': '10 Explanation: The above is a histogram where width of each bar is 1.\\nThe largest rectangle is shown in the red area, which has an area = 10 units.'}, {'label': 'Example 2', 'input': 'heights = [2,4]', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec largest_rectangle_area(heights :: [integer]) :: integer\\n  def largest_rectangle_area(heights) do\\n    \\n  end\\nend', 'erlang_template': '-spec largest_rectangle_area(Heights :: [integer()]) -> integer().\\nlargest_rectangle_area(Heights) ->\\n  .', 'scala_template': 'object Solution {\\n    def largestRectangleArea(heights: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!857\n",
            "remove-duplicates-from-sorted-list 83\n",
            "{'id': 83, 'name': 'remove-duplicates-from-sorted-list', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/remove-duplicates-from-sorted-list/', 'task_description': 'Given the `head` of a sorted linked list, _delete all duplicates such that each element appears only once_. Return _the linked list **sorted** as well_. **Example 1:** ``` **Input:** head = [1,1,2] **Output:** [1,2] ``` **Example 2:** ``` **Input:** head = [1,1,2,3,3] **Output:** [1,2,3] ``` **Constraints:** The number of nodes in the list is in the range `[0, 300]`. `-100 <= Node.val <= 100` The list is guaranteed to be **sorted** in ascending order.', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,1,2]', 'output': '[1,2]'}, {'label': 'Example 2', 'input': 'head = [1,1,2,3,3]', 'output': '[1,2,3] Constraints: The number of nodes in the list is in the range [0, 300] . -100 <= Node.val <= 100 The list is guaranteed to be sorted in ascending order.'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def delete_duplicates(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec delete_duplicates(Head :: #list_node{} | null) -> #list_node{} | null.\\ndelete_duplicates(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def deleteDuplicates(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!858\n",
            "remove-duplicates-from-sorted-list-ii 82\n",
            "{'id': 82, 'name': 'remove-duplicates-from-sorted-list-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/', 'task_description': 'Given the `head` of a sorted linked list, _delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list_. Return _the linked list **sorted** as well_. **Example 1:** ``` **Input:** head = [1,2,3,3,4,4,5] **Output:** [1,2,5] ``` **Example 2:** ``` **Input:** head = [1,1,1,2,3] **Output:** [2,3] ``` **Constraints:** The number of nodes in the list is in the range `[0, 300]`. `-100 <= Node.val <= 100` The list is guaranteed to be **sorted** in ascending order.', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,3,4,4,5]', 'output': '[1,2,5]'}, {'label': 'Example 2', 'input': 'head = [1,1,1,2,3]', 'output': '[2,3] Constraints: The number of nodes in the list is in the range [0, 300] . -100 <= Node.val <= 100 The list is guaranteed to be sorted in ascending order.'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec delete_duplicates(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def delete_duplicates(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec delete_duplicates(Head :: #list_node{} | null) -> #list_node{} | null.\\ndelete_duplicates(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def deleteDuplicates(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!859\n",
            "search-in-rotated-sorted-array-ii 81\n",
            "{'id': 81, 'name': 'search-in-rotated-sorted-array-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/search-in-rotated-sorted-array-ii/', 'task_description': 'There is an integer array `nums` sorted in non-decreasing order (not necessarily with **distinct** values). Before being passed to your function, `nums` is **rotated** at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`. Given the array `nums` **after** the rotation and an integer `target`, return `true`_ if _`target`_ is in _`nums`_, or _`false`_ if it is not in _`nums`_._ You must decrease the overall operation steps as much as possible. **Example 1:** ``` **Input:** nums = [2,5,6,0,0,1,2], target = 0 **Output:** true ``` **Example 2:** ``` **Input:** nums = [2,5,6,0,0,1,2], target = 3 **Output:** false ``` **Constraints:** `1 <= nums.length <= 5000` `-104 <= nums[i] <= 104` `nums` is guaranteed to be rotated at some pivot. `-104 <= target <= 104` **Follow up:** This problem is similar to Search in Rotated Sorted Array, but `nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,5,6,0,0,1,2], target = 0', 'output': 'true'}, {'label': 'Example 2', 'input': 'nums = [2,5,6,0,0,1,2], target = 3', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec search(nums :: [integer], target :: integer) :: boolean\\n  def search(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec search(Nums :: [integer()], Target :: integer()) -> boolean().\\nsearch(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def search(nums: Array[Int], target: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!860\n",
            "remove-duplicates-from-sorted-array-ii 80\n",
            "{'id': 80, 'name': 'remove-duplicates-from-sorted-array-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/', 'task_description': 'Given an integer array `nums` sorted in **non-decreasing order**, remove some duplicates **in-place** such that each unique element appears **at most twice**. The **relative order** of the elements should be kept the **same**. Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums` should hold the final result. It does not matter what you leave beyond the first `k` elements. Return `k`_ after placing the final result in the first _`k`_ slots of _`nums`. Do **not** allocate extra space for another array. You must do this by **modifying the input array in-place** with O(1) extra memory. **Custom Judge:** The judge will test your solution with the following code: ``` int[] nums = [...]; // Input array int[] expectedNums = [...]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length; for (int i = 0; i < k; i++) { assert nums[i] == expectedNums[i]; } ``` If all assertions pass, then your solution will be **accepted**. **Example 1:** ``` **Input:** nums = [1,1,1,2,2,3] **Output:** 5, nums = [1,1,2,2,3,_] **Explanation:** Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). ``` **Example 2:** ``` **Input:** nums = [0,0,1,1,1,1,2,3,3] **Output:** 7, nums = [0,0,1,1,2,3,3,_,_] **Explanation:** Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). ``` **Constraints:** `1 <= nums.length <= 3 * 104` `-104 <= nums[i] <= 104` `nums` is sorted in **non-decreasing** order.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,1,2,2,3]', 'output': '5, nums = [1,1,2,2,3,_] Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).'}, {'label': 'Example 2', 'input': 'nums = [0,0,1,1,1,1,2,3,3]', 'output': '7, nums = [0,0,1,1,2,3,3,_,_] Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def removeDuplicates(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!861\n",
            "word-search 79\n",
            "{'id': 79, 'name': 'word-search', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/word-search/', 'task_description': 'Given an `m x n` grid of characters `board` and a string `word`, return `true` _if_ `word` _exists in the grid_. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. **Example 1:** ``` **Input:** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\" **Output:** true ``` **Example 2:** ``` **Input:** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\" **Output:** true ``` **Example 3:** ``` **Input:** board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\" **Output:** false ``` **Constraints:** `m == board.length` `n = board[i].length` `1 <= m, n <= 6` `1 <= word.length <= 15` `board` and `word` consists of only lowercase and uppercase English letters. **Follow up:** Could you use search pruning to make your solution faster with a larger `board`?', 'test_case': [{'label': 'Example 1', 'input': 'board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"', 'output': 'true'}, {'label': 'Example 2', 'input': 'board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"', 'output': 'true'}, {'label': 'Example 3', 'input': 'board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"', 'output': 'false Constraints: m == board.length n = board[i].length 1 <= m, n <= 6 1 <= word.length <= 15 board and word consists of only lowercase and uppercase English letters. Follow up: Could you use search pruning to make your solution faster with a larger board ?'}], 'elixir_template': 'defmodule Solution do\\n  @spec exist(board :: [[char]], word :: String.t) :: boolean\\n  def exist(board, word) do\\n    \\n  end\\nend', 'erlang_template': '-spec exist(Board :: [[char()]], Word :: unicode:unicode_binary()) -> boolean().\\nexist(Board, Word) ->\\n  .', 'scala_template': 'object Solution {\\n    def exist(board: Array[Array[Char]], word: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!862\n",
            "subsets 78\n",
            "{'id': 78, 'name': 'subsets', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/subsets/', 'task_description': 'Given an integer array `nums` of **unique** elements, return _all possible_ _subsets_ _(the power set)_. The solution set **must not** contain duplicate subsets. Return the solution in **any order**. **Example 1:** ``` **Input:** nums = [1,2,3] **Output:** [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] ``` **Example 2:** ``` **Input:** nums = [0] **Output:** [[],[0]] ``` **Constraints:** `1 <= nums.length <= 10` `-10 <= nums[i] <= 10` All the numbers of `nums` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3]', 'output': '[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]'}, {'label': 'Example 2', 'input': 'nums = [0]', 'output': '[[],[0]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec subsets(nums :: [integer]) :: [[integer]]\\n  def subsets(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec subsets(Nums :: [integer()]) -> [[integer()]].\\nsubsets(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def subsets(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!863\n",
            "combinations 77\n",
            "{'id': 77, 'name': 'combinations', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/combinations/', 'task_description': 'Given two integers `n` and `k`, return _all possible combinations of_ `k` _numbers chosen from the range_ `[1, n]`. You may return the answer in **any order**. **Example 1:** ``` **Input:** n = 4, k = 2 **Output:** [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] **Explanation:** There are 4 choose 2 = 6 total combinations. Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination. ``` **Example 2:** ``` **Input:** n = 1, k = 1 **Output:** [[1]] **Explanation:** There is 1 choose 1 = 1 total combination. ``` **Constraints:** `1 <= n <= 20` `1 <= k <= n`', 'test_case': [{'label': 'Example 1', 'input': 'n = 4, k = 2', 'output': '[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] Explanation: There are 4 choose 2 = 6 total combinations.\\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.'}, {'label': 'Example 2', 'input': 'n = 1, k = 1', 'output': '[[1]] Explanation: There is 1 choose 1 = 1 total combination.'}], 'elixir_template': 'defmodule Solution do\\n  @spec combine(n :: integer, k :: integer) :: [[integer]]\\n  def combine(n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec combine(N :: integer(), K :: integer()) -> [[integer()]].\\ncombine(N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def combine(n: Int, k: Int): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!864\n",
            "minimum-window-substring 76\n",
            "{'id': 76, 'name': 'minimum-window-substring', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/minimum-window-substring/', 'task_description': 'Given two strings `s` and `t` of lengths `m` and `n` respectively, return _the **minimum window**_ **_substring_**_ of _`s`_ such that every character in _`t`_ (**including duplicates**) is included in the window_. If there is no such substring, return _the empty string _`\"\"`. The testcases will be generated such that the answer is **unique**. **Example 1:** ``` **Input:** s = \"ADOBECODEBANC\", t = \"ABC\" **Output:** \"BANC\" **Explanation:** The minimum window substring \"BANC\" includes \\'A\\', \\'B\\', and \\'C\\' from string t. ``` **Example 2:** ``` **Input:** s = \"a\", t = \"a\" **Output:** \"a\" **Explanation:** The entire string s is the minimum window. ``` **Example 3:** ``` **Input:** s = \"a\", t = \"aa\" **Output:** \"\" **Explanation:** Both \\'a\\'s from t must be included in the window. Since the largest window of s only has one \\'a\\', return empty string. ``` **Constraints:** `m == s.length` `n == t.length` `1 <= m, n <= 105` `s` and `t` consist of uppercase and lowercase English letters. **Follow up:** Could you find an algorithm that runs in `O(m + n)` time?', 'test_case': [{'label': 'Example 1', 'input': 's = \"ADOBECODEBANC\", t = \"ABC\"', 'output': '\"BANC\" Explanation: The minimum window substring \"BANC\" includes \\'A\\', \\'B\\', and \\'C\\' from string t.'}, {'label': 'Example 2', 'input': 's = \"a\", t = \"a\"', 'output': '\"a\" Explanation: The entire string s is the minimum window.'}, {'label': 'Example 3', 'input': 's = \"a\", t = \"aa\"', 'output': '\"\" Explanation: Both \\'a\\'s from t must be included in the window.\\nSince the largest window of s only has one \\'a\\', return empty string. Constraints: m == s.length n == t.length 1 <= m, n <= 10 5 s and t consist of uppercase and lowercase English letters. Follow up: Could you find an algorithm that runs in O(m + n) time?'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\\n  def min_window(s, t) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nmin_window(S, T) ->\\n  .', 'scala_template': 'object Solution {\\n    def minWindow(s: String, t: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!865\n",
            "sort-colors 75\n",
            "{'id': 75, 'name': 'sort-colors', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/sort-colors/', 'task_description': \"Given an array `nums` with `n` objects colored red, white, or blue, sort them **in-place **so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively. You must solve this problem without using the library's sort function. **Example 1:** ``` **Input:** nums = [2,0,2,1,1,0] **Output:** [0,0,1,1,2,2] ``` **Example 2:** ``` **Input:** nums = [2,0,1] **Output:** [0,1,2] ``` **Constraints:** `n == nums.length` `1 <= n <= 300` `nums[i]` is either `0`, `1`, or `2`. **Follow up:** Could you come up with a one-pass algorithm using only constant extra space?\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,0,2,1,1,0]', 'output': '[0,0,1,1,2,2]'}, {'label': 'Example 2', 'input': 'nums = [2,0,1]', 'output': '[0,1,2] Constraints: n == nums.length 1 <= n <= 300 nums[i] is either 0 , 1 , or 2 . Follow up: Could you come up with a one-pass algorithm using only\\xa0constant extra space?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def sortColors(nums: Array[Int]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!866\n",
            "search-a-2d-matrix 74\n",
            "{'id': 74, 'name': 'search-a-2d-matrix', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/search-a-2d-matrix/', 'task_description': 'You are given an `m x n` integer matrix `matrix` with the following two properties: Each row is sorted in non-decreasing order. The first integer of each row is greater than the last integer of the previous row. Given an integer `target`, return `true` _if_ `target` _is in_ `matrix` _or_ `false` _otherwise_. You must write a solution in `O(log(m * n))` time complexity. **Example 1:** ``` **Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 **Output:** true ``` **Example 2:** ``` **Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 **Output:** false ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 100` `-104 <= matrix[i][j], target <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3', 'output': 'true'}, {'label': 'Example 2', 'input': 'matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13', 'output': 'false Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 100 -10 4 <= matrix[i][j], target <= 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec search_matrix(matrix :: [[integer]], target :: integer) :: boolean\\n  def search_matrix(matrix, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec search_matrix(Matrix :: [[integer()]], Target :: integer()) -> boolean().\\nsearch_matrix(Matrix, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!867\n",
            "set-matrix-zeroes 73\n",
            "{'id': 73, 'name': 'set-matrix-zeroes', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/set-matrix-zeroes/', 'task_description': \"Given an `m x n` integer matrix `matrix`, if an element is `0`, set its entire row and column to `0`'s. You must do it in place. **Example 1:** ``` **Input:** matrix = [[1,1,1],[1,0,1],[1,1,1]] **Output:** [[1,0,1],[0,0,0],[1,0,1]] ``` **Example 2:** ``` **Input:** matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] **Output:** [[0,0,0,0],[0,4,5,0],[0,3,1,0]] ``` **Constraints:** `m == matrix.length` `n == matrix[0].length` `1 <= m, n <= 200` `-231 <= matrix[i][j] <= 231 - 1` **Follow up:** A straightforward solution using `O(mn)` space is probably a bad idea. A simple improvement uses `O(m + n)` space, but still not the best solution. Could you devise a constant space solution?\", 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,1,1],[1,0,1],[1,1,1]]', 'output': '[[1,0,1],[0,0,0],[1,0,1]]'}, {'label': 'Example 2', 'input': 'matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]', 'output': '[[0,0,0,0],[0,4,5,0],[0,3,1,0]] Constraints: m == matrix.length n == matrix[0].length 1 <= m, n <= 200 -2 31 <= matrix[i][j] <= 2 31 - 1 Follow up: A straightforward solution using O(mn) space is probably a bad idea. A simple improvement uses O(m + n) space, but still not the best solution. Could you devise a constant space solution?'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def setZeroes(matrix: Array[Array[Int]]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!868\n",
            "edit-distance 72\n",
            "{'id': 72, 'name': 'edit-distance', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/edit-distance/', 'task_description': 'Given two strings `word1` and `word2`, return _the minimum number of operations required to convert `word1` to `word2`_. You have the following three operations permitted on a word: Insert a character Delete a character Replace a character **Example 1:** ``` **Input:** word1 = \"horse\", word2 = \"ros\" **Output:** 3 **Explanation:** horse -> rorse (replace \\'h\\' with \\'r\\') rorse -> rose (remove \\'r\\') rose -> ros (remove \\'e\\') ``` **Example 2:** ``` **Input:** word1 = \"intention\", word2 = \"execution\" **Output:** 5 **Explanation:** intention -> inention (remove \\'t\\') inention -> enention (replace \\'i\\' with \\'e\\') enention -> exention (replace \\'n\\' with \\'x\\') exention -> exection (replace \\'n\\' with \\'c\\') exection -> execution (insert \\'u\\') ``` **Constraints:** `0 <= word1.length, word2.length <= 500` `word1` and `word2` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'word1 = \"horse\", word2 = \"ros\"', 'output': \"3 Explanation: horse -> rorse (replace 'h' with 'r')\\nrorse -> rose (remove 'r')\\nrose -> ros (remove 'e')\"}, {'label': 'Example 2', 'input': 'word1 = \"intention\", word2 = \"execution\"', 'output': \"5 Explanation: intention -> inention (remove 't')\\ninention -> enention (replace 'i' with 'e')\\nenention -> exention (replace 'n' with 'x')\\nexention -> exection (replace 'n' with 'c')\\nexection -> execution (insert 'u')\"}], 'elixir_template': 'defmodule Solution do\\n  @spec min_distance(word1 :: String.t, word2 :: String.t) :: integer\\n  def min_distance(word1, word2) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_distance(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\\nmin_distance(Word1, Word2) ->\\n  .', 'scala_template': 'object Solution {\\n    def minDistance(word1: String, word2: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!869\n",
            "simplify-path 71\n",
            "{'id': 71, 'name': 'simplify-path', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/simplify-path/', 'task_description': 'You are given an _absolute_ path for a Unix-style file system, which always begins with a slash `\\'/\\'`. Your task is to transform this absolute path into its **simplified canonical path**. The _rules_ of a Unix-style file system are as follows: A single period `\\'.\\'` represents the current directory. A double period `\\'..\\'` represents the previous/parent directory. Multiple consecutive slashes such as `\\'//\\'` and `\\'///\\'` are treated as a single slash `\\'/\\'`. Any sequence of periods that does **not match** the rules above should be treated as a **valid directory or** **file ****name**. For example, `\\'...\\' `and `\\'....\\'` are valid directory or file names. The simplified canonical path should follow these _rules_: The path must start with a single slash `\\'/\\'`. Directories within the path must be separated by exactly one slash `\\'/\\'`. The path must not end with a slash `\\'/\\'`, unless it is the root directory. The path must not have any single or double periods (`\\'.\\'` and `\\'..\\'`) used to denote current or parent directories. Return the **simplified canonical path**. **Example 1:** **Input:** path = \"/home/\" **Output:** \"/home\" **Explanation:** The trailing slash should be removed. **Example 2:** **Input:** path = \"/home//foo/\" **Output:** \"/home/foo\" **Explanation:** Multiple consecutive slashes are replaced by a single one. **Example 3:** **Input:** path = \"/home/user/Documents/../Pictures\" **Output:** \"/home/user/Pictures\" **Explanation:** A double period `\"..\"` refers to the directory up a level (the parent directory). **Example 4:** **Input:** path = \"/../\" **Output:** \"/\" **Explanation:** Going one level up from the root directory is not possible. **Example 5:** **Input:** path = \"/.../a/../b/c/../d/./\" **Output:** \"/.../b/d\" **Explanation:** `\"...\"` is a valid name for a directory in this problem. **Constraints:** `1 <= path.length <= 3000` `path` consists of English letters, digits, period `\\'.\\'`, slash `\\'/\\'` or `\\'_\\'`. `path` is a valid absolute Unix path.', 'test_case': [{'label': 'Example 1', 'input': 'path = \"/home/\"', 'output': '\"/home\" Explanation: The trailing slash should be removed.'}, {'label': 'Example 2', 'input': 'path = \"/home//foo/\"', 'output': '\"/home/foo\" Explanation: Multiple consecutive slashes are replaced by a single one.'}, {'label': 'Example 3', 'input': 'path = \"/home/user/Documents/../Pictures\"', 'output': '\"/home/user/Pictures\" Explanation: A double period \"..\" refers to the directory up a level (the parent directory).'}, {'label': 'Example 4', 'input': 'path = \"/../\"', 'output': '\"/\" Explanation: Going one level up from the root directory is not possible.'}, {'label': 'Example 5', 'input': 'path = \"/.../a/../b/c/../d/./\"', 'output': '\"/.../b/d\" Explanation: \"...\" is a valid name for a directory in this problem.'}], 'elixir_template': 'defmodule Solution do\\n  @spec simplify_path(path :: String.t) :: String.t\\n  def simplify_path(path) do\\n    \\n  end\\nend', 'erlang_template': '-spec simplify_path(Path :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nsimplify_path(Path) ->\\n  .', 'scala_template': 'object Solution {\\n    def simplifyPath(path: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!870\n",
            "climbing-stairs 70\n",
            "{'id': 70, 'name': 'climbing-stairs', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/climbing-stairs/', 'task_description': 'You are climbing a staircase. It takes `n` steps to reach the top. Each time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top? **Example 1:** ``` **Input:** n = 2 **Output:** 2 **Explanation:** There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps ``` **Example 2:** ``` **Input:** n = 3 **Output:** 3 **Explanation:** There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step ``` **Constraints:** `1 <= n <= 45`', 'test_case': [{'label': 'Example 1', 'input': 'n = 2', 'output': '2 Explanation: There are two ways to climb to the top.\\n1. 1 step + 1 step\\n2. 2 steps'}, {'label': 'Example 2', 'input': 'n = 3', 'output': '3 Explanation: There are three ways to climb to the top.\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step'}], 'elixir_template': 'defmodule Solution do\\n  @spec climb_stairs(n :: integer) :: integer\\n  def climb_stairs(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec climb_stairs(N :: integer()) -> integer().\\nclimb_stairs(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def climbStairs(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!871\n",
            "sqrtx 69\n",
            "{'id': 69, 'name': 'sqrtx', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/sqrtx/', 'task_description': 'Given a non-negative integer `x`, return _the square root of _`x`_ rounded down to the nearest integer_. The returned integer should be **non-negative** as well. You **must not use** any built-in exponent function or operator. For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python. **Example 1:** ``` **Input:** x = 4 **Output:** 2 **Explanation:** The square root of 4 is 2, so we return 2. ``` **Example 2:** ``` **Input:** x = 8 **Output:** 2 **Explanation:** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned. ``` **Constraints:** `0 <= x <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'x = 4', 'output': '2 Explanation: The square root of 4 is 2, so we return 2.'}, {'label': 'Example 2', 'input': 'x = 8', 'output': '2 Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.'}], 'elixir_template': 'defmodule Solution do\\n  @spec my_sqrt(x :: integer) :: integer\\n  def my_sqrt(x) do\\n    \\n  end\\nend', 'erlang_template': '-spec my_sqrt(X :: integer()) -> integer().\\nmy_sqrt(X) ->\\n  .', 'scala_template': 'object Solution {\\n    def mySqrt(x: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!872\n",
            "text-justification 68\n",
            "{'id': 68, 'name': 'text-justification', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/text-justification/', 'task_description': 'Given an array of strings `words` and a width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `\\' \\'` when necessary so that each line has exactly `maxWidth` characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words. **Note:** A word is defined as a character sequence consisting of non-space characters only. Each word\\'s length is guaranteed to be greater than `0` and not exceed `maxWidth`. The input array `words` contains at least one word. **Example 1:** ``` **Input:** words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16 **Output:** [ \"This is an\", \"example of text\", \"justification. \" ] ``` **Example 2:** ``` **Input:** words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16 **Output:** [ \"What must be\", \"acknowledgment \", \"shall be \" ] **Explanation:** Note that the last line is \"shall be \" instead of \"shall be\", because the last line must be left-justified instead of fully-justified. Note that the second line is also left-justified because it contains only one word. ``` **Example 3:** ``` **Input:** words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20 **Output:** [ \"Science is what we\", \"understand well\", \"enough to explain to\", \"a computer. Art is\", \"everything else we\", \"do \" ] ``` **Constraints:** `1 <= words.length <= 300` `1 <= words[i].length <= 20` `words[i]` consists of only English letters and symbols. `1 <= maxWidth <= 100` `words[i].length <= maxWidth`', 'test_case': [{'label': 'Example 1', 'input': 'words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16', 'output': '[\\n\\xa0 \\xa0\"This \\xa0 \\xa0is \\xa0 \\xa0an\",\\n\\xa0 \\xa0\"example \\xa0of text\",\\n\\xa0 \\xa0\"justification. \\xa0\"\\n]'}, {'label': 'Example 2', 'input': 'words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16', 'output': '[\\n\\xa0 \"What \\xa0 must \\xa0 be\",\\n\\xa0 \"acknowledgment \\xa0\",\\n\\xa0 \"shall be \\xa0 \\xa0 \\xa0 \\xa0\"\\n] Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\\nNote that the second line is also left-justified because it contains only one word.'}, {'label': 'Example 3', 'input': 'words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20', 'output': '[\\n\\xa0 \"Science \\xa0is \\xa0what we\",\\n  \"understand \\xa0 \\xa0 \\xa0well\",\\n\\xa0 \"enough to explain to\",\\n\\xa0 \"a \\xa0computer. \\xa0Art is\",\\n\\xa0 \"everything \\xa0else \\xa0we\",\\n\\xa0 \"do \\xa0 \\xa0 \\xa0 \\xa0 \\xa0 \\xa0 \\xa0 \\xa0 \\xa0\"\\n]'}], 'elixir_template': 'defmodule Solution do\\n  @spec full_justify(words :: [String.t], max_width :: integer) :: [String.t]\\n  def full_justify(words, max_width) do\\n    \\n  end\\nend', 'erlang_template': '-spec full_justify(Words :: [unicode:unicode_binary()], MaxWidth :: integer()) -> [unicode:unicode_binary()].\\nfull_justify(Words, MaxWidth) ->\\n  .', 'scala_template': 'object Solution {\\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!873\n",
            "add-binary 67\n",
            "{'id': 67, 'name': 'add-binary', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/add-binary/', 'task_description': 'Given two binary strings `a` and `b`, return _their sum as a binary string_. **Example 1:** ``` **Input:** a = \"11\", b = \"1\" **Output:** \"100\" ``` **Example 2:** ``` **Input:** a = \"1010\", b = \"1011\" **Output:** \"10101\" ``` **Constraints:** `1 <= a.length, b.length <= 104` `a` and `b` consist only of `\\'0\\'` or `\\'1\\'` characters. Each string does not contain leading zeros except for the zero itself.', 'test_case': [{'label': 'Example 1', 'input': 'a = \"11\", b = \"1\"', 'output': '\"100\"'}, {'label': 'Example 2', 'input': 'a = \"1010\", b = \"1011\"', 'output': '\"10101\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\\n  def add_binary(a, b) do\\n    \\n  end\\nend', 'erlang_template': '-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nadd_binary(A, B) ->\\n  .', 'scala_template': 'object Solution {\\n    def addBinary(a: String, b: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!874\n",
            "plus-one 66\n",
            "{'id': 66, 'name': 'plus-one', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/plus-one/', 'task_description': \"You are given a **large integer** represented as an integer array `digits`, where each `digits[i]` is the `ith` digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `0`'s. Increment the large integer by one and return _the resulting array of digits_. **Example 1:** ``` **Input:** digits = [1,2,3] **Output:** [1,2,4] **Explanation:** The array represents the integer 123. Incrementing by one gives 123 + 1 = 124. Thus, the result should be [1,2,4]. ``` **Example 2:** ``` **Input:** digits = [4,3,2,1] **Output:** [4,3,2,2] **Explanation:** The array represents the integer 4321. Incrementing by one gives 4321 + 1 = 4322. Thus, the result should be [4,3,2,2]. ``` **Example 3:** ``` **Input:** digits = [9] **Output:** [1,0] **Explanation:** The array represents the integer 9. Incrementing by one gives 9 + 1 = 10. Thus, the result should be [1,0]. ``` **Constraints:** `1 <= digits.length <= 100` `0 <= digits[i] <= 9` `digits` does not contain any leading `0`'s.\", 'test_case': [{'label': 'Example 1', 'input': 'digits = [1,2,3]', 'output': '[1,2,4] Explanation: The array represents the integer 123.\\nIncrementing by one gives 123 + 1 = 124.\\nThus, the result should be [1,2,4].'}, {'label': 'Example 2', 'input': 'digits = [4,3,2,1]', 'output': '[4,3,2,2] Explanation: The array represents the integer 4321.\\nIncrementing by one gives 4321 + 1 = 4322.\\nThus, the result should be [4,3,2,2].'}, {'label': 'Example 3', 'input': 'digits = [9]', 'output': '[1,0] Explanation: The array represents the integer 9.\\nIncrementing by one gives 9 + 1 = 10.\\nThus, the result should be [1,0].'}], 'elixir_template': 'defmodule Solution do\\n  @spec plus_one(digits :: [integer]) :: [integer]\\n  def plus_one(digits) do\\n    \\n  end\\nend', 'erlang_template': '-spec plus_one(Digits :: [integer()]) -> [integer()].\\nplus_one(Digits) ->\\n  .', 'scala_template': 'object Solution {\\n    def plusOne(digits: Array[Int]): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!875\n",
            "valid-number 65\n",
            "{'id': 65, 'name': 'valid-number', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/valid-number/', 'task_description': 'Given a string `s`, return whether `s` is a **valid number**. For example, all the following are valid numbers: `\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"`, while the following are not valid numbers: `\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"`. Formally, a **valid number** is defined using one of the following definitions: An **integer number** followed by an **optional exponent**. A **decimal number** followed by an **optional exponent**. An **integer number** is defined with an **optional sign** `\\'-\\'` or `\\'+\\'` followed by **digits**. A **decimal number** is defined with an **optional sign** `\\'-\\'` or `\\'+\\'` followed by one of the following definitions: **Digits** followed by a **dot** `\\'.\\'`. **Digits** followed by a **dot** `\\'.\\'` followed by **digits**. A **dot** `\\'.\\'` followed by **digits**. An **exponent** is defined with an **exponent notation** `\\'e\\'` or `\\'E\\'` followed by an **integer number**. The **digits** are defined as one or more digits. **Example 1:** **Input:** s = \"0\" **Output:** true **Example 2:** **Input:** s = \"e\" **Output:** false **Example 3:** **Input:** s = \".\" **Output:** false **Constraints:** `1 <= s.length <= 20` `s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `\\'+\\'`, minus `\\'-\\'`, or dot `\\'.\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"0\"', 'output': 'true'}, {'label': 'Example 2', 'input': 's = \"e\"', 'output': 'false'}, {'label': 'Example 3', 'input': 's = \".\"', 'output': 'false'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_number(s :: String.t) :: boolean\\n  def is_number(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_number(S :: unicode:unicode_binary()) -> boolean().\\nis_number(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def isNumber(s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!876\n",
            "minimum-path-sum 64\n",
            "{'id': 64, 'name': 'minimum-path-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/minimum-path-sum/', 'task_description': 'Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. **Note:** You can only move either down or right at any point in time. **Example 1:** ``` **Input:** grid = [[1,3,1],[1,5,1],[4,2,1]] **Output:** 7 **Explanation:** Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum. ``` **Example 2:** ``` **Input:** grid = [[1,2,3],[4,5,6]] **Output:** 12 ``` **Constraints:** `m == grid.length` `n == grid[i].length` `1 <= m, n <= 200` `0 <= grid[i][j] <= 200`', 'test_case': [{'label': 'Example 1', 'input': 'grid = [[1,3,1],[1,5,1],[4,2,1]]', 'output': '7 Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.'}, {'label': 'Example 2', 'input': 'grid = [[1,2,3],[4,5,6]]', 'output': '12 Constraints: m == grid.length n == grid[i].length 1 <= m, n <= 200 0 <= grid[i][j] <= 200'}], 'elixir_template': 'defmodule Solution do\\n  @spec min_path_sum(grid :: [[integer]]) :: integer\\n  def min_path_sum(grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec min_path_sum(Grid :: [[integer()]]) -> integer().\\nmin_path_sum(Grid) ->\\n  .', 'scala_template': 'object Solution {\\n    def minPathSum(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!877\n",
            "unique-paths-ii 63\n",
            "{'id': 63, 'name': 'unique-paths-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/unique-paths-ii/', 'task_description': 'You are given an `m x n` integer array `grid`. There is a robot initially located at the top-left corner (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time. An obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include **any** square that is an obstacle. Return _the number of possible unique paths that the robot can take to reach the bottom-right corner_. The testcases are generated so that the answer will be less than or equal to `2 * 109`. **Example 1:** ``` **Input:** obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] **Output:** 2 **Explanation:** There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right ``` **Example 2:** ``` **Input:** obstacleGrid = [[0,1],[0,0]] **Output:** 1 ``` **Constraints:** `m == obstacleGrid.length` `n == obstacleGrid[i].length` `1 <= m, n <= 100` `obstacleGrid[i][j]` is `0` or `1`.', 'test_case': [{'label': 'Example 1', 'input': 'obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]', 'output': '2 Explanation: There is one obstacle in the middle of the 3x3 grid above.\\nThere are two ways to reach the bottom-right corner:\\n1. Right -> Right -> Down -> Down\\n2. Down -> Down -> Right -> Right'}, {'label': 'Example 2', 'input': 'obstacleGrid = [[0,1],[0,0]]', 'output': '1 Constraints: m == obstacleGrid.length n == obstacleGrid[i].length 1 <= m, n <= 100 obstacleGrid[i][j] is 0 or 1 .'}], 'elixir_template': 'defmodule Solution do\\n  @spec unique_paths_with_obstacles(obstacle_grid :: [[integer]]) :: integer\\n  def unique_paths_with_obstacles(obstacle_grid) do\\n    \\n  end\\nend', 'erlang_template': '-spec unique_paths_with_obstacles(ObstacleGrid :: [[integer()]]) -> integer().\\nunique_paths_with_obstacles(ObstacleGrid) ->\\n  .', 'scala_template': 'object Solution {\\n    def uniquePathsWithObstacles(obstacleGrid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!878\n",
            "unique-paths 62\n",
            "{'id': 62, 'name': 'unique-paths', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/unique-paths/', 'task_description': 'There is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time. Given the two integers `m` and `n`, return _the number of possible unique paths that the robot can take to reach the bottom-right corner_. The test cases are generated so that the answer will be less than or equal to `2 * 109`. **Example 1:** ``` **Input:** m = 3, n = 7 **Output:** 28 ``` **Example 2:** ``` **Input:** m = 3, n = 2 **Output:** 3 **Explanation:** From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Down -> Down 2. Down -> Down -> Right 3. Down -> Right -> Down ``` **Constraints:** `1 <= m, n <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'm = 3, n = 7', 'output': '28'}, {'label': 'Example 2', 'input': 'm = 3, n = 2', 'output': '3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\\n1. Right -> Down -> Down\\n2. Down -> Down -> Right\\n3. Down -> Right -> Down'}], 'elixir_template': 'defmodule Solution do\\n  @spec unique_paths(m :: integer, n :: integer) :: integer\\n  def unique_paths(m, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec unique_paths(M :: integer(), N :: integer()) -> integer().\\nunique_paths(M, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def uniquePaths(m: Int, n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!879\n",
            "rotate-list 61\n",
            "{'id': 61, 'name': 'rotate-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rotate-list/', 'task_description': 'Given the `head` of a linked list, rotate the list to the right by `k` places. **Example 1:** ``` **Input:** head = [1,2,3,4,5], k = 2 **Output:** [4,5,1,2,3] ``` **Example 2:** ``` **Input:** head = [0,1,2], k = 4 **Output:** [2,0,1] ``` **Constraints:** The number of nodes in the list is in the range `[0, 500]`. `-100 <= Node.val <= 100` `0 <= k <= 2 * 109`', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5], k = 2', 'output': '[4,5,1,2,3]'}, {'label': 'Example 2', 'input': 'head = [0,1,2], k = 4', 'output': '[2,0,1] Constraints: The number of nodes in the list is in the range [0, 500] . -100 <= Node.val <= 100 0 <= k <= 2 * 10 9'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec rotate_right(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\\n  def rotate_right(head, k) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec rotate_right(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\\nrotate_right(Head, K) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def rotateRight(head: ListNode, k: Int): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!880\n",
            "permutation-sequence 60\n",
            "{'id': 60, 'name': 'permutation-sequence', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/permutation-sequence/', 'task_description': 'The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations. By listing and labeling all of the permutations in order, we get the following sequence for `n = 3`: `\"123\"` `\"132\"` `\"213\"` `\"231\"` `\"312\"` `\"321\"` Given `n` and `k`, return the `kth` permutation sequence. **Example 1:** ``` **Input:** n = 3, k = 3 **Output:** \"213\" ``` **Example 2:** ``` **Input:** n = 4, k = 9 **Output:** \"2314\" ``` **Example 3:** ``` **Input:** n = 3, k = 1 **Output:** \"123\" ``` **Constraints:** `1 <= n <= 9` `1 <= k <= n!`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3, k = 3', 'output': '\"213\"'}, {'label': 'Example 2', 'input': 'n = 4, k = 9', 'output': '\"2314\"'}, {'label': 'Example 3', 'input': 'n = 3, k = 1', 'output': '\"123\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec get_permutation(n :: integer, k :: integer) :: String.t\\n  def get_permutation(n, k) do\\n    \\n  end\\nend', 'erlang_template': '-spec get_permutation(N :: integer(), K :: integer()) -> unicode:unicode_binary().\\nget_permutation(N, K) ->\\n  .', 'scala_template': 'object Solution {\\n    def getPermutation(n: Int, k: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!881\n",
            "spiral-matrix-ii 59\n",
            "{'id': 59, 'name': 'spiral-matrix-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/spiral-matrix-ii/', 'task_description': 'Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order. **Example 1:** ``` **Input:** n = 3 **Output:** [[1,2,3],[8,9,4],[7,6,5]] ``` **Example 2:** ``` **Input:** n = 1 **Output:** [[1]] ``` **Constraints:** `1 <= n <= 20`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '[[1,2,3],[8,9,4],[7,6,5]]'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '[[1]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec generate_matrix(n :: integer) :: [[integer]]\\n  def generate_matrix(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec generate_matrix(N :: integer()) -> [[integer()]].\\ngenerate_matrix(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def generateMatrix(n: Int): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!882\n",
            "length-of-last-word 58\n",
            "{'id': 58, 'name': 'length-of-last-word', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/length-of-last-word/', 'task_description': 'Given a string `s` consisting of words and spaces, return _the length of the **last** word in the string._ A **word** is a maximal substring consisting of non-space characters only. **Example 1:** ``` **Input:** s = \"Hello World\" **Output:** 5 **Explanation:** The last word is \"World\" with length 5. ``` **Example 2:** ``` **Input:** s = \" fly me to the moon \" **Output:** 4 **Explanation:** The last word is \"moon\" with length 4. ``` **Example 3:** ``` **Input:** s = \"luffy is still joyboy\" **Output:** 6 **Explanation:** The last word is \"joyboy\" with length 6. ``` **Constraints:** `1 <= s.length <= 104` `s` consists of only English letters and spaces `\\' \\'`. There will be at least one word in `s`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"Hello World\"', 'output': '5 Explanation: The last word is \"World\" with length 5.'}, {'label': 'Example 2', 'input': 's = \"   fly me   to   the moon  \"', 'output': '4 Explanation: The last word is \"moon\" with length 4.'}, {'label': 'Example 3', 'input': 's = \"luffy is still joyboy\"', 'output': '6 Explanation: The last word is \"joyboy\" with length 6.'}], 'elixir_template': 'defmodule Solution do\\n  @spec length_of_last_word(s :: String.t) :: integer\\n  def length_of_last_word(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec length_of_last_word(S :: unicode:unicode_binary()) -> integer().\\nlength_of_last_word(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def lengthOfLastWord(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!883\n",
            "insert-interval 57\n",
            "{'id': 57, 'name': 'insert-interval', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/insert-interval/', 'task_description': \"You are given an array of non-overlapping intervals `intervals` where `intervals[i] = [starti, endi]` represent the start and the end of the `ith` interval and `intervals` is sorted in ascending order by `starti`. You are also given an interval `newInterval = [start, end]` that represents the start and end of another interval. Insert `newInterval` into `intervals` such that `intervals` is still sorted in ascending order by `starti` and `intervals` still does not have any overlapping intervals (merge overlapping intervals if necessary). Return `intervals`_ after the insertion_. **Note** that you don't need to modify `intervals` in-place. You can make a new array and return it. **Example 1:** ``` **Input:** intervals = [[1,3],[6,9]], newInterval = [2,5] **Output:** [[1,5],[6,9]] ``` **Example 2:** ``` **Input:** intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] **Output:** [[1,2],[3,10],[12,16]] **Explanation:** Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]. ``` **Constraints:** `0 <= intervals.length <= 104` `intervals[i].length == 2` `0 <= starti <= endi <= 105` `intervals` is sorted by `starti` in **ascending** order. `newInterval.length == 2` `0 <= start <= end <= 105`\", 'test_case': [{'label': 'Example 1', 'input': 'intervals = [[1,3],[6,9]], newInterval = [2,5]', 'output': '[[1,5],[6,9]]'}, {'label': 'Example 2', 'input': 'intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]', 'output': '[[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].'}], 'elixir_template': 'defmodule Solution do\\n  @spec insert(intervals :: [[integer]], new_interval :: [integer]) :: [[integer]]\\n  def insert(intervals, new_interval) do\\n    \\n  end\\nend', 'erlang_template': '-spec insert(Intervals :: [[integer()]], NewInterval :: [integer()]) -> [[integer()]].\\ninsert(Intervals, NewInterval) ->\\n  .', 'scala_template': 'object Solution {\\n    def insert(intervals: Array[Array[Int]], newInterval: Array[Int]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!884\n",
            "merge-intervals 56\n",
            "{'id': 56, 'name': 'merge-intervals', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/merge-intervals/', 'task_description': 'Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return _an array of the non-overlapping intervals that cover all the intervals in the input_. **Example 1:** ``` **Input:** intervals = [[1,3],[2,6],[8,10],[15,18]] **Output:** [[1,6],[8,10],[15,18]] **Explanation:** Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. ``` **Example 2:** ``` **Input:** intervals = [[1,4],[4,5]] **Output:** [[1,5]] **Explanation:** Intervals [1,4] and [4,5] are considered overlapping. ``` **Constraints:** `1 <= intervals.length <= 104` `intervals[i].length == 2` `0 <= starti <= endi <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'intervals = [[1,3],[2,6],[8,10],[15,18]]', 'output': '[[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].'}, {'label': 'Example 2', 'input': 'intervals = [[1,4],[4,5]]', 'output': '[[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping.'}], 'elixir_template': 'defmodule Solution do\\n  @spec merge(intervals :: [[integer]]) :: [[integer]]\\n  def merge(intervals) do\\n    \\n  end\\nend', 'erlang_template': '-spec merge(Intervals :: [[integer()]]) -> [[integer()]].\\nmerge(Intervals) ->\\n  .', 'scala_template': 'object Solution {\\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!885\n",
            "jump-game 55\n",
            "{'id': 55, 'name': 'jump-game', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/jump-game/', 'task_description': \"You are given an integer array `nums`. You are initially positioned at the array's **first index**, and each element in the array represents your maximum jump length at that position. Return `true`_ if you can reach the last index, or _`false`_ otherwise_. **Example 1:** ``` **Input:** nums = [2,3,1,1,4] **Output:** true **Explanation:** Jump 1 step from index 0 to 1, then 3 steps to the last index. ``` **Example 2:** ``` **Input:** nums = [3,2,1,0,4] **Output:** false **Explanation:** You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. ``` **Constraints:** `1 <= nums.length <= 104` `0 <= nums[i] <= 105`\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,3,1,1,4]', 'output': 'true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.'}, {'label': 'Example 2', 'input': 'nums = [3,2,1,0,4]', 'output': 'false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.'}], 'elixir_template': 'defmodule Solution do\\n  @spec can_jump(nums :: [integer]) :: boolean\\n  def can_jump(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec can_jump(Nums :: [integer()]) -> boolean().\\ncan_jump(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def canJump(nums: Array[Int]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!886\n",
            "spiral-matrix 54\n",
            "{'id': 54, 'name': 'spiral-matrix', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/spiral-matrix/', 'task_description': 'Given an `m x n` `matrix`, return _all elements of the_ `matrix` _in spiral order_. **Example 1:** ``` **Input:** matrix = [[1,2,3],[4,5,6],[7,8,9]] **Output:** [1,2,3,6,9,8,7,4,5] ``` **Example 2:** ``` **Input:** matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] **Output:** [1,2,3,4,8,12,11,10,9,5,6,7] ``` **Constraints:** `m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 10` `-100 <= matrix[i][j] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,2,3],[4,5,6],[7,8,9]]', 'output': '[1,2,3,6,9,8,7,4,5]'}, {'label': 'Example 2', 'input': 'matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]', 'output': '[1,2,3,4,8,12,11,10,9,5,6,7] Constraints: m == matrix.length n == matrix[i].length 1 <= m, n <= 10 -100 <= matrix[i][j] <= 100'}], 'elixir_template': 'defmodule Solution do\\n  @spec spiral_order(matrix :: [[integer]]) :: [integer]\\n  def spiral_order(matrix) do\\n    \\n  end\\nend', 'erlang_template': '-spec spiral_order(Matrix :: [[integer()]]) -> [integer()].\\nspiral_order(Matrix) ->\\n  .', 'scala_template': 'object Solution {\\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!887\n",
            "maximum-subarray 53\n",
            "{'id': 53, 'name': 'maximum-subarray', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/maximum-subarray/', 'task_description': 'Given an integer array `nums`, find the subarray with the largest sum, and return _its sum_. **Example 1:** ``` **Input:** nums = [-2,1,-3,4,-1,2,1,-5,4] **Output:** 6 **Explanation:** The subarray [4,-1,2,1] has the largest sum 6. ``` **Example 2:** ``` **Input:** nums = [1] **Output:** 1 **Explanation:** The subarray [1] has the largest sum 1. ``` **Example 3:** ``` **Input:** nums = [5,4,-1,7,8] **Output:** 23 **Explanation:** The subarray [5,4,-1,7,8] has the largest sum 23. ``` **Constraints:** `1 <= nums.length <= 105` `-104 <= nums[i] <= 104` **Follow up:** If you have figured out the `O(n)` solution, try coding another solution using the **divide and conquer** approach, which is more subtle.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [-2,1,-3,4,-1,2,1,-5,4]', 'output': '6 Explanation: The subarray [4,-1,2,1] has the largest sum 6.'}, {'label': 'Example 2', 'input': 'nums = [1]', 'output': '1 Explanation: The subarray [1] has the largest sum 1.'}, {'label': 'Example 3', 'input': 'nums = [5,4,-1,7,8]', 'output': '23 Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_sub_array(nums :: [integer]) :: integer\\n  def max_sub_array(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_sub_array(Nums :: [integer()]) -> integer().\\nmax_sub_array(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxSubArray(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!888\n",
            "n-queens-ii 52\n",
            "{'id': 52, 'name': 'n-queens-ii', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/n-queens-ii/', 'task_description': 'The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return _the number of distinct solutions to the **n-queens puzzle**_. **Example 1:** ``` **Input:** n = 4 **Output:** 2 **Explanation:** There are two distinct solutions to the 4-queens puzzle as shown. ``` **Example 2:** ``` **Input:** n = 1 **Output:** 1 ``` **Constraints:** `1 <= n <= 9`', 'test_case': [{'label': 'Example 1', 'input': 'n = 4', 'output': '2 Explanation: There are two distinct solutions to the 4-queens puzzle as shown.'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '1'}], 'elixir_template': 'defmodule Solution do\\n  @spec total_n_queens(n :: integer) :: integer\\n  def total_n_queens(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec total_n_queens(N :: integer()) -> integer().\\ntotal_n_queens(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def totalNQueens(n: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!889\n",
            "n-queens 51\n",
            "{'id': 51, 'name': 'n-queens', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/n-queens/', 'task_description': 'The **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. Given an integer `n`, return _all distinct solutions to the **n-queens puzzle**_. You may return the answer in **any order**. Each solution contains a distinct board configuration of the n-queens\\' placement, where `\\'Q\\'` and `\\'.\\'` both indicate a queen and an empty space, respectively. **Example 1:** ``` **Input:** n = 4 **Output:** [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]] **Explanation:** There exist two distinct solutions to the 4-queens puzzle as shown above ``` **Example 2:** ``` **Input:** n = 1 **Output:** [[\"Q\"]] ``` **Constraints:** `1 <= n <= 9`', 'test_case': [{'label': 'Example 1', 'input': 'n = 4', 'output': '[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]] Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '[[\"Q\"]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec solve_n_queens(n :: integer) :: [[String.t]]\\n  def solve_n_queens(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec solve_n_queens(N :: integer()) -> [[unicode:unicode_binary()]].\\nsolve_n_queens(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def solveNQueens(n: Int): List[List[String]] = {\\n        \\n    }\\n}'}\n",
            "Done!890\n",
            "powx-n 50\n",
            "{'id': 50, 'name': 'powx-n', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/powx-n/', 'task_description': 'Implement pow(x, n), which calculates `x` raised to the power `n` (i.e., `xn`). **Example 1:** ``` **Input:** x = 2.00000, n = 10 **Output:** 1024.00000 ``` **Example 2:** ``` **Input:** x = 2.10000, n = 3 **Output:** 9.26100 ``` **Example 3:** ``` **Input:** x = 2.00000, n = -2 **Output:** 0.25000 **Explanation:** 2-2 = 1/22 = 1/4 = 0.25 ``` **Constraints:** `-100.0 < x < 100.0` `-231 <= n <= 231-1` `n` is an integer. Either `x` is not zero or `n > 0`. `-104 <= xn <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'x = 2.00000, n = 10', 'output': '1024.00000'}, {'label': 'Example 2', 'input': 'x = 2.10000, n = 3', 'output': '9.26100'}, {'label': 'Example 3', 'input': 'x = 2.00000, n = -2', 'output': '0.25000 Explanation: 2 -2 = 1/2 2 = 1/4 = 0.25 Constraints: -100.0 < x < 100.0 -2 31 <= n <= 2 31 -1 n is an integer. Either x is not zero or n > 0 . -10 4 <= x n <= 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec my_pow(x :: float, n :: integer) :: float\\n  def my_pow(x, n) do\\n    \\n  end\\nend', 'erlang_template': '-spec my_pow(X :: float(), N :: integer()) -> float().\\nmy_pow(X, N) ->\\n  .', 'scala_template': 'object Solution {\\n    def myPow(x: Double, n: Int): Double = {\\n        \\n    }\\n}'}\n",
            "Done!891\n",
            "group-anagrams 49\n",
            "{'id': 49, 'name': 'group-anagrams', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/group-anagrams/', 'task_description': 'Given an array of strings `strs`, group the anagrams together. You can return the answer in **any order**. **Example 1:** **Input:** strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"] **Output:** [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]] **Explanation:** There is no string in strs that can be rearranged to form `\"bat\"`. The strings `\"nat\"` and `\"tan\"` are anagrams as they can be rearranged to form each other. The strings `\"ate\"`, `\"eat\"`, and `\"tea\"` are anagrams as they can be rearranged to form each other. **Example 2:** **Input:** strs = [\"\"] **Output:** [[\"\"]] **Example 3:** **Input:** strs = [\"a\"] **Output:** [[\"a\"]] **Constraints:** `1 <= strs.length <= 104` `0 <= strs[i].length <= 100` `strs[i]` consists of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]', 'output': '[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]] Explanation: There is no string in strs that can be rearranged to form \"bat\" . The strings \"nat\" and \"tan\" are anagrams as they can be rearranged to form each other. The strings \"ate\" , \"eat\" , and \"tea\" are anagrams as they can be rearranged to form each other.'}, {'label': 'Example 2', 'input': 'strs = [\"\"]', 'output': '[[\"\"]]'}, {'label': 'Example 3', 'input': 'strs = [\"a\"]', 'output': '[[\"a\"]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\\n  def group_anagrams(strs) do\\n    \\n  end\\nend', 'erlang_template': '-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\\ngroup_anagrams(Strs) ->\\n  .', 'scala_template': 'object Solution {\\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\\n        \\n    }\\n}'}\n",
            "Done!892\n",
            "rotate-image 48\n",
            "{'id': 48, 'name': 'rotate-image', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/rotate-image/', 'task_description': 'You are given an `n x n` 2D `matrix` representing an image, rotate the image by **90** degrees (clockwise). You have to rotate the image **in-place**, which means you have to modify the input 2D matrix directly. **DO NOT** allocate another 2D matrix and do the rotation. **Example 1:** ``` **Input:** matrix = [[1,2,3],[4,5,6],[7,8,9]] **Output:** [[7,4,1],[8,5,2],[9,6,3]] ``` **Example 2:** ``` **Input:** matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] **Output:** [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] ``` **Constraints:** `n == matrix.length == matrix[i].length` `1 <= n <= 20` `-1000 <= matrix[i][j] <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 'matrix = [[1,2,3],[4,5,6],[7,8,9]]', 'output': '[[7,4,1],[8,5,2],[9,6,3]]'}, {'label': 'Example 2', 'input': 'matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]', 'output': '[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] Constraints: n == matrix.length == matrix[i].length 1 <= n <= 20 -1000 <= matrix[i][j] <= 1000'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def rotate(matrix: Array[Array[Int]]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!893\n",
            "permutations-ii 47\n",
            "{'id': 47, 'name': 'permutations-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/permutations-ii/', 'task_description': 'Given a collection of numbers, `nums`, that might contain duplicates, return _all possible unique permutations **in any order**._ **Example 1:** ``` **Input:** nums = [1,1,2] **Output:** [[1,1,2], [1,2,1], [2,1,1]] ``` **Example 2:** ``` **Input:** nums = [1,2,3] **Output:** [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] ``` **Constraints:** `1 <= nums.length <= 8` `-10 <= nums[i] <= 10`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,2]', 'output': '[[1,1,2],\\n [1,2,1],\\n [2,1,1]]'}, {'label': 'Example 2', 'input': 'nums = [1,2,3]', 'output': '[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec permute_unique(nums :: [integer]) :: [[integer]]\\n  def permute_unique(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec permute_unique(Nums :: [integer()]) -> [[integer()]].\\npermute_unique(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def permuteUnique(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!894\n",
            "permutations 46\n",
            "{'id': 46, 'name': 'permutations', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/permutations/', 'task_description': 'Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in **any order**. **Example 1:** ``` **Input:** nums = [1,2,3] **Output:** [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] ``` **Example 2:** ``` **Input:** nums = [0,1] **Output:** [[0,1],[1,0]] ``` **Example 3:** ``` **Input:** nums = [1] **Output:** [[1]] ``` **Constraints:** `1 <= nums.length <= 6` `-10 <= nums[i] <= 10` All the integers of `nums` are **unique**.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3]', 'output': '[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]'}, {'label': 'Example 2', 'input': 'nums = [0,1]', 'output': '[[0,1],[1,0]]'}, {'label': 'Example 3', 'input': 'nums = [1]', 'output': '[[1]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec permute(nums :: [integer]) :: [[integer]]\\n  def permute(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec permute(Nums :: [integer()]) -> [[integer()]].\\npermute(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def permute(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!895\n",
            "jump-game-ii 45\n",
            "{'id': 45, 'name': 'jump-game-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/jump-game-ii/', 'task_description': \"You are given a **0-indexed** array of integers `nums` of length `n`. You are initially positioned at `nums[0]`. Each element `nums[i]` represents the maximum length of a forward jump from index `i`. In other words, if you are at `nums[i]`, you can jump to any `nums[i + j]` where: `0 <= j <= nums[i]` and `i + j < n` Return _the minimum number of jumps to reach _`nums[n - 1]`. The test cases are generated such that you can reach `nums[n - 1]`. **Example 1:** ``` **Input:** nums = [2,3,1,1,4] **Output:** 2 **Explanation:** The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. ``` **Example 2:** ``` **Input:** nums = [2,3,0,1,4] **Output:** 2 ``` **Constraints:** `1 <= nums.length <= 104` `0 <= nums[i] <= 1000` It's guaranteed that you can reach `nums[n - 1]`.\", 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,3,1,1,4]', 'output': '2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.'}, {'label': 'Example 2', 'input': 'nums = [2,3,0,1,4]', 'output': '2'}], 'elixir_template': 'defmodule Solution do\\n  @spec jump(nums :: [integer]) :: integer\\n  def jump(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec jump(Nums :: [integer()]) -> integer().\\njump(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def jump(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!896\n",
            "wildcard-matching 44\n",
            "{'id': 44, 'name': 'wildcard-matching', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/wildcard-matching/', 'task_description': 'Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `\\'?\\'` and `\\'*\\'` where: `\\'?\\'` Matches any single character. `\\'*\\'` Matches any sequence of characters (including the empty sequence). The matching should cover the **entire** input string (not partial). **Example 1:** ``` **Input:** s = \"aa\", p = \"a\" **Output:** false **Explanation:** \"a\" does not match the entire string \"aa\". ``` **Example 2:** ``` **Input:** s = \"aa\", p = \"*\" **Output:** true **Explanation:** \\'*\\' matches any sequence. ``` **Example 3:** ``` **Input:** s = \"cb\", p = \"?a\" **Output:** false **Explanation:** \\'?\\' matches \\'c\\', but the second letter is \\'a\\', which does not match \\'b\\'. ``` **Constraints:** `0 <= s.length, p.length <= 2000` `s` contains only lowercase English letters. `p` contains only lowercase English letters, `\\'?\\'` or `\\'*\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"aa\", p = \"a\"', 'output': 'false Explanation: \"a\" does not match the entire string \"aa\".'}, {'label': 'Example 2', 'input': 's = \"aa\", p = \"*\"', 'output': \"true Explanation: '*' matches any sequence.\"}, {'label': 'Example 3', 'input': 's = \"cb\", p = \"?a\"', 'output': \"false Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\\n  def is_match(s, p) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\\nis_match(S, P) ->\\n  .', 'scala_template': 'object Solution {\\n    def isMatch(s: String, p: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!897\n",
            "multiply-strings 43\n",
            "{'id': 43, 'name': 'multiply-strings', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/multiply-strings/', 'task_description': 'Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string. **Note:** You must not use any built-in BigInteger library or convert the inputs to integer directly. **Example 1:** ``` **Input:** num1 = \"2\", num2 = \"3\" **Output:** \"6\" ``` **Example 2:** ``` **Input:** num1 = \"123\", num2 = \"456\" **Output:** \"56088\" ``` **Constraints:** `1 <= num1.length, num2.length <= 200` `num1` and `num2` consist of digits only. Both `num1` and `num2` do not contain any leading zero, except the number `0` itself.', 'test_case': [{'label': 'Example 1', 'input': 'num1 = \"2\", num2 = \"3\"', 'output': '\"6\"'}, {'label': 'Example 2', 'input': 'num1 = \"123\", num2 = \"456\"', 'output': '\"56088\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec multiply(num1 :: String.t, num2 :: String.t) :: String.t\\n  def multiply(num1, num2) do\\n    \\n  end\\nend', 'erlang_template': '-spec multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nmultiply(Num1, Num2) ->\\n  .', 'scala_template': 'object Solution {\\n    def multiply(num1: String, num2: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!898\n",
            "trapping-rain-water 42\n",
            "{'id': 42, 'name': 'trapping-rain-water', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/trapping-rain-water/', 'task_description': 'Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining. **Example 1:** ``` **Input:** height = [0,1,0,2,1,0,1,3,2,1,2,1] **Output:** 6 **Explanation:** The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. ``` **Example 2:** ``` **Input:** height = [4,2,0,3,2,5] **Output:** 9 ``` **Constraints:** `n == height.length` `1 <= n <= 2 * 104` `0 <= height[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'height = [0,1,0,2,1,0,1,3,2,1,2,1]', 'output': '6 Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.'}, {'label': 'Example 2', 'input': 'height = [4,2,0,3,2,5]', 'output': '9 Constraints: n == height.length 1 <= n <= 2 * 10 4 0 <= height[i] <= 10 5'}], 'elixir_template': 'defmodule Solution do\\n  @spec trap(height :: [integer]) :: integer\\n  def trap(height) do\\n    \\n  end\\nend', 'erlang_template': '-spec trap(Height :: [integer()]) -> integer().\\ntrap(Height) ->\\n  .', 'scala_template': 'object Solution {\\n    def trap(height: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!899\n",
            "first-missing-positive 41\n",
            "{'id': 41, 'name': 'first-missing-positive', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/first-missing-positive/', 'task_description': 'Given an unsorted integer array `nums`. Return the _smallest positive integer_ that is _not present_ in `nums`. You must implement an algorithm that runs in `O(n)` time and uses `O(1)` auxiliary space. **Example 1:** ``` **Input:** nums = [1,2,0] **Output:** 3 **Explanation:** The numbers in the range [1,2] are all in the array. ``` **Example 2:** ``` **Input:** nums = [3,4,-1,1] **Output:** 2 **Explanation:** 1 is in the array but 2 is missing. ``` **Example 3:** ``` **Input:** nums = [7,8,9,11,12] **Output:** 1 **Explanation:** The smallest positive integer 1 is missing. ``` **Constraints:** `1 <= nums.length <= 105` `-231 <= nums[i] <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,0]', 'output': '3 Explanation: The numbers in the range [1,2] are all in the array.'}, {'label': 'Example 2', 'input': 'nums = [3,4,-1,1]', 'output': '2 Explanation: 1 is in the array but 2 is missing.'}, {'label': 'Example 3', 'input': 'nums = [7,8,9,11,12]', 'output': '1 Explanation: The smallest positive integer 1 is missing.'}], 'elixir_template': 'defmodule Solution do\\n  @spec first_missing_positive(nums :: [integer]) :: integer\\n  def first_missing_positive(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec first_missing_positive(Nums :: [integer()]) -> integer().\\nfirst_missing_positive(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def firstMissingPositive(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!900\n",
            "combination-sum-ii 40\n",
            "{'id': 40, 'name': 'combination-sum-ii', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/combination-sum-ii/', 'task_description': 'Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`. Each number in `candidates` may only be used **once** in the combination. **Note:** The solution set must not contain duplicate combinations. **Example 1:** ``` **Input:** candidates = [10,1,2,7,6,1,5], target = 8 **Output:** [ [1,1,6], [1,2,5], [1,7], [2,6] ] ``` **Example 2:** ``` **Input:** candidates = [2,5,2,1,2], target = 5 **Output:** [ [1,2,2], [5] ] ``` **Constraints:** `1 <= candidates.length <= 100` `1 <= candidates[i] <= 50` `1 <= target <= 30`', 'test_case': [{'label': 'Example 1', 'input': 'candidates = [10,1,2,7,6,1,5], target = 8', 'output': '[\\n[1,1,6],\\n[1,2,5],\\n[1,7],\\n[2,6]\\n]'}, {'label': 'Example 2', 'input': 'candidates = [2,5,2,1,2], target = 5', 'output': '[\\n[1,2,2],\\n[5]\\n]'}], 'elixir_template': 'defmodule Solution do\\n  @spec combination_sum2(candidates :: [integer], target :: integer) :: [[integer]]\\n  def combination_sum2(candidates, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec combination_sum2(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\\ncombination_sum2(Candidates, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def combinationSum2(candidates: Array[Int], target: Int): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!901\n",
            "combination-sum 39\n",
            "{'id': 39, 'name': 'combination-sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/combination-sum/', 'task_description': 'Given an array of **distinct** integers `candidates` and a target integer `target`, return _a list of all **unique combinations** of _`candidates`_ where the chosen numbers sum to _`target`_._ You may return the combinations in **any order**. The **same** number may be chosen from `candidates` an **unlimited number of times**. Two combinations are unique if the frequency of at least one of the chosen numbers is different. The test cases are generated such that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input. **Example 1:** ``` **Input:** candidates = [2,3,6,7], target = 7 **Output:** [[2,2,3],[7]] **Explanation:** 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations. ``` **Example 2:** ``` **Input:** candidates = [2,3,5], target = 8 **Output:** [[2,2,2,2],[2,3,3],[3,5]] ``` **Example 3:** ``` **Input:** candidates = [2], target = 1 **Output:** [] ``` **Constraints:** `1 <= candidates.length <= 30` `2 <= candidates[i] <= 40` All elements of `candidates` are **distinct**. `1 <= target <= 40`', 'test_case': [{'label': 'Example 1', 'input': 'candidates = [2,3,6,7], target = 7', 'output': '[[2,2,3],[7]] Explanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\\n7 is a candidate, and 7 = 7.\\nThese are the only two combinations.'}, {'label': 'Example 2', 'input': 'candidates = [2,3,5], target = 8', 'output': '[[2,2,2,2],[2,3,3],[3,5]]'}, {'label': 'Example 3', 'input': 'candidates = [2], target = 1', 'output': '[]'}], 'elixir_template': 'defmodule Solution do\\n  @spec combination_sum(candidates :: [integer], target :: integer) :: [[integer]]\\n  def combination_sum(candidates, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec combination_sum(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\\ncombination_sum(Candidates, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!902\n",
            "count-and-say 38\n",
            "{'id': 38, 'name': 'count-and-say', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/count-and-say/', 'task_description': 'The **count-and-say** sequence is a sequence of digit strings defined by the recursive formula: `countAndSay(1) = \"1\"` `countAndSay(n)` is the run-length encoding of `countAndSay(n - 1)`. Run-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string `\"3322251\"` we replace `\"33\"` with `\"23\"`, replace `\"222\"` with `\"32\"`, replace `\"5\"` with `\"15\"` and replace `\"1\"` with `\"11\"`. Thus the compressed string becomes `\"23321511\"`. Given a positive integer `n`, return _the _`nth`_ element of the **count-and-say** sequence_. **Example 1:** **Input:** n = 4 **Output:** \"1211\" **Explanation:** ``` countAndSay(1) = \"1\" countAndSay(2) = RLE of \"1\" = \"11\" countAndSay(3) = RLE of \"11\" = \"21\" countAndSay(4) = RLE of \"21\" = \"1211\" ``` **Example 2:** **Input:** n = 1 **Output:** \"1\" **Explanation:** This is the base case. **Constraints:** `1 <= n <= 30` **Follow up:** Could you solve it iteratively?', 'test_case': [{'label': 'Example 1', 'input': 'n = 4', 'output': '\"1211\" Explanation: countAndSay(1) = \"1\"\\ncountAndSay(2) = RLE of \"1\" = \"11\"\\ncountAndSay(3) = RLE of \"11\" = \"21\"\\ncountAndSay(4) = RLE of \"21\" = \"1211\"'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '\"1\" Explanation: This is the base case.'}], 'elixir_template': 'defmodule Solution do\\n  @spec count_and_say(n :: integer) :: String.t\\n  def count_and_say(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec count_and_say(N :: integer()) -> unicode:unicode_binary().\\ncount_and_say(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def countAndSay(n: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!903\n",
            "sudoku-solver 37\n",
            "{'id': 37, 'name': 'sudoku-solver', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/sudoku-solver/', 'task_description': 'Write a program to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy **all of the following rules**: Each of the digits `1-9` must occur exactly once in each row. Each of the digits `1-9` must occur exactly once in each column. Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid. The `\\'.\\'` character indicates empty cells. **Example 1:** ``` **Input:** board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] **Output:** [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]] **Explanation:** The input board is shown above and the only valid solution is shown below: ``` **Constraints:** `board.length == 9` `board[i].length == 9` `board[i][j]` is a digit or `\\'.\\'`. It is **guaranteed** that the input board has only one solution.', 'test_case': [{'label': 'Example 1', 'input': 'board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]', 'output': '[[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]] Explanation: The input board is shown above and the only valid solution is shown below: Constraints: board.length == 9 board[i].length == 9 board[i][j] is a digit or \\'.\\' . It is guaranteed that the input board has only one solution.'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!904\n",
            "valid-sudoku 36\n",
            "{'id': 36, 'name': 'valid-sudoku', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/valid-sudoku/', 'task_description': 'Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated **according to the following rules**: Each row must contain the digits `1-9` without repetition. Each column must contain the digits `1-9` without repetition. Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition. **Note:** A Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned rules. **Example 1:** ``` **Input:** board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] **Output:** true ``` **Example 2:** ``` **Input:** board = [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"] ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"] ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"] ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"] ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"] ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"] ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"] ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"] ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] **Output:** false **Explanation:** Same as Example 1, except with the **5** in the top left corner being modified to **8**. Since there are two 8\\'s in the top left 3x3 sub-box, it is invalid. ``` **Constraints:** `board.length == 9` `board[i].length == 9` `board[i][j]` is a digit `1-9` or `\\'.\\'`.', 'test_case': [{'label': 'Example 1', 'input': 'board = \\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]', 'output': 'true'}, {'label': 'Example 2', 'input': 'board = \\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]', 'output': 'false Explanation: Same as'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_valid_sudoku(board :: [[char]]) :: boolean\\n  def is_valid_sudoku(board) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_valid_sudoku(Board :: [[char()]]) -> boolean().\\nis_valid_sudoku(Board) ->\\n  .', 'scala_template': 'object Solution {\\n    def isValidSudoku(board: Array[Array[Char]]): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!905\n",
            "search-insert-position 35\n",
            "{'id': 35, 'name': 'search-insert-position', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/search-insert-position/', 'task_description': 'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with `O(log n)` runtime complexity. **Example 1:** ``` **Input:** nums = [1,3,5,6], target = 5 **Output:** 2 ``` **Example 2:** ``` **Input:** nums = [1,3,5,6], target = 2 **Output:** 1 ``` **Example 3:** ``` **Input:** nums = [1,3,5,6], target = 7 **Output:** 4 ``` **Constraints:** `1 <= nums.length <= 104` `-104 <= nums[i] <= 104` `nums` contains **distinct** values sorted in **ascending** order. `-104 <= target <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,3,5,6], target = 5', 'output': '2'}, {'label': 'Example 2', 'input': 'nums = [1,3,5,6], target = 2', 'output': '1'}, {'label': 'Example 3', 'input': 'nums = [1,3,5,6], target = 7', 'output': '4'}], 'elixir_template': 'defmodule Solution do\\n  @spec search_insert(nums :: [integer], target :: integer) :: integer\\n  def search_insert(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec search_insert(Nums :: [integer()], Target :: integer()) -> integer().\\nsearch_insert(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def searchInsert(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!906\n",
            "find-first-and-last-position-of-element-in-sorted-array 34\n",
            "{'id': 34, 'name': 'find-first-and-last-position-of-element-in-sorted-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/', 'task_description': 'Given an array of integers `nums` sorted in non-decreasing order, find the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. You must write an algorithm with `O(log n)` runtime complexity. **Example 1:** ``` **Input:** nums = [5,7,7,8,8,10], target = 8 **Output:** [3,4] ``` **Example 2:** ``` **Input:** nums = [5,7,7,8,8,10], target = 6 **Output:** [-1,-1] ``` **Example 3:** ``` **Input:** nums = [], target = 0 **Output:** [-1,-1] ``` **Constraints:** `0 <= nums.length <= 105` `-109 <= nums[i] <= 109` `nums` is a non-decreasing array. `-109 <= target <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [5,7,7,8,8,10], target = 8', 'output': '[3,4]'}, {'label': 'Example 2', 'input': 'nums = [5,7,7,8,8,10], target = 6', 'output': '[-1,-1]'}, {'label': 'Example 3', 'input': 'nums = [], target = 0', 'output': '[-1,-1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\\n  def search_range(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\\nsearch_range(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!907\n",
            "search-in-rotated-sorted-array 33\n",
            "{'id': 33, 'name': 'search-in-rotated-sorted-array', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/search-in-rotated-sorted-array/', 'task_description': 'There is an integer array `nums` sorted in ascending order (with **distinct** values). Prior to being passed to your function, `nums` is **possibly rotated** at an unknown pivot index `k` (`1 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (**0-indexed**). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`. Given the array `nums` **after** the possible rotation and an integer `target`, return _the index of _`target`_ if it is in _`nums`_, or _`-1`_ if it is not in _`nums`. You must write an algorithm with `O(log n)` runtime complexity. **Example 1:** ``` **Input:** nums = [4,5,6,7,0,1,2], target = 0 **Output:** 4 ``` **Example 2:** ``` **Input:** nums = [4,5,6,7,0,1,2], target = 3 **Output:** -1 ``` **Example 3:** ``` **Input:** nums = [1], target = 0 **Output:** -1 ``` **Constraints:** `1 <= nums.length <= 5000` `-104 <= nums[i] <= 104` All values of `nums` are **unique**. `nums` is an ascending array that is possibly rotated. `-104 <= target <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [4,5,6,7,0,1,2], target = 0', 'output': '4'}, {'label': 'Example 2', 'input': 'nums = [4,5,6,7,0,1,2], target = 3', 'output': '-1'}, {'label': 'Example 3', 'input': 'nums = [1], target = 0', 'output': '-1'}], 'elixir_template': 'defmodule Solution do\\n  @spec search(nums :: [integer], target :: integer) :: integer\\n  def search(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec search(Nums :: [integer()], Target :: integer()) -> integer().\\nsearch(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def search(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!908\n",
            "longest-valid-parentheses 32\n",
            "{'id': 32, 'name': 'longest-valid-parentheses', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/longest-valid-parentheses/', 'task_description': 'Given a string containing just the characters `\\'(\\'` and `\\')\\'`, return _the length of the longest valid (well-formed) parentheses __substring_. **Example 1:** ``` **Input:** s = \"(()\" **Output:** 2 **Explanation:** The longest valid parentheses substring is \"()\". ``` **Example 2:** ``` **Input:** s = \")()())\" **Output:** 4 **Explanation:** The longest valid parentheses substring is \"()()\". ``` **Example 3:** ``` **Input:** s = \"\" **Output:** 0 ``` **Constraints:** `0 <= s.length <= 3 * 104` `s[i]` is `\\'(\\'`, or `\\')\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"(()\"', 'output': '2 Explanation: The longest valid parentheses substring is \"()\".'}, {'label': 'Example 2', 'input': 's = \")()())\"', 'output': '4 Explanation: The longest valid parentheses substring is \"()()\".'}, {'label': 'Example 3', 'input': 's = \"\"', 'output': '0'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_valid_parentheses(s :: String.t) :: integer\\n  def longest_valid_parentheses(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\\nlongest_valid_parentheses(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestValidParentheses(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!909\n",
            "next-permutation 31\n",
            "{'id': 31, 'name': 'next-permutation', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/next-permutation/', 'task_description': 'A **permutation** of an array of integers is an arrangement of its members into a sequence or linear order. For example, for `arr = [1,2,3]`, the following are all the permutations of `arr`: `[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]`. The **next permutation** of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the **next permutation** of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). For example, the next permutation of `arr = [1,2,3]` is `[1,3,2]`. Similarly, the next permutation of `arr = [2,3,1]` is `[3,1,2]`. While the next permutation of `arr = [3,2,1]` is `[1,2,3]` because `[3,2,1]` does not have a lexicographical larger rearrangement. Given an array of integers `nums`, _find the next permutation of_ `nums`. The replacement must be **in place** and use only constant extra memory. **Example 1:** ``` **Input:** nums = [1,2,3] **Output:** [1,3,2] ``` **Example 2:** ``` **Input:** nums = [3,2,1] **Output:** [1,2,3] ``` **Example 3:** ``` **Input:** nums = [1,1,5] **Output:** [1,5,1] ``` **Constraints:** `1 <= nums.length <= 100` `0 <= nums[i] <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,2,3]', 'output': '[1,3,2]'}, {'label': 'Example 2', 'input': 'nums = [3,2,1]', 'output': '[1,2,3]'}, {'label': 'Example 3', 'input': 'nums = [1,1,5]', 'output': '[1,5,1]'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def nextPermutation(nums: Array[Int]): Unit = {\\n        \\n    }\\n}'}\n",
            "Done!910\n",
            "substring-with-concatenation-of-all-words 30\n",
            "{'id': 30, 'name': 'substring-with-concatenation-of-all-words', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/substring-with-concatenation-of-all-words/', 'task_description': 'You are given a string `s` and an array of strings `words`. All the strings of `words` are of **the same length**. A **concatenated string** is a string that exactly contains all the strings of any permutation of `words` concatenated. For example, if `words = [\"ab\",\"cd\",\"ef\"]`, then `\"abcdef\"`, `\"abefcd\"`, `\"cdabef\"`, `\"cdefab\"`, `\"efabcd\"`, and `\"efcdab\"` are all concatenated strings. `\"acdbef\"` is not a concatenated string because it is not the concatenation of any permutation of `words`. Return an array of _the starting indices_ of all the concatenated substrings in `s`. You can return the answer in **any order**. **Example 1:** **Input:** s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] **Output:** [0,9] **Explanation:** The substring starting at 0 is `\"barfoo\"`. It is the concatenation of `[\"bar\",\"foo\"]` which is a permutation of `words`. The substring starting at 9 is `\"foobar\"`. It is the concatenation of `[\"foo\",\"bar\"]` which is a permutation of `words`. **Example 2:** **Input:** s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"] **Output:** [] **Explanation:** There is no concatenated substring. **Example 3:** **Input:** s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"] **Output:** [6,9,12] **Explanation:** The substring starting at 6 is `\"foobarthe\"`. It is the concatenation of `[\"foo\",\"bar\",\"the\"]`. The substring starting at 9 is `\"barthefoo\"`. It is the concatenation of `[\"bar\",\"the\",\"foo\"]`. The substring starting at 12 is `\"thefoobar\"`. It is the concatenation of `[\"the\",\"foo\",\"bar\"]`. **Constraints:** `1 <= s.length <= 104` `1 <= words.length <= 5000` `1 <= words[i].length <= 30` `s` and `words[i]` consist of lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]', 'output': '[0,9] Explanation: The substring starting at 0 is \"barfoo\" . It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words . The substring starting at 9 is \"foobar\" . It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words .'}, {'label': 'Example 2', 'input': 's = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]', 'output': '[] Explanation: There is no concatenated substring.'}, {'label': 'Example 3', 'input': 's = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]', 'output': '[6,9,12] Explanation: The substring starting at 6 is \"foobarthe\" . It is the concatenation of [\"foo\",\"bar\",\"the\"] . The substring starting at 9 is \"barthefoo\" . It is the concatenation of [\"bar\",\"the\",\"foo\"] . The substring starting at 12 is \"thefoobar\" . It is the concatenation of [\"the\",\"foo\",\"bar\"] .'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_substring(s :: String.t, words :: [String.t]) :: [integer]\\n  def find_substring(s, words) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_substring(S :: unicode:unicode_binary(), Words :: [unicode:unicode_binary()]) -> [integer()].\\nfind_substring(S, Words) ->\\n  .', 'scala_template': 'object Solution {\\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!911\n",
            "divide-two-integers 29\n",
            "{'id': 29, 'name': 'divide-two-integers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/divide-two-integers/', 'task_description': 'Given two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator. The integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`. Return _the **quotient** after dividing _`dividend`_ by _`divisor`. **Note: **Assume we are dealing with an environment that could only store integers within the **32-bit** signed integer range: `[−231, 231 − 1]`. For this problem, if the quotient is **strictly greater than** `231 - 1`, then return `231 - 1`, and if the quotient is **strictly less than** `-231`, then return `-231`. **Example 1:** ``` **Input:** dividend = 10, divisor = 3 **Output:** 3 **Explanation:** 10/3 = 3.33333.. which is truncated to 3. ``` **Example 2:** ``` **Input:** dividend = 7, divisor = -3 **Output:** -2 **Explanation:** 7/-3 = -2.33333.. which is truncated to -2. ``` **Constraints:** `-231 <= dividend, divisor <= 231 - 1` `divisor != 0`', 'test_case': [{'label': 'Example 1', 'input': 'dividend = 10, divisor = 3', 'output': '3 Explanation: 10/3 = 3.33333.. which is truncated to 3.'}, {'label': 'Example 2', 'input': 'dividend = 7, divisor = -3', 'output': '-2 Explanation: 7/-3 = -2.33333.. which is truncated to -2. Constraints: -2 31 <= dividend, divisor <= 2 31 - 1 divisor != 0'}], 'elixir_template': 'defmodule Solution do\\n  @spec divide(dividend :: integer, divisor :: integer) :: integer\\n  def divide(dividend, divisor) do\\n    \\n  end\\nend', 'erlang_template': '-spec divide(Dividend :: integer(), Divisor :: integer()) -> integer().\\ndivide(Dividend, Divisor) ->\\n  .', 'scala_template': 'object Solution {\\n    def divide(dividend: Int, divisor: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!912\n",
            "find-the-index-of-the-first-occurrence-in-a-string 28\n",
            "{'id': 28, 'name': 'find-the-index-of-the-first-occurrence-in-a-string', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/', 'task_description': 'Given two strings `needle` and `haystack`, return the index of the first occurrence of `needle` in `haystack`, or `-1` if `needle` is not part of `haystack`. **Example 1:** ``` **Input:** haystack = \"sadbutsad\", needle = \"sad\" **Output:** 0 **Explanation:** \"sad\" occurs at index 0 and 6. The first occurrence is at index 0, so we return 0. ``` **Example 2:** ``` **Input:** haystack = \"leetcode\", needle = \"leeto\" **Output:** -1 **Explanation:** \"leeto\" did not occur in \"leetcode\", so we return -1. ``` **Constraints:** `1 <= haystack.length, needle.length <= 104` `haystack` and `needle` consist of only lowercase English characters.', 'test_case': [{'label': 'Example 1', 'input': 'haystack = \"sadbutsad\", needle = \"sad\"', 'output': '0 Explanation: \"sad\" occurs at index 0 and 6.\\nThe first occurrence is at index 0, so we return 0.'}, {'label': 'Example 2', 'input': 'haystack = \"leetcode\", needle = \"leeto\"', 'output': '-1 Explanation: \"leeto\" did not occur in \"leetcode\", so we return -1.'}], 'elixir_template': 'defmodule Solution do\\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\\n  def str_str(haystack, needle) do\\n    \\n  end\\nend', 'erlang_template': '-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\\nstr_str(Haystack, Needle) ->\\n  .', 'scala_template': 'object Solution {\\n    def strStr(haystack: String, needle: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!913\n",
            "remove-element 27\n",
            "{'id': 27, 'name': 'remove-element', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/remove-element/', 'task_description': 'Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` **in-place**. The order of the elements may be changed. Then return _the number of elements in _`nums`_ which are not equal to _`val`. Consider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things: Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`. Return `k`. **Custom Judge:** The judge will test your solution with the following code: ``` int[] nums = [...]; // Input array int val = ...; // Value to remove int[] expectedNums = [...]; // The expected answer with correct length. // It is sorted with no values equaling val. int k = removeElement(nums, val); // Calls your implementation assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i < actualLength; i++) { assert nums[i] == expectedNums[i]; } ``` If all assertions pass, then your solution will be **accepted**. **Example 1:** ``` **Input:** nums = [3,2,2,3], val = 3 **Output:** 2, nums = [2,2,_,_] **Explanation:** Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores). ``` **Example 2:** ``` **Input:** nums = [0,1,2,2,3,0,4,2], val = 2 **Output:** 5, nums = [0,1,4,0,3,_,_,_] **Explanation:** Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. Note that the five elements can be returned in any order. It does not matter what you leave beyond the returned k (hence they are underscores). ``` **Constraints:** `0 <= nums.length <= 100` `0 <= nums[i] <= 50` `0 <= val <= 100`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [3,2,2,3], val = 3', 'output': '2, nums = [2,2,_,_] Explanation: Your function should return k = 2, with the first two elements of nums being 2.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).'}, {'label': 'Example 2', 'input': 'nums = [0,1,2,2,3,0,4,2], val = 2', 'output': '5, nums = [0,1,4,0,3,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\\nNote that the five elements can be returned in any order.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def removeElement(nums: Array[Int], `val`: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!914\n",
            "remove-duplicates-from-sorted-array 26\n",
            "{'id': 26, 'name': 'remove-duplicates-from-sorted-array', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/remove-duplicates-from-sorted-array/', 'task_description': 'Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates **in-place** such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return _the number of unique elements in _`nums`. Consider the number of unique elements of `nums` to be `k`, to get accepted, you need to do the following things: Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`. Return `k`. **Custom Judge:** The judge will test your solution with the following code: ``` int[] nums = [...]; // Input array int[] expectedNums = [...]; // The expected answer with correct length int k = removeDuplicates(nums); // Calls your implementation assert k == expectedNums.length; for (int i = 0; i < k; i++) { assert nums[i] == expectedNums[i]; } ``` If all assertions pass, then your solution will be **accepted**. **Example 1:** ``` **Input:** nums = [1,1,2] **Output:** 2, nums = [1,2,_] **Explanation:** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). ``` **Example 2:** ``` **Input:** nums = [0,0,1,1,1,2,2,3,3,4] **Output:** 5, nums = [0,1,2,3,4,_,_,_,_,_] **Explanation:** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). ``` **Constraints:** `1 <= nums.length <= 3 * 104` `-100 <= nums[i] <= 100` `nums` is sorted in **non-decreasing** order.', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,1,2]', 'output': '2, nums = [1,2,_] Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).'}, {'label': 'Example 2', 'input': 'nums = [0,0,1,1,1,2,2,3,3,4]', 'output': '5, nums = [0,1,2,3,4,_,_,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).'}], 'elixir_template': 'Elixir code template not available for this problem.', 'erlang_template': 'Elixir code template not available for this problem.', 'scala_template': 'object Solution {\\n    def removeDuplicates(nums: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!915\n",
            "reverse-nodes-in-k-group 25\n",
            "{'id': 25, 'name': 'reverse-nodes-in-k-group', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/reverse-nodes-in-k-group/', 'task_description': \"Given the `head` of a linked list, reverse the nodes of the list `k` at a time, and return _the modified list_. `k` is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of `k` then left-out nodes, in the end, should remain as it is. You may not alter the values in the list's nodes, only nodes themselves may be changed. **Example 1:** ``` **Input:** head = [1,2,3,4,5], k = 2 **Output:** [2,1,4,3,5] ``` **Example 2:** ``` **Input:** head = [1,2,3,4,5], k = 3 **Output:** [3,2,1,4,5] ``` **Constraints:** The number of nodes in the list is `n`. `1 <= k <= n <= 5000` `0 <= Node.val <= 1000` **Follow-up:** Can you solve the problem in `O(1)` extra memory space?\", 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5], k = 2', 'output': '[2,1,4,3,5]'}, {'label': 'Example 2', 'input': 'head = [1,2,3,4,5], k = 3', 'output': '[3,2,1,4,5] Constraints: The number of nodes in the list is n . 1 <= k <= n <= 5000 0 <= Node.val <= 1000 Follow-up: Can you solve the problem in O(1) extra memory space?'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec reverse_k_group(head :: ListNode.t | nil, k :: integer) :: ListNode.t | nil\\n  def reverse_k_group(head, k) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec reverse_k_group(Head :: #list_node{} | null, K :: integer()) -> #list_node{} | null.\\nreverse_k_group(Head, K) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def reverseKGroup(head: ListNode, k: Int): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!916\n",
            "swap-nodes-in-pairs 24\n",
            "{'id': 24, 'name': 'swap-nodes-in-pairs', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/swap-nodes-in-pairs/', 'task_description': \"Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.) **Example 1:** **Input:** head = [1,2,3,4] **Output:** [2,1,4,3] **Explanation:** **Example 2:** **Input:** head = [] **Output:** [] **Example 3:** **Input:** head = [1] **Output:** [1] **Example 4:** **Input:** head = [1,2,3] **Output:** [2,1,3] **Constraints:** The number of nodes in the list is in the range `[0, 100]`. `0 <= Node.val <= 100`\", 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4]', 'output': '[2,1,4,3] Explanation:'}, {'label': 'Example 2', 'input': 'head = []', 'output': '[]'}, {'label': 'Example 3', 'input': 'head = [1]', 'output': '[1]'}, {'label': 'Example 4', 'input': 'head = [1,2,3]', 'output': '[2,1,3] Constraints: The number of nodes in the\\xa0list\\xa0is in the range [0, 100] . 0 <= Node.val <= 100'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec swap_pairs(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def swap_pairs(head) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec swap_pairs(Head :: #list_node{} | null) -> #list_node{} | null.\\nswap_pairs(Head) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def swapPairs(head: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!917\n",
            "merge-k-sorted-lists 23\n",
            "{'id': 23, 'name': 'merge-k-sorted-lists', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/merge-k-sorted-lists/', 'task_description': 'You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order. _Merge all the linked-lists into one sorted linked-list and return it._ **Example 1:** ``` **Input:** lists = [[1,4,5],[1,3,4],[2,6]] **Output:** [1,1,2,3,4,4,5,6] **Explanation:** The linked-lists are: [ 1->4->5, 1->3->4, 2->6 ] merging them into one sorted list: 1->1->2->3->4->4->5->6 ``` **Example 2:** ``` **Input:** lists = [] **Output:** [] ``` **Example 3:** ``` **Input:** lists = [[]] **Output:** [] ``` **Constraints:** `k == lists.length` `0 <= k <= 104` `0 <= lists[i].length <= 500` `-104 <= lists[i][j] <= 104` `lists[i]` is sorted in **ascending order**. The sum of `lists[i].length` will not exceed `104`.', 'test_case': [{'label': 'Example 1', 'input': 'lists = [[1,4,5],[1,3,4],[2,6]]', 'output': '[1,1,2,3,4,4,5,6] Explanation: The linked-lists are:\\n[\\n  1->4->5,\\n  1->3->4,\\n  2->6\\n]\\nmerging them into one sorted list:\\n1->1->2->3->4->4->5->6'}, {'label': 'Example 2', 'input': 'lists = []', 'output': '[]'}, {'label': 'Example 3', 'input': 'lists = [[]]', 'output': '[] Constraints: k == lists.length 0 <= k <= 10 4 0 <= lists[i].length <= 500 -10 4 <= lists[i][j] <= 10 4 lists[i] is sorted in ascending order . The sum of lists[i].length will not exceed 10 4 .'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\\n  def merge_k_lists(lists) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\\nmerge_k_lists(Lists) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!918\n",
            "generate-parentheses 22\n",
            "{'id': 22, 'name': 'generate-parentheses', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/generate-parentheses/', 'task_description': 'Given `n` pairs of parentheses, write a function to _generate all combinations of well-formed parentheses_. **Example 1:** ``` **Input:** n = 3 **Output:** [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] ``` **Example 2:** ``` **Input:** n = 1 **Output:** [\"()\"] ``` **Constraints:** `1 <= n <= 8`', 'test_case': [{'label': 'Example 1', 'input': 'n = 3', 'output': '[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]'}, {'label': 'Example 2', 'input': 'n = 1', 'output': '[\"()\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec generate_parenthesis(n :: integer) :: [String.t]\\n  def generate_parenthesis(n) do\\n    \\n  end\\nend', 'erlang_template': '-spec generate_parenthesis(N :: integer()) -> [unicode:unicode_binary()].\\ngenerate_parenthesis(N) ->\\n  .', 'scala_template': 'object Solution {\\n    def generateParenthesis(n: Int): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!919\n",
            "merge-two-sorted-lists 21\n",
            "{'id': 21, 'name': 'merge-two-sorted-lists', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/merge-two-sorted-lists/', 'task_description': 'You are given the heads of two sorted linked lists `list1` and `list2`. Merge the two lists into one **sorted** list. The list should be made by splicing together the nodes of the first two lists. Return _the head of the merged linked list_. **Example 1:** ``` **Input:** list1 = [1,2,4], list2 = [1,3,4] **Output:** [1,1,2,3,4,4] ``` **Example 2:** ``` **Input:** list1 = [], list2 = [] **Output:** [] ``` **Example 3:** ``` **Input:** list1 = [], list2 = [0] **Output:** [0] ``` **Constraints:** The number of nodes in both lists is in the range `[0, 50]`. `-100 <= Node.val <= 100` Both `list1` and `list2` are sorted in **non-decreasing** order.', 'test_case': [{'label': 'Example 1', 'input': 'list1 = [1,2,4], list2 = [1,3,4]', 'output': '[1,1,2,3,4,4]'}, {'label': 'Example 2', 'input': 'list1 = [], list2 = []', 'output': '[]'}, {'label': 'Example 3', 'input': 'list1 = [], list2 = [0]', 'output': '[0] Constraints: The number of nodes in both lists is in the range [0, 50] . -100 <= Node.val <= 100 Both list1 and list2 are sorted in non-decreasing order.'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec merge_two_lists(list1 :: ListNode.t | nil, list2 :: ListNode.t | nil) :: ListNode.t | nil\\n  def merge_two_lists(list1, list2) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec merge_two_lists(List1 :: #list_node{} | null, List2 :: #list_node{} | null) -> #list_node{} | null.\\nmerge_two_lists(List1, List2) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def mergeTwoLists(list1: ListNode, list2: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!920\n",
            "valid-parentheses 20\n",
            "{'id': 20, 'name': 'valid-parentheses', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/valid-parentheses/', 'task_description': 'Given a string `s` containing just the characters `\\'(\\'`, `\\')\\'`, `\\'{\\'`, `\\'}\\'`, `\\'[\\'` and `\\']\\'`, determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type. **Example 1:** **Input:** s = \"()\" **Output:** true **Example 2:** **Input:** s = \"()[]{}\" **Output:** true **Example 3:** **Input:** s = \"(]\" **Output:** false **Example 4:** **Input:** s = \"([])\" **Output:** true **Constraints:** `1 <= s.length <= 104` `s` consists of parentheses only `\\'()[]{}\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"()\"', 'output': 'true'}, {'label': 'Example 2', 'input': 's = \"()[]{}\"', 'output': 'true'}, {'label': 'Example 3', 'input': 's = \"(]\"', 'output': 'false'}, {'label': 'Example 4', 'input': 's = \"([])\"', 'output': 'true'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_valid(s :: String.t) :: boolean\\n  def is_valid(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\\nis_valid(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def isValid(s: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!921\n",
            "remove-nth-node-from-end-of-list 19\n",
            "{'id': 19, 'name': 'remove-nth-node-from-end-of-list', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/remove-nth-node-from-end-of-list/', 'task_description': 'Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head. **Example 1:** ``` **Input:** head = [1,2,3,4,5], n = 2 **Output:** [1,2,3,5] ``` **Example 2:** ``` **Input:** head = [1], n = 1 **Output:** [] ``` **Example 3:** ``` **Input:** head = [1,2], n = 1 **Output:** [1] ``` **Constraints:** The number of nodes in the list is `sz`. `1 <= sz <= 30` `0 <= Node.val <= 100` `1 <= n <= sz` **Follow up:** Could you do this in one pass?', 'test_case': [{'label': 'Example 1', 'input': 'head = [1,2,3,4,5], n = 2', 'output': '[1,2,3,5]'}, {'label': 'Example 2', 'input': 'head = [1], n = 1', 'output': '[]'}, {'label': 'Example 3', 'input': 'head = [1,2], n = 1', 'output': '[1] Constraints: The number of nodes in the list is sz . 1 <= sz <= 30 0 <= Node.val <= 100 1 <= n <= sz Follow up: Could you do this in one pass?'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec remove_nth_from_end(head :: ListNode.t | nil, n :: integer) :: ListNode.t | nil\\n  def remove_nth_from_end(head, n) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec remove_nth_from_end(Head :: #list_node{} | null, N :: integer()) -> #list_node{} | null.\\nremove_nth_from_end(Head, N) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def removeNthFromEnd(head: ListNode, n: Int): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!922\n",
            "4sum 18\n",
            "{'id': 18, 'name': '4sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/4sum/', 'task_description': 'Given an array `nums` of `n` integers, return _an array of all the **unique** quadruplets_ `[nums[a], nums[b], nums[c], nums[d]]` such that: `0 <= a, b, c, d < n` `a`, `b`, `c`, and `d` are **distinct**. `nums[a] + nums[b] + nums[c] + nums[d] == target` You may return the answer in **any order**. **Example 1:** ``` **Input:** nums = [1,0,-1,0,-2,2], target = 0 **Output:** [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] ``` **Example 2:** ``` **Input:** nums = [2,2,2,2,2], target = 8 **Output:** [[2,2,2,2]] ``` **Constraints:** `1 <= nums.length <= 200` `-109 <= nums[i] <= 109` `-109 <= target <= 109`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [1,0,-1,0,-2,2], target = 0', 'output': '[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]'}, {'label': 'Example 2', 'input': 'nums = [2,2,2,2,2], target = 8', 'output': '[[2,2,2,2]]'}], 'elixir_template': 'defmodule Solution do\\n  @spec four_sum(nums :: [integer], target :: integer) :: [[integer]]\\n  def four_sum(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec four_sum(Nums :: [integer()], Target :: integer()) -> [[integer()]].\\nfour_sum(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def fourSum(nums: Array[Int], target: Int): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!923\n",
            "letter-combinations-of-a-phone-number 17\n",
            "{'id': 17, 'name': 'letter-combinations-of-a-phone-number', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/letter-combinations-of-a-phone-number/', 'task_description': 'Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in **any order**. A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. **Example 1:** ``` **Input:** digits = \"23\" **Output:** [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"] ``` **Example 2:** ``` **Input:** digits = \"\" **Output:** [] ``` **Example 3:** ``` **Input:** digits = \"2\" **Output:** [\"a\",\"b\",\"c\"] ``` **Constraints:** `0 <= digits.length <= 4` `digits[i]` is a digit in the range `[\\'2\\', \\'9\\']`.', 'test_case': [{'label': 'Example 1', 'input': 'digits = \"23\"', 'output': '[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]'}, {'label': 'Example 2', 'input': 'digits = \"\"', 'output': '[]'}, {'label': 'Example 3', 'input': 'digits = \"2\"', 'output': '[\"a\",\"b\",\"c\"]'}], 'elixir_template': 'defmodule Solution do\\n  @spec letter_combinations(digits :: String.t) :: [String.t]\\n  def letter_combinations(digits) do\\n    \\n  end\\nend', 'erlang_template': '-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nletter_combinations(Digits) ->\\n  .', 'scala_template': 'object Solution {\\n    def letterCombinations(digits: String): List[String] = {\\n        \\n    }\\n}'}\n",
            "Done!924\n",
            "3sum-closest 16\n",
            "{'id': 16, 'name': '3sum-closest', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/3sum-closest/', 'task_description': 'Given an integer array `nums` of length `n` and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return _the sum of the three integers_. You may assume that each input would have exactly one solution. **Example 1:** ``` **Input:** nums = [-1,2,1,-4], target = 1 **Output:** 2 **Explanation:** The sum that is closest to the target is 2. (-1 + 2 + 1 = 2). ``` **Example 2:** ``` **Input:** nums = [0,0,0], target = 1 **Output:** 0 **Explanation:** The sum that is closest to the target is 0. (0 + 0 + 0 = 0). ``` **Constraints:** `3 <= nums.length <= 500` `-1000 <= nums[i] <= 1000` `-104 <= target <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [-1,2,1,-4], target = 1', 'output': '2 Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).'}, {'label': 'Example 2', 'input': 'nums = [0,0,0], target = 1', 'output': '0 Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).'}], 'elixir_template': 'defmodule Solution do\\n  @spec three_sum_closest(nums :: [integer], target :: integer) :: integer\\n  def three_sum_closest(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec three_sum_closest(Nums :: [integer()], Target :: integer()) -> integer().\\nthree_sum_closest(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def threeSumClosest(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!925\n",
            "3sum 15\n",
            "{'id': 15, 'name': '3sum', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/3sum/', 'task_description': 'Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets. **Example 1:** ``` **Input:** nums = [-1,0,1,2,-1,-4] **Output:** [[-1,-1,2],[-1,0,1]] **Explanation:** nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter. ``` **Example 2:** ``` **Input:** nums = [0,1,1] **Output:** [] **Explanation:** The only possible triplet does not sum up to 0. ``` **Example 3:** ``` **Input:** nums = [0,0,0] **Output:** [[0,0,0]] **Explanation:** The only possible triplet sums up to 0. ``` **Constraints:** `3 <= nums.length <= 3000` `-105 <= nums[i] <= 105`', 'test_case': [{'label': 'Example 1', 'input': 'nums = [-1,0,1,2,-1,-4]', 'output': '[[-1,-1,2],[-1,0,1]] Explanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\\nNotice that the order of the output and the order of the triplets does not matter.'}, {'label': 'Example 2', 'input': 'nums = [0,1,1]', 'output': '[] Explanation: The only possible triplet does not sum up to 0.'}, {'label': 'Example 3', 'input': 'nums = [0,0,0]', 'output': '[[0,0,0]] Explanation: The only possible triplet sums up to 0.'}], 'elixir_template': 'defmodule Solution do\\n  @spec three_sum(nums :: [integer]) :: [[integer]]\\n  def three_sum(nums) do\\n    \\n  end\\nend', 'erlang_template': '-spec three_sum(Nums :: [integer()]) -> [[integer()]].\\nthree_sum(Nums) ->\\n  .', 'scala_template': 'object Solution {\\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}'}\n",
            "Done!926\n",
            "longest-common-prefix 14\n",
            "{'id': 14, 'name': 'longest-common-prefix', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/longest-common-prefix/', 'task_description': 'Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string `\"\"`. **Example 1:** ``` **Input:** strs = [\"flower\",\"flow\",\"flight\"] **Output:** \"fl\" ``` **Example 2:** ``` **Input:** strs = [\"dog\",\"racecar\",\"car\"] **Output:** \"\" **Explanation:** There is no common prefix among the input strings. ``` **Constraints:** `1 <= strs.length <= 200` `0 <= strs[i].length <= 200` `strs[i]` consists of only lowercase English letters.', 'test_case': [{'label': 'Example 1', 'input': 'strs = [\"flower\",\"flow\",\"flight\"]', 'output': '\"fl\"'}, {'label': 'Example 2', 'input': 'strs = [\"dog\",\"racecar\",\"car\"]', 'output': '\"\" Explanation: There is no common prefix among the input strings.'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_common_prefix(strs :: [String.t]) :: String.t\\n  def longest_common_prefix(strs) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_common_prefix(Strs :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nlongest_common_prefix(Strs) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestCommonPrefix(strs: Array[String]): String = {\\n        \\n    }\\n}'}\n",
            "Done!927\n",
            "roman-to-integer 13\n",
            "{'id': 13, 'name': 'roman-to-integer', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/roman-to-integer/', 'task_description': 'Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`. ``` **Symbol** **Value** I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` For example, `2` is written as `II` in Roman numeral, just two ones added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Given a roman numeral, convert it to an integer. **Example 1:** ``` **Input:** s = \"III\" **Output:** 3 **Explanation:** III = 3. ``` **Example 2:** ``` **Input:** s = \"LVIII\" **Output:** 58 **Explanation:** L = 50, V= 5, III = 3. ``` **Example 3:** ``` **Input:** s = \"MCMXCIV\" **Output:** 1994 **Explanation:** M = 1000, CM = 900, XC = 90 and IV = 4. ``` **Constraints:** `1 <= s.length <= 15` `s` contains only the characters `(\\'I\\', \\'V\\', \\'X\\', \\'L\\', \\'C\\', \\'D\\', \\'M\\')`. It is **guaranteed** that `s` is a valid roman numeral in the range `[1, 3999]`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"III\"', 'output': '3 Explanation: III = 3.'}, {'label': 'Example 2', 'input': 's = \"LVIII\"', 'output': '58 Explanation: L = 50, V= 5, III = 3.'}, {'label': 'Example 3', 'input': 's = \"MCMXCIV\"', 'output': '1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.'}], 'elixir_template': 'defmodule Solution do\\n  @spec roman_to_int(s :: String.t) :: integer\\n  def roman_to_int(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\\nroman_to_int(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def romanToInt(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!928\n",
            "integer-to-roman 12\n",
            "{'id': 12, 'name': 'integer-to-roman', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/integer-to-roman/', 'task_description': 'Seven different symbols represent Roman numerals with the following values: Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are formed by appending the conversions of decimal place values from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules: If the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral. If the value starts with 4 or 9 use the **subtractive form** representing one symbol subtracted from the following symbol, for example, 4 is 1 (`I`) less than 5 (`V`): `IV` and 9 is 1 (`I`) less than 10 (`X`): `IX`. Only the following subtractive forms are used: 4 (`IV`), 9 (`IX`), 40 (`XL`), 90 (`XC`), 400 (`CD`) and 900 (`CM`). Only powers of 10 (`I`, `X`, `C`, `M`) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5 (`V`), 50 (`L`), or 500 (`D`) multiple times. If you need to append a symbol 4 times use the **subtractive form**. Given an integer, convert it to a Roman numeral. **Example 1:** **Input:** num = 3749 **Output:** \"MMMDCCXLIX\" **Explanation:** ``` 3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M) 700 = DCC as 500 (D) + 100 (C) + 100 (C) 40 = XL as 10 (X) less of 50 (L) 9 = IX as 1 (I) less of 10 (X) Note: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places ``` **Example 2:** **Input:** num = 58 **Output:** \"LVIII\" **Explanation:** ``` 50 = L 8 = VIII ``` **Example 3:** **Input:** num = 1994 **Output:** \"MCMXCIV\" **Explanation:** ``` 1000 = M 900 = CM 90 = XC 4 = IV ``` **Constraints:** `1 <= num <= 3999`', 'test_case': [{'label': 'Example 1', 'input': 'num = 3749', 'output': '\"MMMDCCXLIX\" Explanation: 3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\\n 700 = DCC as 500 (D) + 100 (C) + 100 (C)\\n  40 = XL as 10 (X) less of 50 (L)\\n   9 = IX as 1 (I) less of 10 (X)\\nNote: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places'}, {'label': 'Example 2', 'input': 'num = 58', 'output': '\"LVIII\" Explanation: 50 = L\\n 8 = VIII'}, {'label': 'Example 3', 'input': 'num = 1994', 'output': '\"MCMXCIV\" Explanation: 1000 = M\\n 900 = CM\\n  90 = XC\\n   4 = IV'}], 'elixir_template': 'defmodule Solution do\\n  @spec int_to_roman(num :: integer) :: String.t\\n  def int_to_roman(num) do\\n    \\n  end\\nend', 'erlang_template': '-spec int_to_roman(Num :: integer()) -> unicode:unicode_binary().\\nint_to_roman(Num) ->\\n  .', 'scala_template': 'object Solution {\\n    def intToRoman(num: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!929\n",
            "container-with-most-water 11\n",
            "{'id': 11, 'name': 'container-with-most-water', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/container-with-most-water/', 'task_description': 'You are given an integer array `height` of length `n`. There are `n` vertical lines drawn such that the two endpoints of the `ith` line are `(i, 0)` and `(i, height[i])`. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return _the maximum amount of water a container can store_. **Notice** that you may not slant the container. **Example 1:** ``` **Input:** height = [1,8,6,2,5,4,8,3,7] **Output:** 49 **Explanation:** The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. ``` **Example 2:** ``` **Input:** height = [1,1] **Output:** 1 ``` **Constraints:** `n == height.length` `2 <= n <= 105` `0 <= height[i] <= 104`', 'test_case': [{'label': 'Example 1', 'input': 'height = [1,8,6,2,5,4,8,3,7]', 'output': '49 Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.'}, {'label': 'Example 2', 'input': 'height = [1,1]', 'output': '1 Constraints: n == height.length 2 <= n <= 10 5 0 <= height[i] <= 10 4'}], 'elixir_template': 'defmodule Solution do\\n  @spec max_area(height :: [integer]) :: integer\\n  def max_area(height) do\\n    \\n  end\\nend', 'erlang_template': '-spec max_area(Height :: [integer()]) -> integer().\\nmax_area(Height) ->\\n  .', 'scala_template': 'object Solution {\\n    def maxArea(height: Array[Int]): Int = {\\n        \\n    }\\n}'}\n",
            "Done!930\n",
            "regular-expression-matching 10\n",
            "{'id': 10, 'name': 'regular-expression-matching', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/regular-expression-matching/', 'task_description': 'Given an input string `s` and a pattern `p`, implement regular expression matching with support for `\\'.\\'` and `\\'*\\'` where: `\\'.\\'` Matches any single character.\\u200b\\u200b\\u200b\\u200b `\\'*\\'` Matches zero or more of the preceding element. The matching should cover the **entire** input string (not partial). **Example 1:** ``` **Input:** s = \"aa\", p = \"a\" **Output:** false **Explanation:** \"a\" does not match the entire string \"aa\". ``` **Example 2:** ``` **Input:** s = \"aa\", p = \"a*\" **Output:** true **Explanation:** \\'*\\' means zero or more of the preceding element, \\'a\\'. Therefore, by repeating \\'a\\' once, it becomes \"aa\". ``` **Example 3:** ``` **Input:** s = \"ab\", p = \".*\" **Output:** true **Explanation:** \".*\" means \"zero or more (*) of any character (.)\". ``` **Constraints:** `1 <= s.length <= 20` `1 <= p.length <= 20` `s` contains only lowercase English letters. `p` contains only lowercase English letters, `\\'.\\'`, and `\\'*\\'`. It is guaranteed for each appearance of the character `\\'*\\'`, there will be a previous valid character to match.', 'test_case': [{'label': 'Example 1', 'input': 's = \"aa\", p = \"a\"', 'output': 'false Explanation: \"a\" does not match the entire string \"aa\".'}, {'label': 'Example 2', 'input': 's = \"aa\", p = \"a*\"', 'output': 'true Explanation: \\'*\\' means zero or more of the preceding element, \\'a\\'. Therefore, by repeating \\'a\\' once, it becomes \"aa\".'}, {'label': 'Example 3', 'input': 's = \"ab\", p = \".*\"', 'output': 'true Explanation: \".*\" means \"zero or more (*) of any character (.)\".'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\\n  def is_match(s, p) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\\nis_match(S, P) ->\\n  .', 'scala_template': 'object Solution {\\n    def isMatch(s: String, p: String): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!931\n",
            "palindrome-number 9\n",
            "{'id': 9, 'name': 'palindrome-number', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/palindrome-number/', 'task_description': 'Given an integer `x`, return `true`_ if _`x`_ is a __**palindrome**__, and _`false`_ otherwise_. **Example 1:** ``` **Input:** x = 121 **Output:** true **Explanation:** 121 reads as 121 from left to right and from right to left. ``` **Example 2:** ``` **Input:** x = -121 **Output:** false **Explanation:** From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. ``` **Example 3:** ``` **Input:** x = 10 **Output:** false **Explanation:** Reads 01 from right to left. Therefore it is not a palindrome. ``` **Constraints:** `-231 <= x <= 231 - 1` **Follow up:** Could you solve it without converting the integer to a string?', 'test_case': [{'label': 'Example 1', 'input': 'x = 121', 'output': 'true Explanation: 121 reads as 121 from left to right and from right to left.'}, {'label': 'Example 2', 'input': 'x = -121', 'output': 'false Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.'}, {'label': 'Example 3', 'input': 'x = 10', 'output': 'false Explanation: Reads 01 from right to left. Therefore it is not a palindrome. Constraints: -2 31 <= x <= 2 31 - 1 Follow up: Could you solve it without converting the integer to a string?'}], 'elixir_template': 'defmodule Solution do\\n  @spec is_palindrome(x :: integer) :: boolean\\n  def is_palindrome(x) do\\n    \\n  end\\nend', 'erlang_template': '-spec is_palindrome(X :: integer()) -> boolean().\\nis_palindrome(X) ->\\n  .', 'scala_template': 'object Solution {\\n    def isPalindrome(x: Int): Boolean = {\\n        \\n    }\\n}'}\n",
            "Done!932\n",
            "string-to-integer-atoi 8\n",
            "{'id': 8, 'name': 'string-to-integer-atoi', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/string-to-integer-atoi/', 'task_description': 'Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer. The algorithm for `myAtoi(string s)` is as follows: **Whitespace**: Ignore any leading whitespace (`\" \"`). **Signedness**: Determine the sign by checking if the next character is `\\'-\\'` or `\\'+\\'`, assuming positivity if neither present. **Conversion**: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0. **Rounding**: If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then round the integer to remain in the range. Specifically, integers less than `-231` should be rounded to `-231`, and integers greater than `231 - 1` should be rounded to `231 - 1`. Return the integer as the final result. **Example 1:** **Input:** s = \"42\" **Output:** 42 **Explanation:** ``` The underlined characters are what is read in and the caret is the current reader position. Step 1: \"42\" (no characters read because there is no leading whitespace) ^ Step 2: \"42\" (no characters read because there is neither a \\'-\\' nor \\'+\\') ^ Step 3: \"42\" (\"42\" is read in) ^ ``` **Example 2:** **Input:** s = \" -042\" **Output:** -42 **Explanation:** ``` Step 1: \" -042\" (leading whitespace is read and ignored) ^ Step 2: \" -042\" (\\'-\\' is read, so the result should be negative) ^ Step 3: \" -042\" (\"042\" is read in, leading zeros ignored in the result) ^ ``` **Example 3:** **Input:** s = \"1337c0d3\" **Output:** 1337 **Explanation:** ``` Step 1: \"1337c0d3\" (no characters read because there is no leading whitespace) ^ Step 2: \"1337c0d3\" (no characters read because there is neither a \\'-\\' nor \\'+\\') ^ Step 3: \"1337c0d3\" (\"1337\" is read in; reading stops because the next character is a non-digit) ^ ``` **Example 4:** **Input:** s = \"0-1\" **Output:** 0 **Explanation:** ``` Step 1: \"0-1\" (no characters read because there is no leading whitespace) ^ Step 2: \"0-1\" (no characters read because there is neither a \\'-\\' nor \\'+\\') ^ Step 3: \"0-1\" (\"0\" is read in; reading stops because the next character is a non-digit) ^ ``` **Example 5:** **Input:** s = \"words and 987\" **Output:** 0 **Explanation:** Reading stops at the first non-digit character \\'w\\'. **Constraints:** `0 <= s.length <= 200` `s` consists of English letters (lower-case and upper-case), digits (`0-9`), `\\' \\'`, `\\'+\\'`, `\\'-\\'`, and `\\'.\\'`.', 'test_case': [{'label': 'Example 1', 'input': 's = \"42\"', 'output': '42 Explanation: The underlined characters are what is read in and the caret is the current reader position.\\nStep 1: \"42\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"42\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \" 42 \" (\"42\" is read in)\\n           ^'}, {'label': 'Example 2', 'input': 's = \" -042\"', 'output': '-42 Explanation: Step 1: \" -042\" (leading whitespace is read and ignored)\\n            ^\\nStep 2: \" - 042\" (\\'-\\' is read, so the result should be negative)\\n             ^\\nStep 3: \"   - 042 \" (\"042\" is read in, leading zeros ignored in the result)\\n               ^'}, {'label': 'Example 3', 'input': 's = \"1337c0d3\"', 'output': '1337 Explanation: Step 1: \"1337c0d3\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"1337c0d3\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \" 1337 c0d3\" (\"1337\" is read in; reading stops because the next character is a non-digit)\\n             ^'}, {'label': 'Example 4', 'input': 's = \"0-1\"', 'output': '0 Explanation: Step 1: \"0-1\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"0-1\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \" 0 -1\" (\"0\" is read in; reading stops because the next character is a non-digit)\\n          ^'}, {'label': 'Example 5', 'input': 's = \"words and 987\"', 'output': \"0 Explanation: Reading stops at the first non-digit character 'w'.\"}], 'elixir_template': 'defmodule Solution do\\n  @spec my_atoi(s :: String.t) :: integer\\n  def my_atoi(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec my_atoi(S :: unicode:unicode_binary()) -> integer().\\nmy_atoi(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def myAtoi(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!933\n",
            "reverse-integer 7\n",
            "{'id': 7, 'name': 'reverse-integer', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/reverse-integer/', 'task_description': 'Given a signed 32-bit integer `x`, return `x`_ with its digits reversed_. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`. **Assume the environment does not allow you to store 64-bit integers (signed or unsigned).** **Example 1:** ``` **Input:** x = 123 **Output:** 321 ``` **Example 2:** ``` **Input:** x = -123 **Output:** -321 ``` **Example 3:** ``` **Input:** x = 120 **Output:** 21 ``` **Constraints:** `-231 <= x <= 231 - 1`', 'test_case': [{'label': 'Example 1', 'input': 'x = 123', 'output': '321'}, {'label': 'Example 2', 'input': 'x = -123', 'output': '-321'}, {'label': 'Example 3', 'input': 'x = 120', 'output': '21 Constraints: -2 31 <= x <= 2 31 - 1'}], 'elixir_template': 'defmodule Solution do\\n  @spec reverse(x :: integer) :: integer\\n  def reverse(x) do\\n\\n  end\\nend', 'erlang_template': '-spec reverse(X :: integer()) -> integer().\\nreverse(X) ->\\n  .', 'scala_template': 'object Solution {\\n    def reverse(x: Int): Int = {\\n        \\n    }\\n}'}\n",
            "Done!934\n",
            "zigzag-conversion 6\n",
            "{'id': 6, 'name': 'zigzag-conversion', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/zigzag-conversion/', 'task_description': 'The string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) ``` P A H N A P L S I I G Y I R ``` And then read line by line: `\"PAHNAPLSIIGYIR\"` Write the code that will take a string and make this conversion given a number of rows: ``` string convert(string s, int numRows); ``` **Example 1:** ``` **Input:** s = \"PAYPALISHIRING\", numRows = 3 **Output:** \"PAHNAPLSIIGYIR\" ``` **Example 2:** ``` **Input:** s = \"PAYPALISHIRING\", numRows = 4 **Output:** \"PINALSIGYAHRPI\" **Explanation:** P I N A L S I G Y A H R P I ``` **Example 3:** ``` **Input:** s = \"A\", numRows = 1 **Output:** \"A\" ``` **Constraints:** `1 <= s.length <= 1000` `s` consists of English letters (lower-case and upper-case), `\\',\\'` and `\\'.\\'`. `1 <= numRows <= 1000`', 'test_case': [{'label': 'Example 1', 'input': 's = \"PAYPALISHIRING\", numRows = 3', 'output': '\"PAHNAPLSIIGYIR\"'}, {'label': 'Example 2', 'input': 's = \"PAYPALISHIRING\", numRows = 4', 'output': '\"PINALSIGYAHRPI\" Explanation: P     I    N\\nA   L S  I G\\nY A   H R\\nP     I'}, {'label': 'Example 3', 'input': 's = \"A\", numRows = 1', 'output': '\"A\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec convert(s :: String.t, num_rows :: integer) :: String.t\\n  def convert(s, num_rows) do\\n    \\n  end\\nend', 'erlang_template': '-spec convert(S :: unicode:unicode_binary(), NumRows :: integer()) -> unicode:unicode_binary().\\nconvert(S, NumRows) ->\\n  .', 'scala_template': 'object Solution {\\n    def convert(s: String, numRows: Int): String = {\\n        \\n    }\\n}'}\n",
            "Done!935\n",
            "longest-palindromic-substring 5\n",
            "{'id': 5, 'name': 'longest-palindromic-substring', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-palindromic-substring/', 'task_description': 'Given a string `s`, return _the longest_ _palindromic_ _substring_ in `s`. **Example 1:** ``` **Input:** s = \"babad\" **Output:** \"bab\" **Explanation:** \"aba\" is also a valid answer. ``` **Example 2:** ``` **Input:** s = \"cbbd\" **Output:** \"bb\" ``` **Constraints:** `1 <= s.length <= 1000` `s` consist of only digits and English letters.', 'test_case': [{'label': 'Example 1', 'input': 's = \"babad\"', 'output': '\"bab\" Explanation: \"aba\" is also a valid answer.'}, {'label': 'Example 2', 'input': 's = \"cbbd\"', 'output': '\"bb\"'}], 'elixir_template': 'defmodule Solution do\\n  @spec longest_palindrome(s :: String.t) :: String.t\\n  def longest_palindrome(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nlongest_palindrome(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def longestPalindrome(s: String): String = {\\n        \\n    }\\n}'}\n",
            "Done!936\n",
            "median-of-two-sorted-arrays 4\n",
            "{'id': 4, 'name': 'median-of-two-sorted-arrays', 'difficulty': 'Hard', 'link': 'https://leetcode.com/problems/median-of-two-sorted-arrays/', 'task_description': 'Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return **the median** of the two sorted arrays. The overall run time complexity should be `O(log (m+n))`. **Example 1:** ``` **Input:** nums1 = [1,3], nums2 = [2] **Output:** 2.00000 **Explanation:** merged array = [1,2,3] and median is 2. ``` **Example 2:** ``` **Input:** nums1 = [1,2], nums2 = [3,4] **Output:** 2.50000 **Explanation:** merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5. ``` **Constraints:** `nums1.length == m` `nums2.length == n` `0 <= m <= 1000` `0 <= n <= 1000` `1 <= m + n <= 2000` `-106 <= nums1[i], nums2[i] <= 106`', 'test_case': [{'label': 'Example 1', 'input': 'nums1 = [1,3], nums2 = [2]', 'output': '2.00000 Explanation: merged array = [1,2,3] and median is 2.'}, {'label': 'Example 2', 'input': 'nums1 = [1,2], nums2 = [3,4]', 'output': '2.50000 Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5. Constraints: nums1.length == m nums2.length == n 0 <= m <= 1000 0 <= n <= 1000 1 <= m + n <= 2000 -10 6 <= nums1[i], nums2[i] <= 10 6'}], 'elixir_template': 'defmodule Solution do\\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\\n  def find_median_sorted_arrays(nums1, nums2) do\\n    \\n  end\\nend', 'erlang_template': '-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\\nfind_median_sorted_arrays(Nums1, Nums2) ->\\n  .', 'scala_template': 'object Solution {\\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\\n        \\n    }\\n}'}\n",
            "Done!937\n",
            "longest-substring-without-repeating-characters 3\n",
            "{'id': 3, 'name': 'longest-substring-without-repeating-characters', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/longest-substring-without-repeating-characters/', 'task_description': 'Given a string `s`, find the length of the **longest** **substring** without repeating characters. **Example 1:** ``` **Input:** s = \"abcabcbb\" **Output:** 3 **Explanation:** The answer is \"abc\", with the length of 3. ``` **Example 2:** ``` **Input:** s = \"bbbbb\" **Output:** 1 **Explanation:** The answer is \"b\", with the length of 1. ``` **Example 3:** ``` **Input:** s = \"pwwkew\" **Output:** 3 **Explanation:** The answer is \"wke\", with the length of 3. Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring. ``` **Constraints:** `0 <= s.length <= 5 * 104` `s` consists of English letters, digits, symbols and spaces.', 'test_case': [{'label': 'Example 1', 'input': 's = \"abcabcbb\"', 'output': '3 Explanation: The answer is \"abc\", with the length of 3.'}, {'label': 'Example 2', 'input': 's = \"bbbbb\"', 'output': '1 Explanation: The answer is \"b\", with the length of 1.'}, {'label': 'Example 3', 'input': 's = \"pwwkew\"', 'output': '3 Explanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.'}], 'elixir_template': 'defmodule Solution do\\n  @spec length_of_longest_substring(s :: String.t) :: integer\\n  def length_of_longest_substring(s) do\\n    \\n  end\\nend', 'erlang_template': '-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\\nlength_of_longest_substring(S) ->\\n  .', 'scala_template': 'object Solution {\\n    def lengthOfLongestSubstring(s: String): Int = {\\n        \\n    }\\n}'}\n",
            "Done!938\n",
            "add-two-numbers 2\n",
            "{'id': 2, 'name': 'add-two-numbers', 'difficulty': 'Medium', 'link': 'https://leetcode.com/problems/add-two-numbers/', 'task_description': 'You are given two **non-empty** linked lists representing two non-negative integers. The digits are stored in **reverse order**, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. **Example 1:** ``` **Input:** l1 = [2,4,3], l2 = [5,6,4] **Output:** [7,0,8] **Explanation:** 342 + 465 = 807. ``` **Example 2:** ``` **Input:** l1 = [0], l2 = [0] **Output:** [0] ``` **Example 3:** ``` **Input:** l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] **Output:** [8,9,9,9,0,0,0,1] ``` **Constraints:** The number of nodes in each linked list is in the range `[1, 100]`. `0 <= Node.val <= 9` It is guaranteed that the list represents a number that does not have leading zeros.', 'test_case': [{'label': 'Example 1', 'input': 'l1 = [2,4,3], l2 = [5,6,4]', 'output': '[7,0,8] Explanation: 342 + 465 = 807.'}, {'label': 'Example 2', 'input': 'l1 = [0], l2 = [0]', 'output': '[0]'}, {'label': 'Example 3', 'input': 'l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]', 'output': '[8,9,9,9,0,0,0,1] Constraints: The number of nodes in each linked list is in the range [1, 100] . 0 <= Node.val <= 9 It is guaranteed that the list represents a number that does not have leading zeros.'}], 'elixir_template': '# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\\n  def add_two_numbers(l1, l2) do\\n    \\n  end\\nend', 'erlang_template': \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\\nadd_two_numbers(L1, L2) ->\\n  .\", 'scala_template': '/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\\n        \\n    }\\n}'}\n",
            "Done!939\n",
            "two-sum 1\n",
            "{'id': 1, 'name': 'two-sum', 'difficulty': 'Easy', 'link': 'https://leetcode.com/problems/two-sum/', 'task_description': 'Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_. You may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice. You can return the answer in any order. **Example 1:** ``` **Input:** nums = [2,7,11,15], target = 9 **Output:** [0,1] **Explanation:** Because nums[0] + nums[1] == 9, we return [0, 1]. ``` **Example 2:** ``` **Input:** nums = [3,2,4], target = 6 **Output:** [1,2] ``` **Example 3:** ``` **Input:** nums = [3,3], target = 6 **Output:** [0,1] ``` **Constraints:** `2 <= nums.length <= 104` `-109 <= nums[i] <= 109` `-109 <= target <= 109` **Only one valid answer exists.** **Follow-up: **Can you come up with an algorithm that is less than `O(n2)` time complexity?', 'test_case': [{'label': 'Example 1', 'input': 'nums = [2,7,11,15], target = 9', 'output': '[0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].'}, {'label': 'Example 2', 'input': 'nums = [3,2,4], target = 6', 'output': '[1,2]'}, {'label': 'Example 3', 'input': 'nums = [3,3], target = 6', 'output': '[0,1]'}], 'elixir_template': 'defmodule Solution do\\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\\n  def two_sum(nums, target) do\\n    \\n  end\\nend', 'erlang_template': '-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\\ntwo_sum(Nums, Target) ->\\n  .', 'scala_template': 'object Solution {\\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\\n        \\n    }\\n}'}\n",
            "Done!940\n"
          ]
        }
      ],
      "source": [
        "difficulty_mapping = {\n",
        "    1: \"Easy\",\n",
        "    2: \"Medium\",\n",
        "    3: \"Hard\"\n",
        "}\n",
        "with open('/content/algorithms.json', 'w') as json_file:\n",
        "    i = 0\n",
        "    index = 1861\n",
        "    while index < len(alg_list):\n",
        "        alg_json = alg_list[index]\n",
        "        # Get the meta info of the algorithm\n",
        "        alg_stat = alg_json['stat']\n",
        "        alg_difficulty_num = alg_json['difficulty']['level']\n",
        "        alg_difficulty = difficulty_mapping.get(alg_difficulty_num, \"Unknown\")\n",
        "        alg_paid = alg_json['paid_only']\n",
        "        if alg_paid:\n",
        "          index+=1\n",
        "          continue\n",
        "        alg_name = alg_stat['question__title']\n",
        "        alg_name_slug = alg_stat['question__title_slug']\n",
        "        alg_id = alg_stat['question_id']\n",
        "        alg_acs = alg_stat['total_acs']\n",
        "        alg_submitted = alg_stat['total_submitted']\n",
        "        alg_link = f'https://leetcode.com/problems/{alg_name_slug}/'\n",
        "        print(alg_name_slug + \" \" + str(alg_id))\n",
        "\n",
        "        # Fetch the algorithm data\n",
        "        alg_data = get_problem_via_graphql(alg_name_slug)\n",
        "        plain_text_content = html_to_custom_text(alg_data[\"content\"])\n",
        "        testCase = extract_test_cases(alg_data[\"content\"])\n",
        "        constraints = extract_constraints(alg_data['content'])\n",
        "        elixirCode = extract_code(alg_data['codeSnippets'], \"Elixir\")\n",
        "        erlangCode = extract_code(alg_data['codeSnippets'], \"Erlang\")\n",
        "        scalaCode = extract_code(alg_data['codeSnippets'], \"Scala\")\n",
        "\n",
        "\n",
        "\n",
        "        # Prepare the dictionary to be saved\n",
        "        alg_dict = {\n",
        "            'id': alg_id,\n",
        "            'name': alg_name_slug,\n",
        "            'difficulty': alg_difficulty,\n",
        "            'link': alg_link,\n",
        "            'task_description': plain_text_content,\n",
        "            'test_case': testCase,\n",
        "            'elixir_template': elixirCode,\n",
        "            'erlang_template': erlangCode,\n",
        "            'scala_template': scalaCode\n",
        "        }\n",
        "        print(alg_dict)\n",
        "        # Write the dictionary as a JSON object to the file\n",
        "        json.dump(alg_dict, json_file, indent=4)\n",
        "        json_file.write(\",\\n\")  # Add a comma and newline after each entry\n",
        "\n",
        "        # Break the loop after 3 algorithms\n",
        "        i+=1\n",
        "        index+=1\n",
        "        print('Done!'+str(i))\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "az69ktfVwUqG"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPr4VklFodQOPWMMqnRL8o5",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}